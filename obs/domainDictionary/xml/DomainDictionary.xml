<?xml version="1.0" encoding="ISO-8859-1" ?>

<!-- The MappedTo elements are a leftover from the OBS Environment and are
     currently not used -->


<DomainDictionary>

<!-- =========================================================== -->

 <Entry>
   <Name>Abstract Unit</Name>
   <Definition>
    Encapsulation of the access to an external unit. External units are
    represented within an application by proxy components. An abstract
    unit is a proxy component for an external unit. All access to the
    external unit is performed through its abstract unit proxy.
   </Definition>

   <DesignPattern>
     <Name>Operating System Interface</Name>
     <FileName>OperatingSystemInterface</FileName>
   </DesignPattern>

   <MappedTo>
     <Type>Abstract Interface</Type>
     <Item>OsInterface</Item>
   </MappedTo>
 </Entry>
<!-- =========================================================== -->

 <Entry>
   <Name>Conditional Punctual Action</Name>
   <Definition>
    A <a href="#PunctualAction">punctual action</a> whose associated
    actions are only executed if some conditions are satisfied.
    Conditional punctual action specialize punctual actions by adding
    an <i>execution check</i> to them. The execution check is performed
    immediately before executing the actions associated to the conditional
    punctual actions and the execution of the latter is conditional
    upon the outcome of the execution check.
   </Definition>

   <DesignPattern>
     <Name>Punctual Action</Name>
     <FileName>PunctualAction</FileName>
   </DesignPattern>

   <MappedTo>
     <Type>Abstract Interface</Type>
     <Item>ConditionalPunctualAction</Item>
   </MappedTo>
 </Entry>

<!-- =========================================================== -->

   <Entry>
     <Name>Control Action</Name>
     <Definition>
     A <a href="#ConditionalPunctualAction">conditional punctual action</a> that enapsulates
     the propagation of a <a href="#ControlBlock">control block</a> and the conditions under
     which the control block is to be propagated .
     </Definition>

     <DesignPattern>
       <Name>Control Block</Name>
       <FileName>ControlBlock</FileName>
     </DesignPattern>

     <MappedTo>
       <Type>Abstract Interface</Type>
       <Item>ControlAction</Item>
     </MappedTo>
   </Entry>

<!-- =========================================================== -->

 <Entry>
   <Name>Control Block</Name>
   <Definition>
    Encapsulation of a generic data processing algorithm. A control block is connected
    to a set of inputs u<sub>k</sub> and to a set of outputs y<sub>k</sub> and is capable
    of propagating the inputs
    to the outputs by applying a transfer function to them. The transfer function is of the
    generic kind: y<sub>k+1</sub>=f(x<sub>k</sub>,u<sub>k</sub>) where x<sub>k</sub> is an
    state variable that is internally propagated according to an equation like:
    x<sub>k+1</sub>=g(x<sub>k</sub>,u<sub>k</sub>).
   </Definition>

   <DesignPattern>
     <Name>Control Block</Name>
     <FileName>ControlBlock</FileName>
   </DesignPattern>

   <MappedTo>
     <Type>Abstract Interface</Type>
     <Item>ControlBlock</Item>
   </MappedTo>
 </Entry>

 <!-- =========================================================== -->

    <Entry>
      <Name>Controller Manager</Name>
      <Definition>
      A <a href="#FunctionalityManager">functionality manager</a> that controls the execution of
      a number of <a href="#ControlBlock">control blocks</a>. Control managers are application-independent
     components that are intended to be periodically activated by an external agent. When they are activated,
     they processes the control blocks by deciding which ones should be propagated and sending them the
     <code>propagate</code> requests.
      </Definition>

      <DesignPattern>
        <Name>Control Block</Name>
        <FileName>ControlBlock</FileName>
      </DesignPattern>

      <MappedTo>
        <Type>Core Component</Type>
        <Item>ControllerManager</Item>
      </MappedTo>
    </Entry>

 <!-- =========================================================== -->

 <Entry>
   <Name>Critical Telecommand</Name>
   <Definition>
    Encapsulation of a critical telecommand that must be executed according to an "arm-fire" protocol. Execution of the actions
associated to this telecommand must be performed in two steps. First, an "arm" request is received and then a "fire" request is
received. The telecommand actions are executed only after both the arm and the fire requests have been received and only if the
two requests satisfy certain constraints (e.g. separation in time less than a certain threshold).
   </Definition>

   <DesignPattern>
     <Name>Telecommand Management</Name>
     <FileName>TelecommandManagement</FileName>
   </DesignPattern>

   <MappedTo>
     <Type>Abstract Interface</Type>
     <Item>Telecommand</Item>
   </MappedTo>
 </Entry>

<!-- =========================================================== -->

 <Entry>
   <Name>Data Item</Name>
   <Definition>
    Encapsulation of an access to some atomic variable. An atomic variable is a variable that cannot be further broken down
    into lower-level elements and that has one single value. The data item component allows this value to be read and to be set.
    The data item variable hides the physical nature of the variable (the address at which the variable is stored, the I/O port from
    which the variable value is read and to which it is written, etc). A component that holds a reference to a data item has a
    permanent link to the variable encapsulated in the data item. Some data items may give read-only access to a variables.
    Others may give both read and write access.
   </Definition>

   <DesignPattern>
     <Name>Connection</Name>
     <FileName>Connection</FileName>
   </DesignPattern>

   <MappedTo>
     <Type>Core Component</Type>
     <Item>DataItem</Item>
   </MappedTo>
 </Entry>

<!-- =========================================================== -->

 <Entry>
   <Name>Data Pool</Name>
   <Definition>
   A component that acts as a shared data area for data that must be exchanged among other
   components. The data pool physically contains the data to be exchanged. The producers of data
   deposit them into the data pool and the consumers of data retrieve them from the data pool.
   </Definition>

   <DesignPattern>
     <Name>Shared Data</Name>
     <FileName>SharedData</FileName>
   </DesignPattern>

   <MappedTo>
     <Type>Abstract Interface</Type>
     <Item>DataPool</Item>
   </MappedTo>
 </Entry>

<!-- =========================================================== -->

 <Entry>
   <Name>Event</Name>
   <Definition>
    Encapsulation of a report describing a synchronous or asynchronous occurence together with its associated data.
   </Definition>

   <DesignPattern>
     <Name>Event</Name>
     <FileName>Event</FileName>
   </DesignPattern>

   <MappedTo>
     <Type>Core Component</Type>
     <Item>Event</Item>
   </MappedTo>
 </Entry>

<!-- =========================================================== -->

 <Entry>
   <Name>Event Repository</Name>
   <Definition>
    A container for an ordered sequence of <a HREF="#Event">events</a>. An event repository is used either by components that wish to create event reports or by components that wish to inspect the event reports created by other components.
   </Definition>

   <DesignPattern>
     <Name>Event</Name>
     <FileName>Event</FileName>
   </DesignPattern>

   <MappedTo>
     <Type>Core Component</Type>
     <Item>EventRepository</Item>
   </MappedTo>
 </Entry>

<!-- =========================================================== -->

 <Entry>
   <Name>FDIR Check</Name>
   <Definition>
    An encapsulation of a Fault Detection Isolation and Recovery (FDIR) check
    consisting of an FDI check and its associated <a HREF="#RecoveryAction">recovery action</a>.
   </Definition>

   <DesignPattern>
     <Name>FDIR Check</Name>
     <FileName>FDIRCheck</FileName>
   </DesignPattern>

   <MappedTo>
     <Type>Core Component</Type>
     <Item>FdirCheck</Item>
   </MappedTo>
 </Entry>

<!-- =========================================================== -->

 <Entry>
   <Name>FSM</Name>
   <Definition>
    A generic and customizable finite state machine (FSM). An FSM is characterized
    by a set of <a HREF="#FsmState">FsmStates</a>. It is intended to be
    periodically activated by some external agent. When it is activated, the
    FSM executes the actions associated to the current state and performs
    any required state transitions.
   </Definition>

   <DesignPattern>
     <Name>Finite State Machine</Name>
     <FileName>FSM</FileName>
   </DesignPattern>

   <MappedTo>
     <Type>Core Component</Type>
     <Item>FSM</Item>
   </MappedTo>
 </Entry>

<!-- =========================================================== -->

 <Entry>
   <Name>FsmEvent</Name>
   <Definition>
    An encapsulation of an event that, when it is fired, commands a
    specific state transition in a specific <a HREF="#FSM">FSM</a>.
   </Definition>

   <DesignPattern>
     <Name>Finite State Machine</Name>
     <FileName>FSM</FileName>
   </DesignPattern>

   <MappedTo>
     <Type>Abstract Interface</Type>
     <Item>FsmEvent</Item>
   </MappedTo>
 </Entry>

<!-- =========================================================== -->

 <Entry>
   <Name>FsmState</Name>
   <Definition>
    An encapsulation of the behaviour associated to one state in
    an <a HREF="#FSM">FSM</a>. This behaviour consists of:
<ul>
<li>actions that are associated to the FSM state.</li>
<li>an <i>entry check</i> that verifies whether the state can be entered.</li>
<li>an <i>exit check</i> that verifies whether the state can be exited.</li>
<li>a <i>termination check</i> that verifies if all actions associated to the current state have been executed.</li>
<li>a <i>next state</i> that must be entered when the actions associated to the current state have been completed.</li>
</ul>
The actions that are associated to a state are of three types:
<ul>
<li>An <i>initialization action</i>: a punctual action performed immediately after the state is entered</li>
<li>A <i>continued action</i>: an action performed continuously while the state is active</li>
<li>An <i>exit action</i>: a punctual action that is performed immediately before the state is exited</li>
</ul>
Finally, to each state, a <i>next state</i> may be associated. If B is the next state associated to state A, then the FSM will perform an autonomous transition to state B after execution of all the actions associated to state A has been completed (i.e. after its termination check reports
"terminated").
   </Definition>

   <DesignPattern>
     <Name>Finite State Machine</Name>
     <FileName>FSM</FileName>
   </DesignPattern>

   <MappedTo>
     <Type>Abstract Interface</Type>
     <Item>FsmState</Item>
   </MappedTo>
 </Entry>

<!-- =========================================================== -->

 <Entry>
   <Name>Functionality Implementer</Name>
   <Definition>
    An encapsulation of a repetitive action to be controlled by a
    <a href="#FunctionalityManager">functionality manager</a>.
   </Definition>

   <DesignPattern>
     <Name>Manager</Name>
     <FileName>Manager</FileName>
   </DesignPattern>

   <MappedTo>
     <Type>Abstract Interface</Type>
     <Item>Manoeuvre</Item>
   </MappedTo>
   <MappedTo>
     <Type>Abstract Interface</Type>
     <Item>Telecommand</Item>
   </MappedTo>
   <MappedTo>
     <Type>Abstract Interface</Type>
     <Item>Telemeterable</Item>
   </MappedTo>
   <MappedTo>
     <Type>Abstract Interface</Type>
     <Item>TelemetryItem</Item>
   </MappedTo>
 </Entry>

<!-- =========================================================== -->

 <Entry>
   <Name>Functionality Manager</Name>
   <Definition>
    An application-indepedent component responsible for controlling the repetitive execution
    of actions that are encapsulated in components characterized by a standard
    <a href="#FunctionalityImplementer">functionality implementer</a> interface.
    The functionality manager decouples the management of the actions from their implementation
    by processing them exclusively through this standard interface.
   </Definition>

   <DesignPattern>
     <Name>Manager</Name>
     <FileName>Manager</FileName>
   </DesignPattern>

   <MappedTo>
     <Type>Core Component</Type>
     <Item>ManoeuvreManager</Item>
   </MappedTo>
   <MappedTo>
     <Type>Core Component</Type>
     <Item>TelecommandManager</Item>
   </MappedTo>
   <MappedTo>
     <Type>Core Component</Type>
     <Item>TelemetryManager</Item>
   </MappedTo>
 </Entry>

<!-- =========================================================== -->

 <Entry>
   <Name>Manoeuvre</Name>
   <Definition>
    An encapsulation of a sequence of actions that must be performed by the application at specified times to achieve a specified goal. A manoeuvre is characterized by:
<ul>
<li>the actions that are associated to the manoeuvre.</li>
<li>a <i>start  check</i> that verifies whether manoeuvre execution can start. Depending on the manoeuvre, readiness to start can be defined by a time tag or by the occurrence of certain operational conditions.</li>
<li>a <i>continuation check</i> that verifies whether an on-going manoeuvre can continue its execution.</li>
<li>a <i>termination check</i> that verifies whether the manoeuvre has terminated execution. Depending on the manoeuvre, termination can be defined by a time tag or by the achievement of pre-specified operational conditions.</li>
 </ul>
   </Definition>

   <DesignPattern>
     <Name>Manoeuvre Management</Name>
     <FileName>ManoeuvreManagement</FileName>
   </DesignPattern>

   <MappedTo>
     <Type>Abstract Interface</Type>
     <Item>Manoeuvre</Item>
   </MappedTo>
 </Entry>

<!-- =========================================================== -->

 <Entry>
   <Name>Manoeuvre Manager</Name>
   <Definition>
    An application-independent component responsible for controlling the execution of generic
    <a HREF="#Manoeuvre">manoeuvres</a>. The manoeuvre manager is intended to be
    periodically activated by an external agent. When it is activated, it processes
    all pending manoeuvres and decides which ones should start execution, which ones
    should continue execution, and which ones should be terminated.
Manoeuvre managers are a form of <a href="#FunctionalityManager">functionality managers</a>.
   </Definition>

   <DesignPattern>
     <Name>Manoeuvre Management</Name>
     <FileName>ManoeuvreManagement</FileName>
   </DesignPattern>

   <MappedTo>
     <Type>Core Component</Type>
     <Item>ManoeuvreManager</Item>
   </MappedTo>
 </Entry>

<!-- =========================================================== -->

 <Entry>
   <Name>Mode Manager</Name>
   <Definition>
A component that encapsulates the mode switching logic for a <i>mode-dependent component</i>.
A mode-dependent component is a component whose behaviour depends on <i>operational mode</i>.
More specifically, a mode-dependent component is a component that must implement one or more
<i>strategies</i> where, for each strategy, several <i>implementations</i> are possible, one
for each operational mode. If i<sub>s</sub> is the implementation for strategy s, then:
i<sub>s</sub> = f<sub>s</sub>(m) where m is the operational mode and f<sub>s</sub>(.) is a
function that associates an implementation to each operational mode. A mode manager is a
component that, for a specific component, implements the logic to determine the operational
mode as a function of current operational conditions and that implements the f<sub>s</sub>(.)
functions for all the strategies used by the mode-dependent component.
   </Definition>

   <DesignPattern>
     <Name>Mode Management</Name>
     <FileName>ModeManagement</FileName>
   </DesignPattern>

   <MappedTo>
     <Type>Abstract Interface</Type>
     <Item>ModeManager</Item>
   </MappedTo>
 </Entry>

<!-- =========================================================== -->

 <Entry>
   <Name>Monitoring Profile</Name>
   <Definition>
    Encapsulation of a time profile representing the desired behaviour over time of a
    variable that must be subjected to monitoring.
   </Definition>

   <DesignPattern>
     <Name>Variable Monitoring</Name>
     <FileName>VariableMonitoring</FileName>
   </DesignPattern>

   <MappedTo>
     <Type>Abstract Interface</Type>
     <Item>MonitoringProfile</Item>
   </MappedTo>
 </Entry>

<!-- =========================================================== -->

 <Entry>
   <Name>Operating System Interface</Name>
   <Definition>
    Application-independent encapsulation of the access to a group of related
    operating system services. .
   </Definition>

   <DesignPattern>
     <Name>Operating System Interface</Name>
     <FileName>OperatingSystemInterface</FileName>
   </DesignPattern>

   <MappedTo>
     <Type>Abstract Interface</Type>
     <Item>OsInterface</Item>
   </MappedTo>
 </Entry>

<!-- =========================================================== -->

 <Entry>
   <Name>Parameter Database</Name>
   <Definition>
    An encapsulation of a data structure that holds a set of parameters and offers read and write access to them through symbolic identifiers.
   </Definition>

   <DesignPattern>
     <Name>Parameter Database</Name>
     <FileName>ParameterDatabase</FileName>
   </DesignPattern>

   <MappedTo>
     <Type>Abstract Interface</Type>
     <Item>ParameterDatabase</Item>
   </MappedTo>
 </Entry>

<!-- =========================================================== -->

 <Entry>
   <Name>Punctual Action</Name>
   <Definition>
    An action that is executed in one-shot mode, namely an action
    that is activated once and executes to completion during its
    single activation. Punctual actions are opposed to
    <a HREF="#Manoeuvre">manoeuvres</a> that instead represent
    actions that are executed over several activations and over
    a period of time.
    </Definition>

   <DesignPattern>
     <Name>Punctual Action</Name>
     <FileName>PunctualAction</FileName>
   </DesignPattern>

   <MappedTo>
     <Type>Abstract Interface</Type>
     <Item>PunctualAction</Item>
   </MappedTo>
 </Entry>

<!-- =========================================================== -->

 <Entry>
   <Name>Reconfiguration Manager</Name>
   <Definition>
    A component that encapsulates the reconfiguration logic for a <i>reconfigurable
    functionality</i>. A reconfigurable functionality is a functionality for which
    several independent but functionally equivalent implementations exist of which only one
    is intended to be active at any given time. A <i>reconfiguration</i> is a switch
    between two alternative implementations of the same functionality.
   </Definition>

   <DesignPattern>
     <Name>Reconfiguration Management</Name>
     <FileName>ReconfigurationManagement</FileName>
   </DesignPattern>

   <MappedTo>
     <Type>Abstract Interface</Type>
     <Item>Reconfigurable</Item>
   </MappedTo>
 </Entry>

<!-- =========================================================== -->

 <Entry>
   <Name>Recovery Action</Name>
   <Definition>
    Encapsulation of an action or set of actions that must be executed in response
    to the detection of an anomaly. The recovery action is triggered by the component
    that detects the anomaly. To each anomaly conditions, one recovery action should
    be associated. Detection of an anomaly should result in the associated recover
    action being triggered. Recovery actions can be linked in chains so that the
    triggering of the recovery action at the head of the chain will cause all recovery
    actions in the chain to be triggered in sequence.
   </Definition>

   <DesignPattern>
     <Name>Recovery Action</Name>
     <FileName>RecoveryAction</FileName>
   </DesignPattern>

   <MappedTo>
     <Type>Abstract Interface</Type>
     <Item>RecoveryAction</Item>
   </MappedTo>
 </Entry>

<!-- =========================================================== -->

 <Entry>
   <Name>Telecommand</Name>
   <Definition>
    Encapsulation of an action to be performed on or by the application software in a punctual fashion. A telecommand is characterized by:
<ul>
<li>the action that is associated to the telecommand.</li>
<li>a <i>time tag</i> that defines the earliest time when the telecommand should be considered for execution.</li>
<li>a <i>validity check</i> that verifies whether the attributes associated to the telecommand have legal values. </li>
<li>an <i>execution check</i> that verifies that the operational conditions at the time the telecommand is due for execution are compatible with the safe execution of the telecommand. operational conditions hold.</li>
</ul>
   </Definition>

   <DesignPattern>
     <Name>Telecommand Management</Name>
     <FileName>TelecommandManagement</FileName>
   </DesignPattern>

   <MappedTo>
     <Type>Abstract Interface</Type>
     <Item>Telecommand</Item>
   </MappedTo>
 </Entry>

<!-- =========================================================== -->

 <Entry>
   <Name>Telecommand Loader</Name>
   <Definition>
    The encapsulation of the mechanism for receiving raw telecommands, decoding them and loading them into
    the <a HREF="#Telecommand Manager">telecommand manager</a>.
   </Definition>

   <DesignPattern>
     <Name>Telecommand Management</Name>
     <FileName>TelecommandManagement</FileName>
   </DesignPattern>

   <MappedTo>
     <Type>Abstract Interface</Type>
     <Item>TelecommandLoader</Item>
   </MappedTo>
 </Entry>

<!-- =========================================================== -->

 <Entry>
   <Name>Telecommand Manager</Name>
   <Definition>
    A component that processes telecommands. A telecommand manager maintains a list of pending telecommands. It decides when and whether individual telecommands should be executed and perform all actions relative to their execution that are independent of the specific actions that are associated to the telecommand.
 Telecommand managers are a form of <a href="#FunctionalityManager">functionality managers</a>.
  </Definition>

   <DesignPattern>
     <Name>Telecommand Management</Name>
     <FileName>TelecommandManagement</FileName>
   </DesignPattern>

   <MappedTo>
     <Type>Core Component</Type>
     <Item>TelecommandManager</Item>
   </MappedTo>
 </Entry>

<!-- =========================================================== -->

 <Entry>
   <Name>Telemeterable</Name>
   <Definition>
The attribute of components that are potentially capable of supplying a telemetry image containing a subset of their internal state. The same telemeterable component may be required to supply different telemetry images depending on operational conditions. Telemeterable components are therefore endowed with a format attribute whose value defines the type of telemetry image that they supply at any given time.
   </Definition>

   <DesignPattern>
     <Name>Telemeterable</Name>
     <FileName>Telemeterable</FileName>
   </DesignPattern>

   <MappedTo>
     <Type>Abstract Interface</Type>
     <Item>Telemeterable</Item>
   </MappedTo>
 </Entry>

<!-- =========================================================== -->

 <Entry>
   <Name>Telemetry Item</Name>
   <Definition>
Encapsulation of a single telemetry item together with the process to acquire, format and validate
it. A telemetry item represents a small set of closely related telemetry data that are to be inserted
in the telemetry stream as contiguous data. It will often consist of one or a small number of word of 16
bits each but may also consist of groups of bits of different sizes.
   </Definition>

   <DesignPattern>
     <Name>Telemetry Item</Name>
     <FileName>TelemetryItem</FileName>
   </DesignPattern>

   <MappedTo>
     <Type>Abstract Interface</Type>
     <Item>TelemetryItem</Item>
   </MappedTo>
 </Entry>

<!-- =========================================================== -->

 <Entry>
   <Name>Telemetry Manager</Name>
   <Definition>
    A component that manages the telemetry data generation process. A telemetry manager is responsible for maintaining a list of components that can contribute data to the telemetry stream. When it is activated, it directs these components to generate their telemetry data and dispatches the data thus generated to the <a HREF="#Telemetry Stream">telemetry stream</a>.
 Telemetry managers are a form of <a href="#FunctionalityManager">functionality managers</a>.
   </Definition>

   <DesignPattern>
     <Name>Telemetry Management</Name>
     <FileName>TelemetryManagement</FileName>
   </DesignPattern>

   <MappedTo>
     <Type>Core Component</Type>
     <Item>TelemetryManager</Item>
   </MappedTo>
 </Entry>

<!-- =========================================================== -->

 <Entry>
   <Name>Telemetry Stream</Name>
   <Definition>
An encapsulation of the data sink to which telemetry data are written. A telemetry stream represents a generic channel through which telemetry data can be forwarded to the ground station and encapsulates details about the physical implementation of this channel.
   </Definition>

   <DesignPattern>
     <Name>Telemetry Stream</Name>
     <FileName>TelemetryStream</FileName>
   </DesignPattern>

   <MappedTo>
     <Type>Abstract Interface</Type>
     <Item>TelemetryStream</Item>
   </MappedTo>
 </Entry>

<!-- =========================================================== -->

 <Entry>
   <Name>Tracer</Name>
   <Definition>
Encapsulation of the mechanism for forwarding trace signals to an external test set up. A trace signal is a physical signal that is generated by the software in response to the execution of selected statements. It is used as a means of performing timing measurements and other checks on the execution of an embedded application.
   </Definition>

   <DesignPattern>
     <Name>Trace</Name>
     <FileName>Trace</FileName>
   </DesignPattern>

   <MappedTo>
     <Type>Abstract Interface</Type>
     <Item>Tracer</Item>
   </MappedTo>
 </Entry>

<!-- =========================================================== -->

</DomainDictionary>