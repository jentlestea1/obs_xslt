<?xml version = '1.0' encoding = 'Cp1252' ?>
<XMI xmi.version = '1.1' xmlns:UML = '//org.omg/UML/1.3'>
 <XMI.header>
  <XMI.documentation>
   <XMI.exporter>
    	TogetherSoft
   </XMI.exporter>
   <XMI.exporterVersion>
    	6.0
   </XMI.exporterVersion>
  </XMI.documentation>
  <XMI.metamodel xmi.name = 'UML' xmi.version = '1.4'/>
 </XMI.header>
 <XMI.content>
  <UML:Model xmi.id = 'S.1' name = 'Project' visibility = 'public'>
   <UML:Namespace.ownedElement>
    <UML:Package xmi.id = 'S.5'
          name = 'Base' visibility = 'package' isSpecification = 'false'
          isAbstract = 'false'>
     <UML:Namespace.ownedElement>
      <!--From Class CC_PunctualActionManager to Class PunctualActionModeManager-->
      <UML:Association xmi.id = 'G.0'
            name = '{CC_PunctualActionManager-PunctualActionModeManager}' visibility = 'private' isSpecification = 'false'
            isAbstract = 'false'>
       <UML:Association.connection>
        <UML:AssociationEnd xmi.id = 'G.1' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.qualifier>
          <UML:Attribute xmi.idref = 'S.23'/>
         </UML:AssociationEnd.qualifier>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity/>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.10'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
        <UML:AssociationEnd xmi.id = 'G.2' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '0' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.16'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
       </UML:Association.connection>
      </UML:Association>
      <UML:Class xmi.id = 'S.10'
            name = 'CC_PunctualActionManager' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.23'
              name = 'pModeManager' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.3'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.24'
              name = 'CC_PunctualActionManager' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.25'
              name = 'setPunctualActionModeManager' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.25' name = 'pModeManager' isSpecification = 'false' kind = 'inout' type = 'G.3'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.3'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.26' name = 'setPunctualActionModeManager.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.26'
              name = 'getPunctualActionModeManager' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.29' name = 'getPunctualActionModeManager.Return' isSpecification = 'false' kind = 'return' type = 'G.3'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.3'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.27'
              name = 'activate' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.31' name = 'activate.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.28'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.34' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.6'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.10'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.15'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.15'
            name = 'CC_RootObject' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.29'
              name = 'instanceId' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.7'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.30'
              name = 'classId' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.8'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.31'
              name = 'instanceCounter' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.7'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.32'
              name = 'pEventRepository' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.9'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.33'
              name = 'pTracer' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.10'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.34'
              name = 'pSystemList' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.11'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.35'
              name = 'systemListSize' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.7'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.36'
              name = 'pDataPool' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.12'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.37'
              name = 'pParameterDatabase' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.13'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.38'
              name = 'CC_RootObject' visibility = 'private'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.46' name = 'v' isSpecification = 'false' kind = 'inout' type = 'G.11'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.11'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.39'
              name = 'operator=' visibility = 'private'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.49' name = 'v' isSpecification = 'false' kind = 'inout' type = 'G.11'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.11'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.50' name = 'operator=.Return' isSpecification = 'false' kind = 'return' type = 'G.11'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.11'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.40'
              name = 'CC_RootObject' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.41'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.55' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.42'
              name = 'isSystemConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'classifier'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.58' name = 'isSystemConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.43'
              name = 'getInstanceId' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.60' name = 'getInstanceId.Return' isSpecification = 'false' kind = 'return' type = 'G.7'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.7'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.44'
              name = 'getClassId' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.62' name = 'getClassId.Return' isSpecification = 'false' kind = 'return' type = 'G.8'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.8'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.45'
              name = 'setSystemListSize' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'classifier'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.65' name = 'systemListSize' isSpecification = 'false' kind = 'inout' type = 'G.7'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.7'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.66' name = 'setSystemListSize.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.46'
              name = 'getSystemListSize' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'classifier'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.70' name = 'getSystemListSize.Return' isSpecification = 'false' kind = 'return' type = 'G.7'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.7'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.47'
              name = 'setClassId' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.73' name = 'classId' isSpecification = 'false' kind = 'inout' type = 'G.8'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.8'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.74' name = 'setClassId.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.48'
              name = 'setEventRepository' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'classifier'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.76' name = 'pEventRepository' isSpecification = 'false' kind = 'inout' type = 'G.9'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.9'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.77' name = 'setEventRepository.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.49'
              name = 'getEventRepository' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'classifier'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.79' name = 'getEventRepository.Return' isSpecification = 'false' kind = 'return' type = 'G.9'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.9'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.50'
              name = 'setParameterDatabase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'classifier'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.81' name = 'pDatabase' isSpecification = 'false' kind = 'inout' type = 'G.13'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.13'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.82' name = 'setParameterDatabase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.51'
              name = 'getParameterDatabase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'classifier'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.84' name = 'getParameterDatabase.Return' isSpecification = 'false' kind = 'return' type = 'G.13'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.13'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.52'
              name = 'setDataPool' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'classifier'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.86' name = 'pDataPool' isSpecification = 'false' kind = 'inout' type = 'G.12'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.12'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.87' name = 'setDataPool.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.53'
              name = 'getDataPool' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'classifier'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.89' name = 'getDataPool.Return' isSpecification = 'false' kind = 'return' type = 'G.12'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.12'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.54'
              name = 'setTracer' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'classifier'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.91' name = 'pTracer' isSpecification = 'false' kind = 'inout' type = 'G.10'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.10'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.92' name = 'setTracer.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.55'
              name = 'getTracer' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'classifier'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.94' name = 'getTracer.Return' isSpecification = 'false' kind = 'return' type = 'G.10'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.10'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.56'
              name = 'synchTrace' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'classifier'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.99' name = 'traceId' isSpecification = 'false' kind = 'inout' type = 'G.14'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.14'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.100' name = 'synchTrace.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.57'
              name = 'packetTrace' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'classifier'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.106' name = 'n' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.107' name = 'traceData' isSpecification = 'false' kind = 'inout' type = 'G.16'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.16'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.108' name = 'packetTrace.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.58'
              name = '~CC_RootObject' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Class xmi.id = 'S.17'
            name = 'ConditionalPunctualAction' visibility = 'package' isSpecification = 'false'
            isAbstract = 'true' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.59'
              name = 'ConditionalPunctualAction' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.60'
              name = 'doAction' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.120' name = 'doAction.Return' isSpecification = 'false' kind = 'return' type = 'G.17'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.17'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.61'
              name = 'canExecute' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.124' name = 'canExecute.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.62'
              name = 'doConditionalAction' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.128' name = 'doConditionalAction.Return' isSpecification = 'false' kind = 'return' type = 'G.17'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.17'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.18'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.17'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.13'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.18'
            name = 'DC_BasicReconfigurer' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.63'
              name = 'numberOfConfig' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.19'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.64'
              name = 'active' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.19'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.65'
              name = 'enableStatus' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.66'
              name = 'isHealthy' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.20'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.67'
              name = 'DC_BasicReconfigurer' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.68'
              name = 'reconfigure' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.135' name = 'reconfigure.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.69'
              name = 'setNumberOfConfigurations' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.138' name = 'nOfConfig' isSpecification = 'false' kind = 'inout' type = 'G.19'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.19'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.139' name = 'setNumberOfConfigurations.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.70'
              name = 'setHealthStatus' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.144' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.19'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.19'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.145' name = 'healthStatus' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.146' name = 'setHealthStatus.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.71'
              name = 'isConfigurationHealthy' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.150' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.19'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.19'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.151' name = 'isConfigurationHealthy.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.72'
              name = 'setActive' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.155' name = 'activeConfig' isSpecification = 'false' kind = 'inout' type = 'G.19'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.19'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.156' name = 'setActive.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.73'
              name = 'setEnabled' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.160' name = 'enabled' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.161' name = 'setEnabled.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.74'
              name = 'isEnabled' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.165' name = 'isEnabled.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.75'
              name = 'getActive' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.168' name = 'getActive.Return' isSpecification = 'false' kind = 'return' type = 'G.19'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.19'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.76'
              name = 'getNumberOfConfigurations' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.171' name = 'getNumberOfConfigurations.Return' isSpecification = 'false' kind = 'return' type = 'G.19'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.19'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.77'
              name = 'reset' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.173' name = 'reset.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.78'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.176' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.21'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.18'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.15'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.20'
            name = 'DC_CyclingPunctualActionModeManager' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.79'
              name = 'DC_CyclingPunctualActionModeManager' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.80'
              name = 'update' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.183' name = 'update.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.22'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.20'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.19'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.12'
            name = 'DC_DummyConditionalPunctualAction' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.81'
              name = 'executionFlag' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.82'
              name = 'DC_DummyConditionalPunctualAction' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.83'
              name = 'setExecutionFlag' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.191' name = 'newState' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.192' name = 'setExecutionFlag.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.84'
              name = 'canExecute' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.198' name = 'canExecute.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.85'
              name = 'doConditionalAction' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.203' name = 'doConditionalAction.Return' isSpecification = 'false' kind = 'return' type = 'G.17'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.17'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.23'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.12'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.17'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.14'
            name = 'DC_DummyModeManager' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.86'
              name = 'DC_DummyModeManager' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.87'
              name = 'update' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.211' name = 'update.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.88'
              name = 'allocateMemory' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.213' name = 'numberOfModes' isSpecification = 'false' kind = 'inout' type = 'G.24'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.24'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.214' name = 'allocateMemory.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.25'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.14'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.11'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.22'
            name = 'DC_DummyPunctualAction' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.89'
              name = 'counter' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.90'
              name = 'DC_DummyPunctualAction' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.91'
              name = 'getActivationCounter' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.222' name = 'getActivationCounter.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.92'
              name = 'doAction' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.226' name = 'doAction.Return' isSpecification = 'false' kind = 'return' type = 'G.17'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.17'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.26'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.22'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.13'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.21'
            name = 'DC_SimplePunctualActionModeManager' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.93'
              name = 'DC_SimplePunctualActionModeManager' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.94'
              name = 'update' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.233' name = 'update.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.27'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.21'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.19'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.11'
            name = 'ModeManager' visibility = 'package' isSpecification = 'false'
            isAbstract = 'true' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.95'
              name = 'enabledStatus' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.20'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.96'
              name = 'transitionsEnabled' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.97'
              name = 'numberOfModes' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.24'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.98'
              name = 'currentMode' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.24'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.99'
              name = 'defaultMode' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.24'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.100'
              name = 'ModeManager' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.101'
              name = 'update' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.242' name = 'update.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.102'
              name = 'setNumberOfModes' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.246' name = 'numberOfModes' isSpecification = 'false' kind = 'inout' type = 'G.24'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.24'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.247' name = 'setNumberOfModes.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.103'
              name = 'setDefaultMode' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.250' name = 'defaultMode' isSpecification = 'false' kind = 'inout' type = 'G.24'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.24'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.251' name = 'setDefaultMode.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.104'
              name = 'setTransitionEnableStatus' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.255' name = 'enabled' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.256' name = 'setTransitionEnableStatus.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.105'
              name = 'setTransitionEnableStatus' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.261' name = 'toMode' isSpecification = 'false' kind = 'inout' type = 'G.24'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.24'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.262' name = 'enabled' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.263' name = 'setTransitionEnableStatus.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.106'
              name = 'isTransitionEnabled' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.267' name = 'isTransitionEnabled.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.107'
              name = 'isTransitionEnabled' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.272' name = 'toMode' isSpecification = 'false' kind = 'inout' type = 'G.24'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.24'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.273' name = 'isTransitionEnabled.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.108'
              name = 'getCurrentMode' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.276' name = 'getCurrentMode.Return' isSpecification = 'false' kind = 'return' type = 'G.24'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.24'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.109'
              name = 'getNumberOfModes' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.279' name = 'getNumberOfModes.Return' isSpecification = 'false' kind = 'return' type = 'G.24'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.24'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.110'
              name = 'reset' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.281' name = 'reset.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.111'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.284' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.112'
              name = 'setMode' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.290' name = 'newMode' isSpecification = 'false' kind = 'inout' type = 'G.24'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.24'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.291' name = 'setMode.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.113'
              name = 'allocateMemory' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.295' name = 'numberOfModes' isSpecification = 'false' kind = 'inout' type = 'G.24'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.24'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.296' name = 'allocateMemory.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.28'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.11'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.15'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.13'
            name = 'PunctualAction' visibility = 'package' isSpecification = 'false'
            isAbstract = 'true' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.114'
              name = 'enabledStatus' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.115'
              name = 'lastOutcome' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.17'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.116'
              name = 'PunctualAction' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.117'
              name = 'execute' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.306' name = 'execute.Return' isSpecification = 'false' kind = 'return' type = 'G.17'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.17'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.118'
              name = 'setEnabled' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.309' name = 'isEnabled' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.310' name = 'setEnabled.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.119'
              name = 'isEnabled' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.313' name = 'isEnabled.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.120'
              name = 'getLastOutcome' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.319' name = 'getLastOutcome.Return' isSpecification = 'false' kind = 'return' type = 'G.17'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.17'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.121'
              name = 'resetLastOutcome' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.323' name = 'resetLastOutcome.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.122'
              name = 'doAction' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.327' name = 'doAction.Return' isSpecification = 'false' kind = 'return' type = 'G.17'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.17'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.29'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.13'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.15'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.19'
            name = 'PunctualActionListModeManager' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.123'
              name = 'list' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.30'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.124'
              name = 'listLength' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.31'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.125'
              name = 'iterationListIndex' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.126'
              name = 'counter' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.127'
              name = 'allocateMemory' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.336' name = 'numberOfModes' isSpecification = 'false' kind = 'inout' type = 'G.24'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.24'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.337' name = 'allocateMemory.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.128'
              name = 'getIterationPunctualAction' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.341' name = 'getIterationPunctualAction.Return' isSpecification = 'false' kind = 'return' type = 'G.30'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.30'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.129'
              name = 'setListItem' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.346' name = 'n' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.347' name = 'pos' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.348' name = 'pItem' isSpecification = 'false' kind = 'inout' type = 'G.30'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.30'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.349' name = 'setListItem.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.130'
              name = 'PunctualActionListModeManager' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.131'
              name = 'setListLength' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.354' name = 'n' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.355' name = 'length' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.356' name = 'setListLength.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.132'
              name = 'first' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.358' name = 'first.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.133'
              name = 'next' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.361' name = 'next.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.134'
              name = 'isIterationFinished' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.365' name = 'isIterationFinished.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.135'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.368' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.32'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.19'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.16'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.16'
            name = 'PunctualActionModeManager' visibility = 'package' isSpecification = 'false'
            isAbstract = 'true' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.136'
              name = 'PunctualActionModeManager' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.137'
              name = 'first' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.379' name = 'first.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.138'
              name = 'next' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.382' name = 'next.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.139'
              name = 'isIterationFinished' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.386' name = 'isIterationFinished.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.140'
              name = 'getIterationPunctualAction' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.390' name = 'getIterationPunctualAction.Return' isSpecification = 'false' kind = 'return' type = 'G.30'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.30'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.33'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.16'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.11'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
     </UML:Namespace.ownedElement>
    </UML:Package>
    <UML:Package xmi.id = 'S.141'
          name = 'Data' visibility = 'package' isSpecification = 'false'
          isAbstract = 'false'>
     <UML:Namespace.ownedElement>
      <!--From Class DC_ControlAction to Class ControlBlock-->
      <UML:Association xmi.id = 'G.34'
            name = '{DC_ControlAction-ControlBlock}' visibility = 'private' isSpecification = 'false'
            isAbstract = 'false'>
       <UML:Association.connection>
        <UML:AssociationEnd xmi.id = 'G.36' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.qualifier>
          <UML:Attribute xmi.idref = 'S.167'/>
         </UML:AssociationEnd.qualifier>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity/>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.146'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
        <UML:AssociationEnd xmi.id = 'G.37' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '0' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.151'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
       </UML:Association.connection>
      </UML:Association>
      <!--From Class DataPool to Class DC_DataItem-->
      <UML:Association xmi.id = 'G.35'
            name = '{DataPool-DC_DataItem}' visibility = 'private' isSpecification = 'false'
            isAbstract = 'false'>
       <UML:Association.connection>
        <UML:AssociationEnd xmi.id = 'G.38' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.qualifier>
          <UML:Attribute xmi.idref = 'S.168'/>
         </UML:AssociationEnd.qualifier>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity/>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.147'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
        <UML:AssociationEnd xmi.id = 'G.39' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '0' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.165'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
       </UML:Association.connection>
      </UML:Association>
      <UML:Class xmi.id = 'S.151'
            name = 'ControlBlock' visibility = 'package' isSpecification = 'false'
            isAbstract = 'true' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.169'
              name = 'nInputs' visibility = 'protected' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.40'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.170'
              name = 'nOutputs' visibility = 'protected' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.40'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.171'
              name = 'nStates' visibility = 'protected' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.40'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.172'
              name = 'nParameters' visibility = 'protected' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.40'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.173'
              name = 'x' visibility = 'protected' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.41'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.174'
              name = 'p' visibility = 'protected' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.41'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.175'
              name = 'setNumberOfInputs' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.432' name = 'n' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.433' name = 'setNumberOfInputs.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.176'
              name = 'setNumberOfOutputs' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.436' name = 'n' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.437' name = 'setNumberOfOutputs.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.177'
              name = 'setNumberOfStates' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.440' name = 'n' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.441' name = 'setNumberOfStates.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.178'
              name = 'setNumberOfParameters' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.444' name = 'n' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.445' name = 'setNumberOfParameters.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.179'
              name = 'propagateState' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.448' name = 'propagateState.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.180'
              name = 'updateOutput' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.451' name = 'updateOutput.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.181'
              name = 'ControlBlock' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.182'
              name = 'getNumberOfOutputs' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.455' name = 'getNumberOfOutputs.Return' isSpecification = 'false' kind = 'return' type = 'G.40'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.40'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.183'
              name = 'getNumberOfStates' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.458' name = 'getNumberOfStates.Return' isSpecification = 'false' kind = 'return' type = 'G.40'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.40'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.184'
              name = 'getNumberOfInputs' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.461' name = 'getNumberOfInputs.Return' isSpecification = 'false' kind = 'return' type = 'G.40'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.40'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.185'
              name = 'getNumberOfParameters' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.464' name = 'getNumberOfParameters.Return' isSpecification = 'false' kind = 'return' type = 'G.40'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.40'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.186'
              name = 'getState' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.468' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.469' name = 'getState.Return' isSpecification = 'false' kind = 'return' type = 'G.42'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.42'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.187'
              name = 'getParameter' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.473' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.474' name = 'getParameter.Return' isSpecification = 'false' kind = 'return' type = 'G.42'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.42'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.188'
              name = 'setState' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.478' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.479' name = 'newValue' isSpecification = 'false' kind = 'inout' type = 'G.42'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.42'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.480' name = 'setState.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.189'
              name = 'setParameter' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.484' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.485' name = 'newValue' isSpecification = 'false' kind = 'inout' type = 'G.42'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.42'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.486' name = 'setParameter.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.190'
              name = 'propagate' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.488' name = 'propagate.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.191'
              name = 'reset' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.490' name = 'reset.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.192'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.492' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.43'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.151'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.15'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.153'
            name = 'CopyControlBlock' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.193'
              name = 'u' visibility = 'protected' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.41'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.194'
              name = 'y' visibility = 'protected' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.41'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.195'
              name = 'setNumberOfInputs' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.507' name = 'n' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.508' name = 'setNumberOfInputs.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.196'
              name = 'setNumberOfOutputs' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.511' name = 'n' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.512' name = 'setNumberOfOutputs.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.197'
              name = 'CopyControlBlock' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.198'
              name = 'getInput' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.517' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.518' name = 'getInput.Return' isSpecification = 'false' kind = 'return' type = 'G.42'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.42'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.199'
              name = 'getOutput' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.522' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.523' name = 'getOutput.Return' isSpecification = 'false' kind = 'return' type = 'G.42'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.42'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.200'
              name = 'setInput' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.527' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.528' name = 'newValue' isSpecification = 'false' kind = 'inout' type = 'G.42'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.42'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.529' name = 'setInput.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.201'
              name = 'setOutput' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.533' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.534' name = 'newValue' isSpecification = 'false' kind = 'inout' type = 'G.42'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.42'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.535' name = 'setOutput.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.202'
              name = 'reset' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.537' name = 'reset.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.44'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.153'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.151'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.149'
            name = 'DataItemControlBlock' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.203'
              name = 'pDIU' visibility = 'protected' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.45'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.204'
              name = 'pDIY' visibility = 'protected' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.45'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.205'
              name = 'setNumberOfInputs' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.549' name = 'n' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.550' name = 'setNumberOfInputs.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.206'
              name = 'setNumberOfOutputs' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.553' name = 'n' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.554' name = 'setNumberOfOutputs.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.207'
              name = 'DataItemControlBlock' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.208'
              name = 'setInputLink' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.559' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.560' name = 'pDataItem' isSpecification = 'false' kind = 'inout' type = 'G.45'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.45'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.561' name = 'setInputLink.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.209'
              name = 'setOutputLink' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.565' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.566' name = 'pDataItem' isSpecification = 'false' kind = 'inout' type = 'G.45'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.45'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.567' name = 'setOutputLink.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.210'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.569' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.46'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.149'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.151'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.147'
            name = 'DataPool' visibility = 'package' isSpecification = 'false'
            isAbstract = 'true' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.211'
              name = 'pNullProfile' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.47'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.212'
              name = 'pNullRecoveryAction' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.48'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.213'
              name = 'dummyInt' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.49'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.168'
              name = 'pDummyDataItem' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.45'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.214'
              name = 'DataPool' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.215'
              name = 'setValue' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.579' name = 'id' isSpecification = 'false' kind = 'inout' type = 'G.50'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.50'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.580' name = 'newValue' isSpecification = 'false' kind = 'inout' type = 'G.42'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.42'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.581' name = 'setValue.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.216'
              name = 'setValue' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.585' name = 'id' isSpecification = 'false' kind = 'inout' type = 'G.50'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.50'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.586' name = 'newValue' isSpecification = 'false' kind = 'inout' type = 'G.49'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.49'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.587' name = 'setValue.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.217'
              name = 'getFloatValue' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.591' name = 'id' isSpecification = 'false' kind = 'inout' type = 'G.50'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.50'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.592' name = 'getFloatValue.Return' isSpecification = 'false' kind = 'return' type = 'G.42'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.42'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.218'
              name = 'getIntegerValue' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.596' name = 'id' isSpecification = 'false' kind = 'inout' type = 'G.50'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.50'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.597' name = 'getIntegerValue.Return' isSpecification = 'false' kind = 'return' type = 'G.49'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.49'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.219'
              name = 'getPointerFloatValue' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.601' name = 'id' isSpecification = 'false' kind = 'inout' type = 'G.50'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.50'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.602' name = 'getPointerFloatValue.Return' isSpecification = 'false' kind = 'return' type = 'G.41'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.41'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.220'
              name = 'getPointerIntegerValue' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.606' name = 'id' isSpecification = 'false' kind = 'inout' type = 'G.50'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.50'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.607' name = 'getPointerIntegerValue.Return' isSpecification = 'false' kind = 'return' type = 'G.51'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.51'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.221'
              name = 'getDataItem' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.612' name = 'id' isSpecification = 'false' kind = 'inout' type = 'G.50'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.50'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.613' name = 'getDataItem.Return' isSpecification = 'false' kind = 'return' type = 'G.45'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.45'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.222'
              name = 'getTimeStamp' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.617' name = 'id' isSpecification = 'false' kind = 'inout' type = 'G.50'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.50'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.618' name = 'getTimeStamp.Return' isSpecification = 'false' kind = 'return' type = 'G.52'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.52'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.223'
              name = 'isValid' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.622' name = 'id' isSpecification = 'false' kind = 'inout' type = 'G.50'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.50'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.623' name = 'isValid.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.224'
              name = 'setValidityStatus' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.627' name = 'id' isSpecification = 'false' kind = 'inout' type = 'G.50'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.50'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.628' name = 'newValidityStatus' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.629' name = 'setValidityStatus.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.225'
              name = 'getMonitoringProfile' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.633' name = 'id' isSpecification = 'false' kind = 'inout' type = 'G.50'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.50'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.634' name = 'getMonitoringProfile.Return' isSpecification = 'false' kind = 'return' type = 'G.53'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.53'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.226'
              name = 'getRecoveryAction' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.638' name = 'id' isSpecification = 'false' kind = 'inout' type = 'G.50'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.50'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.639' name = 'getRecoveryAction.Return' isSpecification = 'false' kind = 'return' type = 'G.54'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.54'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.227'
              name = 'firstIdentifier' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.644' name = 'firstIdentifier.Return' isSpecification = 'false' kind = 'return' type = 'G.50'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.50'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.228'
              name = 'nextIdentifier' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.649' name = 'nextIdentifier.Return' isSpecification = 'false' kind = 'return' type = 'G.50'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.50'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.229'
              name = 'isLastIdentifier' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.654' name = 'isLastIdentifier.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.230'
              name = 'isFloat' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.659' name = 'id' isSpecification = 'false' kind = 'inout' type = 'G.50'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.50'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.660' name = 'isFloat.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.231'
              name = 'isInteger' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.665' name = 'id' isSpecification = 'false' kind = 'inout' type = 'G.50'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.50'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.666' name = 'isInteger.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.232'
              name = 'reset' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.669' name = 'reset.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.55'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.147'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.15'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.163'
            name = 'DataPoolControlBlock' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.233'
              name = 'dpu' visibility = 'protected' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.56'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.234'
              name = 'dpy' visibility = 'protected' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.56'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.235'
              name = 'setNumberOfInputs' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.681' name = 'n' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.682' name = 'setNumberOfInputs.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.236'
              name = 'setNumberOfOutputs' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.685' name = 'n' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.686' name = 'setNumberOfOutputs.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.237'
              name = 'DataPoolControlBlock' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.238'
              name = 'setInputLink' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.691' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.692' name = 'dpIdentifier' isSpecification = 'false' kind = 'inout' type = 'G.50'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.50'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.693' name = 'setInputLink.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.239'
              name = 'setOutputLink' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.697' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.698' name = 'dpIdentifier' isSpecification = 'false' kind = 'inout' type = 'G.50'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.50'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.699' name = 'setOutputLink.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.240'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.701' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.57'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.163'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.151'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.160'
            name = 'DC_BasicDatabase' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.241'
              name = 'pDefaultTable' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.58'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.242'
              name = 'pOperationalTable' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.58'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.243'
              name = 'resetWasCalled' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.244'
              name = 'tableLength' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.59'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.245'
              name = 'DC_BasicDatabase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.246'
              name = 'reset' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.707' name = 'reset.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.247'
              name = 'setTableLength' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.710' name = 'length' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.711' name = 'setTableLength.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.248'
              name = 'getTableLength' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.715' name = 'getTableLength.Return' isSpecification = 'false' kind = 'return' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.249'
              name = 'setDefaultTable' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.718' name = 'pDefTable' isSpecification = 'false' kind = 'inout' type = 'G.58'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.58'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.719' name = 'setDefaultTable.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.250'
              name = 'setOperationalTable' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.722' name = 'pOperTable' isSpecification = 'false' kind = 'inout' type = 'G.58'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.58'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.723' name = 'setOperationalTable.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.251'
              name = 'setParameter' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.727' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.728' name = 'newValue' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.729' name = 'setParameter.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.252'
              name = 'setParameter' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.733' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.734' name = 'newValue' isSpecification = 'false' kind = 'inout' type = 'G.40'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.40'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.735' name = 'setParameter.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.253'
              name = 'setParameter' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.739' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.740' name = 'newValue' isSpecification = 'false' kind = 'inout' type = 'G.60'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.60'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.741' name = 'setParameter.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.254'
              name = 'setParameter' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.745' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.746' name = 'newValue' isSpecification = 'false' kind = 'inout' type = 'G.61'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.61'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.747' name = 'setParameter.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.255'
              name = 'setParameter' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.751' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.752' name = 'newValue' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.753' name = 'setParameter.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.256'
              name = 'setParameter' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.757' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.758' name = 'newValue' isSpecification = 'false' kind = 'inout' type = 'G.62'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.62'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.759' name = 'setParameter.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.257'
              name = 'setParameter' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.763' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.764' name = 'newValue' isSpecification = 'false' kind = 'inout' type = 'G.63'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.63'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.765' name = 'setParameter.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.258'
              name = 'setParameter' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.769' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.770' name = 'newValue' isSpecification = 'false' kind = 'inout' type = 'G.64'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.64'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.771' name = 'setParameter.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.259'
              name = 'setParameter' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.775' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.776' name = 'newValue' isSpecification = 'false' kind = 'inout' type = 'G.65'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.65'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.777' name = 'setParameter.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.260'
              name = 'getParameterUnsignedInt' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.781' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.782' name = 'getParameterUnsignedInt.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.261'
              name = 'getParameterInt' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.786' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.787' name = 'getParameterInt.Return' isSpecification = 'false' kind = 'return' type = 'G.40'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.40'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.262'
              name = 'getParameterUnsignedShort' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.791' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.792' name = 'getParameterUnsignedShort.Return' isSpecification = 'false' kind = 'return' type = 'G.60'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.60'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.263'
              name = 'getParameterShort' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.796' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.797' name = 'getParameterShort.Return' isSpecification = 'false' kind = 'return' type = 'G.61'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.61'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.264'
              name = 'getParameterBool' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.801' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.802' name = 'getParameterBool.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.265'
              name = 'getParameterUnsignedChar' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.806' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.807' name = 'getParameterUnsignedChar.Return' isSpecification = 'false' kind = 'return' type = 'G.63'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.63'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.266'
              name = 'getParameterChar' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.811' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.812' name = 'getParameterChar.Return' isSpecification = 'false' kind = 'return' type = 'G.62'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.62'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.267'
              name = 'getParameterFloat' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.816' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.817' name = 'getParameterFloat.Return' isSpecification = 'false' kind = 'return' type = 'G.64'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.64'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.268'
              name = 'getParameterDouble' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.821' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.822' name = 'getParameterDouble.Return' isSpecification = 'false' kind = 'return' type = 'G.65'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.65'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.269'
              name = 'getParameterPointerUnsignedInt' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.826' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.827' name = 'getParameterPointerUnsignedInt.Return' isSpecification = 'false' kind = 'return' type = 'G.31'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.31'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.270'
              name = 'getParameterPointerInt' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.831' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.832' name = 'getParameterPointerInt.Return' isSpecification = 'false' kind = 'return' type = 'G.66'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.66'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.271'
              name = 'getParameterPointerUnsignedShort' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.836' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.837' name = 'getParameterPointerUnsignedShort.Return' isSpecification = 'false' kind = 'return' type = 'G.67'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.67'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.272'
              name = 'getParameterPointerShort' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.841' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.842' name = 'getParameterPointerShort.Return' isSpecification = 'false' kind = 'return' type = 'G.68'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.68'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.273'
              name = 'getParameterPointerUnsignedChar' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.846' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.847' name = 'getParameterPointerUnsignedChar.Return' isSpecification = 'false' kind = 'return' type = 'G.69'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.69'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.274'
              name = 'getParameterPointerChar' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.851' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.852' name = 'getParameterPointerChar.Return' isSpecification = 'false' kind = 'return' type = 'G.58'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.58'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.275'
              name = 'getParameterPointerBool' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.856' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.857' name = 'getParameterPointerBool.Return' isSpecification = 'false' kind = 'return' type = 'G.20'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.20'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.276'
              name = 'getParameterPointerFloat' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.861' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.862' name = 'getParameterPointerFloat.Return' isSpecification = 'false' kind = 'return' type = 'G.70'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.70'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.277'
              name = 'getParameterPointerDouble' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.866' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.867' name = 'getParameterPointerDouble.Return' isSpecification = 'false' kind = 'return' type = 'G.71'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.71'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.278'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.871' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.72'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.160'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.157'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.164'
            name = 'DC_BasicDataPool' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.279'
              name = 'value' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.69'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.280'
              name = 'size' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.50'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.281'
              name = 'DC_BasicDataPool' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.282'
              name = 'setDataPoolSize' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.878' name = 'size' isSpecification = 'false' kind = 'inout' type = 'G.50'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.50'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.879' name = 'setDataPoolSize.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.283'
              name = 'getDataPoolSize' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.883' name = 'getDataPoolSize.Return' isSpecification = 'false' kind = 'return' type = 'G.50'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.50'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.284'
              name = 'setValue' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.887' name = 'id' isSpecification = 'false' kind = 'inout' type = 'G.50'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.50'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.888' name = 'newValue' isSpecification = 'false' kind = 'inout' type = 'G.42'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.42'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.889' name = 'setValue.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.285'
              name = 'setValue' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.893' name = 'id' isSpecification = 'false' kind = 'inout' type = 'G.50'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.50'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.894' name = 'newValue' isSpecification = 'false' kind = 'inout' type = 'G.49'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.49'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.895' name = 'setValue.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.286'
              name = 'getFloatValue' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.899' name = 'id' isSpecification = 'false' kind = 'inout' type = 'G.50'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.50'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.900' name = 'getFloatValue.Return' isSpecification = 'false' kind = 'return' type = 'G.42'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.42'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.287'
              name = 'getIntegerValue' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.904' name = 'id' isSpecification = 'false' kind = 'inout' type = 'G.50'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.50'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.905' name = 'getIntegerValue.Return' isSpecification = 'false' kind = 'return' type = 'G.49'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.49'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.288'
              name = 'getPointerFloatValue' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.909' name = 'id' isSpecification = 'false' kind = 'inout' type = 'G.50'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.50'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.910' name = 'getPointerFloatValue.Return' isSpecification = 'false' kind = 'return' type = 'G.41'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.41'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.289'
              name = 'getPointerIntegerValue' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.914' name = 'id' isSpecification = 'false' kind = 'inout' type = 'G.50'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.50'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.915' name = 'getPointerIntegerValue.Return' isSpecification = 'false' kind = 'return' type = 'G.51'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.51'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.290'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.919' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.73'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.164'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.147'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.146'
            name = 'DC_ControlAction' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.167'
              name = 'pTargetControlBlock' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.74'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.291'
              name = 'canExecute' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.927' name = 'canExecute.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.292'
              name = 'doConditionalAction' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.931' name = 'doConditionalAction.Return' isSpecification = 'false' kind = 'return' type = 'G.17'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.17'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.293'
              name = 'DC_ControlAction' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.294'
              name = 'setTargetControlBlock' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.935' name = 'pBlock' isSpecification = 'false' kind = 'inout' type = 'G.74'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.74'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.936' name = 'setTargetControlBlock.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.295'
              name = 'getTargetControlBlock' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.939' name = 'getTargetControlBlock.Return' isSpecification = 'false' kind = 'return' type = 'G.74'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.74'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.296'
              name = 'reset' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.941' name = 'reset.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.297'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.943' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.75'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.146'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.17'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.155'
            name = 'DC_ControlList' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.298'
              name = 'listSize' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.299'
              name = 'controlBlockList' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.74'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.300'
              name = 'canExecute' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.950' name = 'canExecute.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.301'
              name = 'doConditionalAction' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.954' name = 'doConditionalAction.Return' isSpecification = 'false' kind = 'return' type = 'G.17'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.17'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.302'
              name = 'DC_ControlList' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.303'
              name = 'setListSize' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.958' name = 'listSize' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.959' name = 'setListSize.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.304'
              name = 'getListSize' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.963' name = 'getListSize.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.305'
              name = 'setControlBlock' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.968' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.969' name = 'item' isSpecification = 'false' kind = 'inout' type = 'G.74'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.74'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.970' name = 'setControlBlock.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.306'
              name = 'getControlBlock' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.974' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.975' name = 'getControlBlock.Return' isSpecification = 'false' kind = 'return' type = 'G.74'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.74'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.307'
              name = 'reset' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.977' name = 'reset.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.308'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.980' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.76'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.155'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.17'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.165'
            name = 'DC_DataItem' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.309'
              name = 'initDataItem' visibility = 'private'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.989' name = 'data' isSpecification = 'false' kind = 'inout' type = 'G.77'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.77'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.990' name = 'type' isSpecification = 'false' kind = 'inout' type = 'G.78'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.78'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.991' name = 'initDataItem.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Attribute xmi.id = 'S.310'
              name = 'pVar' visibility = 'protected' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.77'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.311'
              name = 'DC_DataItem' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.996' name = 'd' isSpecification = 'false' kind = 'inout' type = 'G.41'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.41'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.312'
              name = 'DC_DataItem' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1000' name = 'd' isSpecification = 'false' kind = 'inout' type = 'G.51'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.51'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.313'
              name = 'getFloatValue' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1003' name = 'getFloatValue.Return' isSpecification = 'false' kind = 'return' type = 'G.42'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.42'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.314'
              name = 'setValue' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1006' name = 'newValue' isSpecification = 'false' kind = 'inout' type = 'G.42'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.42'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1007' name = 'setValue.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.315'
              name = 'getIntegerValue' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1010' name = 'getIntegerValue.Return' isSpecification = 'false' kind = 'return' type = 'G.49'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.49'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.316'
              name = 'setValue' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1013' name = 'newValue' isSpecification = 'false' kind = 'inout' type = 'G.49'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.49'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1014' name = 'setValue.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Class xmi.id = 'S.159'
            name = 'DC_DataPoolMonitor' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.317'
              name = 'canExecute' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1026' name = 'canExecute.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.318'
              name = 'doConditionalAction' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1030' name = 'doConditionalAction.Return' isSpecification = 'false' kind = 'return' type = 'G.17'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.17'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.319'
              name = 'DC_DataPoolMonitor' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.79'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.159'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.17'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.158'
            name = 'DC_DummyCopyControlBlock' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.320'
              name = 'propagateState' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1037' name = 'propagateState.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.321'
              name = 'updateOutput' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1040' name = 'updateOutput.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.322'
              name = 'DC_DummyCopyControlBlock' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.323'
              name = 'reset' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1043' name = 'reset.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.80'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.158'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.153'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.152'
            name = 'DC_DummyDatabase' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.324'
              name = 'table' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.62'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.325'
              name = 'DC_DummyDatabase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.81'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.152'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.160'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.150'
            name = 'DC_DummyDataItemControlBlock' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.326'
              name = 'propagateState' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1053' name = 'propagateState.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.327'
              name = 'updateOutput' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1056' name = 'updateOutput.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.328'
              name = 'DC_DummyDataItemControlBlock' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.329'
              name = 'reset' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1059' name = 'reset.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.82'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.150'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.149'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.148'
            name = 'DC_DummyDataPool' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.330'
              name = 'DC_DummyDataPool' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.83'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.148'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.164'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.156'
            name = 'DC_DummyDataPoolControlBlock' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.331'
              name = 'propagateState' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1069' name = 'propagateState.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.332'
              name = 'updateOutput' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1072' name = 'updateOutput.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.333'
              name = 'DC_DummyDataPoolControlBlock' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.334'
              name = 'reset' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1075' name = 'reset.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.84'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.156'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.163'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.154'
            name = 'DC_DummyPointerControlBlock' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.335'
              name = 'propagateState' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1081' name = 'propagateState.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.336'
              name = 'updateOutput' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1084' name = 'updateOutput.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.337'
              name = 'DC_DummyPointerControlBlock' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.338'
              name = 'reset' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1087' name = 'reset.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.85'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.154'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.161'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.162'
            name = 'DC_RawDataItem' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.339'
              name = 'DC_RawDataItem' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1093' name = 'd' isSpecification = 'false' kind = 'inout' type = 'G.77'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.77'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.340'
              name = 'getChar' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1096' name = 'getChar.Return' isSpecification = 'false' kind = 'return' type = 'G.62'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.62'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.341'
              name = 'setChar' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1099' name = 'newValue' isSpecification = 'false' kind = 'inout' type = 'G.62'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.62'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1100' name = 'setChar.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.342'
              name = 'getUnsignedChar' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1103' name = 'getUnsignedChar.Return' isSpecification = 'false' kind = 'return' type = 'G.63'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.63'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.343'
              name = 'setUnsignedChar' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1106' name = 'newValue' isSpecification = 'false' kind = 'inout' type = 'G.63'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.63'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1107' name = 'setUnsignedChar.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.344'
              name = 'getShort' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1110' name = 'getShort.Return' isSpecification = 'false' kind = 'return' type = 'G.61'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.61'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.345'
              name = 'setShort' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1113' name = 'newValue' isSpecification = 'false' kind = 'inout' type = 'G.61'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.61'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1114' name = 'setShort.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.346'
              name = 'getUnsignedShort' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1117' name = 'getUnsignedShort.Return' isSpecification = 'false' kind = 'return' type = 'G.60'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.60'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.347'
              name = 'setUnsignedShort' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1120' name = 'newValue' isSpecification = 'false' kind = 'inout' type = 'G.60'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.60'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1121' name = 'setUnsignedShort.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.348'
              name = 'getInt' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1124' name = 'getInt.Return' isSpecification = 'false' kind = 'return' type = 'G.40'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.40'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.349'
              name = 'setInt' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1127' name = 'newValue' isSpecification = 'false' kind = 'inout' type = 'G.40'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.40'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1128' name = 'setInt.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.350'
              name = 'getUnsignedInt' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1131' name = 'getUnsignedInt.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.351'
              name = 'setUnsignedInt' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1134' name = 'newValue' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1135' name = 'setUnsignedInt.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.352'
              name = 'getFloat' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1138' name = 'getFloat.Return' isSpecification = 'false' kind = 'return' type = 'G.64'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.64'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.353'
              name = 'setFloat' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1141' name = 'newValue' isSpecification = 'false' kind = 'inout' type = 'G.64'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.64'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1142' name = 'setFloat.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.354'
              name = 'getDouble' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1145' name = 'getDouble.Return' isSpecification = 'false' kind = 'return' type = 'G.65'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.65'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.355'
              name = 'setDouble' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1148' name = 'newValue' isSpecification = 'false' kind = 'inout' type = 'G.65'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.65'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1149' name = 'setDouble.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.86'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.162'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.165'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.166'
            name = 'DC_SettableDataItem' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.356'
              name = 'DC_SettableDataItem' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1156' name = 'd' isSpecification = 'false' kind = 'inout' type = 'G.51'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.51'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.357'
              name = 'DC_SettableDataItem' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1159' name = 'd' isSpecification = 'false' kind = 'inout' type = 'G.41'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.41'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.358'
              name = 'setVariable' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1162' name = 'pNewVar' isSpecification = 'false' kind = 'inout' type = 'G.51'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.51'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1163' name = 'setVariable.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.359'
              name = 'setVariable' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1166' name = 'pNewVar' isSpecification = 'false' kind = 'inout' type = 'G.41'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.41'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1167' name = 'setVariable.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.87'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.166'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.165'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.157'
            name = 'ParameterDatabase' visibility = 'package' isSpecification = 'false'
            isAbstract = 'true' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.360'
              name = 'ParameterDatabase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.361'
              name = 'reset' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1175' name = 'reset.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.362'
              name = 'setParameter' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1179' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1180' name = 'newValue' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1181' name = 'setParameter.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.363'
              name = 'setParameter' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1185' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1186' name = 'newValue' isSpecification = 'false' kind = 'inout' type = 'G.40'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.40'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1187' name = 'setParameter.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.364'
              name = 'setParameter' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1191' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1192' name = 'newValue' isSpecification = 'false' kind = 'inout' type = 'G.60'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.60'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1193' name = 'setParameter.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.365'
              name = 'setParameter' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1197' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1198' name = 'newValue' isSpecification = 'false' kind = 'inout' type = 'G.61'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.61'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1199' name = 'setParameter.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.366'
              name = 'setParameter' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1203' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1204' name = 'newValue' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1205' name = 'setParameter.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.367'
              name = 'setParameter' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1209' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1210' name = 'newValue' isSpecification = 'false' kind = 'inout' type = 'G.62'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.62'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1211' name = 'setParameter.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.368'
              name = 'setParameter' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1215' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1216' name = 'newValue' isSpecification = 'false' kind = 'inout' type = 'G.63'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.63'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1217' name = 'setParameter.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.369'
              name = 'setParameter' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1221' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1222' name = 'newValue' isSpecification = 'false' kind = 'inout' type = 'G.64'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.64'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1223' name = 'setParameter.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.370'
              name = 'setParameter' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1227' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1228' name = 'newValue' isSpecification = 'false' kind = 'inout' type = 'G.65'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.65'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1229' name = 'setParameter.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.371'
              name = 'getParameterUnsignedInt' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1233' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1234' name = 'getParameterUnsignedInt.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.372'
              name = 'getParameterInt' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1238' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1239' name = 'getParameterInt.Return' isSpecification = 'false' kind = 'return' type = 'G.40'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.40'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.373'
              name = 'getParameterUnsignedShort' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1243' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1244' name = 'getParameterUnsignedShort.Return' isSpecification = 'false' kind = 'return' type = 'G.60'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.60'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.374'
              name = 'getParameterShort' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1248' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1249' name = 'getParameterShort.Return' isSpecification = 'false' kind = 'return' type = 'G.61'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.61'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.375'
              name = 'getParameterBool' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1253' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1254' name = 'getParameterBool.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.376'
              name = 'getParameterUnsignedChar' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1258' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1259' name = 'getParameterUnsignedChar.Return' isSpecification = 'false' kind = 'return' type = 'G.63'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.63'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.377'
              name = 'getParameterChar' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1263' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1264' name = 'getParameterChar.Return' isSpecification = 'false' kind = 'return' type = 'G.62'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.62'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.378'
              name = 'getParameterFloat' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1268' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1269' name = 'getParameterFloat.Return' isSpecification = 'false' kind = 'return' type = 'G.64'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.64'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.379'
              name = 'getParameterDouble' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1273' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1274' name = 'getParameterDouble.Return' isSpecification = 'false' kind = 'return' type = 'G.65'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.65'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.380'
              name = 'getParameterPointerUnsignedInt' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1278' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1279' name = 'getParameterPointerUnsignedInt.Return' isSpecification = 'false' kind = 'return' type = 'G.31'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.31'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.381'
              name = 'getParameterPointerInt' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1284' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1285' name = 'getParameterPointerInt.Return' isSpecification = 'false' kind = 'return' type = 'G.66'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.66'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.382'
              name = 'getParameterPointerUnsignedShort' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1290' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1291' name = 'getParameterPointerUnsignedShort.Return' isSpecification = 'false' kind = 'return' type = 'G.67'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.67'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.383'
              name = 'getParameterPointerShort' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1296' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1297' name = 'getParameterPointerShort.Return' isSpecification = 'false' kind = 'return' type = 'G.68'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.68'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.384'
              name = 'getParameterPointerUnsignedChar' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1302' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1303' name = 'getParameterPointerUnsignedChar.Return' isSpecification = 'false' kind = 'return' type = 'G.69'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.69'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.385'
              name = 'getParameterPointerChar' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1308' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1309' name = 'getParameterPointerChar.Return' isSpecification = 'false' kind = 'return' type = 'G.58'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.58'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.386'
              name = 'getParameterPointerBool' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1314' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1315' name = 'getParameterPointerBool.Return' isSpecification = 'false' kind = 'return' type = 'G.20'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.20'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.387'
              name = 'getParameterPointerFloat' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1320' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1321' name = 'getParameterPointerFloat.Return' isSpecification = 'false' kind = 'return' type = 'G.70'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.70'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.388'
              name = 'getParameterPointerDouble' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1326' name = 'parId' isSpecification = 'false' kind = 'inout' type = 'G.59'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.59'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1327' name = 'getParameterPointerDouble.Return' isSpecification = 'false' kind = 'return' type = 'G.71'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.71'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.88'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.157'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.15'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.161'
            name = 'PointerControlBlock' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.389'
              name = 'pU' visibility = 'protected' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.89'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.390'
              name = 'pY' visibility = 'protected' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.89'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.391'
              name = 'setNumberOfInputs' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1338' name = 'n' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1339' name = 'setNumberOfInputs.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.392'
              name = 'setNumberOfOutputs' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1342' name = 'n' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1343' name = 'setNumberOfOutputs.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.393'
              name = 'PointerControlBlock' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.394'
              name = 'setInputLink' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1348' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1349' name = 'pInput' isSpecification = 'false' kind = 'inout' type = 'G.41'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.41'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1350' name = 'setInputLink.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.395'
              name = 'setOutputLink' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1354' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1355' name = 'pOutput' isSpecification = 'false' kind = 'inout' type = 'G.41'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.41'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1356' name = 'setOutputLink.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.396'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1358' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.90'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.161'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.151'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
     </UML:Namespace.ownedElement>
    </UML:Package>
    <UML:Package xmi.id = 'S.398'
          name = 'Event' visibility = 'package' isSpecification = 'false'
          isAbstract = 'false'>
     <UML:Namespace.ownedElement>
      <UML:Class xmi.id = 'S.405'
            name = 'DC_Event' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.406'
              name = 'timeStamp' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.52'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.407'
              name = 'evtType' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.91'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.408'
              name = 'DC_Event' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.409'
              name = 'getTimeStamp' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1369' name = 'getTimeStamp.Return' isSpecification = 'false' kind = 'return' type = 'G.52'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.52'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.410'
              name = 'getEventType' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1372' name = 'getEventType.Return' isSpecification = 'false' kind = 'return' type = 'G.91'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.91'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.411'
              name = 'setTimeStamp' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1375' name = 'timeStamp' isSpecification = 'false' kind = 'inout' type = 'G.52'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.52'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1376' name = 'setTimeStamp.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.412'
              name = 'setEventType' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1379' name = 'eventType' isSpecification = 'false' kind = 'inout' type = 'G.91'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.91'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1380' name = 'setEventType.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Class xmi.id = 'S.403'
            name = 'DC_EventRepository' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.413'
              name = 'globalEnabled' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.414'
              name = 'selectiveEnabled' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.92'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.415'
              name = 'pObsClock' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.93'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.416'
              name = 'counter' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.417'
              name = 'listSize' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.418'
              name = 'iterationCounter' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.419'
              name = 'pList' visibility = 'protected' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.94'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.420'
              name = 'eventPointer' visibility = 'protected' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.421'
              name = 'createEventDataStructure' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1390' name = 'createEventDataStructure.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.422'
              name = 'DC_EventRepository' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.423'
              name = 'setRepositorySize' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1396' name = 'repositorySize' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1397' name = 'setRepositorySize.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.424'
              name = 'create' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1402' name = 'originator' isSpecification = 'false' kind = 'inout' type = 'G.11'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.11'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1403' name = 'eventId' isSpecification = 'false' kind = 'inout' type = 'G.91'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.91'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1404' name = 'create.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.425'
              name = 'setEnabled' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1407' name = 'isEnabled' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1408' name = 'setEnabled.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.426'
              name = 'setEnabled' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1412' name = 'eventType' isSpecification = 'false' kind = 'inout' type = 'G.91'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.91'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1413' name = 'isEnabled' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1414' name = 'setEnabled.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.427'
              name = 'isEnabled' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1417' name = 'isEnabled.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.428'
              name = 'isEnabled' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1420' name = 'eventType' isSpecification = 'false' kind = 'inout' type = 'G.91'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.91'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1421' name = 'isEnabled.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.429'
              name = 'latest' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1426' name = 'latest.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.430'
              name = 'previous' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1429' name = 'previous.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.431'
              name = 'isIterationFinished' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1433' name = 'isIterationFinished.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.432'
              name = 'getEventType' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1437' name = 'getEventType.Return' isSpecification = 'false' kind = 'return' type = 'G.91'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.91'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.433'
              name = 'getTimeStamp' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1441' name = 'getTimeStamp.Return' isSpecification = 'false' kind = 'return' type = 'G.52'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.52'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.434'
              name = 'getCounter' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1444' name = 'getCounter.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.435'
              name = 'getRepositorySize' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1447' name = 'getRepositorySize.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.436'
              name = 'setObsClock' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1450' name = 'pObsClock' isSpecification = 'false' kind = 'inout' type = 'G.93'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.93'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1451' name = 'setObsClock.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.437'
              name = 'getObsClock' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1455' name = 'getObsClock.Return' isSpecification = 'false' kind = 'return' type = 'G.93'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.93'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.438'
              name = 'reset' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1457' name = 'reset.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.439'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1460' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.95'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.403'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.15'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.404'
            name = 'DC_PUSEventRepository' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.440'
              name = 'pTmManager' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.96'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.441'
              name = 'DC_PUSEventRepository' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.442'
              name = 'create' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1474' name = 'originator' isSpecification = 'false' kind = 'inout' type = 'G.97'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.97'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1475' name = 'eventId' isSpecification = 'false' kind = 'inout' type = 'G.91'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.91'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1476' name = 'create.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.443'
              name = 'create' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1480' name = 'originator' isSpecification = 'false' kind = 'inout' type = 'G.98'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.98'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1481' name = 'eventId' isSpecification = 'false' kind = 'inout' type = 'G.91'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.91'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1482' name = 'create.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.444'
              name = 'create' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1486' name = 'originator' isSpecification = 'false' kind = 'inout' type = 'G.11'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.11'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1487' name = 'eventId' isSpecification = 'false' kind = 'inout' type = 'G.91'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.91'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1488' name = 'create.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.445'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1491' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.446'
              name = 'setTelemetryManager' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1494' name = 'pTmManager' isSpecification = 'false' kind = 'inout' type = 'G.96'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.96'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1495' name = 'setTelemetryManager.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.447'
              name = 'getTelemetryManager' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1499' name = 'getTelemetryManager.Return' isSpecification = 'false' kind = 'return' type = 'G.96'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.96'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.99'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.404'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.403'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
     </UML:Namespace.ownedElement>
    </UML:Package>
    <UML:Package xmi.id = 'S.448'
          name = 'FDIR' visibility = 'package' isSpecification = 'false'
          isAbstract = 'false'>
     <UML:Namespace.ownedElement>
      <!--From Class MonitoringProfile to Class MonitoringProfile-->
      <UML:Association xmi.id = 'G.100'
            name = '{MonitoringProfile-MonitoringProfile}' visibility = 'private' isSpecification = 'false'
            isAbstract = 'false'>
       <UML:Association.connection>
        <UML:AssociationEnd xmi.id = 'G.103' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.qualifier>
          <UML:Attribute xmi.idref = 'S.467'/>
         </UML:AssociationEnd.qualifier>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity/>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.453'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
        <UML:AssociationEnd xmi.id = 'G.104' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '0' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.453'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
       </UML:Association.connection>
      </UML:Association>
      <!--From Class RecoveryAction to Class RecoveryAction-->
      <UML:Association xmi.id = 'G.101'
            name = '{RecoveryAction-RecoveryAction}' visibility = 'private' isSpecification = 'false'
            isAbstract = 'false'>
       <UML:Association.connection>
        <UML:AssociationEnd xmi.id = 'G.105' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.qualifier>
          <UML:Attribute xmi.idref = 'S.468'/>
         </UML:AssociationEnd.qualifier>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity/>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.457'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
        <UML:AssociationEnd xmi.id = 'G.106' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '0' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.457'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
       </UML:Association.connection>
      </UML:Association>
      <!--From Class DC_FdirCheck to Class RecoveryAction-->
      <UML:Association xmi.id = 'G.102'
            name = '{DC_FdirCheck-RecoveryAction}' visibility = 'private' isSpecification = 'false'
            isAbstract = 'false'>
       <UML:Association.connection>
        <UML:AssociationEnd xmi.id = 'G.107' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.qualifier>
          <UML:Attribute xmi.idref = 'S.469'/>
         </UML:AssociationEnd.qualifier>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity/>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.465'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
        <UML:AssociationEnd xmi.id = 'G.108' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '0' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.457'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
       </UML:Association.connection>
      </UML:Association>
      <UML:Class xmi.id = 'S.459'
            name = 'DC_DeltaProfile' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.470'
              name = 'deltaThreshold' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.42'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.471'
              name = 'previousValue' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.42'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.472'
              name = 'notFirst' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.473'
              name = 'doProfileCheck' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1528' name = 'value' isSpecification = 'false' kind = 'inout' type = 'G.49'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.49'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1529' name = 'doProfileCheck.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.474'
              name = 'doProfileCheck' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1535' name = 'value' isSpecification = 'false' kind = 'inout' type = 'G.42'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.42'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1536' name = 'doProfileCheck.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.475'
              name = 'DC_DeltaProfile' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.476'
              name = 'setDeltaThreshold' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1541' name = 'deltaThreshold' isSpecification = 'false' kind = 'inout' type = 'G.42'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.42'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1542' name = 'setDeltaThreshold.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.477'
              name = 'getDeltaThreshold' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1546' name = 'getDeltaThreshold.Return' isSpecification = 'false' kind = 'return' type = 'G.42'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.42'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.478'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1549' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.479'
              name = 'reset' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1551' name = 'reset.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.109'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.459'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.453'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.454'
            name = 'DC_DummyRecoveryAction' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.480'
              name = 'actionCanExecute' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.481'
              name = 'actionOutcome' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.17'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.482'
              name = 'doRecoveryAction' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1559' name = 'doRecoveryAction.Return' isSpecification = 'false' kind = 'return' type = 'G.17'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.17'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.483'
              name = 'canExecute' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1564' name = 'canExecute.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.484'
              name = 'DC_DummyRecoveryAction' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.485'
              name = 'setActionOutcome' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1569' name = 'nextOutcome' isSpecification = 'false' kind = 'inout' type = 'G.17'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.17'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1570' name = 'setActionOutcome.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.486'
              name = 'setExecutionFlag' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1574' name = 'canExecute' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1575' name = 'setExecutionFlag.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.110'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.454'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.457'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.465'
            name = 'DC_FdirCheck' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.469'
              name = 'pRecoveryAction' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.54'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.487'
              name = 'pFdiCheck' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.30'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.488'
              name = 'doAction' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1584' name = 'doAction.Return' isSpecification = 'false' kind = 'return' type = 'G.17'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.17'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.489'
              name = 'DC_FdirCheck' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.490'
              name = 'setFdiCheck' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1589' name = 'pFdiCheck' isSpecification = 'false' kind = 'inout' type = 'G.30'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.30'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1590' name = 'setFdiCheck.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.491'
              name = 'getFdiCheck' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1594' name = 'getFdiCheck.Return' isSpecification = 'false' kind = 'return' type = 'G.30'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.30'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.492'
              name = 'setRecoveryAction' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1598' name = 'pRecoveryAction' isSpecification = 'false' kind = 'inout' type = 'G.54'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.54'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1599' name = 'setRecoveryAction.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.493'
              name = 'getRecoveryAction' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1603' name = 'getRecoveryAction.Return' isSpecification = 'false' kind = 'return' type = 'G.54'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.54'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.494'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1606' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.111'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.465'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.13'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.460'
            name = 'DC_ForbiddenValueProfile' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.495'
              name = 'forbiddenValue' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.49'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.496'
              name = 'doProfileCheck' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1613' name = 'value' isSpecification = 'false' kind = 'inout' type = 'G.49'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.49'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1614' name = 'doProfileCheck.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.497'
              name = 'doProfileCheck' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1618' name = 'value' isSpecification = 'false' kind = 'inout' type = 'G.42'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.42'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1619' name = 'doProfileCheck.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.498'
              name = 'DC_ForbiddenValueProfile' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.499'
              name = 'setForbiddenValue' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1624' name = 'forbiddenValue' isSpecification = 'false' kind = 'inout' type = 'G.49'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.49'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1625' name = 'setForbiddenValue.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.500'
              name = 'getForbiddenValue' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1629' name = 'getForbiddenValue.Return' isSpecification = 'false' kind = 'return' type = 'G.49'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.49'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.112'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.460'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.453'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.455'
            name = 'DC_InRangeProfile' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.501'
              name = 'doProfileCheck' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1636' name = 'value' isSpecification = 'false' kind = 'inout' type = 'G.42'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.42'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1637' name = 'doProfileCheck.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.502'
              name = 'DC_InRangeProfile' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.113'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.455'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.464'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.456'
            name = 'DC_NullProfile' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.503'
              name = 'doProfileCheck' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1645' name = 'value' isSpecification = 'false' kind = 'inout' type = 'G.49'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.49'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1646' name = 'doProfileCheck.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.504'
              name = 'doProfileCheck' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1650' name = 'value' isSpecification = 'false' kind = 'inout' type = 'G.42'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.42'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1651' name = 'doProfileCheck.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.505'
              name = 'DC_NullProfile' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.114'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.456'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.453'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.463'
            name = 'DC_NullRecoveryAction' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.506'
              name = 'DC_NullRecoveryAction' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.507'
              name = 'doRecoveryAction' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1660' name = 'doRecoveryAction.Return' isSpecification = 'false' kind = 'return' type = 'G.17'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.17'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.115'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.463'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.457'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.466'
            name = 'DC_OutOfRangeProfile' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.508'
              name = 'doProfileCheck' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1667' name = 'value' isSpecification = 'false' kind = 'inout' type = 'G.42'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.42'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1668' name = 'doProfileCheck.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.509'
              name = 'DC_OutOfRangeProfile' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.116'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.466'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.464'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.461'
            name = 'DC_ProfileList' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.510'
              name = 'pList' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.53'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.511'
              name = 'listSize' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.512'
              name = 'doProfileCheck' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1677' name = 'value' isSpecification = 'false' kind = 'inout' type = 'G.49'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.49'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1678' name = 'doProfileCheck.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.513'
              name = 'doProfileCheck' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1682' name = 'value' isSpecification = 'false' kind = 'inout' type = 'G.42'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.42'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1683' name = 'doProfileCheck.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.514'
              name = 'DC_ProfileList' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.515'
              name = 'setListSize' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1687' name = 'listSize' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1688' name = 'setListSize.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.516'
              name = 'getListSize' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1692' name = 'getListSize.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.517'
              name = 'setMonitoringProfile' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1697' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1698' name = 'item' isSpecification = 'false' kind = 'inout' type = 'G.53'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.53'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1699' name = 'setMonitoringProfile.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.518'
              name = 'getMonitoringProfile' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1703' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1704' name = 'getMonitoringProfile.Return' isSpecification = 'false' kind = 'return' type = 'G.53'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.53'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.519'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1707' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.117'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.461'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.453'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.458'
            name = 'DC_SimpleChangeProfile' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.520'
              name = 'referenceValue' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.49'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.521'
              name = 'doProfileCheck' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1714' name = 'value' isSpecification = 'false' kind = 'inout' type = 'G.49'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.49'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1715' name = 'doProfileCheck.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.522'
              name = 'doProfileCheck' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1719' name = 'value' isSpecification = 'false' kind = 'inout' type = 'G.42'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.42'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1720' name = 'doProfileCheck.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.523'
              name = 'DC_SimpleChangeProfile' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.524'
              name = 'setReferenceValue' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1725' name = 'refValue' isSpecification = 'false' kind = 'inout' type = 'G.49'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.49'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1726' name = 'setReferenceValue.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.525'
              name = 'getReferenceValue' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1730' name = 'getReferenceValue.Return' isSpecification = 'false' kind = 'return' type = 'G.49'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.49'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.118'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.458'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.453'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.462'
            name = 'DC_StuckDataProfile' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.526'
              name = 'stuckThreshold' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.527'
              name = 'counter' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.528'
              name = 'previousValue' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.49'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.529'
              name = 'doProfileCheck' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1739' name = 'value' isSpecification = 'false' kind = 'inout' type = 'G.49'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.49'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1740' name = 'doProfileCheck.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.530'
              name = 'doProfileCheck' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1744' name = 'value' isSpecification = 'false' kind = 'inout' type = 'G.42'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.42'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1745' name = 'doProfileCheck.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.531'
              name = 'DC_StuckDataProfile' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.532'
              name = 'setStuckThreshold' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1750' name = 'stuckThreshold' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1751' name = 'setStuckThreshold.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.533'
              name = 'getStuckThreshold' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1755' name = 'getStuckThreshold.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.534'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1758' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.535'
              name = 'reset' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1760' name = 'reset.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.119'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.462'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.453'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.453'
            name = 'MonitoringProfile' visibility = 'package' isSpecification = 'false'
            isAbstract = 'true' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.536'
              name = 'enableStatus' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.467'
              name = 'pNext' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.53'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.537'
              name = 'doProfileCheck' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1772' name = 'value' isSpecification = 'false' kind = 'inout' type = 'G.42'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.42'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1773' name = 'doProfileCheck.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.538'
              name = 'doProfileCheck' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1776' name = 'value' isSpecification = 'false' kind = 'inout' type = 'G.49'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.49'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1777' name = 'doProfileCheck.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.539'
              name = 'MonitoringProfile' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.540'
              name = 'deviatesFromProfile' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1782' name = 'value' isSpecification = 'false' kind = 'inout' type = 'G.42'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.42'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1783' name = 'deviatesFromProfile.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.541'
              name = 'deviatesFromProfile' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1786' name = 'value' isSpecification = 'false' kind = 'inout' type = 'G.49'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.49'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1787' name = 'deviatesFromProfile.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.542'
              name = 'setEnabled' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1790' name = 'enableStatus' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1791' name = 'setEnabled.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.543'
              name = 'isEnabled' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1794' name = 'isEnabled.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.544'
              name = 'setNextMonitoringProfile' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1798' name = 'pNextMonitoringProfile' isSpecification = 'false' kind = 'inout' type = 'G.53'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.53'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1799' name = 'setNextMonitoringProfile.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.545'
              name = 'getNextMonitoringProfile' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1803' name = 'getNextMonitoringProfile.Return' isSpecification = 'false' kind = 'return' type = 'G.53'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.53'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.546'
              name = 'reset' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1805' name = 'reset.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.120'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.453'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.15'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.464'
            name = 'RangeProfile' visibility = 'package' isSpecification = 'false'
            isAbstract = 'true' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.547'
              name = 'lowerBound' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.42'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.548'
              name = 'upperBound' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.42'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.549'
              name = 'doProfileCheck' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1811' name = 'value' isSpecification = 'false' kind = 'inout' type = 'G.49'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.49'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1812' name = 'doProfileCheck.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.550'
              name = 'doProfileCheck' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1814' name = 'value' isSpecification = 'false' kind = 'inout' type = 'G.42'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.42'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1815' name = 'doProfileCheck.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.551'
              name = 'RangeProfile' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.552'
              name = 'setLowerBound' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1819' name = 'lowerBound' isSpecification = 'false' kind = 'inout' type = 'G.42'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.42'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1820' name = 'setLowerBound.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.553'
              name = 'setUpperBound' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1823' name = 'upperBound' isSpecification = 'false' kind = 'inout' type = 'G.42'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.42'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1824' name = 'setUpperBound.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.554'
              name = 'getLowerBound' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1827' name = 'getLowerBound.Return' isSpecification = 'false' kind = 'return' type = 'G.42'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.42'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.555'
              name = 'getUpperBound' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1830' name = 'getUpperBound.Return' isSpecification = 'false' kind = 'return' type = 'G.42'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.42'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.556'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1833' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.121'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.464'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.453'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.457'
            name = 'RecoveryAction' visibility = 'package' isSpecification = 'false'
            isAbstract = 'true' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.468'
              name = 'pNextRecoveryAction' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.54'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.557'
              name = 'RecoveryAction' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.558'
              name = 'setNextRecoveryAction' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1842' name = 'pNextRecoveryAction' isSpecification = 'false' kind = 'inout' type = 'G.54'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.54'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1843' name = 'setNextRecoveryAction.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.559'
              name = 'getNextRecoveryAction' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1847' name = 'getNextRecoveryAction.Return' isSpecification = 'false' kind = 'return' type = 'G.54'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.54'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.560'
              name = 'doAction' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1852' name = 'doAction.Return' isSpecification = 'false' kind = 'return' type = 'G.17'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.17'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.561'
              name = 'canExecute' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1856' name = 'canExecute.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.562'
              name = 'doRecoveryAction' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1860' name = 'doRecoveryAction.Return' isSpecification = 'false' kind = 'return' type = 'G.17'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.17'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.122'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.457'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.13'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
     </UML:Namespace.ownedElement>
    </UML:Package>
    <UML:Package xmi.id = 'S.563'
          name = 'FSM' visibility = 'package' isSpecification = 'false'
          isAbstract = 'false'>
     <UML:Namespace.ownedElement>
      <!--From Class CC_FSM to Class FsmState-->
      <UML:Association xmi.id = 'G.123'
            name = '{CC_FSM-FsmState}' visibility = 'private' isSpecification = 'false'
            isAbstract = 'false'>
       <UML:Association.connection>
        <UML:AssociationEnd xmi.id = 'G.127' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.qualifier>
          <UML:Attribute xmi.idref = 'S.578'/>
         </UML:AssociationEnd.qualifier>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity/>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.568'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
        <UML:AssociationEnd xmi.id = 'G.128' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '0' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.576'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
       </UML:Association.connection>
      </UML:Association>
      <!--From Class DC_FsmEvent to Class CC_FSM-->
      <UML:Association xmi.id = 'G.124'
            name = '{DC_FsmEvent-CC_FSM}' visibility = 'private' isSpecification = 'false'
            isAbstract = 'false'>
       <UML:Association.connection>
        <UML:AssociationEnd xmi.id = 'G.129' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.qualifier>
          <UML:Attribute xmi.idref = 'S.579'/>
         </UML:AssociationEnd.qualifier>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity/>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.571'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
        <UML:AssociationEnd xmi.id = 'G.130' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '0' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.568'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
       </UML:Association.connection>
      </UML:Association>
      <!--From Class DC_NestedFsmActivator to Class CC_FSM-->
      <UML:Association xmi.id = 'G.125'
            name = '{DC_NestedFsmActivator-CC_FSM}' visibility = 'private' isSpecification = 'false'
            isAbstract = 'false'>
       <UML:Association.connection>
        <UML:AssociationEnd xmi.id = 'G.131' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.qualifier>
          <UML:Attribute xmi.idref = 'S.580'/>
         </UML:AssociationEnd.qualifier>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity/>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.573'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
        <UML:AssociationEnd xmi.id = 'G.132' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '0' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.568'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
       </UML:Association.connection>
      </UML:Association>
      <!--From Class FsmState to Class FsmState-->
      <UML:Association xmi.id = 'G.126'
            name = '{FsmState-FsmState}' visibility = 'private' isSpecification = 'false'
            isAbstract = 'false'>
       <UML:Association.connection>
        <UML:AssociationEnd xmi.id = 'G.133' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.qualifier>
          <UML:Attribute xmi.idref = 'S.581'/>
         </UML:AssociationEnd.qualifier>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity/>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.576'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
        <UML:AssociationEnd xmi.id = 'G.134' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '0' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.576'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
       </UML:Association.connection>
      </UML:Association>
      <UML:Class xmi.id = 'S.568'
            name = 'CC_FSM' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.582'
              name = 'numberOfStates' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.135'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.583'
              name = 'allTransitionEnabled' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.584'
              name = 'transitionEnabled' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.20'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.585'
              name = 'pState' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.136'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.578'
              name = 'pCurrentState' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.136'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.586'
              name = 'currentState' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.135'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.587'
              name = 'requestedTargetState' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.135'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.588'
              name = 'pNextState' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.137'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.589'
              name = 'tryTransition' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1891' name = 'targetState' isSpecification = 'false' kind = 'inout' type = 'G.135'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.135'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1892' name = 'tryTransition.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.590'
              name = 'CC_FSM' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.591'
              name = 'reset' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1897' name = 'reset.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.592'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1899' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.593'
              name = 'setNumberOfStates' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1902' name = 'numberOfStates' isSpecification = 'false' kind = 'inout' type = 'G.135'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.135'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1903' name = 'setNumberOfStates.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.594'
              name = 'getNumberOfStates' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1906' name = 'getNumberOfStates.Return' isSpecification = 'false' kind = 'return' type = 'G.135'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.135'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.595'
              name = 'setState' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1911' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.135'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.135'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1912' name = 'state' isSpecification = 'false' kind = 'inout' type = 'G.136'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.136'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1913' name = 'setState.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.596'
              name = 'getState' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1918' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.135'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.135'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1919' name = 'getState.Return' isSpecification = 'false' kind = 'return' type = 'G.136'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.136'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.597'
              name = 'getCurrentState' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1922' name = 'getCurrentState.Return' isSpecification = 'false' kind = 'return' type = 'G.135'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.135'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.598'
              name = 'setTransitionEnableStatus' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1926' name = 'enabled' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1927' name = 'setTransitionEnableStatus.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.599'
              name = 'setTransitionEnableStatus' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1932' name = 'toState' isSpecification = 'false' kind = 'inout' type = 'G.135'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.135'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1933' name = 'enabled' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1934' name = 'setTransitionEnableStatus.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.600'
              name = 'isTransitionEnabled' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1938' name = 'isTransitionEnabled.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.601'
              name = 'isTransitionEnabled' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1943' name = 'toState' isSpecification = 'false' kind = 'inout' type = 'G.135'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.135'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1944' name = 'isTransitionEnabled.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.602'
              name = 'makeTransitionRequest' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1948' name = 'targetState' isSpecification = 'false' kind = 'inout' type = 'G.135'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.135'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1949' name = 'makeTransitionRequest.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.603'
              name = 'activate' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1952' name = 'activate.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.138'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.568'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.15'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.572'
            name = 'DC_DummyConfigurableFsmState' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.604'
              name = 'activationCounter' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.605'
              name = 'initializationCounter' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.606'
              name = 'exitCounter' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.607'
              name = 'initializationCheck' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.608'
              name = 'exitCheck' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.609'
              name = 'terminationCheck' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.610'
              name = 'DC_DummyConfigurableFsmState' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.611'
              name = 'doContinue' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1960' name = 'doContinue.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.612'
              name = 'canEnter' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1965' name = 'canEnter.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.613'
              name = 'doInit' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1968' name = 'doInit.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.614'
              name = 'canExit' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1973' name = 'canExit.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.615'
              name = 'doExit' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1976' name = 'doExit.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.616'
              name = 'isFinished' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1981' name = 'isFinished.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.617'
              name = 'getActivationCounter' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1984' name = 'getActivationCounter.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.618'
              name = 'getInitializationCounter' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1987' name = 'getInitializationCounter.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.619'
              name = 'getExitCounter' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1990' name = 'getExitCounter.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.620'
              name = 'setInitializationCheckValue' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1993' name = 'value' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1994' name = 'setInitializationCheckValue.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.621'
              name = 'setExitCheckValue' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.1997' name = 'value' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.1998' name = 'setExitCheckValue.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.622'
              name = 'setTerminationCheckValue' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2001' name = 'value' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2002' name = 'setTerminationCheckValue.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.139'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.572'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.576'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.577'
            name = 'DC_DummyFsmState' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.623'
              name = 'DC_DummyFsmState' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.624'
              name = 'doContinue' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2010' name = 'doContinue.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.140'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.577'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.576'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.575'
            name = 'DC_FromFsmEvent' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.625'
              name = 'startingState' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.135'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.626'
              name = 'DC_FromFsmEvent' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.627'
              name = 'setStartingState' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2017' name = 'startingState' isSpecification = 'false' kind = 'inout' type = 'G.135'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.135'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2018' name = 'setStartingState.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.628'
              name = 'getStartingState' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2021' name = 'getStartingState.Return' isSpecification = 'false' kind = 'return' type = 'G.135'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.135'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.629'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2023' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.630'
              name = 'doAction' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2026' name = 'doAction.Return' isSpecification = 'false' kind = 'return' type = 'G.17'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.17'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.141'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.575'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.571'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.571'
            name = 'DC_FsmEvent' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.579'
              name = 'pTargetFsm' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.142'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.631'
              name = 'targetState' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.135'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.632'
              name = 'DC_FsmEvent' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.633'
              name = 'setTargetFsm' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2034' name = 'pTargetFsm' isSpecification = 'false' kind = 'inout' type = 'G.142'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.142'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2035' name = 'setTargetFsm.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.634'
              name = 'setTargetState' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2039' name = 'targetState' isSpecification = 'false' kind = 'inout' type = 'G.135'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.135'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2040' name = 'setTargetState.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.635'
              name = 'getTargetFsm' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2043' name = 'getTargetFsm.Return' isSpecification = 'false' kind = 'return' type = 'G.142'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.142'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.636'
              name = 'getTargetState' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2047' name = 'getTargetState.Return' isSpecification = 'false' kind = 'return' type = 'G.135'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.135'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.637'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2049' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.638'
              name = 'doAction' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2053' name = 'doAction.Return' isSpecification = 'false' kind = 'return' type = 'G.17'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.17'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.143'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.571'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.13'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.573'
            name = 'DC_NestedFsmActivator' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.580'
              name = 'pTargetFsm' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.142'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.639'
              name = 'DC_NestedFsmActivator' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.640'
              name = 'setTargetFsm' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2061' name = 'pTargetFsm' isSpecification = 'false' kind = 'inout' type = 'G.142'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.142'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2062' name = 'setTargetFsm.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.641'
              name = 'getTargetFsm' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2065' name = 'getTargetFsm.Return' isSpecification = 'false' kind = 'return' type = 'G.142'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.142'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.642'
              name = 'doContinue' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2068' name = 'doContinue.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.643'
              name = 'doInit' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2071' name = 'doInit.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.644'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2074' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.144'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.573'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.576'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.570'
            name = 'DC_NestedFsmActivatorWithEndState' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.645'
              name = 'targetState' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.135'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.646'
              name = 'DC_NestedFsmActivatorWithEndState' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.647'
              name = 'setTargetState' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2083' name = 'targetState' isSpecification = 'false' kind = 'inout' type = 'G.135'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.135'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2084' name = 'setTargetState.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.648'
              name = 'getTargetState' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2087' name = 'getTargetState.Return' isSpecification = 'false' kind = 'return' type = 'G.135'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.135'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.649'
              name = 'isFinished' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2091' name = 'isFinished.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.650'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2094' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.145'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.570'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.573'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.569'
            name = 'DC_NestedFsmActivatorWithExitCheck' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.651'
              name = 'targetState' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.135'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.652'
              name = 'DC_NestedFsmActivatorWithExitCheck' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.653'
              name = 'setTargetState' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2103' name = 'targetState' isSpecification = 'false' kind = 'inout' type = 'G.135'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.135'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2104' name = 'setTargetState.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.654'
              name = 'getTargetState' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2107' name = 'getTargetState.Return' isSpecification = 'false' kind = 'return' type = 'G.135'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.135'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.655'
              name = 'canExit' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2111' name = 'canExit.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.656'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2114' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.146'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.569'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.573'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.574'
            name = 'DC_UnstableFsmState' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.657'
              name = 'DC_UnstableFsmState' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.658'
              name = 'doContinue' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2122' name = 'doContinue.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.659'
              name = 'isFinished' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2126' name = 'isFinished.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.147'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.574'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.576'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.576'
            name = 'FsmState' visibility = 'package' isSpecification = 'false'
            isAbstract = 'true' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.581'
              name = 'pNextState' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.136'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.660'
              name = 'FsmState' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.661'
              name = 'canEnter' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2136' name = 'canEnter.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.662'
              name = 'doInit' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2139' name = 'doInit.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.663'
              name = 'canExit' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2143' name = 'canExit.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.664'
              name = 'doContinue' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2146' name = 'doContinue.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.665'
              name = 'doExit' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2149' name = 'doExit.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.666'
              name = 'isFinished' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2153' name = 'isFinished.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.667'
              name = 'setNextState' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2156' name = 'pNextState' isSpecification = 'false' kind = 'inout' type = 'G.136'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.136'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2157' name = 'setNextState.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.668'
              name = 'getNextState' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2160' name = 'getNextState.Return' isSpecification = 'false' kind = 'return' type = 'G.136'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.136'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.148'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.576'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.15'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
     </UML:Namespace.ownedElement>
    </UML:Package>
    <UML:Package xmi.id = 'S.669'
          name = 'GeneralInclude' visibility = 'package' isSpecification = 'false'
          isAbstract = 'false'>
     <UML:Namespace.ownedElement>
     </UML:Namespace.ownedElement>
    </UML:Package>
    <UML:Package xmi.id = 'S.674'
          name = 'Manoeuvre' visibility = 'package' isSpecification = 'false'
          isAbstract = 'false'>
     <UML:Namespace.ownedElement>
      <!--From Class CC_ManoeuvreFactory to Class CC_ManoeuvreFactory-->
      <UML:Association xmi.id = 'G.149'
            name = '{CC_ManoeuvreFactory-CC_ManoeuvreFactory}' visibility = 'private' isSpecification = 'false'
            isAbstract = 'false'>
       <UML:Association.connection>
        <UML:AssociationEnd xmi.id = 'G.152' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.qualifier>
          <UML:Attribute xmi.idref = 'S.687'/>
         </UML:AssociationEnd.qualifier>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity/>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.680'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
        <UML:AssociationEnd xmi.id = 'G.153' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '0' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.680'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
       </UML:Association.connection>
      </UML:Association>
      <!--From Class DC_ManoeuvrePunctualAction to Class CC_ManoeuvreManager-->
      <UML:Association xmi.id = 'G.150'
            name = '{DC_ManoeuvrePunctualAction-CC_ManoeuvreManager}' visibility = 'private' isSpecification = 'false'
            isAbstract = 'false'>
       <UML:Association.connection>
        <UML:AssociationEnd xmi.id = 'G.154' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.qualifier>
          <UML:Attribute xmi.idref = 'S.688'/>
         </UML:AssociationEnd.qualifier>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity/>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.685'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
        <UML:AssociationEnd xmi.id = 'G.155' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '0' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.682'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
       </UML:Association.connection>
      </UML:Association>
      <!--From Class DC_ManoeuvrePunctualAction to Class Manoeuvre-->
      <UML:Association xmi.id = 'G.151'
            name = '{DC_ManoeuvrePunctualAction-Manoeuvre}' visibility = 'private' isSpecification = 'false'
            isAbstract = 'false'>
       <UML:Association.connection>
        <UML:AssociationEnd xmi.id = 'G.156' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.qualifier>
          <UML:Attribute xmi.idref = 'S.689'/>
         </UML:AssociationEnd.qualifier>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity/>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.685'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
        <UML:AssociationEnd xmi.id = 'G.157' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '0' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.684'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
       </UML:Association.connection>
      </UML:Association>
      <UML:Class xmi.id = 'S.680'
            name = 'CC_ManoeuvreFactory' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.687'
              name = 'pInstance' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.158'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.690'
              name = 'sizeDummyConfigurableManoeuvre' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.691'
              name = 'poolDummyConfigurableManoeuvre' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.159'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.692'
              name = 'sizeDummyManoeuvre' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.693'
              name = 'poolDummyManoeuvre' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.160'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.694'
              name = 'sizeTestPUSConfigurableManoeuvre' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.695'
              name = 'poolTestPUSConfigurableManoeuvre' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.161'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.696'
              name = 'CC_ManoeuvreFactory' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.697'
              name = 'getInstance' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'classifier'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2185' name = 'getInstance.Return' isSpecification = 'false' kind = 'return' type = 'G.158'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.158'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.698'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2188' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.699'
              name = 'setManoeuvre' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2192' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2193' name = 'pItem' isSpecification = 'false' kind = 'inout' type = 'G.159'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.159'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2194' name = 'setManoeuvre.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.700'
              name = 'getNumberDummyConfigurableManoeuvre' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2197' name = 'getNumberDummyConfigurableManoeuvre.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.701'
              name = 'getCapacityDummyConfigurableManoeuvre' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2200' name = 'getCapacityDummyConfigurableManoeuvre.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.702'
              name = 'allocateDummyConfigurableManoeuvre' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2203' name = 'allocateDummyConfigurableManoeuvre.Return' isSpecification = 'false' kind = 'return' type = 'G.159'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.159'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.703'
              name = 'isFreeDummyConfigurableManoeuvre' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2207' name = 'isFreeDummyConfigurableManoeuvre.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.704'
              name = 'setManoeuvre' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2211' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2212' name = 'pItem' isSpecification = 'false' kind = 'inout' type = 'G.160'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.160'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2213' name = 'setManoeuvre.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.705'
              name = 'getNumberDummyManoeuvre' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2216' name = 'getNumberDummyManoeuvre.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.706'
              name = 'getCapacityDummyManoeuvre' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2219' name = 'getCapacityDummyManoeuvre.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.707'
              name = 'allocateDummyManoeuvre' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2222' name = 'allocateDummyManoeuvre.Return' isSpecification = 'false' kind = 'return' type = 'G.160'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.160'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.708'
              name = 'isFreeDummyManoeuvre' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2226' name = 'isFreeDummyManoeuvre.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.709'
              name = 'setManoeuvre' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2230' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2231' name = 'pItem' isSpecification = 'false' kind = 'inout' type = 'G.161'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.161'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2232' name = 'setManoeuvre.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.710'
              name = 'getNumberTestPUSConfigurableManoeuvre' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2235' name = 'getNumberTestPUSConfigurableManoeuvre.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.711'
              name = 'getCapacityTestPUSConfigurableManoeuvre' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2238' name = 'getCapacityTestPUSConfigurableManoeuvre.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.712'
              name = 'allocateTestPUSConfigurableManoeuvre' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2241' name = 'allocateTestPUSConfigurableManoeuvre.Return' isSpecification = 'false' kind = 'return' type = 'G.161'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.161'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.713'
              name = 'isFreeTestPUSConfigurableManoeuvre' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2245' name = 'isFreeTestPUSConfigurableManoeuvre.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.162'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.680'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.15'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.682'
            name = 'CC_ManoeuvreManager' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.714'
              name = 'pManList' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.163'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.715'
              name = 'manListSize' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.716'
              name = 'manCounter' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.717'
              name = 'unload' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2255' name = 'pManoeuvre' isSpecification = 'false' kind = 'inout' type = 'G.163'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.163'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2256' name = 'unload.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.718'
              name = 'CC_ManoeuvreManager' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.719'
              name = 'reset' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2259' name = 'reset.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.720'
              name = 'setPendingManoeuvreListSize' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2262' name = 'listSize' isSpecification = 'false' kind = 'inout' type = 'G.164'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.164'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2263' name = 'setPendingManoeuvreListSize.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.721'
              name = 'getPendingManoeuvreListSize' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2267' name = 'getPendingManoeuvreListSize.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.722'
              name = 'getPendingManoeuvres' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2271' name = 'getPendingManoeuvres.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.723'
              name = 'load' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2275' name = 'pManoeuvre' isSpecification = 'false' kind = 'inout' type = 'G.163'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.163'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2276' name = 'load.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.724'
              name = 'abort' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2281' name = 'pManoeuvre' isSpecification = 'false' kind = 'inout' type = 'G.163'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.163'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2282' name = 'abort.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.725'
              name = 'activate' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2284' name = 'activate.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.726'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2287' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.165'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.682'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.15'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.681'
            name = 'DC_DummyConfigurableManoeuvre' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.727'
              name = 'initializationActionCounter' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.40'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.728'
              name = 'continuationActionCounter' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.40'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.729'
              name = 'terminationActionCounter' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.40'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.730'
              name = 'startCheck' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.731'
              name = 'continuationCheck' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.732'
              name = 'terminationCheck' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.733'
              name = 'continuationCheckCode' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.166'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.734'
              name = 'doInternalContinue' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2293' name = 'doInternalContinue.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.735'
              name = 'internalTerminate' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2296' name = 'internalTerminate.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.736'
              name = 'DC_DummyConfigurableManoeuvre' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.737'
              name = 'canStart' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2301' name = 'canStart.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.738'
              name = 'initialize' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2303' name = 'initialize.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.739'
              name = 'canContinue' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2307' name = 'canContinue.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.740'
              name = 'isFinished' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2311' name = 'isFinished.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.741'
              name = 'setStartCheckStatus' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2315' name = 'startCheck' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2316' name = 'setStartCheckStatus.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.742'
              name = 'setContinuationCheckStatus' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2320' name = 'continuationCheck' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2321' name = 'setContinuationCheckStatus.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.743'
              name = 'setContinuationCheckCode' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2325' name = 'continuationCheckCode' isSpecification = 'false' kind = 'inout' type = 'G.166'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.166'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2326' name = 'setContinuationCheckCode.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.744'
              name = 'getContinuationCheckCode' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2330' name = 'getContinuationCheckCode.Return' isSpecification = 'false' kind = 'return' type = 'G.166'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.166'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.745'
              name = 'setTerminationCheckStatus' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2334' name = 'terminationCheck' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2335' name = 'setTerminationCheckStatus.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.746'
              name = 'getInitializationActionCounter' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2339' name = 'getInitializationActionCounter.Return' isSpecification = 'false' kind = 'return' type = 'G.40'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.40'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.747'
              name = 'getContinuationActionCounter' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2343' name = 'getContinuationActionCounter.Return' isSpecification = 'false' kind = 'return' type = 'G.40'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.40'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.748'
              name = 'getTerminationActionCounter' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2347' name = 'getTerminationActionCounter.Return' isSpecification = 'false' kind = 'return' type = 'G.40'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.40'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.167'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.681'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.684'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.679'
            name = 'DC_DummyManoeuvre' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.749'
              name = 'doInternalContinue' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2353' name = 'doInternalContinue.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.750'
              name = 'DC_DummyManoeuvre' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.751'
              name = 'isFinished' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2357' name = 'isFinished.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.168'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.679'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.684'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.685'
            name = 'DC_ManoeuvrePunctualAction' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.688'
              name = 'pManoeuvreManager' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.169'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.689'
              name = 'pManoeuvre' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.163'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.752'
              name = 'DC_ManoeuvrePunctualAction' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.753'
              name = 'setManoeuvreManager' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2366' name = 'pManMan' isSpecification = 'false' kind = 'inout' type = 'G.169'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.169'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2367' name = 'setManoeuvreManager.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.754'
              name = 'getManoeuvreManager' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2371' name = 'getManoeuvreManager.Return' isSpecification = 'false' kind = 'return' type = 'G.169'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.169'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.755'
              name = 'setManoeuvre' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2375' name = 'pMan' isSpecification = 'false' kind = 'inout' type = 'G.163'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.163'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2376' name = 'setManoeuvre.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.756'
              name = 'getManoeuvre' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2380' name = 'getManoeuvre.Return' isSpecification = 'false' kind = 'return' type = 'G.163'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.163'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.757'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2383' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.758'
              name = 'doAction' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2388' name = 'doAction.Return' isSpecification = 'false' kind = 'return' type = 'G.17'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.17'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.170'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.685'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.13'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.686'
            name = 'DC_TestPUSConfigurableManoeuvre' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.759'
              name = 'initializationActionCounter' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.40'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.760'
              name = 'continuationActionCounter' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.40'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.761'
              name = 'terminationActionCounter' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.40'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.762'
              name = 'startCheck' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.763'
              name = 'continuationCheck' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.764'
              name = 'terminationCheck' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.765'
              name = 'continuationCheckCode' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.166'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.766'
              name = 'doInternalContinue' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2395' name = 'doInternalContinue.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.767'
              name = 'internalTerminate' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2398' name = 'internalTerminate.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.768'
              name = 'DC_TestPUSConfigurableManoeuvre' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.769'
              name = 'canStart' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2403' name = 'canStart.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.770'
              name = 'initialize' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2405' name = 'initialize.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.771'
              name = 'canContinue' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2409' name = 'canContinue.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.772'
              name = 'isFinished' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2413' name = 'isFinished.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.773'
              name = 'setStartCheckStatus' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2417' name = 'startCheck' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2418' name = 'setStartCheckStatus.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.774'
              name = 'setContinuationCheckStatus' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2422' name = 'continuationCheck' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2423' name = 'setContinuationCheckStatus.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.775'
              name = 'setContinuationCheckCode' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2427' name = 'continuationCheckCode' isSpecification = 'false' kind = 'inout' type = 'G.166'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.166'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2428' name = 'setContinuationCheckCode.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.776'
              name = 'getContinuationCheckCode' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2431' name = 'getContinuationCheckCode.Return' isSpecification = 'false' kind = 'return' type = 'G.166'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.166'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.777'
              name = 'setTerminationCheckStatus' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2435' name = 'terminationCheck' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2436' name = 'setTerminationCheckStatus.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.778'
              name = 'getInitializationActionCounter' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2440' name = 'getInitializationActionCounter.Return' isSpecification = 'false' kind = 'return' type = 'G.40'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.40'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.779'
              name = 'getContinuationActionCounter' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2444' name = 'getContinuationActionCounter.Return' isSpecification = 'false' kind = 'return' type = 'G.40'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.40'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.780'
              name = 'getTerminationActionCounter' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2448' name = 'getTerminationActionCounter.Return' isSpecification = 'false' kind = 'return' type = 'G.40'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.40'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.171'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.686'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.683'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.684'
            name = 'Manoeuvre' visibility = 'package' isSpecification = 'false'
            isAbstract = 'true' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.781'
              name = 'executing' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.782'
              name = 'inUse' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.783'
              name = 'enabled' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.784'
              name = 'suspended' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.785'
              name = 'activationStepCounter' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.786'
              name = 'doInternalContinue' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2457' name = 'doInternalContinue.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.787'
              name = 'internalAbort' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2460' name = 'internalAbort.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.788'
              name = 'internalTerminate' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2463' name = 'internalTerminate.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.789'
              name = 'internalCanStart' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2467' name = 'internalCanStart.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.790'
              name = 'Manoeuvre' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.791'
              name = 'canStart' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2472' name = 'canStart.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.792'
              name = 'initialize' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2476' name = 'initialize.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.793'
              name = 'canContinue' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2481' name = 'canContinue.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.794'
              name = 'getContinuationCheckCode' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2485' name = 'getContinuationCheckCode.Return' isSpecification = 'false' kind = 'return' type = 'G.166'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.166'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.795'
              name = 'doContinue' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2489' name = 'doContinue.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.796'
              name = 'abort' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2495' name = 'abort.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.797'
              name = 'terminate' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2500' name = 'terminate.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.798'
              name = 'isFinished' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2504' name = 'isFinished.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.799'
              name = 'setInUse' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2509' name = 'newInUse' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2510' name = 'setInUse.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.800'
              name = 'isInUse' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2513' name = 'isInUse.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.801'
              name = 'setIsSuspended' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2518' name = 'newIsSuspended' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2519' name = 'setIsSuspended.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.802'
              name = 'isSuspended' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2522' name = 'isSuspended.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.803'
              name = 'isExecuting' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2525' name = 'isExecuting.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.804'
              name = 'setEnabled' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2528' name = 'isEnabled' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2529' name = 'setEnabled.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.805'
              name = 'isEnabled' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2532' name = 'isEnabled.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.806'
              name = 'getActivationStepCounter' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2536' name = 'getActivationStepCounter.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.172'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.684'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.15'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.683'
            name = 'PUSTcManoeuvre' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.807'
              name = 'startAck' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.808'
              name = 'progressAck' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.809'
              name = 'completionAck' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.810'
              name = 'tcId' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.173'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.811'
              name = 'generateProgressEvent' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2545' name = 'generateProgressEvent.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.812'
              name = 'PUSTcManoeuvre' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.813'
              name = 'isStartAckRequired' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2550' name = 'isStartAckRequired.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.814'
              name = 'isProgressAckRequired' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2554' name = 'isProgressAckRequired.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.815'
              name = 'isCompletionAckRequired' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2558' name = 'isCompletionAckRequired.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.816'
              name = 'setStartAckFlag' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2562' name = 'startAckFlag' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2563' name = 'setStartAckFlag.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.817'
              name = 'setCompletionAckFlag' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2567' name = 'completionAckFlag' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2568' name = 'setCompletionAckFlag.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.818'
              name = 'setProgressAckFlag' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2572' name = 'progressAckFlag' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2573' name = 'setProgressAckFlag.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.819'
              name = 'getTelecommandId' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2577' name = 'getTelecommandId.Return' isSpecification = 'false' kind = 'return' type = 'G.173'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.173'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.820'
              name = 'setTelecommandId' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2581' name = 'tcIdentifier' isSpecification = 'false' kind = 'inout' type = 'G.173'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.173'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2582' name = 'setTelecommandId.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.174'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.683'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.684'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
     </UML:Namespace.ownedElement>
    </UML:Package>
    <UML:Package xmi.id = 'S.821'
          name = 'MatlabAutocode' visibility = 'package' isSpecification = 'false'
          isAbstract = 'false'>
     <UML:Namespace.ownedElement>
      <!--==================== structure [Stereotype] ====================-->
      <UML:Stereotype xmi.id = 'XX.2586'
            name = 'structure' visibility = 'public' isSpecification = 'false' icon = ''>
       <UML:Stereotype.baseClass>
        	Class
       </UML:Stereotype.baseClass>
      </UML:Stereotype>
      <UML:Class xmi.id = 'S.826'
            name = '_RT_MODEL_PID_Tag' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false' stereotype = 'XX.2586'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.829'
              name = 'errorStatus' visibility = 'package' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.175'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
       </UML:Classifier.feature>
      </UML:Class>
      <!--==================== structure [Stereotype] ====================-->
      <UML:Stereotype xmi.id = 'XX.2587'
            name = 'structure' visibility = 'public' isSpecification = 'false' icon = ''>
       <UML:Stereotype.baseClass>
        	Class
       </UML:Stereotype.baseClass>
      </UML:Stereotype>
      <UML:Class xmi.id = 'S.828'
            name = '_BlockIO_PID' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false' stereotype = 'XX.2587'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.830'
              name = 'Discrete_Time_Int' visibility = 'package' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.176'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
       </UML:Classifier.feature>
      </UML:Class>
      <!--==================== structure [Stereotype] ====================-->
      <UML:Stereotype xmi.id = 'XX.2588'
            name = 'structure' visibility = 'public' isSpecification = 'false' icon = ''>
       <UML:Stereotype.baseClass>
        	Class
       </UML:Stereotype.baseClass>
      </UML:Stereotype>
      <UML:Class xmi.id = 'S.827'
            name = 'D_Work_PID_tag' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false' stereotype = 'XX.2588'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.831'
              name = 'Discrete_Time_Int_DSTATE' visibility = 'package' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.176'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.832'
              name = 'Discrete_Transfer_Fcn_DSTATE' visibility = 'package' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.176'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.833'
              name = 'Discrete_Time_Int_SYSTEM_ENABLE' visibility = 'package' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.177'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
       </UML:Classifier.feature>
      </UML:Class>
     </UML:Namespace.ownedElement>
    </UML:Package>
    <UML:Package xmi.id = 'S.834'
          name = 'RegressionTest' visibility = 'package' isSpecification = 'false'
          isAbstract = 'false'>
     <UML:Namespace.ownedElement>
      <UML:Class xmi.id = 'S.869'
            name = 'TestCaseBasicDatabase_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.936'
              name = 'TestCaseBasicDatabase_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.937'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2692' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.178'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.869'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.845'
            name = 'TestCaseBasicDataPool_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.939'
              name = 'TestCaseBasicDataPool_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.940'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2699' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.179'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.845'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.842'
            name = 'TestCaseBasicPUSTcLoader_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.941'
              name = 'tcArea' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.69'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.942'
              name = 'pTCL' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.180'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.943'
              name = 'TestCaseBasicPUSTcLoader_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.944'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2706' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.945'
              name = 'writeTcHeader' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2717' name = 'start' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2718' name = 'packetID' isSpecification = 'false' kind = 'inout' type = 'G.60'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.60'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2719' name = 'packetSeqControl' isSpecification = 'false' kind = 'inout' type = 'G.60'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.60'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2720' name = 'packetLength' isSpecification = 'false' kind = 'inout' type = 'G.60'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.60'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2721' name = 'ackField' isSpecification = 'false' kind = 'inout' type = 'G.63'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.63'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2722' name = 'tcType' isSpecification = 'false' kind = 'inout' type = 'G.63'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.63'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2723' name = 'tcSubType' isSpecification = 'false' kind = 'inout' type = 'G.63'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.63'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2724' name = 'tcSource' isSpecification = 'false' kind = 'inout' type = 'G.181'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.181'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2725' name = 'writeTcHeader.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.946'
              name = 'writeTcData' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2735' name = 'start' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2736' name = 'execCounter' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2737' name = 'execCheckVal' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2738' name = 'valCheckVal' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2739' name = 'execCheckCode' isSpecification = 'false' kind = 'inout' type = 'G.166'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.166'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2740' name = 'valCheckCode' isSpecification = 'false' kind = 'inout' type = 'G.166'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.166'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2741' name = 'execOutcome' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2742' name = 'writeTcData.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.947'
              name = 'checkTcConfig' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2757' name = 'pTC' isSpecification = 'false' kind = 'inout' type = 'G.182'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.182'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2758' name = 'packetID' isSpecification = 'false' kind = 'inout' type = 'G.60'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.60'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2759' name = 'packetSeqControl' isSpecification = 'false' kind = 'inout' type = 'G.60'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.60'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2760' name = 'ackField' isSpecification = 'false' kind = 'inout' type = 'G.63'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.63'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2761' name = 'tcSource' isSpecification = 'false' kind = 'inout' type = 'G.181'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.181'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2762' name = 'execCounter' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2763' name = 'execCheckVal' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2764' name = 'valCheckVal' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2765' name = 'execCheckCode' isSpecification = 'false' kind = 'inout' type = 'G.166'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.166'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2766' name = 'valCheckCode' isSpecification = 'false' kind = 'inout' type = 'G.166'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.166'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2767' name = 'execOutcome' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2768' name = 'checkTcConfig.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.183'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.842'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.948'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.889'
            name = 'TestCaseBasicPUSTmStream_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.949'
              name = 'tmArea' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.69'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.950'
              name = 'pTM' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.184'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.951'
              name = 'pTMS' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.185'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.952'
              name = 'TestCaseBasicPUSTmStream_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.953'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2775' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.954'
              name = 'checkTmImage' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2780' name = 'start' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2781' name = 'value' isSpecification = 'false' kind = 'inout' type = 'G.63'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.63'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.2782' name = 'checkTmImage.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.186'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.889'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.955'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.861'
            name = 'TestCaseBasicReconfigurer_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.956'
              name = 'TestCaseBasicReconfigurer_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.957'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2789' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.187'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.861'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.958'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.875'
            name = 'TestCaseByteArrayTelemetryStream_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.959'
              name = 'TestCaseByteArrayTelemetryStream_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.960'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2796' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.188'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.875'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.882'
            name = 'TestCaseChecksum_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.961'
              name = 'TestCaseChecksum_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.962'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2802' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.189'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.882'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.881'
            name = 'TestCaseControlAction_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.963'
              name = 'TestCaseControlAction_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.964'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2810' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.190'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.881'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.848'
            name = 'TestCaseControlList_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.965'
              name = 'TestCaseControlList_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.966'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2818' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.191'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.848'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.958'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.876'
            name = 'TestCaseCycleDataItem16TmStream_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.967'
              name = 'TestCaseCycleDataItem16TmStream_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.968'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2825' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.192'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.876'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.929'
            name = 'TestCaseCyclingPunctualActionModeManager_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.969'
              name = 'TestCaseCyclingPunctualActionModeManager_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.970'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2832' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.193'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.929'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.958'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.847'
            name = 'TestCaseCyclingTelemetryModeManager_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.971'
              name = 'TestCaseCyclingTelemetryModeManager_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.972'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2839' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.194'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.847'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.958'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.865'
            name = 'TestCaseDataItem16TmWord_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.973'
              name = 'TestCaseDataItem16TmWord_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.974'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2846' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.195'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.865'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.887'
            name = 'TestCaseDataItem_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.975'
              name = 'TestCaseDataItem_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.976'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2852' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.196'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.887'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.888'
            name = 'TestCaseDataPoolMonitor_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.977'
              name = 'TestCaseDataPoolMonitor_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.978'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2858' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.197'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.888'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.958'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.879'
            name = 'TestCaseDeltaProfile_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.979'
              name = 'TestCaseDeltaProfile_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.980'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2865' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.198'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.879'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.840'
            name = 'TestCaseDummyConditionalPunctualAction_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.981'
              name = 'TestCaseDummyConditionalPunctualAction_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.982'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2873' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.199'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.840'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.909'
            name = 'TestCaseDummyConfigurableManoeuvre_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.983'
              name = 'TestCaseDummyConfigurableManoeuvre_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.984'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2881' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.200'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.909'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.896'
            name = 'TestCaseDummyCopyControlBlock_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.985'
              name = 'TestCaseDummyCopyControlBlock_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.986'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2889' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.201'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.896'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.958'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.851'
            name = 'TestCaseDummyCriticalTelecommand_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.987'
              name = 'TestCaseDummyCriticalTelecommand_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.988'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2897' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.202'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.851'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.849'
            name = 'TestCaseDummyCriticalTelecommand_2' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.989'
              name = 'TestCaseDummyCriticalTelecommand_2' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.990'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2905' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.203'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.849'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.958'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.930'
            name = 'TestCaseDummyDatabase_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.991'
              name = 'TestCaseDummyDatabase_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.992'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2912' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.204'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.930'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.866'
            name = 'TestCaseDummyDataItemControlBlock_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.993'
              name = 'TestCaseDummyDataItemControlBlock_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.994'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2920' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.205'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.866'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.958'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.916'
            name = 'TestCaseDummyDataPool_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.995'
              name = 'TestCaseDummyDataPool_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.996'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2927' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.206'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.916'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.908'
            name = 'TestCaseDummyDataPoolControlBlock_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.997'
              name = 'TestCaseDummyDataPoolControlBlock_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.998'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2935' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.207'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.908'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.958'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.841'
            name = 'TestCaseDummyFsmState_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.999'
              name = 'TestCaseDummyFsmState_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1000'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2941' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.208'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.841'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.868'
            name = 'TestCaseDummyManoeuvre_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1001'
              name = 'TestCaseDummyManoeuvre_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1002'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2949' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.209'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.868'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.958'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.897'
            name = 'TestCaseDummyModeManager_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1003'
              name = 'TestCaseDummyModeManager_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1004'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2957' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.210'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.897'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.958'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.899'
            name = 'TestCaseDummyObsClock_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1005'
              name = 'TestCaseDummyObsClock_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1006'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2963' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.211'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.899'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.852'
            name = 'TestCaseDummyPointerControlBlock_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1007'
              name = 'TestCaseDummyPointerControlBlock_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1008'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2971' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.212'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.852'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.958'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.857'
            name = 'TestCaseDummyPunctualAction_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1009'
              name = 'TestCaseDummyPunctualAction_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1010'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2979' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.213'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.857'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.958'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.906'
            name = 'TestCaseDummyPUSTelecommand_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1011'
              name = 'TestCaseDummyPUSTelecommand_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1012'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2986' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.214'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.906'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.935'
            name = 'TestCaseDummyPUSTelemetryPacket_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1013'
              name = 'TestCaseDummyPUSTelemetryPacket_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1014'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.2993' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.215'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.935'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.870'
            name = 'TestCaseDummyTelecommand_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1015'
              name = 'TestCaseDummyTelecommand_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1016'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3000' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.216'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.870'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.900'
            name = 'TestCaseDummyTelecommandLoader_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1017'
              name = 'TestCaseDummyTelecommandLoader_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1018'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3007' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.217'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.900'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.910'
            name = 'TestCaseDummyTelemetryPacket_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1019'
              name = 'TestCaseDummyTelemetryPacket_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1020'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3014' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.218'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.910'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.911'
            name = 'TestCaseDummyTelemetryStream_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1021'
              name = 'TestCaseDummyTelemetryStream_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1022'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3021' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.219'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.911'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.890'
            name = 'TestCaseDummyTracer_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1023'
              name = 'TestCaseDummyTracer_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1024'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3028' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.220'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.890'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.931'
            name = 'TestCaseEvent_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1025'
              name = 'TestCaseEvent_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1026'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3034' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.221'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.931'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.850'
            name = 'TestCaseEventRepository_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1027'
              name = 'TestCaseEventRepository_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1028'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3041' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.222'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.850'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.905'
            name = 'TestCaseEventRepository_2' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1029'
              name = 'TestCaseEventRepository_2' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1030'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3048' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.223'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.905'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.860'
            name = 'TestCaseEventRepository_3' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1031'
              name = 'TestCaseEventRepository_3' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1032'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3055' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.224'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.860'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.932'
            name = 'TestCaseFdirCheck_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1033'
              name = 'TestCaseFdirCheck_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1034'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3063' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.225'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.932'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.926'
            name = 'TestCaseFileTelemetryStream_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1035'
              name = 'TestCaseFileTelemetryStream_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1036'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3071' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.226'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.926'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.893'
            name = 'TestCaseFileTelemetryStream_2' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1037'
              name = 'TestCaseFileTelemetryStream_2' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1038'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3079' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.227'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.893'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.934'
            name = 'TestCaseForbiddenValueProfile_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1039'
              name = 'TestCaseForbiddenValueProfile_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1040'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3086' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.228'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.934'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.844'
            name = 'TestCaseFromFsmEvent_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1041'
              name = 'TestCaseFromFsmEvent_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1042'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3094' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.229'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.844'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.859'
            name = 'TestCaseFSM_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1043'
              name = 'TestCaseFSM_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1044'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3101' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.230'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.859'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.958'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.913'
            name = 'TestCaseFSM_2' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1045'
              name = 'TestCaseFSM_2' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1046'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3110' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.231'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.913'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.885'
            name = 'TestCaseFSM_3' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1047'
              name = 'TestCaseFSM_3' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1048'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3118' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.232'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.885'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.901'
            name = 'TestCaseFsmEvent_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1049'
              name = 'TestCaseFsmEvent_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1050'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3125' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.233'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.901'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.854'
            name = 'TestCaseInRangeProfile_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1051'
              name = 'TestCaseInRangeProfile_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1052'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3133' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.234'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.854'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.925'
            name = 'TestCaseManoeuvreManager_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1053'
              name = 'TestCaseManoeuvreManager_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1054'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3142' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.235'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.925'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.958'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <!--==================== structure [Stereotype] ====================-->
      <UML:Stereotype xmi.id = 'XX.3143'
            name = 'structure' visibility = 'public' isSpecification = 'false' icon = ''>
       <UML:Stereotype.baseClass>
        	Class
       </UML:Stereotype.baseClass>
      </UML:Stereotype>
      <UML:Class xmi.id = 'S.853'
            name = 'Unnamed19' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false' ownerScope = 'classifier' stereotype = 'XX.3143'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1055'
              name = 'continueToFalse' visibility = 'package' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1056'
              name = 'finishedToTrue' visibility = 'package' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
       </UML:Classifier.feature>
      </UML:Class>
      <!--==================== structure [Stereotype] ====================-->
      <UML:Stereotype xmi.id = 'XX.3144'
            name = 'structure' visibility = 'public' isSpecification = 'false' icon = ''>
       <UML:Stereotype.baseClass>
        	Class
       </UML:Stereotype.baseClass>
      </UML:Stereotype>
      <UML:Class xmi.id = 'S.919'
            name = 'Unnamed29' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false' ownerScope = 'classifier' stereotype = 'XX.3144'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1057'
              name = 'activation' visibility = 'package' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.40'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1058'
              name = 'eventType' visibility = 'package' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.91'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1059'
              name = 'offset' visibility = 'package' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Class xmi.id = 'S.903'
            name = 'TestCaseManoeuvreManager_2' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1060'
              name = 'TestCaseManoeuvreManager_2' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1061'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3153' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.236'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.903'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.958'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.915'
            name = 'TestCaseManoeuvreManager_3' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1062'
              name = 'TestCaseManoeuvreManager_3' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1063'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3162' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.237'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.915'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.958'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.878'
            name = 'TestCaseManoeuvrePunctualAction_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1064'
              name = 'TestCaseManoeuvrePunctualAction_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1065'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3173' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.238'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.878'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.884'
            name = 'TestCaseMatlabCopyPID_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1066'
              name = 'TestCaseMatlabCopyPID_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1067'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3180' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.239'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.884'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.904'
            name = 'TestCaseMatlabDataItemPID_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1068'
              name = 'TestCaseMatlabDataItemPID_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1069'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3187' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.240'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.904'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.864'
            name = 'TestCaseMatlabDataPoolPID_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1070'
              name = 'TestCaseMatlabDataPoolPID_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1071'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3194' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.241'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.864'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.871'
            name = 'TestCaseMatlabPointerPID_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1072'
              name = 'TestCaseMatlabPointerPID_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1073'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3201' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.242'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.871'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.921'
            name = 'TestCaseNestedFsmActivator_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1074'
              name = 'TestCaseNestedFsmActivator_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1075'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3212' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.243'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.921'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.895'
            name = 'TestCaseNestedFsmActivatorWithEndState_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1076'
              name = 'TestCaseNestedFsmActivatorWithEndState_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1077'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3223' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.244'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.895'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.862'
            name = 'TestCaseNestedFsmActivatorWithExitCheck_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1078'
              name = 'TestCaseNestedFsmActivatorWithExitCheck_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1079'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3234' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.245'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.862'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.894'
            name = 'TestCaseNullProfile_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1080'
              name = 'TestCaseNullProfile_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1081'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3242' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.246'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.894'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.883'
            name = 'TestCaseOutOfRangeProfile_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1082'
              name = 'TestCaseOutOfRangeProfile_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1083'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3249' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.247'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.883'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.933'
            name = 'TestCaseProfileList_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1084'
              name = 'TestCaseProfileList_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1085'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3257' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.248'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.933'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.958'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.891'
            name = 'TestCasePunctualActionManager_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1086'
              name = 'TestCasePunctualActionManager_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1087'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3266' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.249'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.891'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.927'
            name = 'TestCasePUSClearDataReporting_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1088'
              name = 'TestCasePUSClearDataReporting_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1089'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3274' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.250'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.927'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.948'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.928'
            name = 'TestCasePUSControlDataReporting_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1090'
              name = 'TestCasePUSControlDataReporting_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1091'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3282' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.251'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.928'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.955'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.923'
            name = 'TestCasePUSDataReportingPacket_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1092'
              name = 'TestCasePUSDataReportingPacket_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1093'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3290' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.252'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.923'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.958'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.846'
            name = 'TestCasePUSDataReportingPacket_2' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1094'
              name = 'TestCasePUSDataReportingPacket_2' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1095'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3298' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.253'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.846'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.958'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.874'
            name = 'TestCasePUSDataReportingPacket_3' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1096'
              name = 'TestCasePUSDataReportingPacket_3' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1097'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3306' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.254'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.874'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.958'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.912'
            name = 'TestCasePUSEventRepository_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1098'
              name = 'TestCasePUSEventRepository_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1099'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3313' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1100'
              name = 'checkTmPacket' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3321' name = 'pEvtRep' isSpecification = 'false' kind = 'inout' type = 'G.255'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.255'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3322' name = 'tmSubType' isSpecification = 'false' kind = 'inout' type = 'G.256'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.256'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3323' name = 'tcId' isSpecification = 'false' kind = 'inout' type = 'G.173'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.173'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3324' name = 'tt' isSpecification = 'false' kind = 'inout' type = 'G.52'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.52'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3325' name = 'errCode' isSpecification = 'false' kind = 'inout' type = 'G.166'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.166'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3326' name = 'checkTmPacket.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1101'
              name = 'checkNoTmPacket' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3330' name = 'pEvtRep' isSpecification = 'false' kind = 'inout' type = 'G.255'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.255'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3331' name = 'checkNoTmPacket.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.257'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.912'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.948'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.880'
            name = 'TestCasePUSMemoryDumpOffset_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1102'
              name = 'TestCasePUSMemoryDumpOffset_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1103'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3338' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.258'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.880'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.958'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.873'
            name = 'TestCasePUSMemoryLoadAbsolute_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1104'
              name = 'TestCasePUSMemoryLoadAbsolute_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1105'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3345' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.259'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.873'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.958'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.907'
            name = 'TestCasePUSMemoryLoadOffset_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1106'
              name = 'TestCasePUSMemoryLoadOffset_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1107'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3352' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.260'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.907'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.958'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.902'
            name = 'TestCasePUSMemoryLoadOffset_2' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1108'
              name = 'TestCasePUSMemoryLoadOffset_2' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1109'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3359' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.261'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.902'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.958'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.918'
            name = 'TestCasePUSTelemetryModeManager_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1110'
              name = 'TestCasePUSTelemetryModeManager_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1111'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3367' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.262'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.918'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.948'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.843'
            name = 'TestCaseRawDataItem_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1112'
              name = 'TestCaseRawDataItem_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1113'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3373' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.263'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.843'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.892'
            name = 'TestCaseRecoveryAction_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1114'
              name = 'TestCaseRecoveryAction_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1115'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3382' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.264'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.892'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.922'
            name = 'TestCaseRootObject_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1116'
              name = 'TestCaseRootObject_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1117'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3388' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.265'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.922'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.920'
            name = 'TestCaseRootObject_2' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1118'
              name = 'TestCaseRootObject_2' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1119'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3394' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.266'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.920'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.886'
            name = 'TestCaseRootObject_3' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1120'
              name = 'TestCaseRootObject_3' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1121'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3400' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.267'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.886'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.898'
            name = 'TestCaseSimpleChangeProfile_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1122'
              name = 'TestCaseSimpleChangeProfile_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1123'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3407' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.268'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.898'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.867'
            name = 'TestCaseSimplePunctualActionModeManager_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1124'
              name = 'TestCaseSimplePunctualActionModeManager_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1125'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3414' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.269'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.867'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.917'
            name = 'TestCaseSimpleTelemetryModeManager_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1126'
              name = 'TestCaseSimpleTelemetryModeManager_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1127'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3421' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.270'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.917'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.924'
            name = 'TestCaseStuckDataProfile_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1128'
              name = 'TestCaseStuckDataProfile_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1129'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3428' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.271'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.924'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.839'
            name = 'TestCaseTelecommandManager_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1130'
              name = 'TestCaseTelecommandManager_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1131'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3435' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.272'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.839'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.863'
            name = 'TestCaseTelecommandManager_2' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1132'
              name = 'TestCaseTelecommandManager_2' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1133'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3444' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.273'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.863'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.858'
            name = 'TestCaseTelecommandManager_3' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1134'
              name = 'TestCaseTelecommandManager_3' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1135'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3453' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.274'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.858'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.872'
            name = 'TestCaseTelemetryManager_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1136'
              name = 'TestCaseTelemetryManager_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1137'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3460' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.275'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.872'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.856'
            name = 'TestCaseTelemetryManager_2' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1138'
              name = 'TestCaseTelemetryManager_2' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1139'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3470' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.276'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.856'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.958'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.855'
            name = 'TestCaseTestPUSConfigurableManoeuvre_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1140'
              name = 'TestCaseTestPUSConfigurableManoeuvre_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1141'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3478' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.277'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.855'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.958'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.914'
            name = 'TestCaseTestTracer_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1142'
              name = 'TestCaseTestTracer_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1143'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3485' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.278'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.914'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.877'
            name = 'TestCaseUnstableFsmState_1' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1144'
              name = 'TestCaseUnstableFsmState_1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1145'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3493' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.279'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.877'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
     </UML:Namespace.ownedElement>
    </UML:Package>
    <UML:Package xmi.id = 'S.1146'
          name = 'SampleApplication' visibility = 'package' isSpecification = 'false'
          isAbstract = 'false'>
     <UML:Namespace.ownedElement>
     </UML:Namespace.ownedElement>
    </UML:Package>
    <UML:Package xmi.id = 'S.1151'
          name = 'System' visibility = 'package' isSpecification = 'false'
          isAbstract = 'false'>
     <UML:Namespace.ownedElement>
      <UML:Class xmi.id = 'S.1157'
            name = 'DC_DummyObsClock' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1161'
              name = 'cycle' visibility = 'package' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.280'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1162'
              name = 'time' visibility = 'package' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.52'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.1163'
              name = 'DC_DummyObsClock' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1164'
              name = 'getTime' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3507' name = 'getTime.Return' isSpecification = 'false' kind = 'return' type = 'G.52'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.52'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1165'
              name = 'getCycle' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3511' name = 'getCycle.Return' isSpecification = 'false' kind = 'return' type = 'G.280'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.280'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1166'
              name = 'synchronizeWithSystemTime' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3513' name = 'synchronizeWithSystemTime.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1167'
              name = 'reset' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3515' name = 'reset.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1168'
              name = 'setTime' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3519' name = 'time' isSpecification = 'false' kind = 'inout' type = 'G.52'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.52'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3520' name = 'setTime.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1169'
              name = 'setCycle' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3525' name = 'cycle' isSpecification = 'false' kind = 'inout' type = 'G.280'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.280'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3526' name = 'setCycle.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.281'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1157'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.1160'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1156'
            name = 'DC_DummyTracer' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1170'
              name = 'DC_DummyTracer' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1171'
              name = 'sendRawTrace' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3536' name = 'traceItem' isSpecification = 'false' kind = 'inout' type = 'G.14'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.14'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3537' name = 'sendRawTrace.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.282'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1156'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.1159'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1158'
            name = 'DC_TestTracer' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1172'
              name = 'logFile' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.283'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.1173'
              name = 'DC_TestTracer' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1174'
              name = 'closeLogFile' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3551' name = 'closeLogFile.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1175'
              name = 'getLogFileName' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3555' name = 'getLogFileName.Return' isSpecification = 'false' kind = 'return' type = 'G.284'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.284'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1176'
              name = 'sendRawTrace' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3560' name = 'traceItem' isSpecification = 'false' kind = 'inout' type = 'G.14'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.14'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3561' name = 'sendRawTrace.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.285'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1158'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.1159'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1160'
            name = 'ObsClock' visibility = 'package' isSpecification = 'false'
            isAbstract = 'true' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1177'
              name = 'getTime' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3569' name = 'getTime.Return' isSpecification = 'false' kind = 'return' type = 'G.52'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.52'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1178'
              name = 'getCycle' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3572' name = 'getCycle.Return' isSpecification = 'false' kind = 'return' type = 'G.280'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.280'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1179'
              name = 'synchronizeWithSystemTime' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3574' name = 'synchronizeWithSystemTime.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1180'
              name = 'reset' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3576' name = 'reset.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.286'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1160'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.15'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1159'
            name = 'Tracer' visibility = 'package' isSpecification = 'false'
            isAbstract = 'true' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1181'
              name = 'enabledStatus' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.1182'
              name = 'Tracer' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1183'
              name = 'sendSynchTrace' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3583' name = 'traceId' isSpecification = 'false' kind = 'inout' type = 'G.14'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.14'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3584' name = 'sendSynchTrace.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1184'
              name = 'sendPacketTrace' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3588' name = 'n' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3589' name = 'traceData' isSpecification = 'false' kind = 'inout' type = 'G.16'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.16'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3590' name = 'sendPacketTrace.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1185'
              name = 'setEnabled' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3593' name = 'isEnabled' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3594' name = 'setEnabled.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1186'
              name = 'isEnabled' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3597' name = 'isEnabled.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1187'
              name = 'sendRawTrace' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3602' name = 'rawItem' isSpecification = 'false' kind = 'inout' type = 'G.14'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.14'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3603' name = 'sendRawTrace.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.287'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1159'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.15'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
     </UML:Namespace.ownedElement>
    </UML:Package>
    <UML:Package xmi.id = 'S.1188'
          name = 'Telecommand' visibility = 'package' isSpecification = 'false'
          isAbstract = 'false'>
     <UML:Namespace.ownedElement>
      <!--From Class PUSMemoryLoad to Class MemBlockType-->
      <UML:Association xmi.id = 'G.288'
            name = '{PUSMemoryLoad-MemBlockType}' visibility = 'protected' isSpecification = 'false'
            isAbstract = 'false'>
       <UML:Association.connection>
        <UML:AssociationEnd xmi.id = 'G.292' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.qualifier>
          <UML:Attribute xmi.idref = 'S.1215'/>
         </UML:AssociationEnd.qualifier>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity/>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.1193'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
        <UML:AssociationEnd xmi.id = 'G.293' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '0' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.1216'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
       </UML:Association.connection>
      </UML:Association>
      <!--From Class CC_TelecommandManager to Class TelecommandLoader-->
      <UML:Association xmi.id = 'G.289'
            name = '{CC_TelecommandManager-TelecommandLoader}' visibility = 'private' isSpecification = 'false'
            isAbstract = 'false'>
       <UML:Association.connection>
        <UML:AssociationEnd xmi.id = 'G.294' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.qualifier>
          <UML:Attribute xmi.idref = 'S.1217'/>
         </UML:AssociationEnd.qualifier>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity/>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.1200'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
        <UML:AssociationEnd xmi.id = 'G.295' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '0' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.1213'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
       </UML:Association.connection>
      </UML:Association>
      <!--From Class CC_TelecommandFactory to Class CC_TelecommandFactory-->
      <UML:Association xmi.id = 'G.290'
            name = '{CC_TelecommandFactory-CC_TelecommandFactory}' visibility = 'private' isSpecification = 'false'
            isAbstract = 'false'>
       <UML:Association.connection>
        <UML:AssociationEnd xmi.id = 'G.296' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.qualifier>
          <UML:Attribute xmi.idref = 'S.1218'/>
         </UML:AssociationEnd.qualifier>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity/>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.1202'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
        <UML:AssociationEnd xmi.id = 'G.297' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '0' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.1202'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
       </UML:Association.connection>
      </UML:Association>
      <!--From Class TelecommandLoader to Class CC_TelecommandManager-->
      <UML:Association xmi.id = 'G.291'
            name = '{TelecommandLoader-CC_TelecommandManager}' visibility = 'private' isSpecification = 'false'
            isAbstract = 'false'>
       <UML:Association.connection>
        <UML:AssociationEnd xmi.id = 'G.298' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.qualifier>
          <UML:Attribute xmi.idref = 'S.1219'/>
         </UML:AssociationEnd.qualifier>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity/>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.1213'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
        <UML:AssociationEnd xmi.id = 'G.299' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '0' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.1200'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
       </UML:Association.connection>
      </UML:Association>
      <UML:Class xmi.id = 'S.1202'
            name = 'CC_TelecommandFactory' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1218'
              name = 'pInstance' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.300'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1220'
              name = 'sizeDummyPUSTelecommand' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1221'
              name = 'poolDummyPUSTelecommand' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.301'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1222'
              name = 'sizeDummyTelecommand' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1223'
              name = 'poolDummyTelecommand' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.302'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1224'
              name = 'sizePUSControlDataReporting' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1225'
              name = 'poolPUSControlDataReporting' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.303'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1226'
              name = 'sizePUSDefineDataReporting' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1227'
              name = 'poolPUSDefineDataReporting' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.304'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1228'
              name = 'sizePUSDumpMemoryAbsolute' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1229'
              name = 'poolPUSDumpMemoryAbsolute' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.305'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1230'
              name = 'sizePUSDumpMemoryOffset' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1231'
              name = 'poolPUSDumpMemoryOffset' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.306'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1232'
              name = 'sizePUSMemoryLoadAbsolute' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1233'
              name = 'poolPUSMemoryLoadAbsolute' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.307'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1234'
              name = 'sizePUSMemoryLoadOffset' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1235'
              name = 'poolPUSMemoryLoadOffset' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.308'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1236'
              name = 'sizeTestPUSTelecommand' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1237'
              name = 'poolTestPUSTelecommand' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.182'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.1238'
              name = 'CC_TelecommandFactory' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1239'
              name = 'getInstance' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'classifier'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3646' name = 'getInstance.Return' isSpecification = 'false' kind = 'return' type = 'G.300'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.300'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1240'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3649' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1241'
              name = 'setTelecommand' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3653' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3654' name = 'pItem' isSpecification = 'false' kind = 'inout' type = 'G.301'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.301'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3655' name = 'setTelecommand.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1242'
              name = 'getNumberDummyPUSTelecommand' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3658' name = 'getNumberDummyPUSTelecommand.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1243'
              name = 'getCapacityDummyPUSTelecommand' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3661' name = 'getCapacityDummyPUSTelecommand.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1244'
              name = 'allocateDummyPUSTelecommand' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3664' name = 'allocateDummyPUSTelecommand.Return' isSpecification = 'false' kind = 'return' type = 'G.301'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.301'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1245'
              name = 'isFreeDummyPUSTelecommand' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3668' name = 'isFreeDummyPUSTelecommand.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1246'
              name = 'setTelecommand' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3672' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3673' name = 'pItem' isSpecification = 'false' kind = 'inout' type = 'G.302'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.302'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3674' name = 'setTelecommand.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1247'
              name = 'getNumberDummyTelecommand' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3677' name = 'getNumberDummyTelecommand.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1248'
              name = 'getCapacityDummyTelecommand' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3680' name = 'getCapacityDummyTelecommand.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1249'
              name = 'allocateDummyTelecommand' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3683' name = 'allocateDummyTelecommand.Return' isSpecification = 'false' kind = 'return' type = 'G.302'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.302'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1250'
              name = 'isFreeDummyTelecommand' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3687' name = 'isFreeDummyTelecommand.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1251'
              name = 'setTelecommand' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3691' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3692' name = 'pItem' isSpecification = 'false' kind = 'inout' type = 'G.303'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.303'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3693' name = 'setTelecommand.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1252'
              name = 'getNumberPUSControlDataReporting' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3696' name = 'getNumberPUSControlDataReporting.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1253'
              name = 'getCapacityPUSControlDataReporting' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3699' name = 'getCapacityPUSControlDataReporting.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1254'
              name = 'allocatePUSControlDataReporting' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3703' name = 'MaxNumberSID' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3704' name = 'allocatePUSControlDataReporting.Return' isSpecification = 'false' kind = 'return' type = 'G.303'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.303'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1255'
              name = 'isFreePUSControlDataReporting' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3709' name = 'MaxNumberSID' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3710' name = 'isFreePUSControlDataReporting.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1256'
              name = 'setTelecommand' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3714' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3715' name = 'pItem' isSpecification = 'false' kind = 'inout' type = 'G.304'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.304'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3716' name = 'setTelecommand.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1257'
              name = 'getNumberPUSDefineDataReporting' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3719' name = 'getNumberPUSDefineDataReporting.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1258'
              name = 'getCapacityPUSDefineDataReporting' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3722' name = 'getCapacityPUSDefineDataReporting.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1259'
              name = 'allocatePUSDefineDataReporting' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3726' name = 'NumberOfRawData' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3727' name = 'allocatePUSDefineDataReporting.Return' isSpecification = 'false' kind = 'return' type = 'G.304'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.304'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1260'
              name = 'isFreePUSDefineDataReporting' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3732' name = 'NumberOfRawData' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3733' name = 'isFreePUSDefineDataReporting.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1261'
              name = 'setTelecommand' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3737' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3738' name = 'pItem' isSpecification = 'false' kind = 'inout' type = 'G.305'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.305'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3739' name = 'setTelecommand.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1262'
              name = 'getNumberPUSDumpMemoryAbsolute' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3742' name = 'getNumberPUSDumpMemoryAbsolute.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1263'
              name = 'getCapacityPUSDumpMemoryAbsolute' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3745' name = 'getCapacityPUSDumpMemoryAbsolute.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1264'
              name = 'allocatePUSDumpMemoryAbsolute' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3749' name = 'NumberOfRawData' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3750' name = 'allocatePUSDumpMemoryAbsolute.Return' isSpecification = 'false' kind = 'return' type = 'G.305'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.305'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1265'
              name = 'isFreePUSDumpMemoryAbsolute' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3755' name = 'NumberOfRawData' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3756' name = 'isFreePUSDumpMemoryAbsolute.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1266'
              name = 'setTelecommand' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3760' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3761' name = 'pItem' isSpecification = 'false' kind = 'inout' type = 'G.306'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.306'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3762' name = 'setTelecommand.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1267'
              name = 'getNumberPUSDumpMemoryOffset' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3765' name = 'getNumberPUSDumpMemoryOffset.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1268'
              name = 'getCapacityPUSDumpMemoryOffset' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3768' name = 'getCapacityPUSDumpMemoryOffset.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1269'
              name = 'allocatePUSDumpMemoryOffset' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3772' name = 'NumberOfRawData' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3773' name = 'allocatePUSDumpMemoryOffset.Return' isSpecification = 'false' kind = 'return' type = 'G.306'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.306'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1270'
              name = 'isFreePUSDumpMemoryOffset' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3778' name = 'NumberOfRawData' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3779' name = 'isFreePUSDumpMemoryOffset.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1271'
              name = 'setTelecommand' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3783' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3784' name = 'pItem' isSpecification = 'false' kind = 'inout' type = 'G.307'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.307'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3785' name = 'setTelecommand.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1272'
              name = 'getNumberPUSMemoryLoadAbsolute' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3788' name = 'getNumberPUSMemoryLoadAbsolute.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1273'
              name = 'getCapacityPUSMemoryLoadAbsolute' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3791' name = 'getCapacityPUSMemoryLoadAbsolute.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1274'
              name = 'allocatePUSMemoryLoadAbsolute' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3796' name = 'MaxNumberData' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3797' name = 'MaxNumberBlocks' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3798' name = 'allocatePUSMemoryLoadAbsolute.Return' isSpecification = 'false' kind = 'return' type = 'G.307'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.307'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1275'
              name = 'isFreePUSMemoryLoadAbsolute' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3804' name = 'MaxNumberData' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3805' name = 'MaxNumberBlocks' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3806' name = 'isFreePUSMemoryLoadAbsolute.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1276'
              name = 'setTelecommand' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3810' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3811' name = 'pItem' isSpecification = 'false' kind = 'inout' type = 'G.308'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.308'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3812' name = 'setTelecommand.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1277'
              name = 'getNumberPUSMemoryLoadOffset' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3815' name = 'getNumberPUSMemoryLoadOffset.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1278'
              name = 'getCapacityPUSMemoryLoadOffset' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3818' name = 'getCapacityPUSMemoryLoadOffset.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1279'
              name = 'allocatePUSMemoryLoadOffset' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3823' name = 'MaxNumberData' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3824' name = 'MaxNumberBlocks' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3825' name = 'allocatePUSMemoryLoadOffset.Return' isSpecification = 'false' kind = 'return' type = 'G.308'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.308'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1280'
              name = 'isFreePUSMemoryLoadOffset' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3831' name = 'MaxNumberData' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3832' name = 'MaxNumberBlocks' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3833' name = 'isFreePUSMemoryLoadOffset.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1281'
              name = 'setTelecommand' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3837' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3838' name = 'pItem' isSpecification = 'false' kind = 'inout' type = 'G.182'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.182'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3839' name = 'setTelecommand.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1282'
              name = 'getNumberTestPUSTelecommand' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3842' name = 'getNumberTestPUSTelecommand.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1283'
              name = 'getCapacityTestPUSTelecommand' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3845' name = 'getCapacityTestPUSTelecommand.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1284'
              name = 'allocateTestPUSTelecommand' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3848' name = 'allocateTestPUSTelecommand.Return' isSpecification = 'false' kind = 'return' type = 'G.182'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.182'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1285'
              name = 'isFreeTestPUSTelecommand' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3852' name = 'isFreeTestPUSTelecommand.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.309'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1202'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.15'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1200'
            name = 'CC_TelecommandManager' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1286'
              name = 'pTcList' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.310'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1287'
              name = 'tcListSize' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1288'
              name = 'tcCounter' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1217'
              name = 'pTcLoader' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.311'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1289'
              name = 'pObsClock' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.93'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.1290'
              name = 'CC_TelecommandManager' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1291'
              name = 'reset' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3865' name = 'reset.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1292'
              name = 'setPendingTelecommandListSize' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3868' name = 'listSize' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3869' name = 'setPendingTelecommandListSize.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1293'
              name = 'getPendingTelecommandListSize' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3873' name = 'getPendingTelecommandListSize.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1294'
              name = 'getPendingTelecommands' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3877' name = 'getPendingTelecommands.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1295'
              name = 'getPendingTelecommand' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3881' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3882' name = 'getPendingTelecommand.Return' isSpecification = 'false' kind = 'return' type = 'G.310'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.310'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1296'
              name = 'load' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3885' name = 'pTelecommand' isSpecification = 'false' kind = 'inout' type = 'G.310'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.310'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3886' name = 'load.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1297'
              name = 'abort' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3890' name = 'pTelecommand' isSpecification = 'false' kind = 'inout' type = 'G.310'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.310'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3891' name = 'abort.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1298'
              name = 'abort' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3896' name = 'telecommandId' isSpecification = 'false' kind = 'inout' type = 'G.173'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.173'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3897' name = 'abort.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1299'
              name = 'setTelecommandLoader' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3902' name = 'pTcLoader' isSpecification = 'false' kind = 'inout' type = 'G.311'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.311'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3903' name = 'setTelecommandLoader.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1300'
              name = 'getTelecommandLoader' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3907' name = 'getTelecommandLoader.Return' isSpecification = 'false' kind = 'return' type = 'G.311'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.311'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1301'
              name = 'setObsClock' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3911' name = 'pObsClock' isSpecification = 'false' kind = 'inout' type = 'G.93'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.93'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3912' name = 'setObsClock.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1302'
              name = 'getObsClock' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3916' name = 'getObsClock.Return' isSpecification = 'false' kind = 'return' type = 'G.93'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.93'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1303'
              name = 'activate' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3918' name = 'activate.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1304'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3921' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.312'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1200'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.15'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1195'
            name = 'CriticalTelecommand' visibility = 'package' isSpecification = 'false'
            isAbstract = 'true' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1305'
              name = 'maxArmedDuration' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.52'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1306'
              name = 'timeWhenArmed' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.52'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1307'
              name = 'pObsClock' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.93'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1308'
              name = 'isTcCritical' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1309'
              name = 'isTcArmed' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.1310'
              name = 'doAction' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3931' name = 'doAction.Return' isSpecification = 'false' kind = 'return' type = 'G.17'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.17'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1311'
              name = 'doCriticalAction' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3935' name = 'doCriticalAction.Return' isSpecification = 'false' kind = 'return' type = 'G.17'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.17'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1312'
              name = 'CriticalTelecommand' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1313'
              name = 'reset' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3938' name = 'reset.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1314'
              name = 'isCritical' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3941' name = 'isCritical.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1315'
              name = 'setCriticalityLevel' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3944' name = 'isCritical' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3945' name = 'setCriticalityLevel.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1316'
              name = 'isArmed' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3948' name = 'isArmed.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1317'
              name = 'isImageValid' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3952' name = 'isImageValid.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1318'
              name = 'storeImage' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3955' name = 'storeImage.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1319'
              name = 'setMaxArmedDuration' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3959' name = 't' isSpecification = 'false' kind = 'inout' type = 'G.52'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.52'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3960' name = 'setMaxArmedDuration.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1320'
              name = 'getMaxArmedDuration' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3963' name = 'getMaxArmedDuration.Return' isSpecification = 'false' kind = 'return' type = 'G.52'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.52'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1321'
              name = 'getTimeWhenArmed' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3966' name = 'getTimeWhenArmed.Return' isSpecification = 'false' kind = 'return' type = 'G.52'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.52'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1322'
              name = 'setObsClock' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3969' name = 'pObsClock' isSpecification = 'false' kind = 'inout' type = 'G.93'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.93'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3970' name = 'setObsClock.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1323'
              name = 'getObsClock' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3974' name = 'getObsClock.Return' isSpecification = 'false' kind = 'return' type = 'G.93'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.93'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1324'
              name = 'canExecute' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3978' name = 'canExecute.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1325'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3981' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.313'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1195'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.1199'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1197'
            name = 'DC_BasicPUSTcLoader' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1326'
              name = 'tcArea' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.69'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1327'
              name = 'maxTcDataPacketLength' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1328'
              name = 'maxNumberOfTc' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.1329'
              name = 'DC_BasicPUSTcLoader' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1330'
              name = 'activate' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3990' name = 'activate.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1331'
              name = 'release' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3993' name = 'pTelecommand' isSpecification = 'false' kind = 'inout' type = 'G.310'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.310'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3994' name = 'release.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1332'
              name = 'setTcLoadAreaStart' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.3997' name = 'startAddress' isSpecification = 'false' kind = 'inout' type = 'G.69'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.69'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.3998' name = 'setTcLoadAreaStart.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1333'
              name = 'setMaxTcLength' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4001' name = 'maxTcLength' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4002' name = 'setMaxTcLength.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1334'
              name = 'getMaxTcLength' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4005' name = 'getMaxTcLength.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1335'
              name = 'setMaxNumberOfTc' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4008' name = 'max' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4009' name = 'setMaxNumberOfTc.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1336'
              name = 'getMaxNumberOfTc' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4012' name = 'getMaxNumberOfTc.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1337'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4015' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.314'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1197'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.1213'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1208'
            name = 'DC_DummyCriticalTelecommand' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1338'
              name = 'numberOfExecutions' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1339'
              name = 'imageValid' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.1340'
              name = 'doCriticalAction' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4023' name = 'doCriticalAction.Return' isSpecification = 'false' kind = 'return' type = 'G.17'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.17'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1341'
              name = 'DC_DummyCriticalTelecommand' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1342'
              name = 'getNumberOfExecutions' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4028' name = 'getNumberOfExecutions.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1343'
              name = 'isImageValid' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4033' name = 'isImageValid.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1344'
              name = 'setImageValidity' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4037' name = 'isValid' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4038' name = 'setImageValidity.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.315'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1208'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.1195'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1201'
            name = 'DC_DummyPUSTelecommand' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1345'
              name = 'executionCounter' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.1346'
              name = 'doAction' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4045' name = 'doAction.Return' isSpecification = 'false' kind = 'return' type = 'G.17'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.17'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1347'
              name = 'DC_DummyPUSTelecommand' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1348'
              name = 'getExecutionCounter' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4049' name = 'getExecutionCounter.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.316'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1201'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.1207'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1211'
            name = 'DC_DummyTelecommand' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1349'
              name = 'executionCounter' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1350'
              name = 'executionCheckValue' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1351'
              name = 'validityCheckValue' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1352'
              name = 'executionCheckCode' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.166'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1353'
              name = 'validityCheckCode' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.166'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.1354'
              name = 'doAction' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4056' name = 'doAction.Return' isSpecification = 'false' kind = 'return' type = 'G.17'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.17'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1355'
              name = 'DC_DummyTelecommand' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1356'
              name = 'getExecutionCounter' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4060' name = 'getExecutionCounter.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1357'
              name = 'canExecute' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4065' name = 'canExecute.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1358'
              name = 'isValid' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4070' name = 'isValid.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1359'
              name = 'getValidityCheckCode' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4074' name = 'getValidityCheckCode.Return' isSpecification = 'false' kind = 'return' type = 'G.166'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.166'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1360'
              name = 'getExecutionCheckCode' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4078' name = 'getExecutionCheckCode.Return' isSpecification = 'false' kind = 'return' type = 'G.166'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.166'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1361'
              name = 'setExecutionCheckValue' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4082' name = 'executionCheckValue' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4083' name = 'setExecutionCheckValue.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1362'
              name = 'setValidityCheckValue' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4087' name = 'validityCheckValue' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4088' name = 'setValidityCheckValue.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1363'
              name = 'setValidityCheckCode' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4092' name = 'validityCheckCode' isSpecification = 'false' kind = 'inout' type = 'G.166'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.166'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4093' name = 'setValidityCheckCode.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1364'
              name = 'setExecutionCheckCode' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4097' name = 'executionCheckCode' isSpecification = 'false' kind = 'inout' type = 'G.166'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.166'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4098' name = 'setExecutionCheckCode.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.317'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1211'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.1199'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1206'
            name = 'DC_DummyTelecommandLoader' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1365'
              name = 'N_SAMPLE_TC' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1366'
              name = 'pSampleTelecommand' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.310'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1367'
              name = 'allocationCounter' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.1368'
              name = 'DC_DummyTelecommandLoader' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1369'
              name = 'activate' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4106' name = 'activate.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1370'
              name = 'release' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4109' name = 'pTelecommand' isSpecification = 'false' kind = 'inout' type = 'G.310'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.310'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4110' name = 'release.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1371'
              name = 'setSampleTelecommand' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4114' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4115' name = 'pSampleTc' isSpecification = 'false' kind = 'inout' type = 'G.310'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.310'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4116' name = 'setSampleTelecommand.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1372'
              name = 'getAllocationCounter' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4119' name = 'getAllocationCounter.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1373'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4122' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.318'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1206'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.1213'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1204'
            name = 'DC_PUSClearDataReporting' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1374'
              name = 'sid' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.319'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1375'
              name = 'sidOverlay' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.69'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1376'
              name = 'maxNsid' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.63'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1377'
              name = 'nsid' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.63'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1378'
              name = 'lasti' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1379'
              name = 'pTmModeManager' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.320'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.1380'
              name = 'doAction' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4133' name = 'doAction.Return' isSpecification = 'false' kind = 'return' type = 'G.17'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.17'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1381'
              name = 'DC_PUSClearDataReporting' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1382'
              name = 'setMaxNumberSID' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4137' name = 'max' isSpecification = 'false' kind = 'inout' type = 'G.63'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.63'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4138' name = 'setMaxNumberSID.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1383'
              name = 'setRawData' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4143' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4144' name = 'd' isSpecification = 'false' kind = 'inout' type = 'G.63'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.63'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4145' name = 'setRawData.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1384'
              name = 'getNumberOfRawData' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4149' name = 'getNumberOfRawData.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1385'
              name = 'setPUSTelemetryModeManager' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4153' name = 'pTmModeManager' isSpecification = 'false' kind = 'inout' type = 'G.320'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.320'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4154' name = 'setPUSTelemetryModeManager.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1386'
              name = 'getPUSTelemetryModeManager' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4158' name = 'getPUSTelemetryModeManager.Return' isSpecification = 'false' kind = 'return' type = 'G.320'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.320'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1387'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4161' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.321'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1204'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.1207'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1205'
            name = 'DC_PUSControlDataReporting' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1388'
              name = 'sid' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.319'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1389'
              name = 'sidOverlay' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.69'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1390'
              name = 'maxNsid' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.63'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1391'
              name = 'nsid' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.63'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1392'
              name = 'lasti' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.1393'
              name = 'doAction' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4170' name = 'doAction.Return' isSpecification = 'false' kind = 'return' type = 'G.17'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.17'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1394'
              name = 'DC_PUSControlDataReporting' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1395'
              name = 'setMaxNumberSID' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4174' name = 'max' isSpecification = 'false' kind = 'inout' type = 'G.63'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.63'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4175' name = 'setMaxNumberSID.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1396'
              name = 'getMaxNumberSID' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4179' name = 'getMaxNumberSID.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1397'
              name = 'setRawData' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4184' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4185' name = 'd' isSpecification = 'false' kind = 'inout' type = 'G.63'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.63'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4186' name = 'setRawData.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1398'
              name = 'getNumberOfRawData' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4190' name = 'getNumberOfRawData.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1399'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4193' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.322'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1205'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.1207'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1212'
            name = 'DC_PUSDefineDataReporting' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1400'
              name = 'data' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.69'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1401'
              name = 'maxNumberData' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1402'
              name = 'numberData' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1403'
              name = 'pTmModeManager' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.320'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.1404'
              name = 'doAction' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4200' name = 'doAction.Return' isSpecification = 'false' kind = 'return' type = 'G.17'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.17'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1405'
              name = 'DC_PUSDefineDataReporting' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1406'
              name = 'setNumberOfRawData' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4204' name = 'max' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4205' name = 'setNumberOfRawData.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1407'
              name = 'getNumberOfRawData' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4209' name = 'getNumberOfRawData.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1408'
              name = 'setRawData' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4213' name = 'd' isSpecification = 'false' kind = 'inout' type = 'G.69'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.69'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4214' name = 'n' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4215' name = 'setRawData.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1409'
              name = 'getNumberOfApplicationData' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4219' name = 'getNumberOfApplicationData.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1410'
              name = 'setPUSTelemetryModeManager' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4223' name = 'pTmModeManager' isSpecification = 'false' kind = 'inout' type = 'G.320'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.320'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4224' name = 'setPUSTelemetryModeManager.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1411'
              name = 'getPUSTelemetryModeManager' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4228' name = 'getPUSTelemetryModeManager.Return' isSpecification = 'false' kind = 'return' type = 'G.320'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.320'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1412'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4231' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.323'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1212'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.1207'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1210'
            name = 'DC_PUSDumpMemoryAbsolute' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1413'
              name = 'doAction' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4239' name = 'doAction.Return' isSpecification = 'false' kind = 'return' type = 'G.17'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.17'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1414'
              name = 'DC_PUSDumpMemoryAbsolute' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.324'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1210'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.1194'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1214'
            name = 'DC_PUSDumpMemoryOffset' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1415'
              name = 'doAction' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4248' name = 'doAction.Return' isSpecification = 'false' kind = 'return' type = 'G.17'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.17'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1416'
              name = 'DC_PUSDumpMemoryOffset' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.325'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1214'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.1194'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1196'
            name = 'DC_PUSMemoryLoadAbsolute' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1417'
              name = 'memId' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.326'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.1418'
              name = 'DC_PUSMemoryLoadAbsolute' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1419'
              name = 'setRawData' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4257' name = 'd' isSpecification = 'false' kind = 'inout' type = 'G.69'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.69'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4258' name = 'n' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4259' name = 'setRawData.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1420'
              name = 'getMemoryBlockId' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4262' name = 'getMemoryBlockId.Return' isSpecification = 'false' kind = 'return' type = 'G.326'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.326'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.327'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1196'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.1193'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1203'
            name = 'DC_PUSMemoryLoadOffset' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1421'
              name = 'memId' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.326'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.1422'
              name = 'DC_PUSMemoryLoadOffset' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1423'
              name = 'setRawData' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4270' name = 'd' isSpecification = 'false' kind = 'inout' type = 'G.69'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.69'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4271' name = 'n' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4272' name = 'setRawData.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1424'
              name = 'getMemoryBlockId' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4275' name = 'getMemoryBlockId.Return' isSpecification = 'false' kind = 'return' type = 'G.326'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.326'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.328'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1203'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.1193'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1209'
            name = 'DC_TestPUSTelecommand' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1425'
              name = 'executionCounter' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.63'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1426'
              name = 'executionCheckValue' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1427'
              name = 'validityCheckValue' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1428'
              name = 'executionSuccess' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1429'
              name = 'executionCheckCode' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.166'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1430'
              name = 'validityCheckCode' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.166'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1431'
              name = 'lasti' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.1432'
              name = 'doAction' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4282' name = 'doAction.Return' isSpecification = 'false' kind = 'return' type = 'G.17'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.17'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1433'
              name = 'DC_TestPUSTelecommand' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1434'
              name = 'getExecutionCounter' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4286' name = 'getExecutionCounter.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1435'
              name = 'canExecute' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4291' name = 'canExecute.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1436'
              name = 'isValid' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4296' name = 'isValid.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1437'
              name = 'getValidityCheckCode' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4300' name = 'getValidityCheckCode.Return' isSpecification = 'false' kind = 'return' type = 'G.166'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.166'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1438'
              name = 'getExecutionCheckCode' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4304' name = 'getExecutionCheckCode.Return' isSpecification = 'false' kind = 'return' type = 'G.166'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.166'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1439'
              name = 'setExecutionCheckValue' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4308' name = 'executionCheckValue' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4309' name = 'setExecutionCheckValue.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1440'
              name = 'setValidityCheckValue' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4313' name = 'validityCheckValue' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4314' name = 'setValidityCheckValue.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1441'
              name = 'setValidityCheckCode' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4318' name = 'validityCheckCode' isSpecification = 'false' kind = 'inout' type = 'G.166'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.166'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4319' name = 'setValidityCheckCode.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1442'
              name = 'setExecutionCheckCode' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4323' name = 'executionCheckCode' isSpecification = 'false' kind = 'inout' type = 'G.166'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.166'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4324' name = 'setExecutionCheckCode.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1443'
              name = 'setActionOutcome' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4328' name = 'executionSuccess' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4329' name = 'setActionOutcome.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1444'
              name = 'getActionOutcome' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4333' name = 'getActionOutcome.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1445'
              name = 'setRawData' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4338' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4339' name = 'd' isSpecification = 'false' kind = 'inout' type = 'G.63'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.63'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4340' name = 'setRawData.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1446'
              name = 'getNumberOfRawData' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4344' name = 'getNumberOfRawData.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.329'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1209'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.1207'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1194'
            name = 'PUSDumpMemory' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1447'
              name = 'data' visibility = 'protected' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.69'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1448'
              name = 'maxNumberData' visibility = 'protected' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1449'
              name = 'numberData' visibility = 'protected' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1450'
              name = 'pTmManager' visibility = 'protected' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.96'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.1451'
              name = 'PUSDumpMemory' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1452'
              name = 'setNumberOfRawData' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4355' name = 'max' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4356' name = 'setNumberOfRawData.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1453'
              name = 'getNumberOfRawData' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4360' name = 'getNumberOfRawData.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1454'
              name = 'setRawData' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4364' name = 'd' isSpecification = 'false' kind = 'inout' type = 'G.69'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.69'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4365' name = 'n' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4366' name = 'setRawData.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1455'
              name = 'getNumberOfApplicationData' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4370' name = 'getNumberOfApplicationData.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1456'
              name = 'setTelemetryManager' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4374' name = 'pTmManager' isSpecification = 'false' kind = 'inout' type = 'G.96'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.96'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4375' name = 'setTelemetryManager.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1457'
              name = 'getTelemetryManager' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4379' name = 'getTelemetryManager.Return' isSpecification = 'false' kind = 'return' type = 'G.96'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.96'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1458'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4382' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.330'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1194'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.1207'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1198'
            name = 'PUSFunctionManagement' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1459'
              name = 'PUSFunctionManagement' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.331'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1198'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.1207'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1193'
            name = 'PUSMemoryLoad' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1215'
              name = 'block' visibility = 'protected' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.332'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1460'
              name = 'maxNumberBlocks' visibility = 'protected' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.333'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1461'
              name = 'numberBlocks' visibility = 'protected' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.333'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1462'
              name = 'data' visibility = 'protected' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.334'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1463'
              name = 'maxNumberData' visibility = 'protected' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.1464'
              name = 'doAction' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4401' name = 'doAction.Return' isSpecification = 'false' kind = 'return' type = 'G.17'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.17'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1465'
              name = 'PUSMemoryLoad' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1466'
              name = 'setMaxNumberBlocks' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4405' name = 'max' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4406' name = 'setMaxNumberBlocks.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1467'
              name = 'getMaxNumberBlocks' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4410' name = 'getMaxNumberBlocks.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1468'
              name = 'getNumberBlocks' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4413' name = 'getNumberBlocks.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1469'
              name = 'setMaxNumberData' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4416' name = 'max' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4417' name = 'setMaxNumberData.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1470'
              name = 'getMaxNumberData' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4421' name = 'getMaxNumberData.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1471'
              name = 'getStartAddress' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4425' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4426' name = 'getStartAddress.Return' isSpecification = 'false' kind = 'return' type = 'G.334'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.334'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1472'
              name = 'getLength' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4430' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4431' name = 'getLength.Return' isSpecification = 'false' kind = 'return' type = 'G.335'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.335'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1473'
              name = 'getChecksum' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4435' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4436' name = 'getChecksum.Return' isSpecification = 'false' kind = 'return' type = 'G.60'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.60'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1474'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4439' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <!--==================== structure [Stereotype] ====================-->
        <UML:Stereotype xmi.id = 'XX.4440'
              name = 'structure' visibility = 'public' isSpecification = 'false' icon = ''>
         <UML:Stereotype.baseClass>
          	Class
         </UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Class xmi.id = 'S.1216'
              name = 'MemBlockType' visibility = 'protected' isSpecification = 'false'
              isAbstract = 'false' isActive = 'false' stereotype = 'XX.4440'>
         <UML:Classifier.feature>
          <UML:Attribute xmi.id = 'S.1475'
                name = 'startAddress' visibility = 'protected' isSpecification = 'false'
                changeability = 'changeable' ownerScope = 'instance'>
           <UML:StructuralFeature.multiplicity>
            <UML:Multiplicity>
             <UML:Multiplicity.range>
              <UML:MultiplicityRange lower = '1' upper = '1'/>
             </UML:Multiplicity.range>
            </UML:Multiplicity>
           </UML:StructuralFeature.multiplicity>
           <UML:StructuralFeature.type>
            <UML:Classifier>
             <UML:Namespace.ownedElement>
              <UML:DataType xmi.idref = 'G.334'/>
             </UML:Namespace.ownedElement>
            </UML:Classifier>
           </UML:StructuralFeature.type>
          </UML:Attribute>
          <UML:Attribute xmi.id = 'S.1476'
                name = 'length' visibility = 'protected' isSpecification = 'false'
                changeability = 'changeable' ownerScope = 'instance'>
           <UML:StructuralFeature.multiplicity>
            <UML:Multiplicity>
             <UML:Multiplicity.range>
              <UML:MultiplicityRange lower = '1' upper = '1'/>
             </UML:Multiplicity.range>
            </UML:Multiplicity>
           </UML:StructuralFeature.multiplicity>
           <UML:StructuralFeature.type>
            <UML:Classifier>
             <UML:Namespace.ownedElement>
              <UML:DataType xmi.idref = 'G.335'/>
             </UML:Namespace.ownedElement>
            </UML:Classifier>
           </UML:StructuralFeature.type>
          </UML:Attribute>
          <UML:Attribute xmi.id = 'S.1477'
                name = 'checksum' visibility = 'protected' isSpecification = 'false'
                changeability = 'changeable' ownerScope = 'instance'>
           <UML:StructuralFeature.multiplicity>
            <UML:Multiplicity>
             <UML:Multiplicity.range>
              <UML:MultiplicityRange lower = '1' upper = '1'/>
             </UML:Multiplicity.range>
            </UML:Multiplicity>
           </UML:StructuralFeature.multiplicity>
           <UML:StructuralFeature.type>
            <UML:Classifier>
             <UML:Namespace.ownedElement>
              <UML:DataType xmi.idref = 'G.60'/>
             </UML:Namespace.ownedElement>
            </UML:Classifier>
           </UML:StructuralFeature.type>
          </UML:Attribute>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Generalization xmi.id = 'G.336'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1193'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.1207'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1207'
            name = 'PUSTelecommand' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1478'
              name = 'packetId' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.337'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1479'
              name = 'tcId' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.173'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1480'
              name = 'tcType' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.338'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1481'
              name = 'tcSubType' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.339'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1482'
              name = 'tcSource' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.181'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1483'
              name = 'ackLevel' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.340'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1484'
              name = 'validityCheckCode' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.166'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.1485'
              name = 'setValidityCheckCode' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4451' name = 'valCheckCode' isSpecification = 'false' kind = 'inout' type = 'G.166'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.166'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4452' name = 'setValidityCheckCode.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1486'
              name = 'PUSTelecommand' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1487'
              name = 'isValid' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4457' name = 'isValid.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1488'
              name = 'getValidityCheckCode' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4461' name = 'getValidityCheckCode.Return' isSpecification = 'false' kind = 'return' type = 'G.166'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.166'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1489'
              name = 'getPacketId' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'classifier'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4465' name = 'getPacketId.Return' isSpecification = 'false' kind = 'return' type = 'G.337'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.337'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1490'
              name = 'setApplicationId' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'classifier'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4469' name = 'apid' isSpecification = 'false' kind = 'inout' type = 'G.341'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.341'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4470' name = 'setApplicationId.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1491'
              name = 'getTelecommandId' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4473' name = 'getTelecommandId.Return' isSpecification = 'false' kind = 'return' type = 'G.173'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.173'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1492'
              name = 'setTelecommandId' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4477' name = 'tcIdentifier' isSpecification = 'false' kind = 'inout' type = 'G.173'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.173'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4478' name = 'setTelecommandId.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1493'
              name = 'getType' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4481' name = 'getType.Return' isSpecification = 'false' kind = 'return' type = 'G.338'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.338'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1494'
              name = 'setType' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4485' name = 'tcType' isSpecification = 'false' kind = 'inout' type = 'G.338'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.338'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4486' name = 'setType.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1495'
              name = 'getSubType' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4489' name = 'getSubType.Return' isSpecification = 'false' kind = 'return' type = 'G.339'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.339'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1496'
              name = 'setSubType' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4493' name = 'tcSubType' isSpecification = 'false' kind = 'inout' type = 'G.339'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.339'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4494' name = 'setSubType.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1497'
              name = 'getSource' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4497' name = 'getSource.Return' isSpecification = 'false' kind = 'return' type = 'G.181'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.181'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1498'
              name = 'setSource' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4501' name = 'tcSource' isSpecification = 'false' kind = 'inout' type = 'G.181'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.181'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4502' name = 'setSource.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1499'
              name = 'setAcknowledgeLevel' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4506' name = 'ackLevel' isSpecification = 'false' kind = 'inout' type = 'G.340'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.340'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4507' name = 'setAcknowledgeLevel.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1500'
              name = 'getAcknowledgeLevel' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4511' name = 'getAcknowledgeLevel.Return' isSpecification = 'false' kind = 'return' type = 'G.340'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.340'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1501'
              name = 'isAcceptanceAckRequired' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4515' name = 'isAcceptanceAckRequired.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1502'
              name = 'isStartAckRequired' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4519' name = 'isStartAckRequired.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1503'
              name = 'isProgressAckRequired' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4523' name = 'isProgressAckRequired.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1504'
              name = 'isCompletionAckRequired' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4527' name = 'isCompletionAckRequired.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1505'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4530' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.342'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1207'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.1199'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1199'
            name = 'Telecommand' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1506'
              name = 'timeTag' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.52'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1507'
              name = 'inUse' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.1508'
              name = 'Telecommand' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1509'
              name = 'isValid' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4543' name = 'isValid.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1510'
              name = 'getValidityCheckCode' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4547' name = 'getValidityCheckCode.Return' isSpecification = 'false' kind = 'return' type = 'G.166'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.166'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1511'
              name = 'canExecute' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4551' name = 'canExecute.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1512'
              name = 'getExecutionCheckCode' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4555' name = 'getExecutionCheckCode.Return' isSpecification = 'false' kind = 'return' type = 'G.166'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.166'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1513'
              name = 'getTelecommandId' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4558' name = 'getTelecommandId.Return' isSpecification = 'false' kind = 'return' type = 'G.173'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.173'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1514'
              name = 'setTelecommandId' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4562' name = 'tcIdentifier' isSpecification = 'false' kind = 'inout' type = 'G.173'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.173'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4563' name = 'setTelecommandId.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1515'
              name = 'getType' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4566' name = 'getType.Return' isSpecification = 'false' kind = 'return' type = 'G.338'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.338'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1516'
              name = 'setType' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4570' name = 'tcType' isSpecification = 'false' kind = 'inout' type = 'G.338'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.338'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4571' name = 'setType.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1517'
              name = 'getSubType' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4574' name = 'getSubType.Return' isSpecification = 'false' kind = 'return' type = 'G.339'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.339'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1518'
              name = 'setSubType' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4578' name = 'tcSubType' isSpecification = 'false' kind = 'inout' type = 'G.339'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.339'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4579' name = 'setSubType.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1519'
              name = 'getSource' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4582' name = 'getSource.Return' isSpecification = 'false' kind = 'return' type = 'G.181'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.181'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1520'
              name = 'setSource' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4586' name = 'tcSource' isSpecification = 'false' kind = 'inout' type = 'G.181'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.181'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4587' name = 'setSource.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1521'
              name = 'getTimeTag' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4590' name = 'getTimeTag.Return' isSpecification = 'false' kind = 'return' type = 'G.52'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.52'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1522'
              name = 'setTimeTag' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4594' name = 'timeTag' isSpecification = 'false' kind = 'inout' type = 'G.52'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.52'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4595' name = 'setTimeTag.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1523'
              name = 'setRawData' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4600' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4601' name = 'd' isSpecification = 'false' kind = 'inout' type = 'G.63'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.63'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4602' name = 'setRawData.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1524'
              name = 'getNumberOfRawData' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4606' name = 'getNumberOfRawData.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1525'
              name = 'setRawData' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4610' name = 'd' isSpecification = 'false' kind = 'inout' type = 'G.69'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.69'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4611' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4612' name = 'setRawData.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1526'
              name = 'setInUse' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4616' name = 'newInUse' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4617' name = 'setInUse.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1527'
              name = 'isInUse' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4621' name = 'isInUse.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1528'
              name = 'setAcknowledgeLevel' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4625' name = 'ackLevel' isSpecification = 'false' kind = 'inout' type = 'G.340'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.340'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4626' name = 'setAcknowledgeLevel.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1529'
              name = 'getAcknowledgeLevel' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4630' name = 'getAcknowledgeLevel.Return' isSpecification = 'false' kind = 'return' type = 'G.340'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.340'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1530'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4633' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.343'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1199'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.13'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1213'
            name = 'TelecommandLoader' visibility = 'package' isSpecification = 'false'
            isAbstract = 'true' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1219'
              name = 'pTelecommandManager' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.344'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.1531'
              name = 'TelecommandLoader' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1532'
              name = 'activate' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4640' name = 'activate.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1533'
              name = 'release' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4644' name = 'pTelecommand' isSpecification = 'false' kind = 'inout' type = 'G.310'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.310'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4645' name = 'release.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1534'
              name = 'setTelecommandManager' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4648' name = 'pTcManager' isSpecification = 'false' kind = 'inout' type = 'G.344'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.344'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4649' name = 'setTelecommandManager.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1535'
              name = 'getTelecommandManager' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4653' name = 'getTelecommandManager.Return' isSpecification = 'false' kind = 'return' type = 'G.344'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.344'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1536'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4656' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.345'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1213'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.15'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
     </UML:Namespace.ownedElement>
    </UML:Package>
    <UML:Package xmi.id = 'S.1537'
          name = 'Telemetry' visibility = 'package' isSpecification = 'false'
          isAbstract = 'false'>
     <UML:Namespace.ownedElement>
      <!--From Class PUSMemoryDump to Class MemBlockType-->
      <UML:Association xmi.id = 'G.346'
            name = '{PUSMemoryDump-MemBlockType}' visibility = 'protected' isSpecification = 'false'
            isAbstract = 'false'>
       <UML:Association.connection>
        <UML:AssociationEnd xmi.id = 'G.352' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.qualifier>
          <UML:Attribute xmi.idref = 'S.1567'/>
         </UML:AssociationEnd.qualifier>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity/>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.1542'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
        <UML:AssociationEnd xmi.id = 'G.353' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '0' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.1568'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
       </UML:Association.connection>
      </UML:Association>
      <!--From Class CC_TelemetryManager to Class TelemetryModeManager-->
      <UML:Association xmi.id = 'G.347'
            name = '{CC_TelemetryManager-TelemetryModeManager}' visibility = 'private' isSpecification = 'false'
            isAbstract = 'false'>
       <UML:Association.connection>
        <UML:AssociationEnd xmi.id = 'G.354' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.qualifier>
          <UML:Attribute xmi.idref = 'S.1569'/>
         </UML:AssociationEnd.qualifier>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity/>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.1548'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
        <UML:AssociationEnd xmi.id = 'G.355' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '0' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.1559'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
       </UML:Association.connection>
      </UML:Association>
      <!--From Class CC_TelemetryManager to Class TelemetryStream-->
      <UML:Association xmi.id = 'G.348'
            name = '{CC_TelemetryManager-TelemetryStream}' visibility = 'private' isSpecification = 'false'
            isAbstract = 'false'>
       <UML:Association.connection>
        <UML:AssociationEnd xmi.id = 'G.356' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.qualifier>
          <UML:Attribute xmi.idref = 'S.1570'/>
         </UML:AssociationEnd.qualifier>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity/>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.1548'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
        <UML:AssociationEnd xmi.id = 'G.357' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '0' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.1553'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
       </UML:Association.connection>
      </UML:Association>
      <!--From Class DC_PUSTmLogger to Class TmPacket-->
      <UML:Association xmi.id = 'G.349'
            name = '{DC_PUSTmLogger-TmPacket}' visibility = 'private' isSpecification = 'false'
            isAbstract = 'false'>
       <UML:Association.connection>
        <UML:AssociationEnd xmi.id = 'G.358' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.qualifier>
          <UML:Attribute xmi.idref = 'S.1571'/>
         </UML:AssociationEnd.qualifier>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity/>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.1550'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
        <UML:AssociationEnd xmi.id = 'G.359' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '0' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.1572'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
       </UML:Association.connection>
      </UML:Association>
      <!--From Class CC_TelemetryPacketFactory to Class CC_TelemetryPacketFactory-->
      <UML:Association xmi.id = 'G.350'
            name = '{CC_TelemetryPacketFactory-CC_TelemetryPacketFactory}' visibility = 'private' isSpecification = 'false'
            isAbstract = 'false'>
       <UML:Association.connection>
        <UML:AssociationEnd xmi.id = 'G.360' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.qualifier>
          <UML:Attribute xmi.idref = 'S.1573'/>
         </UML:AssociationEnd.qualifier>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity/>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.1554'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
        <UML:AssociationEnd xmi.id = 'G.361' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '0' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.1554'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
       </UML:Association.connection>
      </UML:Association>
      <!--From Class DC_PUSDataReportingPacket to Class FaDescType-->
      <UML:Association xmi.id = 'G.351'
            name = '{DC_PUSDataReportingPacket-FaDescType}' visibility = 'private' isSpecification = 'false'
            isAbstract = 'false'>
       <UML:Association.connection>
        <UML:AssociationEnd xmi.id = 'G.362' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.qualifier>
          <UML:Attribute xmi.idref = 'S.1574'/>
         </UML:AssociationEnd.qualifier>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity/>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.1564'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
        <UML:AssociationEnd xmi.id = 'G.363' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '0' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.1575'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
       </UML:Association.connection>
      </UML:Association>
      <UML:Class xmi.id = 'S.1548'
            name = 'CC_TelemetryManager' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1569'
              name = 'pTmModeManager' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.364'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1570'
              name = 'pTmStream' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.365'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1576'
              name = 'packetQueueSize' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.40'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1577'
              name = 'pPacketQueue' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.366'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.1578'
              name = 'CC_TelemetryManager' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1579'
              name = 'setTelemetryModeManager' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4710' name = 'pTmModeManager' isSpecification = 'false' kind = 'inout' type = 'G.364'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.364'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4711' name = 'setTelemetryModeManager.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1580'
              name = 'getTelemetryModeManager' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4714' name = 'getTelemetryModeManager.Return' isSpecification = 'false' kind = 'return' type = 'G.364'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.364'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1581'
              name = 'setTelemetryStream' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4717' name = 'pTmStream' isSpecification = 'false' kind = 'inout' type = 'G.365'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.365'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4718' name = 'setTelemetryStream.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1582'
              name = 'getTelemetryStream' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4721' name = 'getTelemetryStream.Return' isSpecification = 'false' kind = 'return' type = 'G.365'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.365'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1583'
              name = 'setImmediateQueueSize' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4724' name = 'size' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4725' name = 'setImmediateQueueSize.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1584'
              name = 'getImmediateQueueSize' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4728' name = 'getImmediateQueueSize.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1585'
              name = 'getImmediateQueueEntry' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4731' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4732' name = 'getImmediateQueueEntry.Return' isSpecification = 'false' kind = 'return' type = 'G.366'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.366'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1586'
              name = 'isImmediateQueueFull' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4735' name = 'isImmediateQueueFull.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1587'
              name = 'activate' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4738' name = 'activate.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1588'
              name = 'sendTelemetryPacket' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4741' name = 'pTmPacket' isSpecification = 'false' kind = 'inout' type = 'G.366'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.366'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4742' name = 'sendTelemetryPacket.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1589'
              name = 'unloadTelemetryPacket' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4745' name = 'pTmPacket' isSpecification = 'false' kind = 'inout' type = 'G.366'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.366'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4746' name = 'unloadTelemetryPacket.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1590'
              name = 'getImmediateQueueLoaded' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4749' name = 'getImmediateQueueLoaded.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1591'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4752' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.367'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1548'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.15'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1554'
            name = 'CC_TelemetryPacketFactory' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1573'
              name = 'pInstance' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.368'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1592'
              name = 'sizeDummyPUSTelemetryPacket' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1593'
              name = 'poolDummyPUSTelemetryPacket' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.184'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1594'
              name = 'sizePUSDataReportingPacket' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1595'
              name = 'poolPUSDataReportingPacket' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.369'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1596'
              name = 'sizePUSMemoryDumpAbsolute' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1597'
              name = 'poolPUSMemoryDumpAbsolute' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.370'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1598'
              name = 'sizePUSMemoryDumpOffset' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1599'
              name = 'poolPUSMemoryDumpOffset' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.371'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1600'
              name = 'sizePUSTcVerificationPacket' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1601'
              name = 'poolPUSTcVerificationPacket' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.372'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.1602'
              name = 'CC_TelemetryPacketFactory' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1603'
              name = 'getInstance' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'classifier'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4760' name = 'getInstance.Return' isSpecification = 'false' kind = 'return' type = 'G.368'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.368'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1604'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4763' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1605'
              name = 'setTelemetryPacket' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4767' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4768' name = 'pItem' isSpecification = 'false' kind = 'inout' type = 'G.184'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.184'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4769' name = 'setTelemetryPacket.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1606'
              name = 'getNumberDummyPUSTelemetryPacket' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4772' name = 'getNumberDummyPUSTelemetryPacket.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1607'
              name = 'getCapacityDummyPUSTelemetryPacket' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4775' name = 'getCapacityDummyPUSTelemetryPacket.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1608'
              name = 'allocateDummyPUSTelemetryPacket' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4778' name = 'allocateDummyPUSTelemetryPacket.Return' isSpecification = 'false' kind = 'return' type = 'G.184'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.184'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1609'
              name = 'isFreeDummyPUSTelemetryPacket' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4782' name = 'isFreeDummyPUSTelemetryPacket.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1610'
              name = 'setTelemetryPacket' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4786' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4787' name = 'pItem' isSpecification = 'false' kind = 'inout' type = 'G.369'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.369'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4788' name = 'setTelemetryPacket.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1611'
              name = 'getNumberPUSDataReportingPacket' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4791' name = 'getNumberPUSDataReportingPacket.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1612'
              name = 'getCapacityPUSDataReportingPacket' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4794' name = 'getCapacityPUSDataReportingPacket.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1613'
              name = 'allocatePUSDataReportingPacket' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4800' name = 'DefinitionBufferSize' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4801' name = 'ValueBufferSize' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4802' name = 'MaxNumberFA' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4803' name = 'allocatePUSDataReportingPacket.Return' isSpecification = 'false' kind = 'return' type = 'G.369'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.369'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1614'
              name = 'isFreePUSDataReportingPacket' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4810' name = 'DefinitionBufferSize' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4811' name = 'ValueBufferSize' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4812' name = 'MaxNumberFA' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4813' name = 'isFreePUSDataReportingPacket.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1615'
              name = 'getPUSDataReportingPacket' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4817' name = 'sid' isSpecification = 'false' kind = 'inout' type = 'G.373'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.373'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4818' name = 'getPUSDataReportingPacket.Return' isSpecification = 'false' kind = 'return' type = 'G.369'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.369'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1616'
              name = 'setTelemetryPacket' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4822' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4823' name = 'pItem' isSpecification = 'false' kind = 'inout' type = 'G.370'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.370'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4824' name = 'setTelemetryPacket.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1617'
              name = 'getNumberPUSMemoryDumpAbsolute' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4827' name = 'getNumberPUSMemoryDumpAbsolute.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1618'
              name = 'getCapacityPUSMemoryDumpAbsolute' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4830' name = 'getCapacityPUSMemoryDumpAbsolute.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1619'
              name = 'allocatePUSMemoryDumpAbsolute' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4835' name = 'MaxNumberBlocks' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4836' name = 'DumpBufferSize' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4837' name = 'allocatePUSMemoryDumpAbsolute.Return' isSpecification = 'false' kind = 'return' type = 'G.370'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.370'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1620'
              name = 'isFreePUSMemoryDumpAbsolute' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4843' name = 'MaxNumberBlocks' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4844' name = 'DumpBufferSize' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4845' name = 'isFreePUSMemoryDumpAbsolute.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1621'
              name = 'setTelemetryPacket' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4849' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4850' name = 'pItem' isSpecification = 'false' kind = 'inout' type = 'G.371'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.371'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4851' name = 'setTelemetryPacket.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1622'
              name = 'getNumberPUSMemoryDumpOffset' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4854' name = 'getNumberPUSMemoryDumpOffset.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1623'
              name = 'getCapacityPUSMemoryDumpOffset' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4857' name = 'getCapacityPUSMemoryDumpOffset.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1624'
              name = 'allocatePUSMemoryDumpOffset' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4862' name = 'MaxNumberBlocks' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4863' name = 'DumpBufferSize' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4864' name = 'allocatePUSMemoryDumpOffset.Return' isSpecification = 'false' kind = 'return' type = 'G.371'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.371'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1625'
              name = 'isFreePUSMemoryDumpOffset' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4870' name = 'MaxNumberBlocks' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4871' name = 'DumpBufferSize' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4872' name = 'isFreePUSMemoryDumpOffset.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1626'
              name = 'setTelemetryPacket' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4876' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4877' name = 'pItem' isSpecification = 'false' kind = 'inout' type = 'G.372'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.372'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4878' name = 'setTelemetryPacket.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1627'
              name = 'getNumberPUSTcVerificationPacket' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4881' name = 'getNumberPUSTcVerificationPacket.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1628'
              name = 'getCapacityPUSTcVerificationPacket' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4884' name = 'getCapacityPUSTcVerificationPacket.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1629'
              name = 'allocatePUSTcVerificationPacket' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4887' name = 'allocatePUSTcVerificationPacket.Return' isSpecification = 'false' kind = 'return' type = 'G.372'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.372'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1630'
              name = 'isFreePUSTcVerificationPacket' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4891' name = 'isFreePUSTcVerificationPacket.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.374'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1554'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.15'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1563'
            name = 'DC_BasicPUSTmStream' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1631'
              name = 'tmData' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.69'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1632'
              name = 'size' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1633'
              name = 'writeCounter' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1634'
              name = 'packetSequenceControl' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.60'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1635'
              name = 'nAdditionalBytes' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.1636'
              name = 'DC_BasicPUSTmStream' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1637'
              name = 'reset' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4897' name = 'reset.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1638'
              name = 'flush' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4900' name = 'flush.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1639'
              name = 'getCapacity' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4903' name = 'getCapacity.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1640'
              name = 'setCapacity' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4907' name = 'n' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4908' name = 'setCapacity.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1641'
              name = 'setStartAddress' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4911' name = 'pAddress' isSpecification = 'false' kind = 'inout' type = 'G.69'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.69'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4912' name = 'setStartAddress.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1642'
              name = 'getStartAddress' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4916' name = 'getStartAddress.Return' isSpecification = 'false' kind = 'return' type = 'G.69'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.69'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1643'
              name = 'getPacketCounter' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4919' name = 'getPacketCounter.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1644'
              name = 'getWriteCounter' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4922' name = 'getWriteCounter.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1645'
              name = 'getSequenceCounter' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4925' name = 'getSequenceCounter.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1646'
              name = 'doesPacketFit' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4929' name = 'pPacket' isSpecification = 'false' kind = 'inout' type = 'G.366'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.366'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4930' name = 'doesPacketFit.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1647'
              name = 'write' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4933' name = 'pItem' isSpecification = 'false' kind = 'inout' type = 'G.366'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.366'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4934' name = 'write.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1648'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4937' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.375'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1563'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.1553'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1543'
            name = 'DC_ByteArrayTelemetryStream' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1649'
              name = 'tmData' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.69'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1650'
              name = 'size' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1651'
              name = 'writeCounter' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.1652'
              name = 'DC_ByteArrayTelemetryStream' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1653'
              name = 'reset' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4943' name = 'reset.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1654'
              name = 'flush' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4946' name = 'flush.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1655'
              name = 'getCapacity' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4949' name = 'getCapacity.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1656'
              name = 'setCapacity' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4953' name = 'n' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4954' name = 'setCapacity.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1657'
              name = 'setStartingAddress' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4957' name = 'pAddress' isSpecification = 'false' kind = 'inout' type = 'G.69'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.69'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4958' name = 'setStartingAddress.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1658'
              name = 'getStartingAddress' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4961' name = 'getStartingAddress.Return' isSpecification = 'false' kind = 'return' type = 'G.69'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.69'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1659'
              name = 'doesPacketFit' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4965' name = 'pPacket' isSpecification = 'false' kind = 'inout' type = 'G.366'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.366'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4966' name = 'doesPacketFit.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1660'
              name = 'write' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4969' name = 'pItem' isSpecification = 'false' kind = 'inout' type = 'G.366'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.366'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4970' name = 'write.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1661'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4973' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.376'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1543'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.1553'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1560'
            name = 'DC_CycleDataItem16TmStream' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1662'
              name = 'pDataItem' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.377'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1663'
              name = 'nDataItems' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1664'
              name = 'writeCounter' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.1665'
              name = 'DC_CycleDataItem16TmStream' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1666'
              name = 'reset' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4980' name = 'reset.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1667'
              name = 'flush' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4983' name = 'flush.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1668'
              name = 'getCapacity' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4987' name = 'getCapacity.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1669'
              name = 'setNumberOfDataItems' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4991' name = 'n' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4992' name = 'setNumberOfDataItems.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1670'
              name = 'setDataItem' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.4997' name = 'n' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4998' name = 'pDataItem' isSpecification = 'false' kind = 'inout' type = 'G.377'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.377'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.4999' name = 'setDataItem.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1671'
              name = 'doesPacketFit' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5003' name = 'pPacket' isSpecification = 'false' kind = 'inout' type = 'G.366'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.366'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5004' name = 'doesPacketFit.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1672'
              name = 'write' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5007' name = 'pItem' isSpecification = 'false' kind = 'inout' type = 'G.366'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.366'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5008' name = 'write.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1673'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5011' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.378'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1560'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.1553'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1557'
            name = 'DC_CyclingTelemetryModeManager' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1674'
              name = 'DC_CyclingTelemetryModeManager' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1675'
              name = 'update' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5018' name = 'update.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.379'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1557'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.1545'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1565'
            name = 'DC_DataItem16TmWord' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1676'
              name = 'pDataItem' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.377'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.1677'
              name = 'DC_DataItem16TmWord' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1678'
              name = 'update' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5025' name = 'update.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1679'
              name = 'setDataItem' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5028' name = 'pDataItem' isSpecification = 'false' kind = 'inout' type = 'G.377'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.377'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5029' name = 'setDataItem.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1680'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5032' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.380'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1565'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.1558'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1549'
            name = 'DC_DummyPUSTelemetryPacket' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1681'
              name = 'item' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.63'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.1682'
              name = 'DC_DummyPUSTelemetryPacket' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1683'
              name = 'getNumberOfBytes' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5040' name = 'getNumberOfBytes.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1684'
              name = 'getUnsignedByte' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5044' name = 'n' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5045' name = 'getUnsignedByte.Return' isSpecification = 'false' kind = 'return' type = 'G.63'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.63'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1685'
              name = 'update' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5047' name = 'update.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1686'
              name = 'setValue' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5051' name = 'value' isSpecification = 'false' kind = 'inout' type = 'G.63'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.63'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5052' name = 'setValue.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.381'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1549'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.1561'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1556'
            name = 'DC_DummyTelemetryPacket' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1687'
              name = 'nOfBytes' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1688'
              name = 'item' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.69'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1689'
              name = 'validStatus' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.1690'
              name = 'DC_DummyTelemetryPacket' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1691'
              name = 'getNumberOfBytes' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5059' name = 'getNumberOfBytes.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1692'
              name = 'getUnsignedByte' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5063' name = 'n' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5064' name = 'getUnsignedByte.Return' isSpecification = 'false' kind = 'return' type = 'G.63'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.63'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1693'
              name = 'update' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5066' name = 'update.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1694'
              name = 'setValidStatus' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5070' name = 'validStatus' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5071' name = 'setValidStatus.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1695'
              name = 'setValue' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5076' name = 'n' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5077' name = 'value' isSpecification = 'false' kind = 'inout' type = 'G.63'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.63'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5078' name = 'setValue.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1696'
              name = 'setNumberOfBytes' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5082' name = 'n' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5083' name = 'setNumberOfBytes.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1697'
              name = 'isValid' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5087' name = 'isValid.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1698'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5090' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.382'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1556'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.1555'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1551'
            name = 'DC_DummyTelemetryStream' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1699'
              name = 'DC_DummyTelemetryStream' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1700'
              name = 'write' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5097' name = 'tmItem' isSpecification = 'false' kind = 'inout' type = 'G.366'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.366'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5098' name = 'write.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.383'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1551'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.1553'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1562'
            name = 'DC_FileTelemetryStream' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1701'
              name = 'out' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.283'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.1702'
              name = 'DC_FileTelemetryStream' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1703'
              name = 'setOutputStream' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5105' name = 'outputStream' isSpecification = 'false' kind = 'inout' type = 'G.283'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.283'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5106' name = 'setOutputStream.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1704'
              name = 'getOutputStream' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5109' name = 'getOutputStream.Return' isSpecification = 'false' kind = 'return' type = 'G.283'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.283'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1705'
              name = 'flush' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5111' name = 'flush.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1706'
              name = 'write' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5114' name = 'tmItem' isSpecification = 'false' kind = 'inout' type = 'G.366'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.366'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5115' name = 'write.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.384'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1562'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.1553'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1564'
            name = 'DC_PUSDataReportingPacket' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1707'
              name = 'enabled' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1708'
              name = 'defBuffer' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.69'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1709'
              name = 'defBufferSize' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1710'
              name = 'defBufferCounter' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1711'
              name = 'valBuffer' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.69'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1712'
              name = 'valBufferSize' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1713'
              name = 'indSID' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1714'
              name = 'indCollectionInterval' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1715'
              name = 'indNPAR1' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1716'
              name = 'indNFA' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1574'
              name = 'F' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.385'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1717'
              name = 'faDescSize' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1718'
              name = 'FAcounter' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.1719'
              name = 'getParameterId' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5124' name = 'faIndex' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5125' name = 'parPos' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5126' name = 'getParameterId.Return' isSpecification = 'false' kind = 'return' type = 'G.50'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.50'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1720'
              name = 'DC_PUSDataReportingPacket' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1721'
              name = 'setEnabled' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5131' name = 'enabledStatus' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5132' name = 'setEnabled.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1722'
              name = 'isEnabled' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5135' name = 'isEnabled.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1723'
              name = 'getCollectionInterval' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5138' name = 'getCollectionInterval.Return' isSpecification = 'false' kind = 'return' type = 'G.386'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.386'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1724'
              name = 'getNPAR1' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5141' name = 'getNPAR1.Return' isSpecification = 'false' kind = 'return' type = 'G.387'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.387'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1725'
              name = 'getNFA' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5144' name = 'getNFA.Return' isSpecification = 'false' kind = 'return' type = 'G.63'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.63'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1726'
              name = 'getSID' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5147' name = 'getSID.Return' isSpecification = 'false' kind = 'return' type = 'G.373'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.373'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1727'
              name = 'setDefinitionBuffer' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5152' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5153' name = 'val' isSpecification = 'false' kind = 'inout' type = 'G.63'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.63'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5154' name = 'setDefinitionBuffer.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1728'
              name = 'getDefinitionBuffer' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5160' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5161' name = 'getDefinitionBuffer.Return' isSpecification = 'false' kind = 'return' type = 'G.63'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.63'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1729'
              name = 'getDefinitionBufferLength' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5164' name = 'getDefinitionBufferLength.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1730'
              name = 'update' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5166' name = 'update.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1731'
              name = 'reset' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5169' name = 'reset.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1732'
              name = 'getNumberOfBytes' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5173' name = 'getNumberOfBytes.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1733'
              name = 'getUnsignedByte' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5176' name = 'n' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5177' name = 'getUnsignedByte.Return' isSpecification = 'false' kind = 'return' type = 'G.63'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.63'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1734'
              name = 'getStartAddress' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5180' name = 'getStartAddress.Return' isSpecification = 'false' kind = 'return' type = 'G.69'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.69'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1735'
              name = 'isFastAcquisitionImplemented' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5184' name = 'isFastAcquisitionImplemented.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1736'
              name = 'setDefinitionBufferSize' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5188' name = 'size' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5189' name = 'setDefinitionBufferSize.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1737'
              name = 'getDefinitionBufferSize' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5192' name = 'getDefinitionBufferSize.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1738'
              name = 'setMaxNumberFA' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5195' name = 'n' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5196' name = 'setMaxNumberFA.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1739'
              name = 'getMaxNumberFA' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5199' name = 'getMaxNumberFA.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1740'
              name = 'setValueBufferSize' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5202' name = 'size' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5203' name = 'setValueBufferSize.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1741'
              name = 'getValueBufferSize' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5206' name = 'getValueBufferSize.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1742'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5209' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <!--==================== structure [Stereotype] ====================-->
        <UML:Stereotype xmi.id = 'XX.5210'
              name = 'structure' visibility = 'public' isSpecification = 'false' icon = ''>
         <UML:Stereotype.baseClass>
          	Class
         </UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Class xmi.id = 'S.1575'
              name = 'FaDescType' visibility = 'private' isSpecification = 'false'
              isAbstract = 'false' isActive = 'false' stereotype = 'XX.5210'>
         <UML:Classifier.feature>
          <UML:Attribute xmi.id = 'S.1743'
                name = 'nrep' visibility = 'private' isSpecification = 'false'
                changeability = 'changeable' ownerScope = 'instance'>
           <UML:StructuralFeature.multiplicity>
            <UML:Multiplicity>
             <UML:Multiplicity.range>
              <UML:MultiplicityRange lower = '1' upper = '1'/>
             </UML:Multiplicity.range>
            </UML:Multiplicity>
           </UML:StructuralFeature.multiplicity>
           <UML:StructuralFeature.type>
            <UML:Classifier>
             <UML:Namespace.ownedElement>
              <UML:DataType xmi.idref = 'G.63'/>
             </UML:Namespace.ownedElement>
            </UML:Classifier>
           </UML:StructuralFeature.type>
          </UML:Attribute>
          <UML:Attribute xmi.id = 'S.1744'
                name = 'npar' visibility = 'private' isSpecification = 'false'
                changeability = 'changeable' ownerScope = 'instance'>
           <UML:StructuralFeature.multiplicity>
            <UML:Multiplicity>
             <UML:Multiplicity.range>
              <UML:MultiplicityRange lower = '1' upper = '1'/>
             </UML:Multiplicity.range>
            </UML:Multiplicity>
           </UML:StructuralFeature.multiplicity>
           <UML:StructuralFeature.type>
            <UML:Classifier>
             <UML:Namespace.ownedElement>
              <UML:DataType xmi.idref = 'G.387'/>
             </UML:Namespace.ownedElement>
            </UML:Classifier>
           </UML:StructuralFeature.type>
          </UML:Attribute>
          <UML:Attribute xmi.id = 'S.1745'
                name = 'size' visibility = 'private' isSpecification = 'false'
                changeability = 'changeable' ownerScope = 'instance'>
           <UML:StructuralFeature.multiplicity>
            <UML:Multiplicity>
             <UML:Multiplicity.range>
              <UML:MultiplicityRange lower = '1' upper = '1'/>
             </UML:Multiplicity.range>
            </UML:Multiplicity>
           </UML:StructuralFeature.multiplicity>
           <UML:StructuralFeature.type>
            <UML:Classifier>
             <UML:Namespace.ownedElement>
              <UML:DataType xmi.idref = 'G.15'/>
             </UML:Namespace.ownedElement>
            </UML:Classifier>
           </UML:StructuralFeature.type>
          </UML:Attribute>
          <UML:Attribute xmi.id = 'S.1746'
                name = 'counter' visibility = 'private' isSpecification = 'false'
                changeability = 'changeable' ownerScope = 'instance'>
           <UML:StructuralFeature.multiplicity>
            <UML:Multiplicity>
             <UML:Multiplicity.range>
              <UML:MultiplicityRange lower = '1' upper = '1'/>
             </UML:Multiplicity.range>
            </UML:Multiplicity>
           </UML:StructuralFeature.multiplicity>
           <UML:StructuralFeature.type>
            <UML:Classifier>
             <UML:Namespace.ownedElement>
              <UML:DataType xmi.idref = 'G.386'/>
             </UML:Namespace.ownedElement>
            </UML:Classifier>
           </UML:StructuralFeature.type>
          </UML:Attribute>
          <UML:Attribute xmi.id = 'S.1747'
                name = 'rep' visibility = 'private' isSpecification = 'false'
                changeability = 'changeable' ownerScope = 'instance'>
           <UML:StructuralFeature.multiplicity>
            <UML:Multiplicity>
             <UML:Multiplicity.range>
              <UML:MultiplicityRange lower = '1' upper = '1'/>
             </UML:Multiplicity.range>
            </UML:Multiplicity>
           </UML:StructuralFeature.multiplicity>
           <UML:StructuralFeature.type>
            <UML:Classifier>
             <UML:Namespace.ownedElement>
              <UML:DataType xmi.idref = 'G.15'/>
             </UML:Namespace.ownedElement>
            </UML:Classifier>
           </UML:StructuralFeature.type>
          </UML:Attribute>
          <UML:Attribute xmi.id = 'S.1748'
                name = 'ind' visibility = 'private' isSpecification = 'false'
                changeability = 'changeable' ownerScope = 'instance'>
           <UML:StructuralFeature.multiplicity>
            <UML:Multiplicity>
             <UML:Multiplicity.range>
              <UML:MultiplicityRange lower = '1' upper = '1'/>
             </UML:Multiplicity.range>
            </UML:Multiplicity>
           </UML:StructuralFeature.multiplicity>
           <UML:StructuralFeature.type>
            <UML:Classifier>
             <UML:Namespace.ownedElement>
              <UML:DataType xmi.idref = 'G.15'/>
             </UML:Namespace.ownedElement>
            </UML:Classifier>
           </UML:StructuralFeature.type>
          </UML:Attribute>
          <UML:Attribute xmi.id = 'S.1749'
                name = 'val' visibility = 'private' isSpecification = 'false'
                changeability = 'changeable' ownerScope = 'instance'>
           <UML:StructuralFeature.multiplicity>
            <UML:Multiplicity>
             <UML:Multiplicity.range>
              <UML:MultiplicityRange lower = '1' upper = '1'/>
             </UML:Multiplicity.range>
            </UML:Multiplicity>
           </UML:StructuralFeature.multiplicity>
           <UML:StructuralFeature.type>
            <UML:Classifier>
             <UML:Namespace.ownedElement>
              <UML:DataType xmi.idref = 'G.15'/>
             </UML:Namespace.ownedElement>
            </UML:Classifier>
           </UML:StructuralFeature.type>
          </UML:Attribute>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Generalization xmi.id = 'G.388'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1564'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.1561'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1552'
            name = 'DC_PUSMemoryDumpAbsolute' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1750'
              name = 'DC_PUSMemoryDumpAbsolute' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1751'
              name = 'update' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5217' name = 'update.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.389'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1552'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.1542'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1566'
            name = 'DC_PUSMemoryDumpOffset' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1752'
              name = 'base' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.334'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.1753'
              name = 'DC_PUSMemoryDumpOffset' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1754'
              name = 'setBaseAddress' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5226' name = 'base' isSpecification = 'false' kind = 'inout' type = 'G.334'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.334'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5227' name = 'setBaseAddress.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1755'
              name = 'getBaseAddress' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5231' name = 'getBaseAddress.Return' isSpecification = 'false' kind = 'return' type = 'G.334'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.334'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1756'
              name = 'update' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5233' name = 'update.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.390'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1566'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.1542'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1544'
            name = 'DC_PUSTcVerificationPacket' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1757'
              name = 'packetLengthSuccess' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1758'
              name = 'packetLengthFailure' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1759'
              name = 'tmByte' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.69'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.1760'
              name = 'DC_PUSTcVerificationPacket' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1761'
              name = 'getNumberOfBytes' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5242' name = 'getNumberOfBytes.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1762'
              name = 'getUnsignedByte' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5246' name = 'n' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5247' name = 'getUnsignedByte.Return' isSpecification = 'false' kind = 'return' type = 'G.63'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.63'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1763'
              name = 'getErrorCode' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5250' name = 'getErrorCode.Return' isSpecification = 'false' kind = 'return' type = 'G.166'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.166'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1764'
              name = 'setErrorCode' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5254' name = 'errCode' isSpecification = 'false' kind = 'inout' type = 'G.166'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.166'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5255' name = 'setErrorCode.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1765'
              name = 'getTelecommandId' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5258' name = 'getTelecommandId.Return' isSpecification = 'false' kind = 'return' type = 'G.173'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.173'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1766'
              name = 'setTelecommandId' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5261' name = 'tcId' isSpecification = 'false' kind = 'inout' type = 'G.173'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.173'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5262' name = 'setTelecommandId.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1767'
              name = 'update' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5264' name = 'update.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.391'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1544'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.1561'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1546'
            name = 'DC_PUSTelemetryModeManager' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1768'
              name = 'list' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.369'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1769'
              name = 'listLength' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1770'
              name = 'iterationCounter' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1771'
              name = 'counter' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.1772'
              name = 'allocateMemory' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5272' name = 'numberOfModes' isSpecification = 'false' kind = 'inout' type = 'G.24'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.24'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5273' name = 'allocateMemory.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1773'
              name = 'DC_PUSTelemetryModeManager' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1774'
              name = 'update' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5277' name = 'update.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1775'
              name = 'getIterationTelemetryPacket' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5281' name = 'getIterationTelemetryPacket.Return' isSpecification = 'false' kind = 'return' type = 'G.366'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.366'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1776'
              name = 'loadPacket' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5284' name = 'pItem' isSpecification = 'false' kind = 'inout' type = 'G.369'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.369'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5285' name = 'loadPacket.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1777'
              name = 'unloadPacket' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5288' name = 'sid' isSpecification = 'false' kind = 'inout' type = 'G.373'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.373'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5289' name = 'unloadPacket.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1778'
              name = 'isFull' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5293' name = 'isFull.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1779'
              name = 'getNumberOfPackets' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5296' name = 'getNumberOfPackets.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1780'
              name = 'isSIDLoaded' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5301' name = 'sid' isSpecification = 'false' kind = 'inout' type = 'G.373'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.373'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5302' name = 'isSIDLoaded.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1781'
              name = 'setMaxNumberOfPackets' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5305' name = 'n' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5306' name = 'setMaxNumberOfPackets.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1782'
              name = 'getMaxNumberOfPackets' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5309' name = 'getMaxNumberOfPackets.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1783'
              name = 'first' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5311' name = 'first.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1784'
              name = 'next' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5314' name = 'next.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1785'
              name = 'isIterationFinished' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5318' name = 'isIterationFinished.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1786'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5321' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.392'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1546'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.1559'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1550'
            name = 'DC_PUSTmLogger' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1571'
              name = 'tmBuffer' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.393'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1787'
              name = 'maxData' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1788'
              name = 'counter' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1789'
              name = 'capacity' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.1790'
              name = 'DC_PUSTmLogger' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1791'
              name = 'setBufferCapacity' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5328' name = 'n' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5329' name = 'setBufferCapacity.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1792'
              name = 'getBufferCapacity' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5333' name = 'getBufferCapacity.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1793'
              name = 'setMaxPacketLength' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5336' name = 'n' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5337' name = 'setMaxPacketLength.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1794'
              name = 'getMaxPacketLength' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5341' name = 'getMaxPacketLength.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1795'
              name = 'getPacketCounter' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5344' name = 'getPacketCounter.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1796'
              name = 'getType' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5348' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5349' name = 'getType.Return' isSpecification = 'false' kind = 'return' type = 'G.394'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.394'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1797'
              name = 'getSubType' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5354' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5355' name = 'getSubType.Return' isSpecification = 'false' kind = 'return' type = 'G.256'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.256'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1798'
              name = 'getTimeTag' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5360' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5361' name = 'getTimeTag.Return' isSpecification = 'false' kind = 'return' type = 'G.52'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.52'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1799'
              name = 'getLength' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5366' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5367' name = 'getLength.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1800'
              name = 'getData' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5373' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5374' name = 'j' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5375' name = 'getData.Return' isSpecification = 'false' kind = 'return' type = 'G.63'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.63'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1801'
              name = 'doesPacketFit' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5379' name = 'pPacket' isSpecification = 'false' kind = 'inout' type = 'G.366'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.366'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5380' name = 'doesPacketFit.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1802'
              name = 'write' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5383' name = 'pItem' isSpecification = 'false' kind = 'inout' type = 'G.366'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.366'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5384' name = 'write.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1803'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5387' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <!--==================== structure [Stereotype] ====================-->
        <UML:Stereotype xmi.id = 'XX.5388'
              name = 'structure' visibility = 'public' isSpecification = 'false' icon = ''>
         <UML:Stereotype.baseClass>
          	Class
         </UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Class xmi.id = 'S.1572'
              name = 'TmPacket' visibility = 'private' isSpecification = 'false'
              isAbstract = 'false' isActive = 'false' stereotype = 'XX.5388'>
         <UML:Classifier.feature>
          <UML:Attribute xmi.id = 'S.1804'
                name = 'type' visibility = 'private' isSpecification = 'false'
                changeability = 'changeable' ownerScope = 'instance'>
           <UML:StructuralFeature.multiplicity>
            <UML:Multiplicity>
             <UML:Multiplicity.range>
              <UML:MultiplicityRange lower = '1' upper = '1'/>
             </UML:Multiplicity.range>
            </UML:Multiplicity>
           </UML:StructuralFeature.multiplicity>
           <UML:StructuralFeature.type>
            <UML:Classifier>
             <UML:Namespace.ownedElement>
              <UML:DataType xmi.idref = 'G.394'/>
             </UML:Namespace.ownedElement>
            </UML:Classifier>
           </UML:StructuralFeature.type>
          </UML:Attribute>
          <UML:Attribute xmi.id = 'S.1805'
                name = 'subType' visibility = 'private' isSpecification = 'false'
                changeability = 'changeable' ownerScope = 'instance'>
           <UML:StructuralFeature.multiplicity>
            <UML:Multiplicity>
             <UML:Multiplicity.range>
              <UML:MultiplicityRange lower = '1' upper = '1'/>
             </UML:Multiplicity.range>
            </UML:Multiplicity>
           </UML:StructuralFeature.multiplicity>
           <UML:StructuralFeature.type>
            <UML:Classifier>
             <UML:Namespace.ownedElement>
              <UML:DataType xmi.idref = 'G.256'/>
             </UML:Namespace.ownedElement>
            </UML:Classifier>
           </UML:StructuralFeature.type>
          </UML:Attribute>
          <UML:Attribute xmi.id = 'S.1806'
                name = 'timeTag' visibility = 'private' isSpecification = 'false'
                changeability = 'changeable' ownerScope = 'instance'>
           <UML:StructuralFeature.multiplicity>
            <UML:Multiplicity>
             <UML:Multiplicity.range>
              <UML:MultiplicityRange lower = '1' upper = '1'/>
             </UML:Multiplicity.range>
            </UML:Multiplicity>
           </UML:StructuralFeature.multiplicity>
           <UML:StructuralFeature.type>
            <UML:Classifier>
             <UML:Namespace.ownedElement>
              <UML:DataType xmi.idref = 'G.52'/>
             </UML:Namespace.ownedElement>
            </UML:Classifier>
           </UML:StructuralFeature.type>
          </UML:Attribute>
          <UML:Attribute xmi.id = 'S.1807'
                name = 'data' visibility = 'private' isSpecification = 'false'
                changeability = 'changeable' ownerScope = 'instance'>
           <UML:StructuralFeature.multiplicity>
            <UML:Multiplicity>
             <UML:Multiplicity.range>
              <UML:MultiplicityRange lower = '1' upper = '1'/>
             </UML:Multiplicity.range>
            </UML:Multiplicity>
           </UML:StructuralFeature.multiplicity>
           <UML:StructuralFeature.type>
            <UML:Classifier>
             <UML:Namespace.ownedElement>
              <UML:DataType xmi.idref = 'G.69'/>
             </UML:Namespace.ownedElement>
            </UML:Classifier>
           </UML:StructuralFeature.type>
          </UML:Attribute>
          <UML:Attribute xmi.id = 'S.1808'
                name = 'nData' visibility = 'private' isSpecification = 'false'
                changeability = 'changeable' ownerScope = 'instance'>
           <UML:StructuralFeature.multiplicity>
            <UML:Multiplicity>
             <UML:Multiplicity.range>
              <UML:MultiplicityRange lower = '1' upper = '1'/>
             </UML:Multiplicity.range>
            </UML:Multiplicity>
           </UML:StructuralFeature.multiplicity>
           <UML:StructuralFeature.type>
            <UML:Classifier>
             <UML:Namespace.ownedElement>
              <UML:DataType xmi.idref = 'G.15'/>
             </UML:Namespace.ownedElement>
            </UML:Classifier>
           </UML:StructuralFeature.type>
          </UML:Attribute>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Generalization xmi.id = 'G.395'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1550'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.1553'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1547'
            name = 'DC_SimpleTelemetryModeManager' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1809'
              name = 'DC_SimpleTelemetryModeManager' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1810'
              name = 'update' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5395' name = 'update.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.396'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1547'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.1545'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1542'
            name = 'PUSMemoryDump' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1567'
              name = 'block' visibility = 'protected' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.397'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1811'
              name = 'maxNumberBlocks' visibility = 'protected' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.333'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1812'
              name = 'numberBlocks' visibility = 'protected' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.333'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1813'
              name = 'data' visibility = 'protected' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.69'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1814'
              name = 'tmPacketSize' visibility = 'protected' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1815'
              name = 'maxNumberData' visibility = 'protected' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1816'
              name = 'isChecksumRequired' visibility = 'protected' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = 'false'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1817'
              name = 'memId' visibility = 'protected' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.326'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.1818'
              name = 'PUSMemoryDump' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1819'
              name = 'setMaxNumberBlocks' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5411' name = 'max' isSpecification = 'false' kind = 'inout' type = 'G.333'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.333'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5412' name = 'setMaxNumberBlocks.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1820'
              name = 'getMaxNumberBlocks' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5416' name = 'getMaxNumberBlocks.Return' isSpecification = 'false' kind = 'return' type = 'G.333'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.333'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1821'
              name = 'setNumberBlocks' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5419' name = 'max' isSpecification = 'false' kind = 'inout' type = 'G.333'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.333'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5420' name = 'setNumberBlocks.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1822'
              name = 'getNumberBlocks' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5424' name = 'getNumberBlocks.Return' isSpecification = 'false' kind = 'return' type = 'G.333'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.333'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1823'
              name = 'setDumpBufferSize' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5427' name = 'max' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5428' name = 'setDumpBufferSize.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1824'
              name = 'getDumpBufferSize' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5432' name = 'getDumpBufferSize.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1825'
              name = 'setChecksumFlag' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'classifier'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5435' name = 'checksumFlag' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5436' name = 'setChecksumFlag.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1826'
              name = 'isChecksumFlagSet' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'classifier'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5439' name = 'isChecksumFlagSet.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1827'
              name = 'defineBlock' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5444' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.333'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.333'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5445' name = 'start' isSpecification = 'false' kind = 'inout' type = 'G.334'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.334'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5446' name = 'length' isSpecification = 'false' kind = 'inout' type = 'G.335'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.335'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5447' name = 'defineBlock.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1828'
              name = 'getNumberOfBytes' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5450' name = 'getNumberOfBytes.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1829'
              name = 'getUnsignedByte' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5454' name = 'n' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5455' name = 'getUnsignedByte.Return' isSpecification = 'false' kind = 'return' type = 'G.63'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.63'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1830'
              name = 'getStartAddress' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5458' name = 'getStartAddress.Return' isSpecification = 'false' kind = 'return' type = 'G.69'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.69'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1831'
              name = 'isFastAcquisitionImplemented' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5462' name = 'isFastAcquisitionImplemented.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1832'
              name = 'getStartAddress' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5466' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.333'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.333'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5467' name = 'getStartAddress.Return' isSpecification = 'false' kind = 'return' type = 'G.334'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.334'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1833'
              name = 'getLength' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5471' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.333'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.333'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5472' name = 'getLength.Return' isSpecification = 'false' kind = 'return' type = 'G.335'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.335'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1834'
              name = 'getChecksum' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5476' name = 'i' isSpecification = 'false' kind = 'inout' type = 'G.333'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.333'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5477' name = 'getChecksum.Return' isSpecification = 'false' kind = 'return' type = 'G.60'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.60'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1835'
              name = 'setMemoryId' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5481' name = 'memId' isSpecification = 'false' kind = 'inout' type = 'G.326'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.326'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5482' name = 'setMemoryId.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1836'
              name = 'getMemoryId' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5486' name = 'getMemoryId.Return' isSpecification = 'false' kind = 'return' type = 'G.326'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.326'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1837'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5489' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <!--==================== structure [Stereotype] ====================-->
        <UML:Stereotype xmi.id = 'XX.5490'
              name = 'structure' visibility = 'public' isSpecification = 'false' icon = ''>
         <UML:Stereotype.baseClass>
          	Class
         </UML:Stereotype.baseClass>
        </UML:Stereotype>
        <UML:Class xmi.id = 'S.1568'
              name = 'MemBlockType' visibility = 'protected' isSpecification = 'false'
              isAbstract = 'false' isActive = 'false' stereotype = 'XX.5490'>
         <UML:Classifier.feature>
          <UML:Attribute xmi.id = 'S.1838'
                name = 'startAddress' visibility = 'protected' isSpecification = 'false'
                changeability = 'changeable' ownerScope = 'instance'>
           <UML:StructuralFeature.multiplicity>
            <UML:Multiplicity>
             <UML:Multiplicity.range>
              <UML:MultiplicityRange lower = '1' upper = '1'/>
             </UML:Multiplicity.range>
            </UML:Multiplicity>
           </UML:StructuralFeature.multiplicity>
           <UML:StructuralFeature.type>
            <UML:Classifier>
             <UML:Namespace.ownedElement>
              <UML:DataType xmi.idref = 'G.334'/>
             </UML:Namespace.ownedElement>
            </UML:Classifier>
           </UML:StructuralFeature.type>
          </UML:Attribute>
          <UML:Attribute xmi.id = 'S.1839'
                name = 'length' visibility = 'protected' isSpecification = 'false'
                changeability = 'changeable' ownerScope = 'instance'>
           <UML:StructuralFeature.multiplicity>
            <UML:Multiplicity>
             <UML:Multiplicity.range>
              <UML:MultiplicityRange lower = '1' upper = '1'/>
             </UML:Multiplicity.range>
            </UML:Multiplicity>
           </UML:StructuralFeature.multiplicity>
           <UML:StructuralFeature.type>
            <UML:Classifier>
             <UML:Namespace.ownedElement>
              <UML:DataType xmi.idref = 'G.335'/>
             </UML:Namespace.ownedElement>
            </UML:Classifier>
           </UML:StructuralFeature.type>
          </UML:Attribute>
          <UML:Attribute xmi.id = 'S.1840'
                name = 'checksum' visibility = 'protected' isSpecification = 'false'
                changeability = 'changeable' ownerScope = 'instance'>
           <UML:StructuralFeature.multiplicity>
            <UML:Multiplicity>
             <UML:Multiplicity.range>
              <UML:MultiplicityRange lower = '1' upper = '1'/>
             </UML:Multiplicity.range>
            </UML:Multiplicity>
           </UML:StructuralFeature.multiplicity>
           <UML:StructuralFeature.type>
            <UML:Classifier>
             <UML:Namespace.ownedElement>
              <UML:DataType xmi.idref = 'G.60'/>
             </UML:Namespace.ownedElement>
            </UML:Classifier>
           </UML:StructuralFeature.type>
          </UML:Attribute>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Generalization xmi.id = 'G.398'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1542'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.1561'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1561'
            name = 'PUSTelemetryPacket' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1841'
              name = 'defaultDestination' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.399'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1842'
              name = 'packetId' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.337'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1843'
              name = 'pObsClock' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.93'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1844'
              name = 'type' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.394'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1845'
              name = 'subType' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.256'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1846'
              name = 'dest' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.399'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1847'
              name = 'timeTag' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.52'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.1848'
              name = 'PUSTelemetryPacket' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1849'
              name = 'setApplicationId' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'classifier'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5503' name = 'apid' isSpecification = 'false' kind = 'inout' type = 'G.341'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.341'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5504' name = 'setApplicationId.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1850'
              name = 'setType' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5507' name = 'tmType' isSpecification = 'false' kind = 'inout' type = 'G.394'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.394'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5508' name = 'setType.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1851'
              name = 'setSubType' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5511' name = 'tmSubType' isSpecification = 'false' kind = 'inout' type = 'G.256'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.256'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5512' name = 'setSubType.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1852'
              name = 'setDestination' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5515' name = 'tmDest' isSpecification = 'false' kind = 'inout' type = 'G.399'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.399'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5516' name = 'setDestination.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1853'
              name = 'getPacketId' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'classifier'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5520' name = 'getPacketId.Return' isSpecification = 'false' kind = 'return' type = 'G.337'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.337'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1854'
              name = 'getDefaultDestination' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'classifier'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5523' name = 'getDefaultDestination.Return' isSpecification = 'false' kind = 'return' type = 'G.399'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.399'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1855'
              name = 'setDefaultDestination' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'classifier'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5526' name = 'defDest' isSpecification = 'false' kind = 'inout' type = 'G.399'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.399'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5527' name = 'setDefaultDestination.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1856'
              name = 'getType' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5530' name = 'getType.Return' isSpecification = 'false' kind = 'return' type = 'G.394'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.394'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1857'
              name = 'getSubType' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5533' name = 'getSubType.Return' isSpecification = 'false' kind = 'return' type = 'G.256'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.256'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1858'
              name = 'getTimeTag' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5536' name = 'getTimeTag.Return' isSpecification = 'false' kind = 'return' type = 'G.52'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.52'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1859'
              name = 'setTimeTag' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5539' name = 'timeTag' isSpecification = 'false' kind = 'inout' type = 'G.52'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.52'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5540' name = 'setTimeTag.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1860'
              name = 'getDestination' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5543' name = 'getDestination.Return' isSpecification = 'false' kind = 'return' type = 'G.399'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.399'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1861'
              name = 'setObsClock' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'classifier'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5546' name = 'pObsClock' isSpecification = 'false' kind = 'inout' type = 'G.93'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.93'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5547' name = 'setObsClock.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1862'
              name = 'getObsClock' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'classifier'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5551' name = 'getObsClock.Return' isSpecification = 'false' kind = 'return' type = 'G.93'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.93'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1863'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5554' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.400'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1561'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.1555'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1558'
            name = 'StructuredTelemetryPacket' visibility = 'package' isSpecification = 'false'
            isAbstract = 'true' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1864'
              name = 'pByteBuffer' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.69'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1865'
              name = 'pShortBuffer' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.67'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1866'
              name = 'pIntBuffer' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.31'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1867'
              name = 'numberOfBytes' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.1868'
              name = 'setUnsignedByte' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5564' name = 'index' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5565' name = 'd' isSpecification = 'false' kind = 'inout' type = 'G.63'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.63'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5566' name = 'setUnsignedByte.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1869'
              name = 'setUnsignedShort' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5572' name = 'index' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5573' name = 'd' isSpecification = 'false' kind = 'inout' type = 'G.60'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.60'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5574' name = 'setUnsignedShort.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1870'
              name = 'setUnsignedInt' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5580' name = 'index' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5581' name = 'd' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5582' name = 'setUnsignedInt.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1871'
              name = 'StructuredTelemetryPacket' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1872'
              name = 'setNumberOfBytes' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5586' name = 'n' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5587' name = 'setNumberOfBytes.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1873'
              name = 'getNumberOfBytes' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5591' name = 'getNumberOfBytes.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1874'
              name = 'getUnsignedByte' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5596' name = 'n' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5597' name = 'getUnsignedByte.Return' isSpecification = 'false' kind = 'return' type = 'G.63'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.63'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1875'
              name = 'update' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5599' name = 'update.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1876'
              name = 'getUnsignedShort' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5604' name = 'n' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5605' name = 'getUnsignedShort.Return' isSpecification = 'false' kind = 'return' type = 'G.60'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.60'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1877'
              name = 'getUnsignedInt' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5610' name = 'n' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5611' name = 'getUnsignedInt.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1878'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5614' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.401'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1558'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.1555'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1545'
            name = 'TelemetryListModeManager' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1879'
              name = 'list' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.366'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1880'
              name = 'listLength' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.31'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1881'
              name = 'iterationListIndex' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1882'
              name = 'counter' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.1883'
              name = 'allocateMemory' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5623' name = 'numberOfModes' isSpecification = 'false' kind = 'inout' type = 'G.24'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.24'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5624' name = 'allocateMemory.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1884'
              name = 'getIterationTelemetryPacket' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5628' name = 'getIterationTelemetryPacket.Return' isSpecification = 'false' kind = 'return' type = 'G.366'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.366'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1885'
              name = 'setListItem' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5633' name = 'n' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5634' name = 'pos' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5635' name = 'pItem' isSpecification = 'false' kind = 'inout' type = 'G.366'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.366'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5636' name = 'setListItem.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1886'
              name = 'TelemetryListModeManager' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1887'
              name = 'setListLength' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5641' name = 'n' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5642' name = 'length' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5643' name = 'setListLength.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1888'
              name = 'first' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5645' name = 'first.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1889'
              name = 'next' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5648' name = 'next.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1890'
              name = 'isIterationFinished' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5652' name = 'isIterationFinished.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1891'
              name = 'isObjectConfigured' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5655' name = 'isObjectConfigured.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.402'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1545'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.1559'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1559'
            name = 'TelemetryModeManager' visibility = 'package' isSpecification = 'false'
            isAbstract = 'true' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1892'
              name = 'TelemetryModeManager' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1893'
              name = 'first' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5666' name = 'first.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1894'
              name = 'next' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5669' name = 'next.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1895'
              name = 'isIterationFinished' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5673' name = 'isIterationFinished.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1896'
              name = 'getIterationTelemetryPacket' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5677' name = 'getIterationTelemetryPacket.Return' isSpecification = 'false' kind = 'return' type = 'G.366'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.366'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.403'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1559'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.11'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1555'
            name = 'TelemetryPacket' visibility = 'package' isSpecification = 'false'
            isAbstract = 'true' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1897'
              name = 'inUse' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.1898'
              name = 'TelemetryPacket' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1899'
              name = 'setType' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5686' name = 'tmType' isSpecification = 'false' kind = 'inout' type = 'G.394'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.394'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5687' name = 'setType.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1900'
              name = 'setSubType' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5691' name = 'tmSubType' isSpecification = 'false' kind = 'inout' type = 'G.256'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.256'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5692' name = 'setSubType.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1901'
              name = 'setTimeTag' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5696' name = 'timeTag' isSpecification = 'false' kind = 'inout' type = 'G.52'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.52'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5697' name = 'setTimeTag.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1902'
              name = 'setDestination' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5701' name = 'tmDest' isSpecification = 'false' kind = 'inout' type = 'G.399'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.399'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5702' name = 'setDestination.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1903'
              name = 'getNumberOfBytes' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5705' name = 'getNumberOfBytes.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1904'
              name = 'update' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5707' name = 'update.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1905'
              name = 'isValid' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5711' name = 'isValid.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1906'
              name = 'getUnsignedByte' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5715' name = 'n' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5716' name = 'getUnsignedByte.Return' isSpecification = 'false' kind = 'return' type = 'G.63'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.63'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1907'
              name = 'getStartAddress' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5719' name = 'getStartAddress.Return' isSpecification = 'false' kind = 'return' type = 'G.69'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.69'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1908'
              name = 'isFastAcquisitionImplemented' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5723' name = 'isFastAcquisitionImplemented.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1909'
              name = 'getType' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5726' name = 'getType.Return' isSpecification = 'false' kind = 'return' type = 'G.394'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.394'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1910'
              name = 'getSubType' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5729' name = 'getSubType.Return' isSpecification = 'false' kind = 'return' type = 'G.256'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.256'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1911'
              name = 'getTimeTag' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5732' name = 'getTimeTag.Return' isSpecification = 'false' kind = 'return' type = 'G.52'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.52'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1912'
              name = 'getDestination' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5735' name = 'getDestination.Return' isSpecification = 'false' kind = 'return' type = 'G.399'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.399'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1913'
              name = 'setInUse' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5739' name = 'newInUse' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5740' name = 'setInUse.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1914'
              name = 'isInUse' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5744' name = 'isInUse.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.404'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1555'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.15'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1553'
            name = 'TelemetryStream' visibility = 'package' isSpecification = 'false'
            isAbstract = 'true' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1915'
              name = 'TelemetryStream' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1916'
              name = 'reset' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5751' name = 'reset.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1917'
              name = 'flush' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5753' name = 'flush.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1918'
              name = 'getCapacity' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5757' name = 'getCapacity.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1919'
              name = 'doesPacketFit' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5761' name = 'pTmPacket' isSpecification = 'false' kind = 'inout' type = 'G.366'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.366'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5762' name = 'doesPacketFit.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1920'
              name = 'write' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5765' name = 'tmItem' isSpecification = 'false' kind = 'inout' type = 'G.366'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.366'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5766' name = 'write.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.405'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.1553'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.15'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
     </UML:Namespace.ownedElement>
    </UML:Package>
    <UML:Package xmi.id = 'S.1921'
          name = 'Utilities' visibility = 'package' isSpecification = 'false'
          isAbstract = 'false'>
     <UML:Namespace.ownedElement>
      <!--From Class TestSuite to Class TestCase-->
      <UML:Association xmi.id = 'G.406'
            name = '{TestSuite-TestCase}' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false'>
       <UML:Association.connection>
        <UML:AssociationEnd xmi.id = 'G.407' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.qualifier>
          <UML:Attribute xmi.idref = 'S.1928'/>
         </UML:AssociationEnd.qualifier>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity/>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.1926'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
        <UML:AssociationEnd xmi.id = 'G.408' visibility = 'public' isSpecification = 'false'
              isNavigable = 'false' aggregation = 'none'
              targetScope = 'instance' changeability = 'changeable'>
         <UML:AssociationEnd.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '0' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:AssociationEnd.multiplicity>
         <UML:AssociationEnd.participant>
          <UML:Classifier xmi.idref = 'S.1927'/>
         </UML:AssociationEnd.participant>
        </UML:AssociationEnd>
       </UML:Association.connection>
      </UML:Association>
      <UML:Class xmi.id = 'S.1927'
            name = 'TestCase' visibility = 'package' isSpecification = 'false'
            isAbstract = 'true' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1929'
              name = 'testId' visibility = 'package' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.40'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1930'
              name = 'testName' visibility = 'package' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.58'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1931'
              name = 'testOutcome' visibility = 'package' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1932'
              name = 'testMessage' visibility = 'package' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.58'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1933'
              name = 'testResultFlag' visibility = 'package' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.1934'
              name = 'setTestResult' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5785' name = 'outcome' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5786' name = 'testMessage' isSpecification = 'false' kind = 'inout' type = 'G.58'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.58'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5787' name = 'setTestResult.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1935'
              name = 'isNonNominalCheckAllowed' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5790' name = 'isNonNominalCheckAllowed.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1936'
              name = 'TestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5794' name = 'testId' isSpecification = 'false' kind = 'inout' type = 'G.40'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.40'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5795' name = 'testName' isSpecification = 'false' kind = 'inout' type = 'G.58'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.58'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1937'
              name = 'setUpTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5798' name = 'setUpTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1938'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'true' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5800' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1939'
              name = 'shutDownTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5803' name = 'shutDownTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1940'
              name = 'getTestName' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5806' name = 'getTestName.Return' isSpecification = 'false' kind = 'return' type = 'G.58'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.58'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1941'
              name = 'getTestOutcome' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5809' name = 'getTestOutcome.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1942'
              name = 'getTestMessage' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5812' name = 'getTestMessage.Return' isSpecification = 'false' kind = 'return' type = 'G.58'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.58'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Class xmi.id = 'S.938'
            name = 'TestCaseGenericSetUp' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1943'
              name = 'firstActivation' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = 'true'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.1944'
              name = 'TestCaseGenericSetUp' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5820' name = 'testId' isSpecification = 'false' kind = 'inout' type = 'G.40'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.40'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5821' name = 'testName' isSpecification = 'false' kind = 'inout' type = 'G.58'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.58'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1945'
              name = 'setUpTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5823' name = 'setUpTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1946'
              name = 'runTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5825' name = 'runTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1947'
              name = 'shutDownTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5827' name = 'shutDownTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.409'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.1927'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.948'
            name = 'TestCasePUSFull' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1948'
              name = 'firstActivation' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = 'true'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1949'
              name = 'pTmManager' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.96'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1950'
              name = 'pTmModeMan' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.320'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1951'
              name = 'pTcManager' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.344'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1952'
              name = 'pManManager' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.169'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1953'
              name = 'pTmLogger' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.410'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1954'
              name = 'pTcLoader' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.180'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1955'
              name = 'pEvtRep' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.255'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1956'
              name = 'pObsClock' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.411'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1957'
              name = 'tcCommandArea' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.412'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1958'
              name = 'tcCmdPos' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.15'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1959'
              name = 'pOldEvtRep' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.9'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.1960'
              name = 'writeTcHeader' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5835' name = 'length' isSpecification = 'false' kind = 'inout' type = 'G.60'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.60'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5836' name = 'packetSeqControl' isSpecification = 'false' kind = 'inout' type = 'G.60'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.60'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5837' name = 'writeTcHeader.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1961'
              name = 'TestCasePUSFull' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5841' name = 'testId' isSpecification = 'false' kind = 'inout' type = 'G.40'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.40'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5842' name = 'testName' isSpecification = 'false' kind = 'inout' type = 'G.58'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.58'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1962'
              name = 'setUpTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5844' name = 'setUpTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1963'
              name = 'shutDownTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5846' name = 'shutDownTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1964'
              name = 'getTelecommandManager' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5849' name = 'getTelecommandManager.Return' isSpecification = 'false' kind = 'return' type = 'G.344'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.344'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1965'
              name = 'getTelemetryManager' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5852' name = 'getTelemetryManager.Return' isSpecification = 'false' kind = 'return' type = 'G.96'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.96'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1966'
              name = 'getTelemetryModeManager' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5855' name = 'getTelemetryModeManager.Return' isSpecification = 'false' kind = 'return' type = 'G.320'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.320'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1967'
              name = 'getManoeuvreManager' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5858' name = 'getManoeuvreManager.Return' isSpecification = 'false' kind = 'return' type = 'G.169'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.169'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1968'
              name = 'getTcLoader' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5861' name = 'getTcLoader.Return' isSpecification = 'false' kind = 'return' type = 'G.180'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.180'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1969'
              name = 'getTmStream' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5864' name = 'getTmStream.Return' isSpecification = 'false' kind = 'return' type = 'G.410'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.410'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1970'
              name = 'getObsClock' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5867' name = 'getObsClock.Return' isSpecification = 'false' kind = 'return' type = 'G.411'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.411'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1971'
              name = 'getEventRepository' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5870' name = 'getEventRepository.Return' isSpecification = 'false' kind = 'return' type = 'G.255'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.255'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1972'
              name = 'writeTestPUSTelecommand' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5882' name = 'ackField' isSpecification = 'false' kind = 'inout' type = 'G.63'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.63'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5883' name = 'execCounter' isSpecification = 'false' kind = 'inout' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5884' name = 'execCheckVal' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5885' name = 'valCheckVal' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5886' name = 'execCheckCode' isSpecification = 'false' kind = 'inout' type = 'G.166'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.166'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5887' name = 'valCheckCode' isSpecification = 'false' kind = 'inout' type = 'G.166'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.166'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5888' name = 'execOutcome' isSpecification = 'false' kind = 'inout' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5889' name = 'packetSeqControl' isSpecification = 'false' kind = 'inout' type = 'G.60'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.60'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5890' name = 'writeTestPUSTelecommand.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1973'
              name = 'writePUSDefineDataReporting' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5900' name = 'ackField' isSpecification = 'false' kind = 'inout' type = 'G.63'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.63'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5901' name = 'collectionInterval' isSpecification = 'false' kind = 'inout' type = 'G.386'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.386'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5902' name = 'sid' isSpecification = 'false' kind = 'inout' type = 'G.373'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.373'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5903' name = 'par' isSpecification = 'false' kind = 'inout' type = 'G.50'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.50'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5904' name = 'packetSeqControl' isSpecification = 'false' kind = 'inout' type = 'G.60'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.60'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5905' name = 'tcSubType' isSpecification = 'false' kind = 'inout' type = 'G.339'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.339'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5906' name = 'writePUSDefineDataReporting.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1974'
              name = 'writePUSDataReportingControl' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5915' name = 'ackField' isSpecification = 'false' kind = 'inout' type = 'G.63'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.63'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5916' name = 'NSID' isSpecification = 'false' kind = 'inout' type = 'G.63'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.63'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5917' name = 'sid' isSpecification = 'false' kind = 'inout' type = 'G.319'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.319'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5918' name = 'tcSubType' isSpecification = 'false' kind = 'inout' type = 'G.339'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.339'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5919' name = 'packetSeqControl' isSpecification = 'false' kind = 'inout' type = 'G.60'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.60'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5920' name = 'writePUSDataReportingControl.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1975'
              name = 'resetCommandLoadArea' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5922' name = 'resetCommandLoadArea.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.413'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.948'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.955'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.958'
            name = 'TestCaseWithEvtCheck' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Operation xmi.id = 'S.1976'
              name = 'TestCaseWithEvtCheck' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5931' name = 'testId' isSpecification = 'false' kind = 'inout' type = 'G.40'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.40'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5932' name = 'testName' isSpecification = 'false' kind = 'inout' type = 'G.58'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.58'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1977'
              name = 'setUpTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5934' name = 'setUpTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1978'
              name = 'getNumberOfEvents' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5937' name = 'getNumberOfEvents.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1979'
              name = 'getEventRepositorySize' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5940' name = 'getEventRepositorySize.Return' isSpecification = 'false' kind = 'return' type = 'G.15'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.15'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1980'
              name = 'verifyLatestEventHidden' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5946' name = 'line' isSpecification = 'false' kind = 'inout' type = 'G.414'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.414'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5947' name = 'nEvt' isSpecification = 'false' kind = 'inout' type = 'G.164'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.164'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5948' name = 'eventType' isSpecification = 'false' kind = 'inout' type = 'G.415'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.415'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5949' name = 'verifyLatestEventHidden.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.1981'
              name = 'verifySpecificEventHidden' visibility = 'protected'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5955' name = 'line' isSpecification = 'false' kind = 'inout' type = 'G.414'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.414'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5956' name = 'n' isSpecification = 'false' kind = 'inout' type = 'G.164'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.164'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5957' name = 'eventType' isSpecification = 'false' kind = 'inout' type = 'G.415'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.415'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5958' name = 'verifySpecificEventHidden.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.416'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.958'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.938'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.955'
            name = 'TestCaseWithFactories' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1982'
              name = 'firstActivation' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = 'true'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.5'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1983'
              name = 'pTmDum1' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.184'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1984'
              name = 'pTmDum2' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.184'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1985'
              name = 'pTmTVP1' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.372'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1986'
              name = 'pTmDRP1' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.369'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1987'
              name = 'pTmDRP2' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.369'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1988'
              name = 'pTmMDO' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.371'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1989'
              name = 'pTmMDA' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.370'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1990'
              name = 'pManCD' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.159'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1991'
              name = 'pManTP' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.161'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1992'
              name = 'pManDum' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.160'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1993'
              name = 'pTcPDum' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.301'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1994'
              name = 'pTcDum1' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.302'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1995'
              name = 'pTcDum2' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.302'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1996'
              name = 'pTcCDR' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.303'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1997'
              name = 'pTcDDR' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.304'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1998'
              name = 'pTcTPT1' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.182'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.1999'
              name = 'pTcTPT2' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.182'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.2000'
              name = 'pTcTPT3' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.182'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.2001'
              name = 'pTcDMO' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.306'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.2002'
              name = 'pTcDMA' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.305'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.2003'
              name = 'pTcMLO' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.308'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.2004'
              name = 'pTcMLA1' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.307'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.2005'
              name = 'pTcMLA2' visibility = 'private' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'classifier'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:Attribute.initialValue>
          <UML:Expression
                language = 'cpp' body = '0'/>
         </UML:Attribute.initialValue>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.307'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.2006'
              name = 'TestCaseWithFactories' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5970' name = 'testId' isSpecification = 'false' kind = 'inout' type = 'G.40'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.40'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5971' name = 'testName' isSpecification = 'false' kind = 'inout' type = 'G.58'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.58'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.2007'
              name = 'setUpTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5973' name = 'setUpTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.2008'
              name = 'shutDownTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5975' name = 'shutDownTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.5'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.5'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Generalization xmi.id = 'G.417'
              name = '' visibility = 'public' isSpecification = 'false'
              discriminator = ''>
         <UML:Generalization.child>
          <UML:GeneralizableElement xmi.idref = 'S.955'/>
         </UML:Generalization.child>
         <UML:Generalization.parent>
          <UML:GeneralizableElement xmi.idref = 'S.958'/>
         </UML:Generalization.parent>
        </UML:Generalization>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class xmi.id = 'S.1926'
            name = 'TestSuite' visibility = 'package' isSpecification = 'false'
            isAbstract = 'false' isActive = 'false'>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id = 'S.1928'
              name = 'list' visibility = 'package' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.418'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.2009'
              name = 'testCaseCounter' visibility = 'package' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.40'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Attribute xmi.id = 'S.2010'
              name = 'out' visibility = 'package' isSpecification = 'false'
              changeability = 'changeable' ownerScope = 'instance'>
         <UML:StructuralFeature.multiplicity>
          <UML:Multiplicity>
           <UML:Multiplicity.range>
            <UML:MultiplicityRange lower = '1' upper = '1'/>
           </UML:Multiplicity.range>
          </UML:Multiplicity>
         </UML:StructuralFeature.multiplicity>
         <UML:StructuralFeature.type>
          <UML:Classifier>
           <UML:Namespace.ownedElement>
            <UML:DataType xmi.idref = 'G.283'/>
           </UML:Namespace.ownedElement>
          </UML:Classifier>
         </UML:StructuralFeature.type>
        </UML:Attribute>
        <UML:Operation xmi.id = 'S.2011'
              name = 'TestSuite' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5983' name = 'out' isSpecification = 'false' kind = 'inout' type = 'G.283'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.283'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.2012'
              name = 'runTestSuite' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5985' name = 'runTestSuite.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation xmi.id = 'S.2013'
              name = 'loadTestCase' visibility = 'public'
              isSpecification = 'false'
              isAbstract = 'false' ownerScope = 'instance'>
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id = 'XX.5988' name = 'newTestCase' isSpecification = 'false' kind = 'inout' type = 'G.418'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.418'/>
           </UML:Parameter.type>
          </UML:Parameter>
          <UML:Parameter xmi.id = 'XX.5989' name = 'loadTestCase.Return' isSpecification = 'false' kind = 'return' type = 'G.4'>
           <UML:Parameter.type>
            <UML:Classifier xmi.idref = 'G.4'/>
           </UML:Parameter.type>
          </UML:Parameter>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
     </UML:Namespace.ownedElement>
    </UML:Package>
    <UML:DataType xmi.id = 'G.3'
          name = 'PunctualActionModeManager' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.4'
          name = 'void' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.5'
          name = 'bool' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.7'
          name = 'TD_InstanceId' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.8'
          name = 'TD_ClassId' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.9'
          name = 'DC_EventRepository' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.10'
          name = 'Tracer' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.11'
          name = 'CC_RootObject' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.12'
          name = 'DataPool' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.13'
          name = 'ParameterDatabase' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.14'
          name = 'TD_TraceItem' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.15'
          name = 'unsigned int' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.16'
          name = 'TD_TraceItem []' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.17'
          name = 'TD_ActionOutcome' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.19'
          name = 'TD_Config' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.20'
          name = 'bool *' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.24'
          name = 'TD_Mode' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.30'
          name = 'PunctualAction' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.31'
          name = 'unsigned int *' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.40'
          name = 'int' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.41'
          name = 'TD_Float *' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.42'
          name = 'TD_Float' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.45'
          name = 'DC_DataItem' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.47'
          name = 'DC_NullProfile' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.48'
          name = 'DC_NullRecoveryAction' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.49'
          name = 'TD_Integer' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.50'
          name = 'TD_DataPoolId' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.51'
          name = 'TD_Integer *' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.52'
          name = 'TD_ObsTime' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.53'
          name = 'MonitoringProfile' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.54'
          name = 'RecoveryAction' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.56'
          name = 'TD_DataPoolId *' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.58'
          name = 'char *' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.59'
          name = 'TD_DatabaseId' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.60'
          name = 'unsigned short' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.61'
          name = 'short' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.62'
          name = 'char' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.63'
          name = 'unsigned char' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.64'
          name = 'float' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.65'
          name = 'double' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.66'
          name = 'int *' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.67'
          name = 'unsigned short *' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.68'
          name = 'short *' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.69'
          name = 'unsigned char *' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.70'
          name = 'float *' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.71'
          name = 'double *' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.74'
          name = 'ControlBlock' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.77'
          name = 'void *' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.78'
          name = 'TD_DataItemType' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.89'
          name = 'TD_Float * *' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.91'
          name = 'TD_EventType' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.92'
          name = 'bool [LAST_EVENT_TYPE+1]' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.93'
          name = 'ObsClock' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.94'
          name = 'DC_Event' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.96'
          name = 'CC_TelemetryManager' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.97'
          name = 'PUSTelecommand' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.98'
          name = 'PUSTcManoeuvre' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.135'
          name = 'TD_FsmStateIndex' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.136'
          name = 'FsmState' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.137'
          name = 'TD_FsmStateIndex *' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.142'
          name = 'CC_FSM' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.158'
          name = 'CC_ManoeuvreFactory' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.159'
          name = 'DC_DummyConfigurableManoeuvre' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.160'
          name = 'DC_DummyManoeuvre' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.161'
          name = 'DC_TestPUSConfigurableManoeuvre' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.163'
          name = 'Manoeuvre' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.164'
          name = 'const unsigned int' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.166'
          name = 'TD_CheckCode' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.169'
          name = 'CC_ManoeuvreManager' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.173'
          name = 'TD_TelecommandId' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.175'
          name = 'const char *' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.176'
          name = 'real_T' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.177'
          name = 'boolean_T' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.180'
          name = 'DC_BasicPUSTcLoader' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.181'
          name = 'TD_TelecommandSource' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.182'
          name = 'DC_TestPUSTelecommand' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.184'
          name = 'DC_DummyPUSTelemetryPacket' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.185'
          name = 'DC_BasicPUSTmStream' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.255'
          name = 'DC_PUSEventRepository' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.256'
          name = 'TD_TelemetrySubType' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.280'
          name = 'TD_ObsCycle' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.283'
          name = 'FILE *' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.284'
          name = 'const char * const' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.300'
          name = 'CC_TelecommandFactory' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.301'
          name = 'DC_DummyPUSTelecommand' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.302'
          name = 'DC_DummyTelecommand' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.303'
          name = 'DC_PUSControlDataReporting' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.304'
          name = 'DC_PUSDefineDataReporting' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.305'
          name = 'DC_PUSDumpMemoryAbsolute' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.306'
          name = 'DC_PUSDumpMemoryOffset' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.307'
          name = 'DC_PUSMemoryLoadAbsolute' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.308'
          name = 'DC_PUSMemoryLoadOffset' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.310'
          name = 'Telecommand' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.311'
          name = 'TelecommandLoader' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.319'
          name = 'TD_SID *' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.320'
          name = 'DC_PUSTelemetryModeManager' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.326'
          name = 'TD_PUSMemId' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.332'
          name = 'PUSMemoryLoad::MemBlockType' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.333'
          name = 'TD_PUSNumberMemBlocks' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.334'
          name = 'TD_PUSMemData *' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.335'
          name = 'TD_PUSMemLength' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.337'
          name = 'TD_PUSPacketId' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.338'
          name = 'TD_TelecommandType' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.339'
          name = 'TD_TelecommandSubType' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.340'
          name = 'TD_TelecommandAck' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.341'
          name = 'TD_APID' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.344'
          name = 'CC_TelecommandManager' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.364'
          name = 'TelemetryModeManager' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.365'
          name = 'TelemetryStream' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.366'
          name = 'TelemetryPacket' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.368'
          name = 'CC_TelemetryPacketFactory' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.369'
          name = 'DC_PUSDataReportingPacket' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.370'
          name = 'DC_PUSMemoryDumpAbsolute' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.371'
          name = 'DC_PUSMemoryDumpOffset' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.372'
          name = 'DC_PUSTcVerificationPacket' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.373'
          name = 'TD_SID' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.377'
          name = 'DC_RawDataItem' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.385'
          name = 'DC_PUSDataReportingPacket::FaDescType' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.386'
          name = 'TD_PUSCollectionInterval' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.387'
          name = 'TD_PUSNumberOfParameters' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.393'
          name = 'DC_PUSTmLogger::TmPacket' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.394'
          name = 'TD_TelemetryType' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.397'
          name = 'PUSMemoryDump::MemBlockType' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.399'
          name = 'TD_TelemetryDestination' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.410'
          name = 'DC_PUSTmLogger' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.411'
          name = 'DC_DummyObsClock' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.412'
          name = 'unsigned char [TC_COMMAND_AREA_MAX_N_TC*TC_COMMAND_AREA_MAX_TC_LEN]' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.414'
          name = 'const int' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.415'
          name = 'const TD_EventType' visibility = 'public' isSpecification = 'false'/>
    <UML:DataType xmi.id = 'G.418'
          name = 'TestCase' visibility = 'public' isSpecification = 'false'/>
   </UML:Namespace.ownedElement>
  </UML:Model>
  <UML:TaggedValue xmi.id = 'XX.16'
        name = 'documentation'
        modelElement = 'S.10'>
   <UML:TaggedValue.dataValue>
    	This class encapsulates a punctual action manager.
The punctual action manager is responsible for controlling the execution
of a list of punctual actions.
The punctual actions are encapsulated in instances of &lt;code&gt;PunctualAction&lt;/code&gt;
components.
The punctual actions to be executed are provided by a &lt;i&gt;punctual action
mode manager&lt;/i&gt; that is loaded as a plug-in component in the punctual
action manager.
&lt;p&gt;
When the punctual action manager is activated, it asks its mode manager
for the list of punctual actions to be executed and executes them in
sequence.
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.17'
        name = 'author'
        modelElement = 'S.10'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.18'
        name = 'see'
        modelElement = 'S.10'>
   <UML:TaggedValue.dataValue>
    	PunctualAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.19'
        name = 'see'
        modelElement = 'S.10'>
   <UML:TaggedValue.dataValue>
    	PunctualActionModeManager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.20'
        name = 'version'
        modelElement = 'S.10'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.21'
        name = 'ingroup'
        modelElement = 'S.10'>
   <UML:TaggedValue.dataValue>
    	FunctionalityManagers
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.22'
        name = 'documentation'
        modelElement = 'S.24'>
   <UML:TaggedValue.dataValue>
    	Instantiate a punctual action manager.
The class identifier is set.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.23'
        name = 'documentation'
        modelElement = 'S.25'>
   <UML:TaggedValue.dataValue>
    	Load the punctual action mode manager.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.24'
        name = 'param'
        modelElement = 'S.25'>
   <UML:TaggedValue.dataValue>
    	pModeManager the telemetry mode manager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.27'
        name = 'documentation'
        modelElement = 'S.26'>
   <UML:TaggedValue.dataValue>
    	Get the punctual action mode manager.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.28'
        name = 'return'
        modelElement = 'S.26'>
   <UML:TaggedValue.dataValue>
    	the punctual action mode manager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.30'
        name = 'documentation'
        modelElement = 'S.27'>
   <UML:TaggedValue.dataValue>
    	Execute the punctual actions supplied by the mode manager.
A pseudocode implementation for this method is as follows: &lt;PRE&gt;
for (all pItem items provided by the puntual action mode manager)
pItem-&gt;execute(); &lt;/PRE&gt;
Note that the outcome of the punctual action (i.e. the return
value of the &lt;code&gt;execute&lt;/code&gt; method) is disregarded.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.32'
        name = 'documentation'
        modelElement = 'S.28'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on the punctual action
manager: verify that the punctual action mode manager
has been loaded.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.33'
        name = 'return'
        modelElement = 'S.28'>
   <UML:TaggedValue.dataValue>
    	true if the punctual action manager is configured, false otherwise.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.35'
        name = 'documentation'
        modelElement = 'S.15'>
   <UML:TaggedValue.dataValue>
    	Base class from which most framework classes are - directly or indirectly -
derived.
This class defines four attributes and four services that are made available to
its children classes.
The attributes are: &lt;ul&gt;
&lt;li&gt;The instance identifier,&lt;/li&gt;
&lt;li&gt;The class identifier,&lt;/li&gt;
&lt;li&gt;The system event repository,&lt;/li&gt;
&lt;li&gt;The system data pool, and&lt;/li&gt;
&lt;li&gt;The system parameter database.&lt;/li&gt;
&lt;/ul&gt;
The &lt;i&gt;instance identifier&lt;/i&gt; is an integer that uniquely identifies each
object instantiated from this class or its subclasses.
The instance identifier is automatically assigned by the
&lt;code&gt;CC_RootObject&lt;/code&gt; constructor when a new instance of this class
is created. It can be read but cannot be changed after an object has
been created.
&lt;p&gt;
The &lt;i&gt;class identifier&lt;/i&gt; is an integer that uniquely identifies each
class derived from &lt;code&gt;CC_RootObject&lt;/code&gt;.
It is useful during debugging and could be used to implement a simple form of
run-time type identification.
The class identifier should be set during the application instantiation
phase and it is intended never to be changed afterwards.
Only concrete classes are endowed with a class identifier.
&lt;p&gt;
The &lt;i&gt;system data pool&lt;/i&gt; is an instance of class &lt;code&gt;DataPool&lt;/code&gt; that
is implemented as a static plug-in component for class &lt;code&gt;CC_RootObject&lt;/code&gt;. 
In general, applications instantiated
from the OBS Framework should have only one data pool component. The 
&lt;code&gt;CC_RootObject&lt;/code&gt; class makes this single data pool instance
globally accessible to all OBS Framework classes.
&lt;p&gt;
The &lt;i&gt;system event repository&lt;/i&gt; is an instance of class &lt;code&gt;DC_EventRepository&lt;/code&gt; that
is implemented as a static plug-in component for class &lt;code&gt;CC_RootObject&lt;/code&gt;. 
In general, applications instantiated
from the OBS Framework should use only one event repository. The 
&lt;code&gt;CC_RootObject&lt;/code&gt; class makes this single event repository instance
globally accessible to all OBS Framework classes.
&lt;p&gt;
The &lt;i&gt;system parameter database&lt;/i&gt; is an instance of class &lt;code&gt;ParameterDatabase&lt;/code&gt; that
is implemented as a static plug-in component for class &lt;code&gt;CC_RootObject&lt;/code&gt;. 
In general, applications instantiated
from the OBS Framework should have only one parameter database component. The 
&lt;code&gt;CC_RootObject&lt;/code&gt; class makes this single parameter database instance
globally accessible to all OBS Framework classes.
&lt;p&gt;
The services implemented by the &lt;code&gt;CC_RootObject&lt;/code&gt; class are: &lt;ul&gt;
&lt;li&gt;a object configuration check service,&lt;/li&gt;
&lt;li&gt;a system configuration check service, and&lt;/li&gt;
&lt;li&gt;a tracing service.&lt;/li&gt;
&lt;/ul&gt;
The &lt;i&gt;object configuration check service&lt;/i&gt; allows an external entity to
ask an object instantiated from a class derived from 
&lt;CODE&gt;CC_RootObject&lt;/CODE&gt; to check whether it is
configured.
The term &lt;i&gt;configuration&lt;/i&gt; is used to designate the operations that are
performed on an object during the
application initialization phase to prepare it to perform its allotted
task during the application operational phase.
Generally speaking, an object is configured if all its plug-in
objects have been loaded and if all its internal data structures have been
created and initialized.
&lt;p&gt;
The &lt;i&gt;system configuration check service&lt;/i&gt; allows an external entity to
verify whether all objects instantiated from a class derived from 
&lt;CODE&gt;CC_RootObject&lt;/CODE&gt; are configured.
The &lt;CODE&gt;CC_RootObject&lt;/CODE&gt; class internally defines a static data
structure that holds references to all objects that
have been instantiated from its subclasses.
This data structure is called the &lt;i&gt;system list&lt;/i&gt;.
The system list data structure is loaded by the &lt;CODE&gt;RootObject&lt;/CODE&gt;
constructor: every time a new object is created, its
reference is loaded into the data structure.
The system configuration check service goes through the objects in the
system list data structure and performs a
configuration check on each one of them.
If any of the objects in the system list reports: &quot;not
configured&quot;, then the system configuration
service reports: &quot;system not configured&quot;.
The system configuration check should be performed at the end of the
framework instantiation phase to
confirm the correctness of the instantiation procedure.
&lt;p&gt;
The &lt;i&gt;tracing service&lt;/i&gt; allows an object instantiated from a class derived from 
&lt;CODE&gt;CC_RootObject&lt;/CODE&gt; to ask for a trace
signal to be generated.
The requesting object only has to specify an identifier defining the
content of the trace signal.
All other operations related to the sending of the trace signal are handled 
by a static plug-in object of type &lt;code&gt;Tracer&lt;/code&gt;.
Two types of tracing signals can be generated: synch trace and
and packet trace.
The presence of this service in the root class means that all framework
objects have easy access to the tracing
service and can easily ask for trace signals to be sent to an external
test set-up.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.36'
        name = 'author'
        modelElement = 'S.15'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.37'
        name = 'todo'
        modelElement = 'S.15'>
   <UML:TaggedValue.dataValue>
    	change the name of isObjectConfigured to isConfigured
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.38'
        name = 'todo'
        modelElement = 'S.15'>
   <UML:TaggedValue.dataValue>
    	fix the policy for inline methods. Currently, all header files that define
inline methods include the corresponding &quot;_inl&quot; file. This should make it 
unnecessary for the &quot;_inl&quot; file to be included by the body files. This must be checked
on the ERC32 simulator. If confirmed, all inclusions of &quot;_inl&quot; files in body
files should be removed.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.39'
        name = 'see'
        modelElement = 'S.15'>
   <UML:TaggedValue.dataValue>
    	DC_EventRepository
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.40'
        name = 'see'
        modelElement = 'S.15'>
   <UML:TaggedValue.dataValue>
    	DataPool
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.41'
        name = 'see'
        modelElement = 'S.15'>
   <UML:TaggedValue.dataValue>
    	ParameterDatabase
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.42'
        name = 'see'
        modelElement = 'S.15'>
   <UML:TaggedValue.dataValue>
    	Tracer
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.43'
        name = 'version'
        modelElement = 'S.15'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.44'
        name = 'ingroup'
        modelElement = 'S.15'>
   <UML:TaggedValue.dataValue>
    	Base
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.45'
        name = 'documentation'
        modelElement = 'S.38'>
   <UML:TaggedValue.dataValue>
    	Private copy constructor that prevents the copy constructor of this
and derived classes (ie most framework classes) from being used. 
Use of the copy constructor is judged unsafe and this helps making
its accidental use unlikely.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.47'
        name = 'documentation'
        modelElement = 'S.39'>
   <UML:TaggedValue.dataValue>
    	Private asssignment operator that prevents the assignment operator of this
and derived classes (ie most framework classes) from being used. 
Assignment of objects is judged unsafe and this helps making
its accidental use unlikely.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.48'
        name = 'synchronized'
        modelElement = 'S.39'>
   <UML:TaggedValue.dataValue>
    	true
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.51'
        name = 'documentation'
        modelElement = 'S.40'>
   <UML:TaggedValue.dataValue>
    	Set the instance identifier and loads the newly created object in the
system list.
A static counter is maintained that is incremented by one every time
this constructor is called.
The value of this static counter becomes the instance identifier of
the newly created object.
The class identifier is initialized to an illegal value to signify
that the object is not yet
configured.
The newly created object is loaded into the system list data
structure.
Thus, a pseudo-code implementation for the constructor is as follows:&lt;PRE&gt;
objectCounter++;          // static counter initialized to BASE_INSTANCE_ID
instanceId=objectCounter;
systemList[i]=this;
classId=. . .;            // initialize class ID to an illegal value
&lt;/PRE&gt;
This constructor will only execute correctly after the size of the system
list has been initialized.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.52'
        name = 'see'
        modelElement = 'S.40'>
   <UML:TaggedValue.dataValue>
    	#setSystemListSize
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.53'
        name = 'documentation'
        modelElement = 'S.41'>
   <UML:TaggedValue.dataValue>
    	Implement the object configuration check service.
The method returns true if the object is correctly configured.
A &lt;CODE&gt;RootObject&lt;/CODE&gt; is configured if: &lt;ul&gt;
&lt;li&gt;the event repository has been loaded&lt;/li&gt;
&lt;li&gt;the parameter database has been loaded&lt;/li&gt;
&lt;li&gt;the data pool has been loaded&lt;/li&gt;
&lt;li&gt;the tracer has been loaded&lt;/li&gt;
&lt;li&gt;the class identifier has a legal value&lt;/li&gt;
&lt;/ul&gt;
The configuration check is class-specific and derived classes may have
to provide their own implementation.
Derived classes should however provide only incremental
implementations.
Consider for instance a class B that is derived from a class A.
The implementation of &lt;CODE&gt;isConfigured&lt;/CODE&gt; for class B should be
as follows:&lt;PRE&gt;
bool isConfigured() {
if (!super.isConfigured())
return false;
. . .  // perform configuration checks specific to class A
} &lt;/PRE&gt;
In this way, each class benefits from the implementation of its super
class.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.54'
        name = 'return'
        modelElement = 'S.41'>
   <UML:TaggedValue.dataValue>
    	true if the object is configured, false otherwise.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.56'
        name = 'documentation'
        modelElement = 'S.42'>
   <UML:TaggedValue.dataValue>
    	Implement the system configuration check service.
The method returns true if the system is correctly configured.
The system is configured if all the objects instantiated from
this class or its subclasses created up to
the time the method is called
are configured (i.e. if their &lt;code&gt;isObjectConfigured&lt;/code&gt; 
method returns true).
Thus, a pseudo-code implementation of this method is: &lt;PRE&gt;
for (int i=0; i smaller than NumberOfCreatedObjects; i++)
if (!systemList[i].isObjectConfigured())
return false;
return true;   &lt;/PRE&gt;
where &lt;CODE&gt;systemList&lt;/CODE&gt; holds the list of framework objects
created to date.
&lt;p&gt;
This is a static method because the system list data structure upon
which it acts is a static structure.
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.57'
        name = 'return'
        modelElement = 'S.42'>
   <UML:TaggedValue.dataValue>
    	true if the system is configured, false otherwise.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.59'
        name = 'documentation'
        modelElement = 'S.43'>
   <UML:TaggedValue.dataValue>
    	Return the instance identifier of an object.
The instance identifier is defined when an object is created and
cannot be altered afterwards.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.61'
        name = 'documentation'
        modelElement = 'S.44'>
   <UML:TaggedValue.dataValue>
    	Return the class identifier of an object.
The class identifier is defined when an object is initially configured 
and should not be altered afterwards.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.63'
        name = 'documentation'
        modelElement = 'S.45'>
   <UML:TaggedValue.dataValue>
    	Set the size of the system list representing the maximum number of
objects that can be instantiated
from class &lt;CODE&gt;RootObject&lt;/CODE&gt; and its derived classes.
The &lt;CODE&gt;RootObject&lt;/CODE&gt; class maintains an internal data structure
- the system list - where all created
instances of this and derived classes are held.
This method causes memory for this data structure to be allocated and
the data structure to be
initialized.
&lt;p&gt;
This is a static method because it initializes a data structure - the
system list - that is static.
&lt;p&gt;
This is an initialization method.
It should be called before any object of type &lt;CODE&gt;RootObject&lt;/CODE&gt;
is instantiated. It should not be called more than once.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.64'
        name = 'param'
        modelElement = 'S.45'>
   <UML:TaggedValue.dataValue>
    	systemListSize the maximum number of framework objects that can
be instantiated in the
application
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.67'
        name = 'documentation'
        modelElement = 'S.46'>
   <UML:TaggedValue.dataValue>
    	Return the size of the system list representing the maximum number of
objects that can be instantiated
from class &lt;CODE&gt;RootObject&lt;/CODE&gt; and its derived classes.
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.68'
        name = 'see'
        modelElement = 'S.46'>
   <UML:TaggedValue.dataValue>
    	#setSystemListSize
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.69'
        name = 'return'
        modelElement = 'S.46'>
   <UML:TaggedValue.dataValue>
    	systemListSize the system list size
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.71'
        name = 'documentation'
        modelElement = 'S.47'>
   <UML:TaggedValue.dataValue>
    	Set the class identifier of an object.
The class identifier should be set when the application is
configured and never changed afterwards.
&lt;p&gt;
This is an initialization method.
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.72'
        name = 'param'
        modelElement = 'S.47'>
   <UML:TaggedValue.dataValue>
    	classId the class identifier of the class from which the object
is instantiated
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.75'
        name = 'documentation'
        modelElement = 'S.48'>
   <UML:TaggedValue.dataValue>
    	Setter method for the event repository plug-in component.
The event repository thus loaded is used to store the event reports
created with the event reporting service.
This method is static to ensure that all event reports created by
framework objects are sent to the
same event repository.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.78'
        name = 'documentation'
        modelElement = 'S.49'>
   <UML:TaggedValue.dataValue>
    	Getter method for the event repository plug-in component.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.80'
        name = 'documentation'
        modelElement = 'S.50'>
   <UML:TaggedValue.dataValue>
    	Setter method for the system parameter database.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.83'
        name = 'documentation'
        modelElement = 'S.51'>
   <UML:TaggedValue.dataValue>
    	Getter method for the system parameter database.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.85'
        name = 'documentation'
        modelElement = 'S.52'>
   <UML:TaggedValue.dataValue>
    	Setter method for the system data pool.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.88'
        name = 'documentation'
        modelElement = 'S.53'>
   <UML:TaggedValue.dataValue>
    	Getter method for the system data pool.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.90'
        name = 'documentation'
        modelElement = 'S.54'>
   <UML:TaggedValue.dataValue>
    	Load the tracer plug-in object.
The tracer thus loaded is used to implement the tracing service.
This method is static because all tracing signals are routed through
the same tracing interface
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.93'
        name = 'documentation'
        modelElement = 'S.55'>
   <UML:TaggedValue.dataValue>
    	Getter method for the tracer plug-in.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.95'
        name = 'documentation'
        modelElement = 'S.56'>
   <UML:TaggedValue.dataValue>
    	Implement the synch tracing service offered by the root class to all
its children classes.
When an object needs to send a synch trace signal, it calls this
method and passes to it the identifier of
the trace signal.
The sending of the signal is internally handled by the tracer plug-in
object.
Thus, a pseudo-code implementation for this method is as follows:
&lt;PRE&gt;
tracer.sendSynchTrace(traceId)  &lt;/PRE&gt;
where &lt;CODE&gt;tracer&lt;/CODE&gt; is the tracer plug-in object.
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.96'
        name = 'see'
        modelElement = 'S.56'>
   <UML:TaggedValue.dataValue>
    	#setTracer
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.97'
        name = 'see'
        modelElement = 'S.56'>
   <UML:TaggedValue.dataValue>
    	Tracer
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.98'
        name = 'param'
        modelElement = 'S.56'>
   <UML:TaggedValue.dataValue>
    	traceId identifier of the synch trace signal
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.101'
        name = 'documentation'
        modelElement = 'S.57'>
   <UML:TaggedValue.dataValue>
    	Implement the packet tracing service offered by the root class to all
its children classes.
When an object needs to send a packet trace signal, it calls this
method and passes to it the tracer
packet data.
The sending of the signal is internally handled by the tracer plug-in
object.
Thus, a pseudo-code implementation for this method is as follows:
&lt;PRE&gt;
tracer.sendPacketTrace(n,traceData)  &lt;/PRE&gt;
where &lt;CODE&gt;tracer&lt;/CODE&gt; is the tracer plug-in object.
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.102'
        name = 'see'
        modelElement = 'S.57'>
   <UML:TaggedValue.dataValue>
    	#setTracer
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.103'
        name = 'see'
        modelElement = 'S.57'>
   <UML:TaggedValue.dataValue>
    	Tracer
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.104'
        name = 'param'
        modelElement = 'S.57'>
   <UML:TaggedValue.dataValue>
    	n number of trace data elements
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.105'
        name = 'param'
        modelElement = 'S.57'>
   <UML:TaggedValue.dataValue>
    	traceData array of trace data
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.109'
        name = 'documentation'
        modelElement = 'S.58'>
   <UML:TaggedValue.dataValue>
    	Dummy class destructor that causes an assert violation
and returns without taking any action.
In order to eliminate the danger of dangling pointers and to make
memory management safer, the framework adopts a coding rule that prescribes that
no instances of framework classes can ever be destroyed (either on the heap
or on the stack). Making the destructor of the root class of the framework
class tree protected helps detect some violations of this rule statically
at compile time. More specifically, it ensures that no instances of
class &lt;code&gt;CC_RootObject&lt;/code&gt; or its subclasses are ever destroyed
outside the &lt;code&gt;CC_RootObject&lt;/code&gt; class tree.
&lt;p&gt;
Subclasses that are intended to be final, should declare a private
destructor. This effectively prevents them from being subclassed.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.110'
        name = 'synchronized'
        modelElement = 'S.58'>
   <UML:TaggedValue.dataValue>
    	true
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.111'
        name = 'documentation'
        modelElement = 'S.17'>
   <UML:TaggedValue.dataValue>
    	Punctual action that performs an &lt;i&gt;execution check&lt;/i&gt;.
An execution check is a check that is performed just before the
action associated to the punctual action component are executed.
An execution check can have two outcomes: &quot;action can be executed&quot; or
&quot;action cannot be executed&quot;.
This type of punctual action is useful to model punctual actions
which should be executed only if certain conditions are met.
The execution check can be implemented to verify whether these
conditions are met.
&lt;p&gt;
This is an abstract class because it leaves open the definition of the
actions to be performed by the punctual action component and the
definition of the concrete execution check.
This class only implements the management of the abstract execution
check.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.112'
        name = 'author'
        modelElement = 'S.17'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.113'
        name = 'todo'
        modelElement = 'S.17'>
   <UML:TaggedValue.dataValue>
    	Add a getExecutionCheckCode to return a code describing the reason for
the failure of the execution check.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.114'
        name = 'version'
        modelElement = 'S.17'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.115'
        name = 'ingroup'
        modelElement = 'S.17'>
   <UML:TaggedValue.dataValue>
    	Base
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.116'
        name = 'documentation'
        modelElement = 'S.59'>
   <UML:TaggedValue.dataValue>
    	Instantiate a punctual action. This method returns without taking
any action.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.117'
        name = 'documentation'
        modelElement = 'S.60'>
   <UML:TaggedValue.dataValue>
    	Execute the punctual action if the execution check is satisifed.
Otherwise, do nothing.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
if ( canExecute() )
return doConditionalAction();
else
return ACTION_CANNOT_EXECUTE; &lt;/PRE&gt;
The &lt;CODE&gt;doConditionalAction()&lt;/CODE&gt; and &lt;code&gt;canExecute()&lt;/code&gt;
methods are abstract and encapsulate the
implementation of the actions associated to
the punctual action, and the implementation of the execution check
respectively.
Thus, this class enforces the execution check but leaves its definition
and the definition of the concrete actions associated to the punctual
action component open.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.118'
        name = 'see'
        modelElement = 'S.60'>
   <UML:TaggedValue.dataValue>
    	TD_ActionOutcome
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.119'
        name = 'return'
        modelElement = 'S.60'>
   <UML:TaggedValue.dataValue>
    	the outcome code of the punctual action
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.121'
        name = 'documentation'
        modelElement = 'S.61'>
   <UML:TaggedValue.dataValue>
    	Encapsulate implementation of the &lt;i&gt;execution check&lt;/i&gt;.
This method is called by method &lt;CODE&gt;doAction()&lt;/CODE&gt; in this same
class.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.122'
        name = 'see'
        modelElement = 'S.61'>
   <UML:TaggedValue.dataValue>
    	#doAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.123'
        name = 'return'
        modelElement = 'S.61'>
   <UML:TaggedValue.dataValue>
    	true if the action can be executed, false if the action cannot
be executed.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.125'
        name = 'documentation'
        modelElement = 'S.62'>
   <UML:TaggedValue.dataValue>
    	Encapsulate implementation of the actions associated to the
punctual action component.
This method is called by method &lt;CODE&gt;doAction()&lt;/CODE&gt; in this same
class.
Note that users of punctual actions do not see method &lt;CODE&gt;doAction()&lt;/CODE&gt;,
they only see method &lt;CODE&gt;execute()&lt;/CODE&gt; defined by the superclass.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.126'
        name = 'see'
        modelElement = 'S.62'>
   <UML:TaggedValue.dataValue>
    	#doAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.127'
        name = 'return'
        modelElement = 'S.62'>
   <UML:TaggedValue.dataValue>
    	the outcome code of the punctual action
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.129'
        name = 'documentation'
        modelElement = 'S.18'>
   <UML:TaggedValue.dataValue>
    	&lt;i&gt;Reconfiguration manager&lt;/i&gt; that implements a basic reconfiguration
policy independent of any &lt;i&gt;reconfiguration functionality&lt;/i&gt;.
This component is useful under the following conditions&lt;ul&gt;
&lt;li&gt;There are N independent
implementations of the reconfigurable functionality to which there
correspond N &lt;i&gt;configurations&lt;/i&gt; of the configuration manager.&lt;/li&gt;
&lt;li&gt;At any given time, one configuration is designated by the
reconfiguration manager to be the &lt;i&gt;active configuration&lt;/i&gt;&lt;/li&gt;.
&lt;li&gt;Each configuration is either &lt;i&gt;healthy&lt;/i&gt; or
&lt;i&gt;unhealthy&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;When the reconfiguration manager receives a &lt;i&gt;reconfigure&lt;/i&gt;
request, it checks whether any of the non-active configurations are
healthy and, if so, it selects one of these configurations as the
new active configuration. The previously active configuration is
marked as &quot;unhealthy&quot;&lt;/li&gt;
&lt;/ul&gt;
This component implements the management of the configurations but
it does not make any assumptions about what the configurations
represent. A configuration is simply represented by an integer
that can take a value in the interval [0, N-1]. The health status
is represented by a boolean with the value true representing
&quot;healthy&quot;.
&lt;p&gt;
Reconfigurations (i.e. changes in the active configuration) are
recorded through an event report.
&lt;p&gt;
It is possible to force the healthy/unhealthy state of a
configuration and it is possible to enable/disable reconfigurations.
&lt;p&gt;
This class can be used as the base class for reconfiguration
managers that are responsible for managing reconfigurations across
concrete implementations of a specific functionality. Or it can be
used as a &quot;helper class&quot; for such a concrete reconfiguration manager.
&lt;p&gt;
Method &lt;code&gt;reconfigure&lt;/code&gt; is implemented as a virtual method
to allow easy implementations of alternative reconfiguration policies.
&lt;p&gt;
Some of the methods defined by the class take as a parameter
an integer index i that designates a configuration. Run-time
checks on the legality of the index
are only performed where errors might corrupt internal data
structures (typically, during write accesses). In other cases,
responsibility for ensuring the legality of the index is left
to the caller.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.130'
        name = 'author'
        modelElement = 'S.18'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.131'
        name = 'version'
        modelElement = 'S.18'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.132'
        name = 'ingroup'
        modelElement = 'S.18'>
   <UML:TaggedValue.dataValue>
    	Base
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.133'
        name = 'documentation'
        modelElement = 'S.67'>
   <UML:TaggedValue.dataValue>
    	Instantiate a basic reconfigurer. The number of configurations is
initialized to an illegal value to signify that the component is not
yet configured. Reconfigurations are enabled by default. The class
identifier is set.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.134'
        name = 'documentation'
        modelElement = 'S.68'>
   <UML:TaggedValue.dataValue>
    	Perform a reconfiguration. If reconfigurations are enabled, then
one of the non-active but healthy configurations is made active
and the originally active configuration is marked &quot;unhealthy&quot;. If
there are no available healthy configurations, nothing is done
beyond reporting the fact as an event.
If reconfigurations are disabled, nothing is done
beyond reporting the fact as an event.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
if ( reconfigurations are enabled) {  // compute new operational mode;
if ( there is a healthy non-active configuration H ) {
temp = activeConfiguration
activeConfiguration = H;
createEventReport(EVT_RECONFIG);
setHealthStatus(temp,UNHEALTHY);
} else
createEventReport(EVT_RECONFIG_NO_HEALTHY)
} else
createEventReport(EVT_RECONFIG_DISABLED);&lt;/PRE&gt;
The &lt;code&gt;classId&lt;/code&gt; in the above code that is used as an event
parameter is the class identifier of the reconfigurer.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.136'
        name = 'documentation'
        modelElement = 'S.69'>
   <UML:TaggedValue.dataValue>
    	Set the number of configurations controlled by this reconfiguration
manager.
This is an initialization method. It should only be called once.
The number of configurations must be
greater than zero.
A call to this method causes the component to allocate the memory it
needs for its internal data structures. All configurations are
initialized to &quot;healthy&quot; and the configuration with index zero is
designated as the active configuration.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.137'
        name = 'param'
        modelElement = 'S.69'>
   <UML:TaggedValue.dataValue>
    	nOfConfig the number of configurations
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.140'
        name = 'documentation'
        modelElement = 'S.70'>
   <UML:TaggedValue.dataValue>
    	Set the health status of the i-th configuration.
The parameter i must be in the range [0,N-1] where N is the total
number of configurations.
A check is performed to verify that the value of i is legal. If it is
not, event EVT_ILLEGAL_CONFIG is generated.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.141'
        name = 'see'
        modelElement = 'S.70'>
   <UML:TaggedValue.dataValue>
    	TD_EventType
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.142'
        name = 'param'
        modelElement = 'S.70'>
   <UML:TaggedValue.dataValue>
    	i the configuration index
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.143'
        name = 'param'
        modelElement = 'S.70'>
   <UML:TaggedValue.dataValue>
    	healthStatus the health status of the i-th configuration
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.147'
        name = 'documentation'
        modelElement = 'S.71'>
   <UML:TaggedValue.dataValue>
    	Return the health status of the i-th configuration.
The parameter i must be in the range [0,N-1] where N is the total
number of configurations but no check is performed on the legality
of i.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.148'
        name = 'param'
        modelElement = 'S.71'>
   <UML:TaggedValue.dataValue>
    	i the configuration index
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.149'
        name = 'return'
        modelElement = 'S.71'>
   <UML:TaggedValue.dataValue>
    	true if the i-th configuration is healthy, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.152'
        name = 'documentation'
        modelElement = 'S.72'>
   <UML:TaggedValue.dataValue>
    	Set the active configuration.
After calling this method, the active configuration is guaranteed
to be equal to the value of the parameter &lt;code&gt;active&lt;/code&gt;. This
is the case independently of whether or not reconfiguration are
enabled or disabled and irrespective of the health status of the
target configuration.
&lt;p&gt;
Note that forcing the active configuration will often be equivalent to
performing a reconfiguration (if the original active configuration
is different from the target configuration specified by this method).
If this is the case, then an event report of type EVT_RECONFIG
is generated.
&lt;p&gt;
Note also that no check is performed upon the health status of the
target configuration specified by this method. Execution of this method
may thus result in an unhealthy configuration being the active
configuration.
&lt;p&gt;
The parameter i must be in the range [0,N-1] where N is the total
number of configurations.
A check is performed to verify that the value of i is legal. If it is
not, event EVT_ILLEGAL_CONFIG is generated.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.153'
        name = 'see'
        modelElement = 'S.72'>
   <UML:TaggedValue.dataValue>
    	TD_EventType
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.154'
        name = 'param'
        modelElement = 'S.72'>
   <UML:TaggedValue.dataValue>
    	activeConfig the new active configuration
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.157'
        name = 'documentation'
        modelElement = 'S.73'>
   <UML:TaggedValue.dataValue>
    	Enable/disable all reconfigurations.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.158'
        name = 'see'
        modelElement = 'S.73'>
   <UML:TaggedValue.dataValue>
    	#reconfigure
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.159'
        name = 'param'
        modelElement = 'S.73'>
   <UML:TaggedValue.dataValue>
    	enabled the transition are disabled if false, enabled if true
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.162'
        name = 'documentation'
        modelElement = 'S.74'>
   <UML:TaggedValue.dataValue>
    	Check whether reconfigurations are enabled.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.163'
        name = 'see'
        modelElement = 'S.74'>
   <UML:TaggedValue.dataValue>
    	#setEnabled
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.164'
        name = 'return'
        modelElement = 'S.74'>
   <UML:TaggedValue.dataValue>
    	true if reconfigurations are enabled, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.166'
        name = 'documentation'
        modelElement = 'S.75'>
   <UML:TaggedValue.dataValue>
    	Return the currently active configuration.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.167'
        name = 'return'
        modelElement = 'S.75'>
   <UML:TaggedValue.dataValue>
    	the currently active configuration
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.169'
        name = 'documentation'
        modelElement = 'S.76'>
   <UML:TaggedValue.dataValue>
    	Return the number of configurations.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.170'
        name = 'return'
        modelElement = 'S.76'>
   <UML:TaggedValue.dataValue>
    	the number of configurations
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.172'
        name = 'documentation'
        modelElement = 'S.77'>
   <UML:TaggedValue.dataValue>
    	Enable all reconfigurations, set all configuration status to &quot;healthy&quot;,
set the active configuration equal to configuration 0.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.174'
        name = 'documentation'
        modelElement = 'S.78'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on a basic reconfigurer: verify
that the number of configurations is greater than zero.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.175'
        name = 'return'
        modelElement = 'S.78'>
   <UML:TaggedValue.dataValue>
    	true if the object is configured, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.177'
        name = 'documentation'
        modelElement = 'S.20'>
   <UML:TaggedValue.dataValue>
    	Punctual action mode manager that cycles through the lists of punctual actions.
This class extends the base class &lt;code&gt;PunctualActionListModeManager&lt;/code&gt; 
by adding to it an implementation for the &lt;i&gt;update mechanism&lt;/i&gt; that
cycles through all the operational modes defined for the mode manager.
&lt;/p&gt;
An initialization sequence for this class consists of the following
steps (to be performed in the order given): &lt;ul&gt;
&lt;li&gt;Set the number of modes through method &lt;code&gt;setNumberOfModes&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set the default mode &lt;code&gt;setDefaultMode&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set the lengths of the lists through method
&lt;code&gt;setListLength&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Load the individual items through method &lt;code&gt;setListItem&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Reset the component by calling method &lt;code&gt;reset&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.178'
        name = 'author'
        modelElement = 'S.20'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.179'
        name = 'version'
        modelElement = 'S.20'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.180'
        name = 'documentation'
        modelElement = 'S.79'>
   <UML:TaggedValue.dataValue>
    	Instantiate a cycling punctual action mode manager. This constructor sets the
class identifier and then returns.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.181'
        name = 'documentation'
        modelElement = 'S.80'>
   <UML:TaggedValue.dataValue>
    	Cycle through the operational modes. Let N be the number of modes
and C be the current mode. If C is smaller than (N-1), then this
method updates the operationa mode to: (C+1). Otherwise it updates it
to 0.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.182'
        name = 'see'
        modelElement = 'S.80'>
   <UML:TaggedValue.dataValue>
    	ModeManager#update
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.184'
        name = 'documentation'
        modelElement = 'S.12'>
   <UML:TaggedValue.dataValue>
    	Dummy conditional punctual action that does not perform any action
and always returns &quot;action successful&quot;.
A setter method allows the return value of the execution check to
be set by the user.
This punctual action is used for testing purposes.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.185'
        name = 'author'
        modelElement = 'S.12'>
   <UML:TaggedValue.dataValue>
    	Roberto Totaro
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.186'
        name = 'version'
        modelElement = 'S.12'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.187'
        name = 'documentation'
        modelElement = 'S.82'>
   <UML:TaggedValue.dataValue>
    	Instantiate a dummy conditional punctual action.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.188'
        name = 'documentation'
        modelElement = 'S.83'>
   <UML:TaggedValue.dataValue>
    	Set the return value of &lt;code&gt;canExecute&lt;/code&gt;. This method
was implemented only for testing purposes.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.189'
        name = 'see'
        modelElement = 'S.83'>
   <UML:TaggedValue.dataValue>
    	ConditionalPunctualAction#canExecute
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.190'
        name = 'param'
        modelElement = 'S.83'>
   <UML:TaggedValue.dataValue>
    	newState the new value of &lt;code&gt;executionFlag&lt;/code&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.193'
        name = 'documentation'
        modelElement = 'S.84'>
   <UML:TaggedValue.dataValue>
    	Perform a dummy execution test. The result of the test can
be forced by calling &lt;code&gt;setExecutionFlag&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.194'
        name = 'see'
        modelElement = 'S.84'>
   <UML:TaggedValue.dataValue>
    	ConditionalPunctualAction#setExecutionFlag
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.195'
        name = 'see'
        modelElement = 'S.84'>
   <UML:TaggedValue.dataValue>
    	ConditionalPunctualAction#doAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.196'
        name = 'see'
        modelElement = 'S.84'>
   <UML:TaggedValue.dataValue>
    	PunctualAction#execute
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.197'
        name = 'return'
        modelElement = 'S.84'>
   <UML:TaggedValue.dataValue>
    	returns the value of &lt;code&gt;executionFlag&lt;/code&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.199'
        name = 'documentation'
        modelElement = 'S.85'>
   <UML:TaggedValue.dataValue>
    	This method does not do anything.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.200'
        name = 'see'
        modelElement = 'S.85'>
   <UML:TaggedValue.dataValue>
    	ConditionalPunctualAction#doAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.201'
        name = 'see'
        modelElement = 'S.85'>
   <UML:TaggedValue.dataValue>
    	PunctualAction#execute
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.202'
        name = 'return'
        modelElement = 'S.85'>
   <UML:TaggedValue.dataValue>
    	always returns an &lt;code&gt;ACTION_SUCCESS&lt;/code&gt; code
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.204'
        name = 'documentation'
        modelElement = 'S.14'>
   <UML:TaggedValue.dataValue>
    	Dummy mode manager to be used for testing purposes.
This mode manager does not define any strategies.
Its implementation of the update service consists in cycling through
all possible operational modes.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.205'
        name = 'author'
        modelElement = 'S.14'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.206'
        name = 'version'
        modelElement = 'S.14'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.207'
        name = 'documentation'
        modelElement = 'S.86'>
   <UML:TaggedValue.dataValue>
    	Instantiate a dummy mode manager. This constructor sets the
class identifier and then returns.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.208'
        name = 'documentation'
        modelElement = 'S.87'>
   <UML:TaggedValue.dataValue>
    	Cycle through the operational mode. Let N be the number of modes
and C be the current mode. If C is smaller than (N-1), then this
method returns C+1. Otherwise it returns 0.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.209'
        name = 'see'
        modelElement = 'S.87'>
   <UML:TaggedValue.dataValue>
    	ModeManager#Update
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.210'
        name = 'return'
        modelElement = 'S.87'>
   <UML:TaggedValue.dataValue>
    	returns the update operational mode
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.212'
        name = 'documentation'
        modelElement = 'S.88'>
   <UML:TaggedValue.dataValue>
    	This method returns without taking any action. No action is
required because this implementation of a mode manager does not
use any internal data structures.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.215'
        name = 'documentation'
        modelElement = 'S.22'>
   <UML:TaggedValue.dataValue>
    	Dummy punctual action that does not perform any action and always
returns &quot;action successful&quot;.
This punctual action may be useful for testing purposes.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.216'
        name = 'author'
        modelElement = 'S.22'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.217'
        name = 'version'
        modelElement = 'S.22'>
   <UML:TaggedValue.dataValue>
    	1.1
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.218'
        name = 'documentation'
        modelElement = 'S.90'>
   <UML:TaggedValue.dataValue>
    	Instantiate a dummy punctual action.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.219'
        name = 'documentation'
        modelElement = 'S.91'>
   <UML:TaggedValue.dataValue>
    	Return the value of the activation counter.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.220'
        name = 'see'
        modelElement = 'S.91'>
   <UML:TaggedValue.dataValue>
    	#doAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.221'
        name = 'return'
        modelElement = 'S.91'>
   <UML:TaggedValue.dataValue>
    	the value of the activation counter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.223'
        name = 'documentation'
        modelElement = 'S.92'>
   <UML:TaggedValue.dataValue>
    	This method increments the activation counter and returns a code
of &quot;action successful&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.224'
        name = 'see'
        modelElement = 'S.92'>
   <UML:TaggedValue.dataValue>
    	PunctualAction#execute
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.225'
        name = 'return'
        modelElement = 'S.92'>
   <UML:TaggedValue.dataValue>
    	always returns an &quot;action successful&quot; code
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.227'
        name = 'documentation'
        modelElement = 'S.21'>
   <UML:TaggedValue.dataValue>
    	Punctual action mode manager with a single and fixed mode.
This mode manager has a trivial implementation of the update
service that returns without taking any action. It should be 
used when the punctual action manager operates upon a fixed
list of punctual actions.
&lt;p&gt;
An initialization sequence for this class consists of the following
steps (to be performed in the order given here): &lt;ul&gt;
&lt;li&gt;Set the length of the single punctual action list through method
&lt;code&gt;setListLength&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Load the individual punctual actions items through successive
calles to method &lt;code&gt;setListPunctualAction&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Reset the component by calling method &lt;code&gt;reset&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.228'
        name = 'author'
        modelElement = 'S.21'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.229'
        name = 'see'
        modelElement = 'S.21'>
   <UML:TaggedValue.dataValue>
    	PunctualAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.230'
        name = 'version'
        modelElement = 'S.21'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.231'
        name = 'documentation'
        modelElement = 'S.93'>
   <UML:TaggedValue.dataValue>
    	Instantiate a punctual action mode manager. This constructor sets the
class identifier and it configures its superclass to manage only
one single mode. A pseudo-code implementation is as follows: &lt;PRE&gt;
setClassId(ID_SIMPLEPUNCTUALACTIONMODEMANAGER);
setNumberOfModes(1);
setDefaultMode(0);  &lt;/PRE&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.232'
        name = 'documentation'
        modelElement = 'S.94'>
   <UML:TaggedValue.dataValue>
    	Since this is a fixed-mode mode manager, this method returns without
taking any action.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.234'
        name = 'documentation'
        modelElement = 'S.11'>
   <UML:TaggedValue.dataValue>
    	Base class from which all classes encapsulating mode managers are
derived.
Conceptually, a mode manager is characterized by:&lt;ul&gt;
&lt;li&gt;A set of &lt;i&gt;operational modes&lt;/i&gt; of which, at any given time,
one and only one is the &lt;i&gt;current operational mode&lt;/i&gt;,&lt;/li&gt;
&lt;li&gt;A set of &lt;i&gt;strategies&lt;/i&gt;,&lt;/li&gt;
&lt;li&gt;For each strategy, a set of &lt;i&gt;implementations&lt;/i&gt; of which,
at any given time, one and only one is the &lt;i&gt;current implementation&lt;/i&gt;,
and&lt;/li&gt;
&lt;li&gt;An &lt;i&gt;update mechanism&lt;/i&gt; for controlling the change in the current
operational mode.&lt;/li&gt;
&lt;/ul&gt;
This is an abstract class because it only defines the management of
the operational mode. All other aspects listed above are defined and/or
implemented by subclasses.
&lt;p&gt;
Changes in operational mode are recorded through an event report.
It is possible to selectively disable transitions to certain
operational modes or to disable all mode transitions.
&lt;p&gt;
An initialization sequence for this class consists of the following
steps: &lt;ul&gt;
&lt;li&gt;Set the number of modes with method &lt;code&gt;setNumberOfModes&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set the default mode with method &lt;code&gt;setDefaultMode&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Reset the component by calling method &lt;code&gt;reset&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
The above operations must be performed in the order given.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.235'
        name = 'author'
        modelElement = 'S.11'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.236'
        name = 'version'
        modelElement = 'S.11'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.237'
        name = 'ingroup'
        modelElement = 'S.11'>
   <UML:TaggedValue.dataValue>
    	Base
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.238'
        name = 'ingroup'
        modelElement = 'S.11'>
   <UML:TaggedValue.dataValue>
    	ModeManagement
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.239'
        name = 'documentation'
        modelElement = 'S.100'>
   <UML:TaggedValue.dataValue>
    	Instantiate a mode manager. The number of modes, the current
mode, and the default mode are set to illegal values to signify
that the component is not yet initialized.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.240'
        name = 'documentation'
        modelElement = 'S.101'>
   <UML:TaggedValue.dataValue>
    	Execute the &lt;i&gt;update operation&lt;/i&gt; for the mode manager.
This method is declared abstract because the update mechanism is
application-specific and must be defined by concrete subclasses.
A pseudo-code implementation for a typical implementation of this
method takes the following form: &lt;PRE&gt;
newMode = . . .    // compute new operational mode;
setMode(newMode);&lt;/PRE&gt;
Thus, the method computes the new mode and then uses the
&lt;code&gt;setMode&lt;/code&gt; method to attempt a mode update. Note that
it is this latter method that is responsible for enforcing
the mode transition inhibitions and for reporting mode changes
as events.
&lt;p&gt;
This method implements the &lt;i&gt;update&lt;/i&gt; basic
operation of mode managers.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.241'
        name = 'see'
        modelElement = 'S.101'>
   <UML:TaggedValue.dataValue>
    	#setMode
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.243'
        name = 'documentation'
        modelElement = 'S.102'>
   <UML:TaggedValue.dataValue>
    	Set the number of modes of the mode manager.
This is an initialization method. It should only be called once.
Successive calls have no effect. The number of modes should be
greater than zero.
&lt;p&gt;
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
. . .    // allocate memory for internal data structures
allocateMemory(numberOfModes); &lt;/PRE&gt;
Concrete mode managers will normally use some internal data
structure to hold mode-related information. The memory for this
data structure must be allocated when the component is initialized.
The call to the protected and abstract method &lt;code&gt;allocateMemory&lt;/code&gt;
can be used for this purpose.
&lt;p&gt;
This is an initialization method. It should be called only once. Only
positive number of modes are legal.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.244'
        name = 'see'
        modelElement = 'S.102'>
   <UML:TaggedValue.dataValue>
    	allocateMemory
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.245'
        name = 'param'
        modelElement = 'S.102'>
   <UML:TaggedValue.dataValue>
    	numberOfModes the number of modes
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.248'
        name = 'documentation'
        modelElement = 'S.103'>
   <UML:TaggedValue.dataValue>
    	Set the default mode of the mode manager.
The default mode of the mode manager is its operational mode at the
end of the configuration process or after a
call to method &lt;code&gt;rest&lt;/code&gt;. The default mode argument must lie in the
interval [0,N-1] where N is the total number of modes. If an illegal
default mode is used, then the method generates an event report of type
EVT_ILLEGAL_MM and returns without taking any action.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.249'
        name = 'param'
        modelElement = 'S.103'>
   <UML:TaggedValue.dataValue>
    	defaultMode the default mode
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.252'
        name = 'documentation'
        modelElement = 'S.104'>
   <UML:TaggedValue.dataValue>
    	Enable/disable all mode transitions.
When mode transitions are disabled, the current operational mode is
never changed.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.253'
        name = 'see'
        modelElement = 'S.104'>
   <UML:TaggedValue.dataValue>
    	#update
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.254'
        name = 'param'
        modelElement = 'S.104'>
   <UML:TaggedValue.dataValue>
    	enabled the transition are disabled if false, enabled if true
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.257'
        name = 'documentation'
        modelElement = 'S.105'>
   <UML:TaggedValue.dataValue>
    	Enable/disable transitions to the toMode-th operational mode.
The toMode argument must lie in the
interval [0,N-1] where N is the total number of modes. If an illegal
default mode is used, then the method generates an event report of type
EVT_ILLEGAL_MM and returns without taking any action.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.258'
        name = 'see'
        modelElement = 'S.105'>
   <UML:TaggedValue.dataValue>
    	#update
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.259'
        name = 'param'
        modelElement = 'S.105'>
   <UML:TaggedValue.dataValue>
    	toMode the operational mode to which transitions are enabled/disabled
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.260'
        name = 'param'
        modelElement = 'S.105'>
   <UML:TaggedValue.dataValue>
    	enabled the transition is disabled if false, enabled if true
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.264'
        name = 'documentation'
        modelElement = 'S.106'>
   <UML:TaggedValue.dataValue>
    	Check whether mode transitions are enabled.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.265'
        name = 'see'
        modelElement = 'S.106'>
   <UML:TaggedValue.dataValue>
    	#setTransitionEnableStatus
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.266'
        name = 'return'
        modelElement = 'S.106'>
   <UML:TaggedValue.dataValue>
    	true if mode transitions are enabled, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.268'
        name = 'documentation'
        modelElement = 'S.107'>
   <UML:TaggedValue.dataValue>
    	Check whether transitions to the argument target mode are enabled.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.269'
        name = 'see'
        modelElement = 'S.107'>
   <UML:TaggedValue.dataValue>
    	#setTransitionEnableStatus
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.270'
        name = 'param'
        modelElement = 'S.107'>
   <UML:TaggedValue.dataValue>
    	toMode the target mode
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.271'
        name = 'return'
        modelElement = 'S.107'>
   <UML:TaggedValue.dataValue>
    	true if a transition into the target mode is enabled
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.274'
        name = 'documentation'
        modelElement = 'S.108'>
   <UML:TaggedValue.dataValue>
    	Return the current operational mode.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.275'
        name = 'return'
        modelElement = 'S.108'>
   <UML:TaggedValue.dataValue>
    	the current mode
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.277'
        name = 'documentation'
        modelElement = 'S.109'>
   <UML:TaggedValue.dataValue>
    	Return the number of operational mode.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.278'
        name = 'return'
        modelElement = 'S.109'>
   <UML:TaggedValue.dataValue>
    	the number of operational modes
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.280'
        name = 'documentation'
        modelElement = 'S.110'>
   <UML:TaggedValue.dataValue>
    	Enable all mode transitions and set the operational mode to the default
mode. This method is declared virtual so as to allow concrete mode managers
to define more specific reset operations.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.282'
        name = 'documentation'
        modelElement = 'S.111'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on a mode manager: verify
that the number of modes and the default modes have legal values.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.283'
        name = 'return'
        modelElement = 'S.111'>
   <UML:TaggedValue.dataValue>
    	true if the object is configured, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.285'
        name = 'documentation'
        modelElement = 'S.112'>
   <UML:TaggedValue.dataValue>
    	Change the operational mode the mode manager.
This method is responsible for managing the event reporting
mechanism and the mode transition inhibition mechanism.
All mode changes should occurr through this method. This in
particular applies to changes commanded by implementations of
method &lt;code&gt;update&lt;/code&gt; in derived classes.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
if (newMode != currentMode)
if (isTransitionEnabled() &amp;&amp; isTransitionEnabled(newMode))
currentMode = newMode;
createEventReport(EVT_MOD_TRANS_PERFORMED);
else
createEventReport(EVT_MOD_TRANS_INHIBITED);&lt;/PRE&gt;
where &lt;code&gt;currentMode&lt;/code&gt; is the operational mode at the
time the method is called and &lt;code&gt;instanceId&lt;/code&gt; is the
instance identifier of the mode manager component.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.286'
        name = 'see'
        modelElement = 'S.112'>
   <UML:TaggedValue.dataValue>
    	#update
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.287'
        name = 'see'
        modelElement = 'S.112'>
   <UML:TaggedValue.dataValue>
    	TD_EventType
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.288'
        name = 'see'
        modelElement = 'S.112'>
   <UML:TaggedValue.dataValue>
    	CC_RootObject
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.289'
        name = 'param'
        modelElement = 'S.112'>
   <UML:TaggedValue.dataValue>
    	newMode the new operational mode
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.292'
        name = 'documentation'
        modelElement = 'S.113'>
   <UML:TaggedValue.dataValue>
    	Allocate the memory for the internal data structures whose size
depends on the number of modes.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.293'
        name = 'see'
        modelElement = 'S.113'>
   <UML:TaggedValue.dataValue>
    	#setNumberOfModes
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.294'
        name = 'param'
        modelElement = 'S.113'>
   <UML:TaggedValue.dataValue>
    	numberOfModes the number of modes
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.297'
        name = 'documentation'
        modelElement = 'S.13'>
   <UML:TaggedValue.dataValue>
    	Base class from which all classes encapsulating punctual actions are
derived.
A &lt;i&gt;punctual action&lt;/i&gt; is an action that is executed in one-shot mode,
namely an action that is activated
once and executes to completion during its single activation.
&lt;p&gt;
Punctual actions can be enabled and disabled.
Execution of a punctual action that is disabled has no effect.
&lt;p&gt;
Execution of a punctual action has an &lt;i&gt;outcome&lt;/i&gt;.
The outcome of the execution of a punctual action is represented by the
value returned by the execution method. This value is internally saved
and punctual actions can be interrogated for their &lt;i&gt;last outcome&lt;/i&gt;.
This is the outcome produced by the last execution of the punctual
action.
&lt;p&gt;
Execution of a punctual action is recorded through an event report.
The event records the fact that the punctual action was executed
(or that it was not executed because it was disabled).
&lt;p&gt;
This is an abstract class because the actions to be associated to the
punctual action must be specified by the subclasses.
The management of the enable status is however done in this class.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.298'
        name = 'author'
        modelElement = 'S.13'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.299'
        name = 'version'
        modelElement = 'S.13'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.300'
        name = 'ingroup'
        modelElement = 'S.13'>
   <UML:TaggedValue.dataValue>
    	Base
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.301'
        name = 'documentation'
        modelElement = 'S.116'>
   <UML:TaggedValue.dataValue>
    	Instantiate a punctual action. The enable status of the action is
initialized to &quot;enabled&quot;. The last outcome is initialized to
ACTION_RESET.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.302'
        name = 'documentation'
        modelElement = 'S.117'>
   <UML:TaggedValue.dataValue>
    	Execute the punctual action if the punctual action is enabled,
otherwise do nothing. An event report is created to record the fact.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
outcomeCode = ACTION_DISABLED;
if ( isEnabled() ) {
outcomeCode = doAction();
createEventReport(EVT_PUNCTUAL_ACTION_EXEC);
} else
createEventReport(EVT_PUNCTUAL_ACTION_DIS);
lastOutcome = outcomeCode;
return outcomeCode;   &lt;/PRE&gt;
The &lt;CODE&gt;doAction()&lt;/CODE&gt; method is abstract and encapsulates the
implementation of the actions associated to
the punctual action.
Thus, this class enforces the check on the enabled status of the
punctual action and the
recording of the action outcome but delegates implementation of the
action to the derived classes.
&lt;p&gt;
This method implements the &lt;i&gt;trigger&lt;/i&gt; or &lt;i&gt;execute&lt;/i&gt; basic
operations for all framework components
that are instantiated from classes derived from
&lt;CODE&gt;PunctualAction&lt;/CODE&gt;.
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.303'
        name = 'see'
        modelElement = 'S.117'>
   <UML:TaggedValue.dataValue>
    	TD_ActionOutcome
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.304'
        name = 'see'
        modelElement = 'S.117'>
   <UML:TaggedValue.dataValue>
    	TD_EventType
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.305'
        name = 'return'
        modelElement = 'S.117'>
   <UML:TaggedValue.dataValue>
    	the outcome code of the punctual action that encodes the
results of the execution of the action
(success, failure, etc)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.307'
        name = 'documentation'
        modelElement = 'S.118'>
   <UML:TaggedValue.dataValue>
    	Set the enable status of the punctual action.
When the action is disabled, a call to method &lt;CODE&gt;execute()&lt;/CODE&gt;
has no effect.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.308'
        name = 'param'
        modelElement = 'S.118'>
   <UML:TaggedValue.dataValue>
    	isEnabled if true, then the action is enabled; if false, then
the action is disabled
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.311'
        name = 'documentation'
        modelElement = 'S.119'>
   <UML:TaggedValue.dataValue>
    	Check the enable status of the punctual action.
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.312'
        name = 'return'
        modelElement = 'S.119'>
   <UML:TaggedValue.dataValue>
    	true if the punctual is enabled, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.314'
        name = 'documentation'
        modelElement = 'S.120'>
   <UML:TaggedValue.dataValue>
    	Get the &lt;i&gt;last outcome&lt;/i&gt; of the punctual action. The last outcome
of the punctual action is the return value of method &lt;code&gt;execute&lt;/code&gt;
the last time it was called. After component
instantiation or after a call to &lt;code&gt;resetLastOutcome&lt;/code&gt;,
this method returns ACTION_RESET
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.315'
        name = 'see'
        modelElement = 'S.120'>
   <UML:TaggedValue.dataValue>
    	#resetLastOutcome
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.316'
        name = 'see'
        modelElement = 'S.120'>
   <UML:TaggedValue.dataValue>
    	TD_ActionOutcome
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.317'
        name = 'see'
        modelElement = 'S.120'>
   <UML:TaggedValue.dataValue>
    	#execute
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.318'
        name = 'return'
        modelElement = 'S.120'>
   <UML:TaggedValue.dataValue>
    	the last outcome of the punctual action
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.320'
        name = 'documentation'
        modelElement = 'S.121'>
   <UML:TaggedValue.dataValue>
    	Reset the value of the last outcome to ACTION_RESET.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.321'
        name = 'see'
        modelElement = 'S.121'>
   <UML:TaggedValue.dataValue>
    	#getLastOutcome
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.322'
        name = 'see'
        modelElement = 'S.121'>
   <UML:TaggedValue.dataValue>
    	TD_ActionOutcome
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.324'
        name = 'documentation'
        modelElement = 'S.122'>
   <UML:TaggedValue.dataValue>
    	Encapsulate implementation of the action associated to this punctual
action object.
This method is called by method &lt;CODE&gt;execute()&lt;/CODE&gt; in this same
class.
Users of punctual actions do not see method &lt;CODE&gt;doAction()&lt;/CODE&gt;,
they only see method &lt;CODE&gt;execute()&lt;/CODE&gt;.
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.325'
        name = 'see'
        modelElement = 'S.122'>
   <UML:TaggedValue.dataValue>
    	#execute
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.326'
        name = 'return'
        modelElement = 'S.122'>
   <UML:TaggedValue.dataValue>
    	the outcome code of the punctual action that encodes the
results of the execution of the action
(success, failure, etc)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.328'
        name = 'documentation'
        modelElement = 'S.19'>
   <UML:TaggedValue.dataValue>
    	Base abstract class for list-based punctual action mode managers.
A list-based punctual action mode manager handles the set of 
punctual action in a punctual action mode manager as a statically defined 
linear list. 
The mode manager maintains several such lists, one for each
operational mode.
&lt;p&gt;
At any given time, one list is the &lt;i&gt;current list&lt;/i&gt; (or
&lt;i&gt;active list&lt;/i&gt;).
The iteration methods specified in the super class are implemented
to iterate over the items in the list starting with the one with the 
lowest position and ending with the one with the highest position
in the list.
&lt;p&gt;
The lists are loaded, one item at a time, when the mode manager
is configured. The loading methods
are: &lt;code&gt;loadListLength&lt;/code&gt; (to load the number
items in each list) and &lt;code&gt;loadItem&lt;/code&gt;
(to load the individual items in each list).
&lt;p&gt;
This class is abstract because it does not define the update
mechanism for the mode manager. This must be defined by concrete
subclasses.
&lt;/p&gt;
An initialization sequence for this class consists of the following
steps (to be performed in the order given): &lt;ul&gt;
&lt;li&gt;Set the number of modes through method &lt;code&gt;setNumberOfModes&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set the default mode &lt;code&gt;setDefaultMode&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set the lengths of the lists through method
&lt;code&gt;setListLength&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Load the individual items through method &lt;code&gt;setListItem&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Reset the component by calling method &lt;code&gt;reset&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.329'
        name = 'author'
        modelElement = 'S.19'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.330'
        name = 'version'
        modelElement = 'S.19'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.331'
        name = 'ingroup'
        modelElement = 'S.19'>
   <UML:TaggedValue.dataValue>
    	Base
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.332'
        name = 'ingroup'
        modelElement = 'S.19'>
   <UML:TaggedValue.dataValue>
    	ModeManagement
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.333'
        name = 'documentation'
        modelElement = 'S.127'>
   <UML:TaggedValue.dataValue>
    	Allocate the memory for the lists. The newly allocated memory
is initialized with pNULL. Note that this method
cannot allocate all the memory required by a list mode manager because
this also depends on the number of items in each list. This number is loaded
with method: &lt;code&gt;setLength&lt;/code&gt;.
&lt;p&gt;
This method is called by method &lt;code&gt;setNumberOfModes&lt;/code&gt; in the
superclass &lt;code&gt;ModeManager&lt;/code&gt;.
&lt;p&gt;
This is an initialization method. It should only be called once. The number
of modes should be greater than zero.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.334'
        name = 'see'
        modelElement = 'S.127'>
   <UML:TaggedValue.dataValue>
    	ModeManager#setNumberOfModes
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.335'
        name = 'param'
        modelElement = 'S.127'>
   <UML:TaggedValue.dataValue>
    	numberOfModes the number of modes
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.338'
        name = 'documentation'
        modelElement = 'S.128'>
   <UML:TaggedValue.dataValue>
    	Retrieve the punctual action currently scanned by the iteration counter.
This method returns the counter-th item in the iteration list where
&quot;counter&quot; is the iteration counter.
This method should only be used within an iteration cycle. However, it is
guaranteed to return a reference to a list item at all times.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.339'
        name = 'see'
        modelElement = 'S.128'>
   <UML:TaggedValue.dataValue>
    	#first
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.340'
        name = 'return'
        modelElement = 'S.128'>
   <UML:TaggedValue.dataValue>
    	the item currently scanned by the iteration counter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.342'
        name = 'documentation'
        modelElement = 'S.129'>
   <UML:TaggedValue.dataValue>
    	Load an item in a list. The item &lt;code&gt;pItem&lt;/code&gt; is loaded in the pos-th
position of the n-th list. A check is performed on the legality of the
&lt;code&gt;n&lt;/code&gt; and &lt;code&gt;pos&lt;/code&gt; arguments. If they are found
to be out of range, the fact is reported as an event of type EVT_ILLEGAL_MM.
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.343'
        name = 'param'
        modelElement = 'S.129'>
   <UML:TaggedValue.dataValue>
    	n the list index
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.344'
        name = 'param'
        modelElement = 'S.129'>
   <UML:TaggedValue.dataValue>
    	pos the position within the list where the item is loaded
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.345'
        name = 'param'
        modelElement = 'S.129'>
   <UML:TaggedValue.dataValue>
    	pItem the item to be loaded
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.350'
        name = 'documentation'
        modelElement = 'S.130'>
   <UML:TaggedValue.dataValue>
    	Instantiate a punctual action mode manager component. The internal data
variables are initialized to illegal values to signify that the component
is not yet configured.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.351'
        name = 'documentation'
        modelElement = 'S.131'>
   <UML:TaggedValue.dataValue>
    	Set the size of the n-th list. The n-th list is the list that is active
in the n-th operational mode.
A call to this method causes memory to be allocated to store the items in
the n-th list. The newly allocated memory is initialized
to pNULL.
&lt;p&gt;
This is an initialization method. It should only be called once.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.352'
        name = 'param'
        modelElement = 'S.131'>
   <UML:TaggedValue.dataValue>
    	n the list index (should be in the range [0,N-1] where N is the
number of modes)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.353'
        name = 'param'
        modelElement = 'S.131'>
   <UML:TaggedValue.dataValue>
    	length the number of items in the list-th telemetry packet list (should
be greater than zero)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.357'
        name = 'documentation'
        modelElement = 'S.132'>
   <UML:TaggedValue.dataValue>
    	Iteration method to iterate through the punctual actions in the current
list. This method should be used jointly with methods: &lt;code&gt;next&lt;/code&gt;,
&lt;code&gt;isIterationFinished&lt;/code&gt; and &lt;code&gt;getPunctualAction&lt;/code&gt;. 
Taken together,
these methods allow all the items in a list to be scanned. The list
that is thus iterated through is called the &lt;i&gt;iteration list&lt;/i&gt;.
The iteration list is the current list at the time method &lt;code&gt;first&lt;/code&gt;
is called. This list is
guaranteed to remain unchanged in between successive calls to
method &lt;code&gt;first&lt;/code&gt;. Thus, even if the current mode changes
during the iteration (for instance, following a call to method
&lt;code&gt;update&lt;/code&gt;), the iterators will continue processing the
list that was active when &lt;code&gt;first&lt;/code&gt; was called.
&lt;p&gt;
This class internally maintains an &lt;i&gt;iteration
counter&lt;/i&gt;. During an iteration cycle, the iteration counter is
incremented from zero to (N-1) where N is number of items in the
iteration list. Method &lt;code&gt;first&lt;/code&gt; resets the iteration counter
to 0. A call to method &lt;code&gt;next&lt;/code&gt; causes the iteration counter
to be incremented by 1 up to the value of (N-1). Method &lt;code&gt;isIterationFinished&lt;/code&gt;
returns true when the counter has reached the value (N-1).
The item currently pointed at by the iteration counter can be retrieved
through method &lt;code&gt;getPunctualAction&lt;/code&gt;.
&lt;p&gt;
Thus, a typical iteration cycle might be organized as follows: &lt;PRE&gt;
for (first(); !isIterationFinished(); next()) {
pItem = getIterationPunctualAction();
. . .    // process pItem
}  &lt;/PRE&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.359'
        name = 'documentation'
        modelElement = 'S.133'>
   <UML:TaggedValue.dataValue>
    	Iteration method to be used in conjunction with methods &lt;code&gt;first&lt;/code&gt;
and &lt;code&gt;isIterationFinished&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.360'
        name = 'see'
        modelElement = 'S.133'>
   <UML:TaggedValue.dataValue>
    	#first
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.362'
        name = 'documentation'
        modelElement = 'S.134'>
   <UML:TaggedValue.dataValue>
    	Iteration method to be used in conjunction with methods &lt;code&gt;first&lt;/code&gt;
and &lt;code&gt;next&lt;/code&gt;.
This method should only be used as part of an iteration cycle. The result
of calling it before ever calling &lt;code&gt;first&lt;/code&gt;
is undefined.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.363'
        name = 'see'
        modelElement = 'S.134'>
   <UML:TaggedValue.dataValue>
    	#first
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.364'
        name = 'return'
        modelElement = 'S.134'>
   <UML:TaggedValue.dataValue>
    	true if the end of the iteration has been reached, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.366'
        name = 'documentation'
        modelElement = 'S.135'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on a punctual action mode
manager: verify that all the lists have been initialized
and that all the items have been loaded.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.367'
        name = 'return'
        modelElement = 'S.135'>
   <UML:TaggedValue.dataValue>
    	true if the list mode manager is configured, false
otherwise.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.369'
        name = 'documentation'
        modelElement = 'S.16'>
   <UML:TaggedValue.dataValue>
    	Base abstract class for mode manager components for the punctual
action manager.
A punctual action mode manager handles one single &lt;i&gt;strategy&lt;/i&gt;, which
is represented by a set of &lt;i&gt;punctual action&lt;/i&gt; components.
To every operational mode, the telemetry mode manager associates 
a set of punctual actions. 
Client access the items in this set through four
&lt;i&gt;iteration methods&lt;/i&gt;: &lt;code&gt;first&lt;/code&gt;, &lt;code&gt;next&lt;/code&gt;,
&lt;code&gt;isIterationFinished&lt;/code&gt;, and &lt;code&gt;getPunctualAction&lt;/code&gt;.
&lt;p&gt;
This is an abstract class because it specifies neither the implementation
mechanism for the set of punctual actions nor the mode update mechanism.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.370'
        name = 'author'
        modelElement = 'S.16'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.371'
        name = 'todo'
        modelElement = 'S.16'>
   <UML:TaggedValue.dataValue>
    	Create a class DC_FSMPunctualActionModeManager where the mode is driven
by an FSM. Same thing should be done for the TelemetryModeManager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.372'
        name = 'see'
        modelElement = 'S.16'>
   <UML:TaggedValue.dataValue>
    	CC_PunctualActionManager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.373'
        name = 'see'
        modelElement = 'S.16'>
   <UML:TaggedValue.dataValue>
    	PunctualAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.374'
        name = 'version'
        modelElement = 'S.16'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.375'
        name = 'ingroup'
        modelElement = 'S.16'>
   <UML:TaggedValue.dataValue>
    	ModeManagement
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.376'
        name = 'documentation'
        modelElement = 'S.136'>
   <UML:TaggedValue.dataValue>
    	Instantiate a punctual action mode manager. This constructor returns
without taking any action.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.377'
        name = 'documentation'
        modelElement = 'S.137'>
   <UML:TaggedValue.dataValue>
    	Iteration method to iterate through the items in the set of
punctual actions applicable to the current operational mode. 
This method should be used jointly with methods: &lt;code&gt;next&lt;/code&gt;,
&lt;code&gt;isIterationFinished&lt;/code&gt; and &lt;code&gt;getIterationPunctualAction&lt;/code&gt;. 
Taken together,
these methods allow all the items in the currently applicable set 
of punctual actions to be scanned. 
During an iteration cycle, an internal pointer, the &lt;i&gt;iteration
pointer&lt;/i&gt;, is made to scan over all the items in the currently applicable
set of telemetry packets.
The item currently pointed at by the iteration counter can be retrieved
through method &lt;code&gt;getIterationPunctualAction&lt;/code&gt;.
Thus, a typical iteration cycle might be organized as follows: &lt;PRE&gt;
for (first(); !isIterationFinished(); next()) {
pItem = getIterationPunctualAction();
. . .    // process pItem
}  &lt;/PRE&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.378'
        name = 'see'
        modelElement = 'S.137'>
   <UML:TaggedValue.dataValue>
    	#getIterationItem
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.380'
        name = 'documentation'
        modelElement = 'S.138'>
   <UML:TaggedValue.dataValue>
    	Iteration method to be used in conjunction with methods &lt;code&gt;first&lt;/code&gt;
and &lt;code&gt;isIterationFinished&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.381'
        name = 'see'
        modelElement = 'S.138'>
   <UML:TaggedValue.dataValue>
    	#first
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.383'
        name = 'documentation'
        modelElement = 'S.139'>
   <UML:TaggedValue.dataValue>
    	Iteration method to be used in conjunction with methods &lt;code&gt;first&lt;/code&gt;
and &lt;code&gt;next&lt;/code&gt;.
This method should only be used as part of an iteration cycle. The result
of calling it before ever calling &lt;code&gt;first&lt;/code&gt;
is undefined.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.384'
        name = 'see'
        modelElement = 'S.139'>
   <UML:TaggedValue.dataValue>
    	#first
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.385'
        name = 'return'
        modelElement = 'S.139'>
   <UML:TaggedValue.dataValue>
    	true if the end of the iteration has been reached, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.387'
        name = 'documentation'
        modelElement = 'S.140'>
   <UML:TaggedValue.dataValue>
    	Return the punctual action item pointed at by the iterator.
This method is a type-safe wrapper for method &lt;code&gt;getIteratorItem&lt;/code&gt;
in the superclass.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.388'
        name = 'see'
        modelElement = 'S.140'>
   <UML:TaggedValue.dataValue>
    	ListModeManager#getIterationItem
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.389'
        name = 'return'
        modelElement = 'S.140'>
   <UML:TaggedValue.dataValue>
    	the punctual action item pointed at by the iterator
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.418'
        name = 'documentation'
        modelElement = 'S.151'>
   <UML:TaggedValue.dataValue>
    	Base class from which all control block classes are derived.
A control block is intended to model a discrete transfer function of the
following kind&lt;PRE&gt;
x(k+1) = h( x(k) , u(k), p )
y(k) = g( x(k), u(k), p )   &lt;/PRE&gt;
where: &lt;ul&gt;
&lt;li&gt;k is a temporal index&lt;/li&gt;
&lt;li&gt;x is a vector of state variables that are updated at every sampling time k&lt;/li&gt;
&lt;li&gt;u is a vector of input variables that are updated at every sampling time k&lt;/li&gt;
&lt;li&gt;y is a vector of output variables that are updated at every sampling time k&lt;/li&gt;
&lt;li&gt;p is a vector of nominally constant parameters&lt;/li&gt;
&lt;li&gt;h(.) is a state propagation function&lt;/li&gt;
&lt;li&gt;g(.) is an output update function&lt;/li&gt;
&lt;/ul&gt;
This class offers the following types of services: &lt;ul&gt;
&lt;li&gt;services to set and get the number of the inputs, outputs,
states, and parameters&lt;/li&gt;
&lt;li&gt;services to set and get the values of the state variables and of the parameters&lt;/li&gt;
&lt;li&gt;services to propagate the state and update the outputs&lt;/li&gt;
&lt;li&gt;reset service to reset the state propagation and output update algorithms
and bring the state back to the value it had at the time the control block
was initialized&lt;/li&gt;
&lt;/ul&gt;
No services are defined to set and get the output and input values because there can
be several ways in which a control block is linked to the source of its inputs and to
the destination for its outputs. Example of typical input/output linking mechanisms are: &lt;ul&gt;
&lt;li&gt;&lt;i&gt;Copy Link&lt;/i&gt;: at every sampling time, the inputs are copied from the external
input source into an internal buffer maintained by the control block. After state and
output propagation, the updated values of the outputs are copied to the external output
destination location.&lt;/li&gt;
&lt;li&gt;&lt;i&gt;Pointer Link&lt;/i&gt;: during the configuration phase, the control block is loaded with
pointers to the input sources and to the output destinations. The control block then accesses
its inputs and outputs through these pointers.&lt;/li&gt;
&lt;li&gt;&lt;i&gt;Data Item Link&lt;/i&gt;: during the configuration phase, the control block is loaded with
data items (instances of class &lt;code&gt;DC_DataItem&lt;/code&gt;) that encapsulate the input sources and
output destinations. The control block then accesses its inputs and outputs through their data
items.&lt;/li&gt;
&lt;li&gt;&lt;i&gt;Data Pool Link&lt;/i&gt;: the input sources and output destinations are assumed to be located
in the data pool. During the configuration phase, the control block is loaded with the identifiers
of the data pool locations that hold the inputs and outputs. The control block then accesses
its inputs and outputs directloy from the data pool.&lt;/li&gt;
&lt;/ul&gt;
The diversity of the above mechansims makes it impossible to define the services to access
the inputs and outputs at the level of this base class. The definition of these services is
therefore left to subclasses of &lt;code&gt;ControlBlock&lt;/code&gt;.
&lt;p&gt;
This is an abstract class because it defines neither the state propagation
and output update functions nor the input and output allocation, setter and getter
functions. However it internally defines variables that are intended to make it easy for
developers to create concrete classes that implement specific state propagation and
output update algorithms.
More specifically, this class defines the following items: &lt;ul&gt;
&lt;li&gt;The number of inputs (nInputs)&lt;/li&gt;
&lt;li&gt;The number of outputs (nOutputs)&lt;/li&gt;
&lt;li&gt;The number of state variables (nStates)&lt;/li&gt;
&lt;li&gt;The number of parameters (nParameters)&lt;/li&gt;
&lt;li&gt;An array x to hold the state variables&lt;/li&gt;
&lt;li&gt;An array p to hold the parameter variables&lt;/li&gt;
&lt;/ul&gt;
These variables are declared &lt;code&gt;protected&lt;/code&gt; so as to give subclasses
ready and easy access to them. It should be stressed however that there is no
obligation on the part of subclasses to use these data structures. If
they are subject to special requirements, they are free to implement the
state propagation and output update services using class-specific structures.
&lt;p&gt;
The internal data structures must be configured by the user. Thus,
the configuration process for an instance of this class is
as follows: &lt;ul&gt;
&lt;li&gt;set the number of inputs&lt;/li&gt;
&lt;li&gt;set the number of outputs&lt;/li&gt;
&lt;li&gt;set the number of states&lt;/li&gt;
&lt;li&gt;set the number of parameters&lt;/li&gt;
&lt;/ul&gt;
Access to specific parameter and state values is
performed through an integer index i that designates the location
of the desired input, output, parameter or state value within the
corresponding array. Run-time checks on the legality of the index
are only performed where errors might corrupt internal data
structures (i.e. during write accesses). In other cases,
responsibility for ensuring the legality of the index is left
to the caller.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.419'
        name = 'author'
        modelElement = 'S.151'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti, Roberto Totaro
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.420'
        name = 'version'
        modelElement = 'S.151'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.421'
        name = 'ingroup'
        modelElement = 'S.151'>
   <UML:TaggedValue.dataValue>
    	Data
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.422'
        name = 'documentation'
        modelElement = 'S.169'>
   <UML:TaggedValue.dataValue>
    	Number of inputs
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.423'
        name = 'documentation'
        modelElement = 'S.170'>
   <UML:TaggedValue.dataValue>
    	Number of outputs
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.424'
        name = 'documentation'
        modelElement = 'S.171'>
   <UML:TaggedValue.dataValue>
    	Number of state variables
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.425'
        name = 'documentation'
        modelElement = 'S.172'>
   <UML:TaggedValue.dataValue>
    	Number of parameters
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.426'
        name = 'documentation'
        modelElement = 'S.173'>
   <UML:TaggedValue.dataValue>
    	Array to hold the state variables.
x[i] holds the i-th state variable with i in the interval [0,N] where N is
the number of states.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.427'
        name = 'see'
        modelElement = 'S.173'>
   <UML:TaggedValue.dataValue>
    	#nStates
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.428'
        name = 'documentation'
        modelElement = 'S.174'>
   <UML:TaggedValue.dataValue>
    	Array to hold the parameter variables.
p[i] holds the i-th state variable with i in the interval [0,N-1] where N is
the number of parameters.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.429'
        name = 'see'
        modelElement = 'S.174'>
   <UML:TaggedValue.dataValue>
    	#nParameters
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.430'
        name = 'documentation'
        modelElement = 'S.175'>
   <UML:TaggedValue.dataValue>
    	Set the number of inputs and, if required, allocate the necessary storage.
The number of inputs must be non-negative.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.431'
        name = 'param'
        modelElement = 'S.175'>
   <UML:TaggedValue.dataValue>
    	n the number of inputs
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.434'
        name = 'documentation'
        modelElement = 'S.176'>
   <UML:TaggedValue.dataValue>
    	Set the number of outputs and, if required, allocate the necessary storage.
The number of inputs must be non-negative.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.435'
        name = 'param'
        modelElement = 'S.176'>
   <UML:TaggedValue.dataValue>
    	n the number of outputs
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.438'
        name = 'documentation'
        modelElement = 'S.177'>
   <UML:TaggedValue.dataValue>
    	Set the number of states. This method causes the memory for the state array
to be allocated. The number of states must be non-negative. The state values
are initialized to zero. This is an initialization method: it shall be called
only once.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.439'
        name = 'param'
        modelElement = 'S.177'>
   <UML:TaggedValue.dataValue>
    	n the number of states
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.442'
        name = 'documentation'
        modelElement = 'S.178'>
   <UML:TaggedValue.dataValue>
    	Set the number of parameters. This method causes the memory for the parameter array
to be allocated. The number of parameters must be non-negative. The parameter values
are initialized to zero. This is an initialization method: it shall be called
only once.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.443'
        name = 'param'
        modelElement = 'S.178'>
   <UML:TaggedValue.dataValue>
    	n the number of parameters
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.446'
        name = 'documentation'
        modelElement = 'S.179'>
   <UML:TaggedValue.dataValue>
    	Implement the state propagation function. The result of calling this method
should be a new set of values for the state variables computed as a function
of the current input values, the old state values, and the parameter values.
Note that the state and parameter values are directly accessible as
&lt;code&gt;protected&lt;/code&gt; variables. This should facilitate the implementation
of this method in concrete subclasses.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.447'
        name = 'see'
        modelElement = 'S.179'>
   <UML:TaggedValue.dataValue>
    	#propagate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.449'
        name = 'documentation'
        modelElement = 'S.180'>
   <UML:TaggedValue.dataValue>
    	Implement the output update function. This method uses the current
values of the inputs and state variables to compute
and apply new values for the outputs. Note that the
input, state and parameter values are directly accessible as &lt;code&gt;protected&lt;/code&gt;
variables. This should facilitate the implementation of this method
in concrete subclasses.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.450'
        name = 'see'
        modelElement = 'S.180'>
   <UML:TaggedValue.dataValue>
    	#propagate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.452'
        name = 'documentation'
        modelElement = 'S.181'>
   <UML:TaggedValue.dataValue>
    	Instantiate a control block. The number of inputs, outputs, states and parameters
is initialized with illegal values to signify that the component is not yet configured.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.453'
        name = 'documentation'
        modelElement = 'S.182'>
   <UML:TaggedValue.dataValue>
    	Return the number of outputs of the control block.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.454'
        name = 'return'
        modelElement = 'S.182'>
   <UML:TaggedValue.dataValue>
    	the number of outputs
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.456'
        name = 'documentation'
        modelElement = 'S.183'>
   <UML:TaggedValue.dataValue>
    	Return the number of states of the control block.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.457'
        name = 'return'
        modelElement = 'S.183'>
   <UML:TaggedValue.dataValue>
    	the number of states
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.459'
        name = 'documentation'
        modelElement = 'S.184'>
   <UML:TaggedValue.dataValue>
    	Return the number of inputs of the control block.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.460'
        name = 'return'
        modelElement = 'S.184'>
   <UML:TaggedValue.dataValue>
    	the number of inputs
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.462'
        name = 'documentation'
        modelElement = 'S.185'>
   <UML:TaggedValue.dataValue>
    	Return the number of parameters of the control block.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.463'
        name = 'return'
        modelElement = 'S.185'>
   <UML:TaggedValue.dataValue>
    	the number of parameters
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.465'
        name = 'documentation'
        modelElement = 'S.186'>
   <UML:TaggedValue.dataValue>
    	Return the value of the i-th state. The argument i must lie
in the interval [0,n-1] where n is the number of states.
No check is performed on the legality of the index i.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.466'
        name = 'return'
        modelElement = 'S.186'>
   <UML:TaggedValue.dataValue>
    	the value of the i-th state variable
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.467'
        name = 'param'
        modelElement = 'S.186'>
   <UML:TaggedValue.dataValue>
    	i the index of the state variable
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.470'
        name = 'documentation'
        modelElement = 'S.187'>
   <UML:TaggedValue.dataValue>
    	Return the value of the i-th parameter. The argument i must lie
in the interval [0,n-1] where n is the number of parameters.
No check is performed on the legality of the index i.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.471'
        name = 'return'
        modelElement = 'S.187'>
   <UML:TaggedValue.dataValue>
    	the value of the i-th parameter variable
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.472'
        name = 'param'
        modelElement = 'S.187'>
   <UML:TaggedValue.dataValue>
    	i the index of the parameter variable
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.475'
        name = 'documentation'
        modelElement = 'S.188'>
   <UML:TaggedValue.dataValue>
    	Set the value of the i-th state. The argument i must lie
in the interval [0,n-1] where n is the number of states.
Illegal argument values trigger the generation of an event report EVT_ILLEGAL_CB.
This method should not normally be used since the state values are internally computed
by propagating the input and the previous state values. It is provided for the
(non-nominal) case where there is a need to overwrite the internally computed state.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.476'
        name = 'param'
        modelElement = 'S.188'>
   <UML:TaggedValue.dataValue>
    	newValue the new value of the i-th state variable
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.477'
        name = 'param'
        modelElement = 'S.188'>
   <UML:TaggedValue.dataValue>
    	i the index of the state variable
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.481'
        name = 'documentation'
        modelElement = 'S.189'>
   <UML:TaggedValue.dataValue>
    	Set the value of the i-th parameter. The argument i must lie
in the interval [0,n-1] where n is the number of parameters.
Illegal argument values trigger the generation of an event report EVT_ILLEGAL_CB.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.482'
        name = 'param'
        modelElement = 'S.189'>
   <UML:TaggedValue.dataValue>
    	newValue the new value of the i-th parameter variable
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.483'
        name = 'param'
        modelElement = 'S.189'>
   <UML:TaggedValue.dataValue>
    	i the index of the parameter variable
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.487'
        name = 'documentation'
        modelElement = 'S.190'>
   <UML:TaggedValue.dataValue>
    	Propagate the input values updating the state variables and the outputs.
This method implements the transfer function encapsulated by the control
block. It causes the state
variables to be updated to take account of the latest input values and
it then uses the new state values to compute a new set of ouptuts.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
propagateState();
updateOutput(); &lt;/PRE&gt;
Note that methods &lt;code&gt;propagateState&lt;/code&gt; and &lt;code&gt;updateOutput&lt;/code&gt;
are pure virtual methods. Together, they define the transfer function
encapsulated by the control block.
&lt;p&gt;
This class defines the structure of the propagation cycle.
It is defined to be &lt;code&gt;virtual&lt;/code&gt; to allow subclasses
to implement different propagation cycles.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.489'
        name = 'documentation'
        modelElement = 'S.191'>
   <UML:TaggedValue.dataValue>
    	Reset the control block bringing its state back to the value they had when
the configuration process of the control block was terminated. The default
implementation provided by this class resets the state values to zero.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.491'
        name = 'documentation'
        modelElement = 'S.192'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on a control block.
It is checked that the number of inputs, outputs, states and parameters
have been set to legal values.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.493'
        name = 'documentation'
        modelElement = 'S.153'>
   <UML:TaggedValue.dataValue>
    	Base class for copy control blocks. 
A &lt;i&gt;copy control block&lt;/i&gt; is a control block that implements a copy link to its
inputs and outputs. It adds to its &lt;code&gt;ControlBlock&lt;/code&gt; base class
the following attributes:&lt;ul&gt;
&lt;li&gt;The &lt;i&gt;input buffers&lt;/i&gt;: internal data structure where the values of the
control block inputs are copied at the beginning of a propagation cycle. The
state propagation and output update services read the value of the inputs from
the input buffers.&lt;/li&gt;
&lt;li&gt;The &lt;i&gt;output buffers&lt;/i&gt;: internal data structure where the values of the
control block outputs are written by the output update service. These values
are intended to be copied to the external output destination locations.&lt;/li&gt;
&lt;/ul&gt;
The input and output buffers are implemented as arrays. They are declared 
&lt;code&gt;protected&lt;/code&gt; to give concrete subclasses ready access to them.
&lt;p&gt;
This class adds services to copy the input values from their external locations
to the internal input buffers and to copy the output values from the internal
output buffers to their external destinations.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.494'
        name = 'author'
        modelElement = 'S.153'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.495'
        name = 'version'
        modelElement = 'S.153'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.496'
        name = 'ingroup'
        modelElement = 'S.153'>
   <UML:TaggedValue.dataValue>
    	Data
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.497'
        name = 'documentation'
        modelElement = 'S.193'>
   <UML:TaggedValue.dataValue>
    	Array to hold the input buffer.
u[i] holds the i-th state variable with i lying in the interval [0,N-1] where N
is the number of inputs.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.498'
        name = 'see'
        modelElement = 'S.193'>
   <UML:TaggedValue.dataValue>
    	ControlBlock#setNumberOfInputs
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.499'
        name = 'see'
        modelElement = 'S.193'>
   <UML:TaggedValue.dataValue>
    	#setInput
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.500'
        name = 'see'
        modelElement = 'S.193'>
   <UML:TaggedValue.dataValue>
    	#getInput
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.501'
        name = 'documentation'
        modelElement = 'S.194'>
   <UML:TaggedValue.dataValue>
    	Array to hold the output buffer.
y[i] holds the i-th output variable with i lying in the interval [0,N-1] where N
is the number of outputs.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.502'
        name = 'see'
        modelElement = 'S.194'>
   <UML:TaggedValue.dataValue>
    	ControlBlock#setNumberOfOutputs
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.503'
        name = 'see'
        modelElement = 'S.194'>
   <UML:TaggedValue.dataValue>
    	#setOutput
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.504'
        name = 'see'
        modelElement = 'S.194'>
   <UML:TaggedValue.dataValue>
    	#getOutput
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.505'
        name = 'documentation'
        modelElement = 'S.195'>
   <UML:TaggedValue.dataValue>
    	Set the number of inputs. This method causes the memory for the input buffer
to be allocated. The number of inputs must be non-negative. The input values
are initialized to zero. This is an initialization method:  it shall be called
only once.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.506'
        name = 'param'
        modelElement = 'S.195'>
   <UML:TaggedValue.dataValue>
    	n the number of inputs
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.509'
        name = 'documentation'
        modelElement = 'S.196'>
   <UML:TaggedValue.dataValue>
    	Set the number of outputs. This method causes the memory for the output buffer
to be allocated. The number of outputs must be non-negative. The output values
are initialized to zero. This is an initialization method:  it shall be called
only once.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.510'
        name = 'param'
        modelElement = 'S.196'>
   <UML:TaggedValue.dataValue>
    	n the number of outputs
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.513'
        name = 'documentation'
        modelElement = 'S.197'>
   <UML:TaggedValue.dataValue>
    	Instantiate a copy control block. The input and output buffers are initialized to 
illegal values to signify that the control block is not yet configured.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.514'
        name = 'documentation'
        modelElement = 'S.198'>
   <UML:TaggedValue.dataValue>
    	Return the value of the i-th input. The argument i must lie
in the interval [0,n-1] where n is the number of inputs.
No check is performed on the legality of the index i.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.515'
        name = 'return'
        modelElement = 'S.198'>
   <UML:TaggedValue.dataValue>
    	the value of the i-th input variable
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.516'
        name = 'param'
        modelElement = 'S.198'>
   <UML:TaggedValue.dataValue>
    	i the index of the input variable
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.519'
        name = 'documentation'
        modelElement = 'S.199'>
   <UML:TaggedValue.dataValue>
    	Return the value of the i-th output. The argument i must lie
in the interval [0,n-1] where n is the number of outputs.
No check is performed on the legality of the index i.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.520'
        name = 'return'
        modelElement = 'S.199'>
   <UML:TaggedValue.dataValue>
    	the value of the i-th output variable
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.521'
        name = 'param'
        modelElement = 'S.199'>
   <UML:TaggedValue.dataValue>
    	i the index of the output variable
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.524'
        name = 'documentation'
        modelElement = 'S.200'>
   <UML:TaggedValue.dataValue>
    	Set the value of the i-th input. The argument i must lie
in the interval [0,n-1] where n is the number of inputs.
Illegal argument values trigger the generation of an event report EVT_ILLEGAL_CB.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.525'
        name = 'param'
        modelElement = 'S.200'>
   <UML:TaggedValue.dataValue>
    	newValue the new value of the i-th input variable
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.526'
        name = 'param'
        modelElement = 'S.200'>
   <UML:TaggedValue.dataValue>
    	i the index of the input variable
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.530'
        name = 'documentation'
        modelElement = 'S.201'>
   <UML:TaggedValue.dataValue>
    	Set the value of the i-th output. The argument i must lie
in the interval [0,n-1] where n is the number of outputs.
Illegal argument values trigger the generation of an event report EVT_ILLEGAL_CB.
This method should not normally be used since the output is computed internally by
propagating the input and the state. It is provided for convenience only
for non-nominal situations.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.531'
        name = 'param'
        modelElement = 'S.201'>
   <UML:TaggedValue.dataValue>
    	newValue the new value of the i-th output variable
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.532'
        name = 'param'
        modelElement = 'S.201'>
   <UML:TaggedValue.dataValue>
    	i the index of the output variable
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.536'
        name = 'documentation'
        modelElement = 'S.202'>
   <UML:TaggedValue.dataValue>
    	Reset the control block bringing its state and input and output buffers to the values
they had when the configuration process of the control block was terminated. 
A pseudocode implementation of this method is as follows:&lt;pre&gt;
ControlBlock::reset();  // call method in super class to reset the state
reset the input buffers to zero;
reset the output buffers to zero;&lt;/pre&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.538'
        name = 'documentation'
        modelElement = 'S.149'>
   <UML:TaggedValue.dataValue>
    	Base class for data item control blocks. 
A &lt;i&gt;data item control block&lt;/i&gt; is a control block that takes its inputs from and writes
its outputs to &lt;i&gt;data items&lt;/i&gt; (instances of class &lt;code&gt;DC_DataItem&lt;/code&gt;). The data
items are loaded as part of the control block configuration. This class therefore adds 
the following attributes to its &lt;code&gt;ControlBlock&lt;/code&gt; base class:&lt;ul&gt;
&lt;li&gt;The &lt;i&gt;input data items&lt;/i&gt;: the data items from which the input values are read.&lt;/li&gt;
&lt;li&gt;The &lt;i&gt;output data items&lt;/i&gt;: the data items to which the output values are written.&lt;/li&gt;
&lt;/ul&gt;
This class adds services to set up the link between the block inputs and outputs and the
data items from which the inputs are read and to which the outputs are written.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.539'
        name = 'author'
        modelElement = 'S.149'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti, Roberto Totaro
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.540'
        name = 'see'
        modelElement = 'S.149'>
   <UML:TaggedValue.dataValue>
    	DC_DataItem
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.541'
        name = 'version'
        modelElement = 'S.149'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.542'
        name = 'ingroup'
        modelElement = 'S.149'>
   <UML:TaggedValue.dataValue>
    	Data
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.543'
        name = 'documentation'
        modelElement = 'S.203'>
   <UML:TaggedValue.dataValue>
    	Array of input data items.
Element pDIU[i] holds the pointer to the data item that provides the i-th input variable.
The integer i must lie in the 
interval [0,N-1] where N is the number of inputs.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.544'
        name = 'see'
        modelElement = 'S.203'>
   <UML:TaggedValue.dataValue>
    	#setInputLink
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.545'
        name = 'documentation'
        modelElement = 'S.204'>
   <UML:TaggedValue.dataValue>
    	Array of output data items.
Element pDIY[i] holds the pointer to the data item to which the i-th output variable is written.
The integer i must lie in the 
interval [0,N-1] where N is the number of outputs.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.546'
        name = 'see'
        modelElement = 'S.204'>
   <UML:TaggedValue.dataValue>
    	#setOutputLink
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.547'
        name = 'documentation'
        modelElement = 'S.205'>
   <UML:TaggedValue.dataValue>
    	Set the number of inputs. This method causes the memory for the array holding
the input data items to be allocated.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.548'
        name = 'param'
        modelElement = 'S.205'>
   <UML:TaggedValue.dataValue>
    	n the number of inputs
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.551'
        name = 'documentation'
        modelElement = 'S.206'>
   <UML:TaggedValue.dataValue>
    	Set the number of outputs. This method causes the memory for the array holding
the output data items to be allocated.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.552'
        name = 'param'
        modelElement = 'S.206'>
   <UML:TaggedValue.dataValue>
    	n the number of outputs
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.555'
        name = 'documentation'
        modelElement = 'S.207'>
   <UML:TaggedValue.dataValue>
    	Instantiate a data item control block. The input data items and output data items are
initialized to illegal values to signify that the component is not yet configured.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.556'
        name = 'documentation'
        modelElement = 'S.208'>
   <UML:TaggedValue.dataValue>
    	Load the data item for the i-th input. The argument i must lie in the 
interval [0,N-1] where N is the number of inputs.
An illegal value for argument i triggers the generation of an event report 
EVT_ILLEGAL_CB.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.557'
        name = 'param'
        modelElement = 'S.208'>
   <UML:TaggedValue.dataValue>
    	i the index of the input
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.558'
        name = 'param'
        modelElement = 'S.208'>
   <UML:TaggedValue.dataValue>
    	pDataItem the data item
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.562'
        name = 'documentation'
        modelElement = 'S.209'>
   <UML:TaggedValue.dataValue>
    	Load the data item for the i-th output. The argument i must lie in the 
interval [0,N-1] where N is the number of outputs.
An illegal value for argument i triggers the generation of an event report 
EVT_ILLEGAL_CB.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.563'
        name = 'param'
        modelElement = 'S.209'>
   <UML:TaggedValue.dataValue>
    	i the index of the output
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.564'
        name = 'param'
        modelElement = 'S.209'>
   <UML:TaggedValue.dataValue>
    	pDataItem the data item
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.568'
        name = 'documentation'
        modelElement = 'S.210'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on a pointer control block. 
It is checked that the input and output data items have been loaded.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.570'
        name = 'documentation'
        modelElement = 'S.147'>
   <UML:TaggedValue.dataValue>
    	Base class from which all data pool classes are derived.
A &lt;i&gt;data pool&lt;/i&gt; is a component that acts as a shared data area for data
that must be exchanged among other components. The data pool physically
contains the data to be exchanged. The producers of the data deposit them into
the data pool and the consumers of the data retrieve them from the data pool.
This class implements a data pool as a collection of items with the
following attributes: &lt;ul&gt;
&lt;li&gt;Each item in the data pool has a &lt;i&gt;value&lt;/i&gt;.&lt;/li&gt;
&lt;li&gt;Each item in the data pool has a &lt;i&gt;time stamp&lt;/i&gt; that represents
the time when the value of the item was last updated.&lt;/li&gt;
&lt;li&gt;Each item in the data pool has a &lt;i&gt;type&lt;/i&gt; that represents
the syntactical type of the value of the item. This interface recognizes
two possible types: &quot;float&quot; and &quot;integer&quot; that, at syntactical level, correspond
to two types defined through &lt;code&gt;typedef&lt;/code&gt; declarations (&lt;code&gt;TD_Float&lt;/code&gt;
and &lt;code&gt;TD_Integer&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Each item in the data pool is identified by a &lt;i&gt;data pool item identifier&lt;/i&gt;.
Access to the value of the item is exclusively through its identifier.
Note that this class does not mandate any checks on the legality of the data
identifier used by a caller. This is not done because of the potential execution
and memory costs of such checks. Legality checks can however be introduced by
some implementations if needed.&lt;/li&gt;
&lt;li&gt;Each item in the data pool has a &lt;i&gt;validity status&lt;/i&gt; that
can have two values: &quot;valid&quot; and &quot;not valid&quot;.&lt;/li&gt;
&lt;li&gt;Each item in the data pool has an associated &lt;i&gt;monitoring profile&lt;/i&gt;
that represents the legal time profile that the value of the data pool item
can take.&lt;/li&gt;
&lt;li&gt;Each item in the data pool has an associated &lt;i&gt;recovery action&lt;/i&gt; that represents
the recovery action that should be performed when the value of the item violates
its monitoring profile.&lt;/li&gt;
&lt;/ul&gt;
This is an abstract class because the internal organization of the
data pool is application-dependent. In particular, the data structure used to
represent the data pool and the implementation of the attributes defined above
is left undefined. Full
implementation of all the above attributes would
result in a very &quot;heavy&quot; class that would not be suitable for applications
with tight memory and CPU budgets. Most concrete data pool classes will
only provide meaningful implementations for only a subset of the
above attributes.
&lt;p&gt;
This class defines the following service: &lt;ul&gt;
&lt;li&gt;The &lt;i&gt;iteration service&lt;/i&gt; that allows a client to
iterate over all the identifiers of the items contained in the data
pool.&lt;/li&gt;
&lt;li&gt;The &lt;i&gt;type checking service&lt;/i&gt; that allows a client to check the type
of an item as a function of its identifier. The type checking service
can also be used to check whether a certain integer is a legal identifier.&lt;/li&gt;
&lt;li&gt;The &lt;i&gt;reset service&lt;/i&gt; that resets the validity status of all data pool
items to the value they had at the time the data pool component was initialized.&lt;/li&gt;
&lt;/ul&gt;
The purpose of a data pool is to allow client components to link to it
to access data which they share with other components. This data pool
offers three types of linking mechanism to a client component:&lt;ul&gt;
&lt;li&gt;&lt;i&gt;Copy Link&lt;/i&gt;: the client component accesses the value of the
shared datum through data setter and getter methods. The shared datum
is copied to and from the data pool.&lt;/li&gt;
&lt;li&gt;&lt;i&gt;Pointer Link&lt;/i&gt;: at configuration time, the client component
accesses the pointer of the shared datum and then uses this pointer
to access the value of the datum during the operational phase.&lt;/li&gt;
&lt;li&gt;&lt;i&gt;Data Item Link&lt;/i&gt;: at configuration time, the client component
accesses the &lt;i&gt;data item&lt;/i&gt; that encapsulates the shared datum and
accesses its value during during the operational phase using the services
defined by the &lt;i&gt;DC_DataItem&lt;/i&gt; class.&lt;/li&gt;
&lt;/ul&gt;
A data pool is a low-level data structure whose implementation will
usually require use of pointers. Most implementations of this class
will therefore violate project specific coding rule PR3.1.
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.571'
        name = 'author'
        modelElement = 'S.147'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.572'
        name = 'todo'
        modelElement = 'S.147'>
   <UML:TaggedValue.dataValue>
    	This class defines the setter and getter methods to be virtual. This
is expensive in CPU time. Given that data pool implementations will often
be generated automatically by XSL programs, and given that an application
would normally only have one data pool component, it may be wiser to 
have the XSL program generate an implementation for class DataPool that 
is defined to have only non-virtual methods. The problem with this approach
is that it is not possible to have multiple implementations of a data pool
in a single delivery and that therefore it is not possible to have several
data pool test cases in the same delivery (this could be alleviated by
generating the test case for the data pool as well as the data pool 
implementation).
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.573'
        name = 'version'
        modelElement = 'S.147'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.574'
        name = 'ingroup'
        modelElement = 'S.147'>
   <UML:TaggedValue.dataValue>
    	Data
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.575'
        name = 'documentation'
        modelElement = 'S.214'>
   <UML:TaggedValue.dataValue>
    	Instantiate a data pool object.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.576'
        name = 'documentation'
        modelElement = 'S.215'>
   <UML:TaggedValue.dataValue>
    	Setter method for the value of a real-typed data pool item.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.577'
        name = 'param'
        modelElement = 'S.215'>
   <UML:TaggedValue.dataValue>
    	id the data identifier of the data pool item to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.578'
        name = 'param'
        modelElement = 'S.215'>
   <UML:TaggedValue.dataValue>
    	newValue the new value to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.582'
        name = 'documentation'
        modelElement = 'S.216'>
   <UML:TaggedValue.dataValue>
    	Setter method for the value of an integer-typed data pool item.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.583'
        name = 'param'
        modelElement = 'S.216'>
   <UML:TaggedValue.dataValue>
    	id the data identifier of the data pool item to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.584'
        name = 'param'
        modelElement = 'S.216'>
   <UML:TaggedValue.dataValue>
    	newValue the new value to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.588'
        name = 'documentation'
        modelElement = 'S.217'>
   <UML:TaggedValue.dataValue>
    	Getter method for the value of a real-typed data pool item.
This method implements the &lt;i&gt;copy link&lt;/i&gt;
mechanism for real-valued data.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.589'
        name = 'param'
        modelElement = 'S.217'>
   <UML:TaggedValue.dataValue>
    	id the data identifier of the data pool item to be read
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.590'
        name = 'return'
        modelElement = 'S.217'>
   <UML:TaggedValue.dataValue>
    	the value of the data with identifier id
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.593'
        name = 'documentation'
        modelElement = 'S.218'>
   <UML:TaggedValue.dataValue>
    	Getter method for the value of an integer-typed data pool item.
This method implements the &lt;i&gt;copy link&lt;/i&gt;
mechanism for integer-valued data.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.594'
        name = 'param'
        modelElement = 'S.218'>
   <UML:TaggedValue.dataValue>
    	id the data identifier of the data pool item to be read
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.595'
        name = 'return'
        modelElement = 'S.218'>
   <UML:TaggedValue.dataValue>
    	the value of the data with identifier id
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.598'
        name = 'documentation'
        modelElement = 'S.219'>
   <UML:TaggedValue.dataValue>
    	Getter method for the pointer to a real-typed data pool item.
This method implements the &lt;i&gt;pointer link&lt;/i&gt;
mechanism for real-typed data.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.599'
        name = 'param'
        modelElement = 'S.219'>
   <UML:TaggedValue.dataValue>
    	id the data identifier of the data pool item to be read
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.600'
        name = 'return'
        modelElement = 'S.219'>
   <UML:TaggedValue.dataValue>
    	the pointer to the data with identifier id
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.603'
        name = 'documentation'
        modelElement = 'S.220'>
   <UML:TaggedValue.dataValue>
    	Getter method for the pointer to an integer-typed data pool item.
This method implements the &lt;i&gt;pointer link&lt;/i&gt;
mechanism for integer-typed data.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.604'
        name = 'param'
        modelElement = 'S.220'>
   <UML:TaggedValue.dataValue>
    	id the data identifier of the data pool item to be read
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.605'
        name = 'return'
        modelElement = 'S.220'>
   <UML:TaggedValue.dataValue>
    	the pointer to the data with identifier id
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.608'
        name = 'documentation'
        modelElement = 'S.221'>
   <UML:TaggedValue.dataValue>
    	Getter method for a &lt;i&gt;data item&lt;/i&gt; that encapsulates a
data pool item. This method implements the &lt;i&gt;data item link&lt;/i&gt;
mechanism.
This class provides a default implementation that returns
a data item that encapsulates an internal variable of type &quot;unsigned
integer&quot; and with a constant value of zero. This default
implementation is useful for
subclasses that do not wish to implement a &lt;i&gt;data item link&lt;/i&gt;
mechanism.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.609'
        name = 'see'
        modelElement = 'S.221'>
   <UML:TaggedValue.dataValue>
    	DC_DataItem
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.610'
        name = 'param'
        modelElement = 'S.221'>
   <UML:TaggedValue.dataValue>
    	id the data identifier of the data pool item to be read
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.611'
        name = 'return'
        modelElement = 'S.221'>
   <UML:TaggedValue.dataValue>
    	the &lt;code&gt;DC_DataItem&lt;/code&gt; item encapsulating the data
pool item with identifier id
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.614'
        name = 'documentation'
        modelElement = 'S.222'>
   <UML:TaggedValue.dataValue>
    	Return the time stamp of a data pool item.
The time stamp of a data pool item is normally set by the setter
method when the item value is updated.
This class provides a default implementation that always returns zero.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.615'
        name = 'param'
        modelElement = 'S.222'>
   <UML:TaggedValue.dataValue>
    	id the data identifier of the data whose time stamp is sought
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.616'
        name = 'return'
        modelElement = 'S.222'>
   <UML:TaggedValue.dataValue>
    	the time stamp of the data with identifier id
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.619'
        name = 'documentation'
        modelElement = 'S.223'>
   <UML:TaggedValue.dataValue>
    	Return the validity status of a data pool item.
This class provides a default implementation that always returns &quot;data valid&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.620'
        name = 'param'
        modelElement = 'S.223'>
   <UML:TaggedValue.dataValue>
    	id the data identifier of the data pool item
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.621'
        name = 'return'
        modelElement = 'S.223'>
   <UML:TaggedValue.dataValue>
    	true if the data pool item is valid, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.624'
        name = 'documentation'
        modelElement = 'S.224'>
   <UML:TaggedValue.dataValue>
    	Set the validity status of a data pool item.
This class provides a default implementation that returns without taking any action.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.625'
        name = 'param'
        modelElement = 'S.224'>
   <UML:TaggedValue.dataValue>
    	id the data identifier of the data pool item
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.626'
        name = 'param'
        modelElement = 'S.224'>
   <UML:TaggedValue.dataValue>
    	newValidityStatus the new validity status
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.630'
        name = 'documentation'
        modelElement = 'S.225'>
   <UML:TaggedValue.dataValue>
    	Get the monitoring profile for a data pool item.
This class provides a default implementation that returns the same
dummy monitoring profile (an instance of &lt;code&gt;DC_NullMonitoringProfile&lt;/code&gt;) for
all values of the parameter identifier.
Note that this class does not define any setter method for the monitoring
profile. This is because different implementations may have different policies
for defining the monitoring profiles. In a typical case, to each data pool
item a particular and fixed monitoring profile is associated. In this case, the data pool
class would offer a setter method for the monitoring profile. In another typical
case, the monitoring profiles are mode-dependent: the association between a
particular data pool item and its monitoring profile is a function of the
operational mode. In that case, the monitoring profiles are dynamically
loaded by a &lt;i&gt;mode manager&lt;/i&gt; and the data pool class only exposes a
a setter method for this mode manager.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.631'
        name = 'param'
        modelElement = 'S.225'>
   <UML:TaggedValue.dataValue>
    	id the identifier of the data pool item
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.632'
        name = 'return'
        modelElement = 'S.225'>
   <UML:TaggedValue.dataValue>
    	the monitoring profile
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.635'
        name = 'documentation'
        modelElement = 'S.226'>
   <UML:TaggedValue.dataValue>
    	Get the recovery action for a data pool item.
This class provides a default implementation that returns the same
dummy recovery action (an instance of &lt;code&gt;DC_NullRecoveryAction&lt;/code&gt;) for
all values of the parameter identifier.
Note that this class does not define any setter method for the recovery
action. This is because different implementations may have different policies
for defining the recovery actions. In a typical case, to each data pool
item a particular and fixed recovery action is associated. In this case, the data pool
class would offer a setter method for the recovery action. In another typical
case, the recovery actions are mode-dependent: the association between a
particular data pool item and its recovery action is a function of the
operational mode. In that case, the recovery actions are dynamically
loaded by a &lt;i&gt;mode manager&lt;/i&gt; and the data pool class only exposes a
a setter method for this mode manager.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.636'
        name = 'param'
        modelElement = 'S.226'>
   <UML:TaggedValue.dataValue>
    	id the identifier of the data pool item
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.637'
        name = 'return'
        modelElement = 'S.226'>
   <UML:TaggedValue.dataValue>
    	the recovery action
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.640'
        name = 'documentation'
        modelElement = 'S.227'>
   <UML:TaggedValue.dataValue>
    	Iteration method that resets the iteration and returns the lowest
indentifier of the items in the data pool. This method is used in
conjunction with the other two iteration methods &lt;code&gt;nextIdentifier&lt;/code&gt;
and &lt;code&gt;isLastIdentifier&lt;/code&gt;. These three methods are typically
used in a for-loop as follows: &lt;pre&gt;
for (unsigned int i=firstIdentifier(); !isLastIdentifier(); i=nextIdentifier())
... // process i-th item in the data pool  &lt;/pre&gt;
The conceptual model behind the iteration methods is as follows.
The data pool maintains an internal &lt;i&gt;iteration pointer&lt;/i&gt;. During an
iteration, this pointer scans all the items in the data pool in sequence.
When method &lt;code&gt;firstIdentifier&lt;/code&gt; is called, the pointer is reset
to point to the lowest valued identifier in the data pool. Each call to method
&lt;code&gt;nextIdentifier&lt;/code&gt; causes this pointer to switch to the next
higher valid identifier in the data pool. Users can check the progress
of the iteration by calling method &lt;code&gt;isLastIdentifier&lt;/code&gt; which
returns false if (and only if) the pointer is positioned on the highest
valued identifier in the data pool.
&lt;p&gt;
This class provides a default implementation that always returns zero.
Note that the value of zero is not a legal identifier. This default
implementation is useful for the case where a data pool is unable or
unwilling to provide a meaningful implementation for the iteration
services.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.641'
        name = 'see'
        modelElement = 'S.227'>
   <UML:TaggedValue.dataValue>
    	#nextIdentifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.642'
        name = 'see'
        modelElement = 'S.227'>
   <UML:TaggedValue.dataValue>
    	#isLastIdentifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.643'
        name = 'return'
        modelElement = 'S.227'>
   <UML:TaggedValue.dataValue>
    	the identifier of the first data pool item in the iteration
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.645'
        name = 'documentation'
        modelElement = 'S.228'>
   <UML:TaggedValue.dataValue>
    	Iteration method that returns the next identifier in an iteration.
This method is used in
conjunction with the other two iteration methods &lt;code&gt;firstIdentifier&lt;/code&gt;
and &lt;code&gt;isLastIdentifier&lt;/code&gt;.
This method should only be called after having called method
&lt;code&gt;firstIdentifier&lt;/code&gt; and while method &lt;code&gt;isLastIdentifier&lt;/code&gt;
returns false. If these conditions do not hold, the return value of this
method is undefined.
&lt;p&gt;
This class provides a default implementation that always returns zero.
Note that the value of zero is not a legal identifier. This default
implementation is useful for the case where a data pool is unable or
unwilling to provide a meaningful implementation for the iteration
services.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.646'
        name = 'see'
        modelElement = 'S.228'>
   <UML:TaggedValue.dataValue>
    	#firstIdentifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.647'
        name = 'see'
        modelElement = 'S.228'>
   <UML:TaggedValue.dataValue>
    	#isLastIdentifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.648'
        name = 'return'
        modelElement = 'S.228'>
   <UML:TaggedValue.dataValue>
    	the identifier of the next data pool item in the iteration
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.650'
        name = 'documentation'
        modelElement = 'S.229'>
   <UML:TaggedValue.dataValue>
    	Iteration method that checks whether an iteration is finished.
This method is used in
conjunction with the other two iteration methods &lt;code&gt;firstIdentifier&lt;/code&gt;
and &lt;code&gt;isLastIdentifier&lt;/code&gt;. It returns true when the iteration
is finished.
The iteration is finished if method &lt;code&gt;nextIdentifier&lt;/code&gt; has been called
N times since the last time method &lt;code&gt;isFirstIdentifier&lt;/code&gt; was called
where N is the number of items in the data pool
&lt;p&gt;
This class provides a default implementation that always returns true.
This default
implementation is useful for the case where a data pool is unable or
unwilling to provide a meaningful implementation for the iteration
services.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.651'
        name = 'see'
        modelElement = 'S.229'>
   <UML:TaggedValue.dataValue>
    	#nextIdentifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.652'
        name = 'see'
        modelElement = 'S.229'>
   <UML:TaggedValue.dataValue>
    	#firstIdentifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.653'
        name = 'return'
        modelElement = 'S.229'>
   <UML:TaggedValue.dataValue>
    	true if the iteration has completed, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.655'
        name = 'documentation'
        modelElement = 'S.230'>
   <UML:TaggedValue.dataValue>
    	Method implementing the type checking service to check whether a
data pool item is real-valued.
A real-value item is an item with a value whose syntactical type
is &lt;code&gt;TD_Float&lt;/code&gt;.
This method returns true if the argument is the identifier of a
data pool item that is real-typed. The method returns false if the
identifier is either illegal (there is no item in the data pool
that takes it as its identifier) or if the identifier identifies a
an item that is integer-valued.
&lt;p&gt;
This method is often used during an iteration to verify whether the
data item being iterated upon is real-valued. This is important because
it allows the client to decide which getter method to use to retrieve
its value.
Note that this class also offers a method to check whether a data pool
item is integer-valued (method &lt;code&gt;isInteger&lt;/code&gt;). Since a
data item must be either real-valued or integer-valued, these two
methods taken together allow a client to check whether to a particular
identifier value there corresponds a data item or not.
&lt;p&gt;
This class provides a default implementation that always returns true.
This default
implementation is useful for the case where a data pool is unable or
unwilling to distinguish between real-valued and integer-valued items.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.656'
        name = 'see'
        modelElement = 'S.230'>
   <UML:TaggedValue.dataValue>
    	#isInteger
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.657'
        name = 'see'
        modelElement = 'S.230'>
   <UML:TaggedValue.dataValue>
    	id the identifier of the data pool item
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.658'
        name = 'return'
        modelElement = 'S.230'>
   <UML:TaggedValue.dataValue>
    	true if the id is the identifier of a floating point data pool item,
false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.661'
        name = 'documentation'
        modelElement = 'S.231'>
   <UML:TaggedValue.dataValue>
    	Method implementing the type checking service to check whether a
data pool item is integer-typed.
This method is the counterpart of method &lt;code&gt;isFloat&lt;/code&gt;.
This class provides a default implementation that always returns
true.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.662'
        name = 'see'
        modelElement = 'S.231'>
   <UML:TaggedValue.dataValue>
    	#isFloat
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.663'
        name = 'see'
        modelElement = 'S.231'>
   <UML:TaggedValue.dataValue>
    	id the identifier of the data pool item
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.664'
        name = 'return'
        modelElement = 'S.231'>
   <UML:TaggedValue.dataValue>
    	true if the id is the identifier of an integer data pool item,
false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.667'
        name = 'documentation'
        modelElement = 'S.232'>
   <UML:TaggedValue.dataValue>
    	Implement the data pool reset service.
The validity status of all data pool item is reset to the value it
had at the time the data pool component was created. This class
provides a default implementation that returns without doing anything.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.668'
        name = 'see'
        modelElement = 'S.232'>
   <UML:TaggedValue.dataValue>
    	#isValid
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.670'
        name = 'documentation'
        modelElement = 'S.163'>
   <UML:TaggedValue.dataValue>
    	Base class for data pool control blocks. 
A &lt;i&gt;data pool control block&lt;/i&gt; is a control block that takes its inputs from locations
in the data pool and writes its outputs into locations in the data pool. The data pool
locations for the inputs and the outputs are defined as configuration parameters for the 
control block. This class therefore adds the following attributes to its
&lt;code&gt;ControlBlock&lt;/code&gt; base class:&lt;ul&gt;
&lt;li&gt;The &lt;i&gt;input identifiers&lt;/i&gt;: the identifiers of the data pool items in the
data pool from which the input values are read.&lt;/li&gt;
&lt;li&gt;The &lt;i&gt;output identifiers&lt;/i&gt;: the identifiers of the data pool items in the
data pool to which the output values are written.&lt;/li&gt;
&lt;/ul&gt;
This class adds services to set up the link between the block inputs and outputs and the
data pool locations from which the inputs are read and to which the outputs are written.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.671'
        name = 'author'
        modelElement = 'S.163'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti, Roberto Totaro
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.672'
        name = 'see'
        modelElement = 'S.163'>
   <UML:TaggedValue.dataValue>
    	DataPool
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.673'
        name = 'version'
        modelElement = 'S.163'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.674'
        name = 'ingroup'
        modelElement = 'S.163'>
   <UML:TaggedValue.dataValue>
    	Data
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.675'
        name = 'documentation'
        modelElement = 'S.233'>
   <UML:TaggedValue.dataValue>
    	Array of input identifiers.
Element dpu[i] holds the identifier of the data pool item that provides the i-th input variable.
The integer i must lie in the 
interval [0,N-1] where N is the number of inputs.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.676'
        name = 'see'
        modelElement = 'S.233'>
   <UML:TaggedValue.dataValue>
    	#setInputLink
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.677'
        name = 'documentation'
        modelElement = 'S.234'>
   <UML:TaggedValue.dataValue>
    	Array of output identifiers.
Element dpy[i] holds the identifier of the data pool item that receives the i-th output variable.
The integer i must lie in the 
interval [0,N-1] where N is the number of outputs.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.678'
        name = 'see'
        modelElement = 'S.234'>
   <UML:TaggedValue.dataValue>
    	#setOutputLink
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.679'
        name = 'documentation'
        modelElement = 'S.235'>
   <UML:TaggedValue.dataValue>
    	Set the number of inputs. This method causes the memory for the array holding
the input identifiers to be allocated.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.680'
        name = 'param'
        modelElement = 'S.235'>
   <UML:TaggedValue.dataValue>
    	n the number of inputs
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.683'
        name = 'documentation'
        modelElement = 'S.236'>
   <UML:TaggedValue.dataValue>
    	Set the number of outputs. This method causes the memory for the array holding
the output identifiers to be allocated.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.684'
        name = 'param'
        modelElement = 'S.236'>
   <UML:TaggedValue.dataValue>
    	n the number of outputs
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.687'
        name = 'documentation'
        modelElement = 'S.237'>
   <UML:TaggedValue.dataValue>
    	Instantiate a data pool control block. The input identifiers and output identifiers are
initialized to illegal values to signify that the component is not yet configured.
The data pool is loaded from class &lt;code&gt;CC_RootObject&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.688'
        name = 'documentation'
        modelElement = 'S.238'>
   <UML:TaggedValue.dataValue>
    	Set the data pool identifier for the i-th input. The argument i must lie in the 
interval [0,n-1] where n is the number of inputs.
An illegal value for argument i triggers the generation of an event report 
EVT_ILLEGAL_CB. There is no check on the legality of the data pool identifier.
This should normally be a valid identifier for an item of type &lt;code&gt;TD_Float&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.689'
        name = 'param'
        modelElement = 'S.238'>
   <UML:TaggedValue.dataValue>
    	i the index of the input
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.690'
        name = 'param'
        modelElement = 'S.238'>
   <UML:TaggedValue.dataValue>
    	dpIdentifier the data pool item identifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.694'
        name = 'documentation'
        modelElement = 'S.239'>
   <UML:TaggedValue.dataValue>
    	Set the data pool identifier for the i-th output. The argument i must lie in the 
interval [0,n-1] where n is the number of outputs.
An illegal value for argument i triggers the generation of an event report 
EVT_ILLEGAL_CB. There is no check on the legality of the data pool identifier.
This should normally be a valid identifier for an item of type &lt;code&gt;TD_Float&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.695'
        name = 'param'
        modelElement = 'S.239'>
   <UML:TaggedValue.dataValue>
    	i the index of the input
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.696'
        name = 'param'
        modelElement = 'S.239'>
   <UML:TaggedValue.dataValue>
    	dpIdentifier the data pool item identifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.700'
        name = 'documentation'
        modelElement = 'S.240'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on a pointer control block. 
It is checked that the input and output identifiers have been defined.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.702'
        name = 'documentation'
        modelElement = 'S.160'>
   <UML:TaggedValue.dataValue>
    	Default component implementing a basic parameter database.
The basic database implements the &lt;i&gt;Default Table&lt;/i&gt; and the
&lt;i&gt;Operational Table&lt;/i&gt; as linear arrays. The identifier of a parameter
is the index in the array at which the parameter is stored.
Syntactically, the elements of the table arrays are of char type but the
tables can hold elements of any type (the getter and setter operations defined
in this class will perform the necessary casting operations to convert
the raw bytes in the table arrays to the type required by the operation).
&lt;p&gt;
The default and operational tables are &lt;i&gt;not&lt;/i&gt; defined by this class.
This class loads the tables using methods &lt;code&gt;setDefaultTable&lt;/code&gt;
and &lt;code&gt;setOperationalTable&lt;/code&gt;.
&lt;p&gt;
The configuration procedure for an instance of this class is as follows: &lt;ol&gt;
&lt;li&gt;Load the default table (method &lt;code&gt;setDefaultTable&lt;/code&gt;)  &lt;/li&gt;
&lt;li&gt;Load the operational table (method &lt;code&gt;setOperationalTable&lt;/code&gt;)  &lt;/li&gt;
&lt;li&gt;Set the length of the table (method &lt;code&gt;setTableLength&lt;/code&gt;)  &lt;/li&gt;
&lt;li&gt;Reset the component instance (method &lt;code&gt;reset&lt;/code&gt;)  &lt;/li&gt;
&lt;/ol&gt;
This class is designed for efficiency. It does not perform any
legality checks on the access to the database. It therefore assumes that
the client components is using correct parameter identifiers.
&lt;p&gt;
The getter and setter methods are implemented to be fast and efficient but this
makes them vulnerable to alignement problems on some processors. For instance,
the setter methods for integer-valued parameters is implemened as follows:&lt;code&gt;
void DC_BasicDatabase::setParameter(TD_DatabaseId parId, int newValue) {
*( (int*)(pOperationalTable+parId) ) = newValue;
}&lt;/code&gt;
On some processors, the assignment will fail if location &lt;code&gt;(pOperationalTable+parId)&lt;/code&gt; does not
correspond to a longword (4 bytes) boundary. There is no check to ensure that this
is the case and it is the responsibility of the user to ensure that the setter
method is called with the correct parameter values. The same applies to other
setter and getter methods. A more robust (but possibly slower) implementation
might use the &lt;code&gt;memcpy&lt;/code&gt; library function to transfer the values of the
data between the database locations and the method variables.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.703'
        name = 'author'
        modelElement = 'S.160'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.704'
        name = 'version'
        modelElement = 'S.160'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.705'
        name = 'documentation'
        modelElement = 'S.245'>
   <UML:TaggedValue.dataValue>
    	Instantiate a basic database component.
The default and operational table arrays are initialized to illegal
values to signify that the component is not yet configured.
values. The class identifier is set.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.706'
        name = 'documentation'
        modelElement = 'S.246'>
   <UML:TaggedValue.dataValue>
    	Copy the default table array onto the operational table array.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.708'
        name = 'documentation'
        modelElement = 'S.247'>
   <UML:TaggedValue.dataValue>
    	Set the length of the default and operational table in number of
bytes. Only non-negative values of the length are legal.
&lt;p&gt;
This is an initialization method.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.709'
        name = 'param'
        modelElement = 'S.247'>
   <UML:TaggedValue.dataValue>
    	length the number of char elements in the default and in the
operational table
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.712'
        name = 'documentation'
        modelElement = 'S.248'>
   <UML:TaggedValue.dataValue>
    	Get the length of the default and operational table in number of
bytes.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.713'
        name = 'see'
        modelElement = 'S.248'>
   <UML:TaggedValue.dataValue>
    	#setTableLength
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.714'
        name = 'return'
        modelElement = 'S.248'>
   <UML:TaggedValue.dataValue>
    	the number of char elements in the default and in the
operational table
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.716'
        name = 'documentation'
        modelElement = 'S.249'>
   <UML:TaggedValue.dataValue>
    	Load the default table. This method assumes that the default table has
been defined and initialized by the caller. The method does not perform
any action on the table. It simply loads its address and will use it
for accessing the table entries.
&lt;p&gt;
This is an initialization method.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.717'
        name = 'param'
        modelElement = 'S.249'>
   <UML:TaggedValue.dataValue>
    	pDefTable the starting address of the default table
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.720'
        name = 'documentation'
        modelElement = 'S.250'>
   <UML:TaggedValue.dataValue>
    	Load the operational table. This method assumes that the operational table has
been defined and initialized by the caller. The method does not perform
any action on the table. It simply loads its address and will use it
for accessing the table entries.
&lt;p&gt;
This is an initialization method.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.721'
        name = 'param'
        modelElement = 'S.250'>
   <UML:TaggedValue.dataValue>
    	pOperTable the starting address of the default table
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.724'
        name = 'documentation'
        modelElement = 'S.251'>
   <UML:TaggedValue.dataValue>
    	Set the current value of a parameter interpreted as an unsigned integer.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.725'
        name = 'param'
        modelElement = 'S.251'>
   <UML:TaggedValue.dataValue>
    	parId the identifier of the parameter to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.726'
        name = 'param'
        modelElement = 'S.251'>
   <UML:TaggedValue.dataValue>
    	newValue the new current value of the parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.730'
        name = 'documentation'
        modelElement = 'S.252'>
   <UML:TaggedValue.dataValue>
    	Set the current value of a parameter interpreted as an integer.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.731'
        name = 'param'
        modelElement = 'S.252'>
   <UML:TaggedValue.dataValue>
    	parId the identifier of the parameter to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.732'
        name = 'param'
        modelElement = 'S.252'>
   <UML:TaggedValue.dataValue>
    	newValue the new current value of the parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.736'
        name = 'documentation'
        modelElement = 'S.253'>
   <UML:TaggedValue.dataValue>
    	Set the current value of a parameter interpreted as an unsigned short.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.737'
        name = 'param'
        modelElement = 'S.253'>
   <UML:TaggedValue.dataValue>
    	parId the identifier of the parameter to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.738'
        name = 'param'
        modelElement = 'S.253'>
   <UML:TaggedValue.dataValue>
    	newValue the new current value of the parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.742'
        name = 'documentation'
        modelElement = 'S.254'>
   <UML:TaggedValue.dataValue>
    	Set the current value of a parameter interpreted as an short.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.743'
        name = 'param'
        modelElement = 'S.254'>
   <UML:TaggedValue.dataValue>
    	parId the identifier of the parameter to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.744'
        name = 'param'
        modelElement = 'S.254'>
   <UML:TaggedValue.dataValue>
    	newValue the new current value of the parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.748'
        name = 'documentation'
        modelElement = 'S.255'>
   <UML:TaggedValue.dataValue>
    	Set the current value of a parameter interpreted as a boolean.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.749'
        name = 'param'
        modelElement = 'S.255'>
   <UML:TaggedValue.dataValue>
    	parId the identifier of the parameter to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.750'
        name = 'param'
        modelElement = 'S.255'>
   <UML:TaggedValue.dataValue>
    	newValue the new current value of the parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.754'
        name = 'documentation'
        modelElement = 'S.256'>
   <UML:TaggedValue.dataValue>
    	Set the current value of a parameter interpreted as a char.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.755'
        name = 'param'
        modelElement = 'S.256'>
   <UML:TaggedValue.dataValue>
    	parId the identifier of the parameter to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.756'
        name = 'param'
        modelElement = 'S.256'>
   <UML:TaggedValue.dataValue>
    	newValue the new current value of the parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.760'
        name = 'documentation'
        modelElement = 'S.257'>
   <UML:TaggedValue.dataValue>
    	Set the current value of a parameter interpreted as an unsigned char.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.761'
        name = 'param'
        modelElement = 'S.257'>
   <UML:TaggedValue.dataValue>
    	parId the identifier of the parameter to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.762'
        name = 'param'
        modelElement = 'S.257'>
   <UML:TaggedValue.dataValue>
    	newValue the new current value of the parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.766'
        name = 'documentation'
        modelElement = 'S.258'>
   <UML:TaggedValue.dataValue>
    	Set the current value of a parameter interpreted as a float.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.767'
        name = 'param'
        modelElement = 'S.258'>
   <UML:TaggedValue.dataValue>
    	parId the identifier of the parameter to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.768'
        name = 'param'
        modelElement = 'S.258'>
   <UML:TaggedValue.dataValue>
    	newValue the new current value of the parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.772'
        name = 'documentation'
        modelElement = 'S.259'>
   <UML:TaggedValue.dataValue>
    	Set the current value of a parameter interpreted as a double.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.773'
        name = 'param'
        modelElement = 'S.259'>
   <UML:TaggedValue.dataValue>
    	parId the identifier of the parameter to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.774'
        name = 'param'
        modelElement = 'S.259'>
   <UML:TaggedValue.dataValue>
    	newValue the new current value of the parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.778'
        name = 'documentation'
        modelElement = 'S.260'>
   <UML:TaggedValue.dataValue>
    	Get the current value of a parameter interpreted as an unsigned integer.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.779'
        name = 'param'
        modelElement = 'S.260'>
   <UML:TaggedValue.dataValue>
    	parId the identifier of the parameter to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.780'
        name = 'return'
        modelElement = 'S.260'>
   <UML:TaggedValue.dataValue>
    	the current value of the parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.783'
        name = 'documentation'
        modelElement = 'S.261'>
   <UML:TaggedValue.dataValue>
    	Get the current value of a parameter interpreted as an integer.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.784'
        name = 'param'
        modelElement = 'S.261'>
   <UML:TaggedValue.dataValue>
    	parId the identifier of the parameter to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.785'
        name = 'return'
        modelElement = 'S.261'>
   <UML:TaggedValue.dataValue>
    	the current value of the parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.788'
        name = 'documentation'
        modelElement = 'S.262'>
   <UML:TaggedValue.dataValue>
    	Get the current value of a parameter interpreted as an unsigned short.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.789'
        name = 'param'
        modelElement = 'S.262'>
   <UML:TaggedValue.dataValue>
    	parId the identifier of the parameter to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.790'
        name = 'return'
        modelElement = 'S.262'>
   <UML:TaggedValue.dataValue>
    	the current value of the parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.793'
        name = 'documentation'
        modelElement = 'S.263'>
   <UML:TaggedValue.dataValue>
    	Get the current value of a parameter interpreted as a short.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.794'
        name = 'param'
        modelElement = 'S.263'>
   <UML:TaggedValue.dataValue>
    	parId the identifier of the parameter to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.795'
        name = 'return'
        modelElement = 'S.263'>
   <UML:TaggedValue.dataValue>
    	the current value of the parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.798'
        name = 'documentation'
        modelElement = 'S.264'>
   <UML:TaggedValue.dataValue>
    	Get the current value of a parameter interpreted as a boolean.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.799'
        name = 'param'
        modelElement = 'S.264'>
   <UML:TaggedValue.dataValue>
    	parId the identifier of the parameter to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.800'
        name = 'return'
        modelElement = 'S.264'>
   <UML:TaggedValue.dataValue>
    	the current value of the parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.803'
        name = 'documentation'
        modelElement = 'S.265'>
   <UML:TaggedValue.dataValue>
    	Get the current value of a parameter interpreted as an unsigned char.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.804'
        name = 'param'
        modelElement = 'S.265'>
   <UML:TaggedValue.dataValue>
    	parId the identifier of the parameter to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.805'
        name = 'return'
        modelElement = 'S.265'>
   <UML:TaggedValue.dataValue>
    	the current value of the parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.808'
        name = 'documentation'
        modelElement = 'S.266'>
   <UML:TaggedValue.dataValue>
    	Get the current value of a parameter interpreted as a char.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.809'
        name = 'param'
        modelElement = 'S.266'>
   <UML:TaggedValue.dataValue>
    	parId the identifier of the parameter to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.810'
        name = 'return'
        modelElement = 'S.266'>
   <UML:TaggedValue.dataValue>
    	the current value of the parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.813'
        name = 'documentation'
        modelElement = 'S.267'>
   <UML:TaggedValue.dataValue>
    	Get the current value of a parameter interpreted as a float.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.814'
        name = 'param'
        modelElement = 'S.267'>
   <UML:TaggedValue.dataValue>
    	parId the identifier of the parameter to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.815'
        name = 'return'
        modelElement = 'S.267'>
   <UML:TaggedValue.dataValue>
    	the current value of the parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.818'
        name = 'documentation'
        modelElement = 'S.268'>
   <UML:TaggedValue.dataValue>
    	Get the current value of a parameter interpreted as a double.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.819'
        name = 'param'
        modelElement = 'S.268'>
   <UML:TaggedValue.dataValue>
    	parId the identifier of the parameter to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.820'
        name = 'return'
        modelElement = 'S.268'>
   <UML:TaggedValue.dataValue>
    	the current value of the parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.823'
        name = 'documentation'
        modelElement = 'S.269'>
   <UML:TaggedValue.dataValue>
    	Return the pointer to the variable in the operational table storing the
parameter identified by &lt;code&gt;parId&lt;/code&gt;. The variable is interpreted
as of type &lt;code&gt;unsigned int&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.824'
        name = 'return'
        modelElement = 'S.269'>
   <UML:TaggedValue.dataValue>
    	the parameter pointer
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.825'
        name = 'param'
        modelElement = 'S.269'>
   <UML:TaggedValue.dataValue>
    	parId the parameter identifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.828'
        name = 'documentation'
        modelElement = 'S.270'>
   <UML:TaggedValue.dataValue>
    	Return the pointer to the variable in the operational table storing the
parameter identified by &lt;code&gt;parId&lt;/code&gt;. The variable is interpreted
as of type &lt;code&gt;int&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.829'
        name = 'return'
        modelElement = 'S.270'>
   <UML:TaggedValue.dataValue>
    	the parameter pointer
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.830'
        name = 'param'
        modelElement = 'S.270'>
   <UML:TaggedValue.dataValue>
    	parId the parameter identifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.833'
        name = 'documentation'
        modelElement = 'S.271'>
   <UML:TaggedValue.dataValue>
    	Return the pointer to the variable in the operational table storing the
parameter identified by &lt;code&gt;parId&lt;/code&gt;. The variable is interpreted
as of type &lt;code&gt;unsigned short&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.834'
        name = 'return'
        modelElement = 'S.271'>
   <UML:TaggedValue.dataValue>
    	the parameter pointer
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.835'
        name = 'param'
        modelElement = 'S.271'>
   <UML:TaggedValue.dataValue>
    	parId the parameter identifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.838'
        name = 'documentation'
        modelElement = 'S.272'>
   <UML:TaggedValue.dataValue>
    	Return the pointer to the variable in the operational table storing the
parameter identified by &lt;code&gt;parId&lt;/code&gt;. The variable is interpreted
as of type &lt;code&gt;short&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.839'
        name = 'return'
        modelElement = 'S.272'>
   <UML:TaggedValue.dataValue>
    	the parameter pointer
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.840'
        name = 'param'
        modelElement = 'S.272'>
   <UML:TaggedValue.dataValue>
    	parId the parameter identifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.843'
        name = 'documentation'
        modelElement = 'S.273'>
   <UML:TaggedValue.dataValue>
    	Return the pointer to the variable in the operational table storing the
parameter identified by &lt;code&gt;parId&lt;/code&gt;. The variable is interpreted
as of type &lt;code&gt;unsigned char&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.844'
        name = 'return'
        modelElement = 'S.273'>
   <UML:TaggedValue.dataValue>
    	the parameter pointer
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.845'
        name = 'param'
        modelElement = 'S.273'>
   <UML:TaggedValue.dataValue>
    	parId the parameter identifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.848'
        name = 'documentation'
        modelElement = 'S.274'>
   <UML:TaggedValue.dataValue>
    	Return the pointer to the variable in the operational table storing the
parameter identified by &lt;code&gt;parId&lt;/code&gt;. The variable is interpreted
as of type &lt;code&gt;char&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.849'
        name = 'return'
        modelElement = 'S.274'>
   <UML:TaggedValue.dataValue>
    	the parameter pointer
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.850'
        name = 'param'
        modelElement = 'S.274'>
   <UML:TaggedValue.dataValue>
    	parId the parameter identifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.853'
        name = 'documentation'
        modelElement = 'S.275'>
   <UML:TaggedValue.dataValue>
    	Return the pointer to the variable in the operational table storing the
parameter identified by &lt;code&gt;parId&lt;/code&gt;. The variable is interpreted
as of type &lt;code&gt;bool&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.854'
        name = 'return'
        modelElement = 'S.275'>
   <UML:TaggedValue.dataValue>
    	the parameter pointer
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.855'
        name = 'param'
        modelElement = 'S.275'>
   <UML:TaggedValue.dataValue>
    	parId the parameter identifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.858'
        name = 'documentation'
        modelElement = 'S.276'>
   <UML:TaggedValue.dataValue>
    	Return the pointer to the variable in the operational table storing the
parameter identified by &lt;code&gt;parId&lt;/code&gt;. The variable is interpreted
as of type &lt;code&gt;float&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.859'
        name = 'return'
        modelElement = 'S.276'>
   <UML:TaggedValue.dataValue>
    	the parameter pointer
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.860'
        name = 'param'
        modelElement = 'S.276'>
   <UML:TaggedValue.dataValue>
    	parId the parameter identifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.863'
        name = 'documentation'
        modelElement = 'S.277'>
   <UML:TaggedValue.dataValue>
    	Return the pointer to the variable in the operational table storing the
parameter identified by &lt;code&gt;parId&lt;/code&gt;. The variable is interpreted
as of type &lt;code&gt;double&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.864'
        name = 'return'
        modelElement = 'S.277'>
   <UML:TaggedValue.dataValue>
    	the parameter pointer
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.865'
        name = 'param'
        modelElement = 'S.277'>
   <UML:TaggedValue.dataValue>
    	parId the parameter identifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.868'
        name = 'documentation'
        modelElement = 'S.278'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on a basic database object:
verify that the default and operational tables have been loaded, that
method &lt;code&gt;reset&lt;/code&gt; has been called, and that the table length
is greater than zero.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.869'
        name = 'see'
        modelElement = 'S.278'>
   <UML:TaggedValue.dataValue>
    	#reset
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.870'
        name = 'return'
        modelElement = 'S.278'>
   <UML:TaggedValue.dataValue>
    	true if the database object is configured, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.872'
        name = 'documentation'
        modelElement = 'S.164'>
   <UML:TaggedValue.dataValue>
    	Default component implementing a data pool with basic functionality.
The data pool is implemented as a linear array whose index is the identifier
of the data pool item. Of all the attributes for data pool items defined in 
the base class, the only ones to have a non-dummy implementation are the value
and the identifier. For all other attributes, the default implementation inherited
from the base class is kept. Note in particular that there are no checks on the
legality of the identifier values used when accessing data pool items.
This results in a very efficient implementation both in terms of memory
and run-time overheads but it also results in a low level of robustness.
&lt;p&gt;
This class defines one single configuration method to set the size of the data pool.
&lt;p&gt;
The getter and setter methods are implemented to be fast and efficient but this
makes them vulnerable to alignement problems on some processors. For instance,
the setter methods for integer-valued variables is implemened as follows:&lt;code&gt;
void DC_BasicDataPool::setValue(TD_DataPoolId id,TD_Integer newValue) {
*(TD_Integer *)(value+id)=newValue;
} &lt;/code&gt;
On some processors, the assignment will fail if location &lt;code&gt;(value+id)&lt;/code&gt; does not
correspond to a longword (4 bytes) boundary. There is no check to ensure that this
is the case and it is the responsibility of the user to ensure that the setter
method is called with the correct parameter values. The same applies to other
setter and getter methods. A more robust (but possibly slower) implementation
might use the &lt;code&gt;memcpy&lt;/code&gt; library function to transfer the values of the
data between the data pool locations and the method variables.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.873'
        name = 'author'
        modelElement = 'S.164'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.874'
        name = 'version'
        modelElement = 'S.164'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.875'
        name = 'documentation'
        modelElement = 'S.281'>
   <UML:TaggedValue.dataValue>
    	Instantiate a data pool component. The class identifier is set.
The internal data structures are left uninitialized to signify that the
component is not yet configured.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.876'
        name = 'documentation'
        modelElement = 'S.282'>
   <UML:TaggedValue.dataValue>
    	Set the size of the internal array where the data pool items are stored.
After this method is called, the internal data structures for the data 
pool component are allocated and initialized to zero. 
&lt;p&gt;
The data pool is internally implemented as a linear array. In order to 
avoid alignment problems (see class comment), the array is forced to 
start at an 8-byte word boundary.
&lt;p&gt;
Only data pool size greater than zero are legal.
&lt;p&gt;
This is an initialization method. It should only be called once. If it is
called more than once, internal memory will be allocated multiple times. 
The memory allocated in previous calls is never reclaimed.
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.877'
        name = 'param'
        modelElement = 'S.282'>
   <UML:TaggedValue.dataValue>
    	size the size of the data pool in number of bytes
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.880'
        name = 'documentation'
        modelElement = 'S.283'>
   <UML:TaggedValue.dataValue>
    	Get the size of the data pool.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.881'
        name = 'see'
        modelElement = 'S.283'>
   <UML:TaggedValue.dataValue>
    	#setDataPoolSize
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.882'
        name = 'return'
        modelElement = 'S.283'>
   <UML:TaggedValue.dataValue>
    	size of the data pool in number of bytes
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.884'
        name = 'documentation'
        modelElement = 'S.284'>
   <UML:TaggedValue.dataValue>
    	Setter method for the value of a real-typed data pool item.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.885'
        name = 'param'
        modelElement = 'S.284'>
   <UML:TaggedValue.dataValue>
    	id the data identifier of the data pool item to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.886'
        name = 'param'
        modelElement = 'S.284'>
   <UML:TaggedValue.dataValue>
    	newValue the new value to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.890'
        name = 'documentation'
        modelElement = 'S.285'>
   <UML:TaggedValue.dataValue>
    	Setter method for the value of an integer-typed data pool item.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.891'
        name = 'param'
        modelElement = 'S.285'>
   <UML:TaggedValue.dataValue>
    	id the data identifier of the data pool item to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.892'
        name = 'param'
        modelElement = 'S.285'>
   <UML:TaggedValue.dataValue>
    	newValue the new value to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.896'
        name = 'documentation'
        modelElement = 'S.286'>
   <UML:TaggedValue.dataValue>
    	Getter method for the value of a real-typed data pool item. 
This method implements the &lt;i&gt;copy link&lt;/i&gt;
mechanism for real-valued data.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.897'
        name = 'param'
        modelElement = 'S.286'>
   <UML:TaggedValue.dataValue>
    	id the data identifier of the data pool item to be read
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.898'
        name = 'return'
        modelElement = 'S.286'>
   <UML:TaggedValue.dataValue>
    	the value of the data with identifier id
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.901'
        name = 'documentation'
        modelElement = 'S.287'>
   <UML:TaggedValue.dataValue>
    	Getter method for the value of an integer-typed data pool item. 
This method implements the &lt;i&gt;copy link&lt;/i&gt;
mechanism for integer-valued data.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.902'
        name = 'param'
        modelElement = 'S.287'>
   <UML:TaggedValue.dataValue>
    	id the data identifier of the data pool item to be read
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.903'
        name = 'return'
        modelElement = 'S.287'>
   <UML:TaggedValue.dataValue>
    	the value of the data with identifier id
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.906'
        name = 'documentation'
        modelElement = 'S.288'>
   <UML:TaggedValue.dataValue>
    	Getter method for the pointer to a real-typed data pool item. 
This method implements the &lt;i&gt;pointer link&lt;/i&gt;
mechanism for real-typed data.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.907'
        name = 'param'
        modelElement = 'S.288'>
   <UML:TaggedValue.dataValue>
    	id the data identifier of the data pool item to be read
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.908'
        name = 'return'
        modelElement = 'S.288'>
   <UML:TaggedValue.dataValue>
    	the pointer to the data with identifier id
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.911'
        name = 'documentation'
        modelElement = 'S.289'>
   <UML:TaggedValue.dataValue>
    	Getter method for the pointer to an integer-typed data pool item. 
This method implements the &lt;i&gt;pointer link&lt;/i&gt;
mechanism for integer-typed data.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.912'
        name = 'param'
        modelElement = 'S.289'>
   <UML:TaggedValue.dataValue>
    	id the data identifier of the data pool item to be read
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.913'
        name = 'return'
        modelElement = 'S.289'>
   <UML:TaggedValue.dataValue>
    	the pointer to the data with identifier id
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.916'
        name = 'documentation'
        modelElement = 'S.290'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on a data pool component:
verify that the size of the data pool has been set.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.917'
        name = 'see'
        modelElement = 'S.290'>
   <UML:TaggedValue.dataValue>
    	#reset
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.918'
        name = 'return'
        modelElement = 'S.290'>
   <UML:TaggedValue.dataValue>
    	true if the database object is configured, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.920'
        name = 'documentation'
        modelElement = 'S.146'>
   <UML:TaggedValue.dataValue>
    	Encapsulation of the conditional propagation of a &lt;i&gt;control block&lt;/i&gt;.
A control action has a settable attribute called &lt;i&gt;target control block&lt;/i&gt;.
A control action is implemented
as a &lt;i&gt;conditional punctual action&lt;/i&gt; whose
&lt;i&gt;execution action&lt;/i&gt; consists in sending a propagation request to
the target control block. This class assumes that the target control block
is already fully configured.
&lt;p&gt;
Control actions offer a &lt;i&gt;reset service&lt;/i&gt;. A call to the reset service
causes the target control block to be reset.
&lt;p&gt;
This class implements a default &lt;i&gt;execution check&lt;/i&gt; that always returns
&quot;can execute&quot;. This means that, if the control action is enabled, then its
execution will always result in the target control block receiving a propagation
request. Subclasses can of course implement different execution checks.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.921'
        name = 'author'
        modelElement = 'S.146'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.922'
        name = 'ingroup'
        modelElement = 'S.146'>
   <UML:TaggedValue.dataValue>
    	Data
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.923'
        name = 'version'
        modelElement = 'S.146'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.924'
        name = 'documentation'
        modelElement = 'S.291'>
   <UML:TaggedValue.dataValue>
    	Encapsulate an &lt;i&gt;execution check&lt;/i&gt; that always returns
&quot;control action can execute&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.925'
        name = 'see'
        modelElement = 'S.291'>
   <UML:TaggedValue.dataValue>
    	ConditionalPunctualAction#doAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.926'
        name = 'return'
        modelElement = 'S.291'>
   <UML:TaggedValue.dataValue>
    	always returns true.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.928'
        name = 'documentation'
        modelElement = 'S.292'>
   <UML:TaggedValue.dataValue>
    	Send a propagate request to the target control block. This
method always returns: &quot;ACTION_SUCCESS&quot;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.929'
        name = 'see'
        modelElement = 'S.292'>
   <UML:TaggedValue.dataValue>
    	ConditionalPunctualAction#doAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.930'
        name = 'return'
        modelElement = 'S.292'>
   <UML:TaggedValue.dataValue>
    	the outcome code of the punctual action
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.932'
        name = 'documentation'
        modelElement = 'S.293'>
   <UML:TaggedValue.dataValue>
    	Instantiate a control action. This method sets the class identifier and
initializes the target control block to an illegal value to signify
that the component is not yet configured.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.933'
        name = 'documentation'
        modelElement = 'S.294'>
   <UML:TaggedValue.dataValue>
    	Load the target control block.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.934'
        name = 'param'
        modelElement = 'S.294'>
   <UML:TaggedValue.dataValue>
    	pBlock the target control block to be loaded
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.937'
        name = 'documentation'
        modelElement = 'S.295'>
   <UML:TaggedValue.dataValue>
    	Return the currently loaded target control block.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.938'
        name = 'return'
        modelElement = 'S.295'>
   <UML:TaggedValue.dataValue>
    	the target control block that is currently loaded
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.940'
        name = 'documentation'
        modelElement = 'S.296'>
   <UML:TaggedValue.dataValue>
    	Reset the target control block.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.942'
        name = 'documentation'
        modelElement = 'S.297'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on a control action. It is
verified that the target control block has been loaded.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.944'
        name = 'documentation'
        modelElement = 'S.155'>
   <UML:TaggedValue.dataValue>
    	Encapsulation of list of &lt;i&gt;control blocks&lt;/i&gt;. This control action can be
configured with a list of control blocks whose &lt;code&gt;propagate()&lt;/code&gt; method
is invoked upon execution of the action. This class assumes that the target
control blocks are already fully configured.
&lt;p&gt;
Control lists offer a &lt;i&gt;reset service&lt;/i&gt;. A call to the reset service
causes all the target control blocks to be reset.
&lt;p&gt;
This class implements a default &lt;i&gt;execution check&lt;/i&gt; that always returns
&quot;can execute&quot;. This means that, if the control action is enabled, then its
execution will always result in the target control blocks receiving a propagation
request. Subclasses can of course implement different execution checks.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.945'
        name = 'author'
        modelElement = 'S.155'>
   <UML:TaggedValue.dataValue>
    	Roberto Totaro
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.946'
        name = 'version'
        modelElement = 'S.155'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.947'
        name = 'documentation'
        modelElement = 'S.300'>
   <UML:TaggedValue.dataValue>
    	Encapsulate an &lt;i&gt;execution check&lt;/i&gt; that always returns
&quot;control action can execute&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.948'
        name = 'see'
        modelElement = 'S.300'>
   <UML:TaggedValue.dataValue>
    	ConditionalPunctualAction#doAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.949'
        name = 'return'
        modelElement = 'S.300'>
   <UML:TaggedValue.dataValue>
    	always returns true.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.951'
        name = 'documentation'
        modelElement = 'S.301'>
   <UML:TaggedValue.dataValue>
    	Send a propagate request to the target control block. This
method always returns: &quot;ACTION_SUCCESS&quot;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.952'
        name = 'see'
        modelElement = 'S.301'>
   <UML:TaggedValue.dataValue>
    	ConditionalPunctualAction#doAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.953'
        name = 'return'
        modelElement = 'S.301'>
   <UML:TaggedValue.dataValue>
    	always returns ACTION_SUCCESS
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.955'
        name = 'documentation'
        modelElement = 'S.302'>
   <UML:TaggedValue.dataValue>
    	Instantiate a control list.
The class identifier is set, the size of the control block list
is initialized to 0 to signify that the component is not yet configured.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.956'
        name = 'documentation'
        modelElement = 'S.303'>
   <UML:TaggedValue.dataValue>
    	Set the size of the list of control blocks.
The list size defines the maximum number of control blocks
that can be loaded into this component. A call to this method
causes memory for an internal data structure to be allocated.
This is an initialization method: it shall be called only
once, before the component is used for the first time. It is not legal
to set the repository size to 0. The entries in the list are initialized
to illegal values to signify that the component is not yet configured.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.957'
        name = 'param'
        modelElement = 'S.303'>
   <UML:TaggedValue.dataValue>
    	listSize the size of the control block list size
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.960'
        name = 'documentation'
        modelElement = 'S.304'>
   <UML:TaggedValue.dataValue>
    	Return the size of the list of control blocks.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.961'
        name = 'see'
        modelElement = 'S.304'>
   <UML:TaggedValue.dataValue>
    	#setListSize
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.962'
        name = 'return'
        modelElement = 'S.304'>
   <UML:TaggedValue.dataValue>
    	listSize the size of the control block list size
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.964'
        name = 'documentation'
        modelElement = 'S.305'>
   <UML:TaggedValue.dataValue>
    	Load the i-th entry in the list of control blocks.
Only non-null entries are legal. The index i must lie in the interval [0,N-1]
where N is the size of the control block list.
Use of illegal values results in the generation of an EVT_ILLEGAL_CL event report.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.965'
        name = 'see'
        modelElement = 'S.305'>
   <UML:TaggedValue.dataValue>
    	TD_EventId
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.966'
        name = 'param'
        modelElement = 'S.305'>
   <UML:TaggedValue.dataValue>
    	i the index of the control block list
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.967'
        name = 'param'
        modelElement = 'S.305'>
   <UML:TaggedValue.dataValue>
    	item the item to be added to the list at position i
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.971'
        name = 'documentation'
        modelElement = 'S.306'>
   <UML:TaggedValue.dataValue>
    	Get the i-th entry in the list of control blocks.
The index i should lie in the interval [0,N-1]
where N is the size of the control block list.
No checks are performed on the legality of the index.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.972'
        name = 'param'
        modelElement = 'S.306'>
   <UML:TaggedValue.dataValue>
    	i the index of the control block list
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.973'
        name = 'return'
        modelElement = 'S.306'>
   <UML:TaggedValue.dataValue>
    	the item at position i of the control block list
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.976'
        name = 'documentation'
        modelElement = 'S.307'>
   <UML:TaggedValue.dataValue>
    	Reset all the control blocks.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.978'
        name = 'documentation'
        modelElement = 'S.308'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on the control
list: verify that the size of the list of control blocks has
a value greater than zero and that all the entries in the list
have been loaded with control blocks.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.979'
        name = 'return'
        modelElement = 'S.308'>
   <UML:TaggedValue.dataValue>
    	true if the control list is configured, false otherwise.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.981'
        name = 'documentation'
        modelElement = 'S.165'>
   <UML:TaggedValue.dataValue>
    	This class encapsulates a data item.
A data item encapsulates access to a variable. The target variable is specified
as an address that is passed to the class constructor. The target variable
cannot be changed after the class is instantiated. It is however declared as a
&lt;code&gt;protected&lt;/code&gt; variable so that subclasses may be implemented that
allow it to be updated.
&lt;p&gt;
Data item components can also be used to encapsulate references to memory-mapped
registers.
&lt;p&gt;
The variable encapsulated by a data item can be of two types: &lt;code&gt;TD_Float&lt;/code&gt;
(a real-valued data item) or &lt;code&gt;TD_Integer&lt;/code&gt; (an integer valued
data item). This class provides getter/setter methods to read and write
the underlying variable as either an instance of type &lt;code&gt;TD_Float&lt;/code&gt;
or &lt;code&gt;TD_Integer&lt;/code&gt;.
&lt;p&gt;
Data items are designed for efficiency.
There are accordingly no run-time checks on consistency of usage of the
getter and setter methods (e.g. there is no protection against a user accessing
a real-valued data item with the getter method for integer-valued data items).
However, when the preprocessor symbol &lt;code&gt;NDEBUG&lt;/code&gt;
is NOT defined, additional checks are inserted in the code and their violation
will give rise to assertion errors.
&lt;p&gt;
This class deviates from the project-specific coding rule PR3.1.
Use of pointers to a variable of primitive type is necessary to fulfill
the function of the class.
&lt;p&gt;
This class is intended to be very light-weight because it is used
throughout an application and may be instantiated a large number of times.
For this reason, unlike most framework classes, it is a stand-alone class
which does not inherit from &lt;CODE&gt;CC_RootObject&lt;/CODE&gt;. This is a deviation
from project-specific coding rule PR1.1.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.982'
        name = 'author'
        modelElement = 'S.165'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti, Roberto Totaro
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.983'
        name = 'todo'
        modelElement = 'S.165'>
   <UML:TaggedValue.dataValue>
    	Make the constructor parameterless for consistency with the rest of the
framework and add a setter method for the variable encapsulated by the data item
In order to keep this class distinct from DC_SettableDataItem, the setter method
should raise an assertion exception if it is called more than once.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.984'
        name = 'version'
        modelElement = 'S.165'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.985'
        name = 'ingroup'
        modelElement = 'S.165'>
   <UML:TaggedValue.dataValue>
    	Data
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.986'
        name = 'documentation'
        modelElement = 'S.309'>
   <UML:TaggedValue.dataValue>
    	Initialize a data item component.
This method is only intended to be called by the constructor.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.987'
        name = 'param'
        modelElement = 'S.309'>
   <UML:TaggedValue.dataValue>
    	data reference to the variable encapsulated by the data item
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.988'
        name = 'param'
        modelElement = 'S.309'>
   <UML:TaggedValue.dataValue>
    	type type of the variable encapsulated by the data item
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.992'
        name = 'documentation'
        modelElement = 'S.310'>
   <UML:TaggedValue.dataValue>
    	The pointer to the variable that is encapsualetd by the data item.
This variable cannot be updated within class &lt;code&gt;DC_DataItem&lt;/code&gt;. It
is however defined &lt;code&gt;protected&lt;/code&gt; to allow subclasses
to define methods that allow it to be updaetd.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.993'
        name = 'documentation'
        modelElement = 'S.311'>
   <UML:TaggedValue.dataValue>
    	Instantiate a data item component encapsulating a real-valued variable.
The variable whose reference is encapsulated in the data item
component is passed as a constructor parameter.
The parameter could also represent the address of some hardware register
that is mapped to memory and that &quot;looks like&quot; an internal memory variable.
A pseudo-code implementation for this method is as follows:&lt;pre&gt;
initDataItem(d, DI_FLOAT);  &lt;/pre&gt;
Note that the actual initialization is performed by the
method &lt;code&gt;initDataItem&lt;/code&gt;. This method stores additional information
about the type of the data item.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.994'
        name = 'see'
        modelElement = 'S.311'>
   <UML:TaggedValue.dataValue>
    	#initDataItem
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.995'
        name = 'param'
        modelElement = 'S.311'>
   <UML:TaggedValue.dataValue>
    	d reference to the variable encapsulated by the data item
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.997'
        name = 'documentation'
        modelElement = 'S.312'>
   <UML:TaggedValue.dataValue>
    	Instantiate a data item component encapsulating an integer-valued variable.
The variable whose reference is encapsulated in the data item
component is passed as a constructor parameter.
The parameter could also represent the address of some hardware register
that is mapped to memory and that &quot;looks like&quot; an internal memory variable.
A pseudo-code implementation for this method is as follows:&lt;pre&gt;
initDataItem(d, DI_FLOAT);  &lt;/pre&gt;
Note that the actual initialization is performed by the
method &lt;code&gt;initDataItem&lt;/code&gt;. This method stores additional information
about the type of the data item.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.998'
        name = 'see'
        modelElement = 'S.312'>
   <UML:TaggedValue.dataValue>
    	#initDataItem
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.999'
        name = 'param'
        modelElement = 'S.312'>
   <UML:TaggedValue.dataValue>
    	d reference to the variable encapsulated by the data item
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1001'
        name = 'documentation'
        modelElement = 'S.313'>
   <UML:TaggedValue.dataValue>
    	Return the value of a real-valued data item.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1002'
        name = 'return'
        modelElement = 'S.313'>
   <UML:TaggedValue.dataValue>
    	the value of the variable encapsulated in the data item
component interpreted as a variable of type &lt;code&gt;TD_Float&lt;/code&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1004'
        name = 'documentation'
        modelElement = 'S.314'>
   <UML:TaggedValue.dataValue>
    	Set the value of a real-valued data item.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1005'
        name = 'param'
        modelElement = 'S.314'>
   <UML:TaggedValue.dataValue>
    	newValue the new value of the variable encapsulated in the data item
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1008'
        name = 'documentation'
        modelElement = 'S.315'>
   <UML:TaggedValue.dataValue>
    	Return the value of an integer-valued data item.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1009'
        name = 'return'
        modelElement = 'S.315'>
   <UML:TaggedValue.dataValue>
    	the value of the variable encapsulated in the data item
component interpreted as a variable of type &lt;code&gt;TD_Integer&lt;/code&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1011'
        name = 'documentation'
        modelElement = 'S.316'>
   <UML:TaggedValue.dataValue>
    	Set the value of an integer-valued data item.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1012'
        name = 'param'
        modelElement = 'S.316'>
   <UML:TaggedValue.dataValue>
    	newValue the new value of the variable encapsulated in the data item
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1015'
        name = 'documentation'
        modelElement = 'S.159'>
   <UML:TaggedValue.dataValue>
    	Component to perform a monitoring check on all items in the system
data pool. The system data pool that is subjected to monitoring 
is loaded from the &lt;code&gt;CC_RootObject&lt;/code&gt; class.
The data pool monitor is implemented as a form of
&lt;i&gt;conditional punctual action&lt;/i&gt;. When it is executed,
the component iterates over all
items in the data pool (using the &lt;i&gt;iteration service&lt;/i&gt; offered by
the data pool). It retrieves the &lt;i&gt;monitoring profile&lt;/i&gt; associated to
each item and it uses it to check the current value of the item. If a
monitoring violation is detected, the &lt;i&gt;validity status&lt;/i&gt; of the item
is set to &quot;not valid&quot; and the &lt;i&gt;recovery action&lt;/i&gt; associated to
the item is executed.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1016'
        name = 'author'
        modelElement = 'S.159'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1017'
        name = 'todo'
        modelElement = 'S.159'>
   <UML:TaggedValue.dataValue>
    	change the specification and the implementation of the class to set the status
of a data pool item whose monitoring check reports &quot;no deviation from profile&quot; to
&quot;valid&quot;. At present, the validity status can only go from &quot;valid&quot; to &quot;not valid&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1018'
        name = 'see'
        modelElement = 'S.159'>
   <UML:TaggedValue.dataValue>
    	DataPool
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1019'
        name = 'see'
        modelElement = 'S.159'>
   <UML:TaggedValue.dataValue>
    	CC_RootObject
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1020'
        name = 'see'
        modelElement = 'S.159'>
   <UML:TaggedValue.dataValue>
    	MonitoringProfile
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1021'
        name = 'see'
        modelElement = 'S.159'>
   <UML:TaggedValue.dataValue>
    	RecoveryAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1022'
        name = 'version'
        modelElement = 'S.159'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1023'
        name = 'documentation'
        modelElement = 'S.317'>
   <UML:TaggedValue.dataValue>
    	Encapsulate an &lt;i&gt;execution check&lt;/i&gt; that always returns
&quot;can execute&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1024'
        name = 'see'
        modelElement = 'S.317'>
   <UML:TaggedValue.dataValue>
    	ConditionalPunctualAction#doAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1025'
        name = 'return'
        modelElement = 'S.317'>
   <UML:TaggedValue.dataValue>
    	always returns true.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1027'
        name = 'documentation'
        modelElement = 'S.318'>
   <UML:TaggedValue.dataValue>
    	Perform the monitoring action on all the items in the data pool.
The data pool is loaded from the &lt;code&gt;CC_RootObject&lt;/code&gt;.
A pseudo-code implementation of this method is as follows: &lt;pre&gt;
pDataPool = CC_RootObject::getDataPool();
for (all items p in pDataPool)
{  get the value v of p
get the monitoring profile m associated to p in pDataPool
pass the value v through the monitoring profile m
if (monitoring violation detected)
{    set the validity status of p to &quot;not valid&quot;
get the recovery action r associated to p in pDataPool
execute r
}
}	&lt;/pre&gt;
This method always returns: &quot;ACTION_SUCCESS&quot;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1028'
        name = 'see'
        modelElement = 'S.318'>
   <UML:TaggedValue.dataValue>
    	ConditionalPunctualAction#doAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1029'
        name = 'return'
        modelElement = 'S.318'>
   <UML:TaggedValue.dataValue>
    	the outcome code of the punctual action
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1031'
        name = 'documentation'
        modelElement = 'S.319'>
   <UML:TaggedValue.dataValue>
    	Instantiate a data pool monitor component.
The value of the class identifier is set.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1032'
        name = 'documentation'
        modelElement = 'S.158'>
   <UML:TaggedValue.dataValue>
    	Dummy control block useful for testing purposes.
This control block has three inputs, two outputs, one state and
two parameters.
The &lt;i&gt;state propagation function&lt;/i&gt; is as follows:&lt;PRE&gt;
x[0](k+1) = p[0]*x[0](k) + u[0](k) + u[1](k) + u[2](k);&lt;/PRE&gt;
The &lt;i&gt;output update function&lt;/i&gt; is as follows:&lt;PRE&gt;
y[0](k) = x[0](k);
y[1](k) = p[1]*x[0](k);&lt;/PRE&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1033'
        name = 'author'
        modelElement = 'S.158'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1034'
        name = 'version'
        modelElement = 'S.158'>
   <UML:TaggedValue.dataValue>
    	1.2
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1035'
        name = 'documentation'
        modelElement = 'S.320'>
   <UML:TaggedValue.dataValue>
    	Implement the state propagation function.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1036'
        name = 'see'
        modelElement = 'S.320'>
   <UML:TaggedValue.dataValue>
    	ControlBlock#propagate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1038'
        name = 'documentation'
        modelElement = 'S.321'>
   <UML:TaggedValue.dataValue>
    	Implement the output update function.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1039'
        name = 'see'
        modelElement = 'S.321'>
   <UML:TaggedValue.dataValue>
    	ControlBlock#propagate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1041'
        name = 'documentation'
        modelElement = 'S.322'>
   <UML:TaggedValue.dataValue>
    	Configure the control block to have three inputs, two outputs, one
state and two parameters, set the class identifier and call the 
reset service to initialize the internal state of the control block.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1042'
        name = 'documentation'
        modelElement = 'S.323'>
   <UML:TaggedValue.dataValue>
    	Reset the control block by setting the state values to 1.0 and the inputs to 0.0.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1044'
        name = 'documentation'
        modelElement = 'S.152'>
   <UML:TaggedValue.dataValue>
    	Default component implementing a dummy parameter database.
A &lt;i&gt;dummy parameter database&lt;/i&gt; is a parameter database with a length of
of one byte and with default and operational tables that coincide.
It is useful for testing purposes as a placeholder for a component of type
&lt;code&gt;ParameterDatabase&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1045'
        name = 'author'
        modelElement = 'S.152'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1046'
        name = 'version'
        modelElement = 'S.152'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1047'
        name = 'documentation'
        modelElement = 'S.325'>
   <UML:TaggedValue.dataValue>
    	Instantiate a dummy database component. The class identifier is set.
The database size is set to one. An internal variable of type &lt;code&gt;char&lt;/code&gt; is
used as default and operational table. The value of the single item it
contains is set to zero.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1048'
        name = 'documentation'
        modelElement = 'S.150'>
   <UML:TaggedValue.dataValue>
    	Dummy data item control block useful for testing purposes.
This control block has three inputs, two outputs, one state and
two parameters.
The &lt;i&gt;state propagation function&lt;/i&gt; is as follows:&lt;PRE&gt;
x[0](k+1) = p[0]*x[0](k) + u[0](k) + u[1](k) + u[2](k);&lt;/PRE&gt;
The &lt;i&gt;output update function&lt;/i&gt; is as follows:&lt;PRE&gt;
y[0](k) = x[0](k);
y[1](k) = p[1]*x[0](k);&lt;/PRE&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1049'
        name = 'author'
        modelElement = 'S.150'>
   <UML:TaggedValue.dataValue>
    	Roberto Totaro
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1050'
        name = 'version'
        modelElement = 'S.150'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1051'
        name = 'documentation'
        modelElement = 'S.326'>
   <UML:TaggedValue.dataValue>
    	Implement the state propagation function.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1052'
        name = 'see'
        modelElement = 'S.326'>
   <UML:TaggedValue.dataValue>
    	ControlBlock#propagate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1054'
        name = 'documentation'
        modelElement = 'S.327'>
   <UML:TaggedValue.dataValue>
    	Implement the output update function.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1055'
        name = 'see'
        modelElement = 'S.327'>
   <UML:TaggedValue.dataValue>
    	ControlBlock#propagate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1057'
        name = 'documentation'
        modelElement = 'S.328'>
   <UML:TaggedValue.dataValue>
    	Configure the control block to have three inputs, two outputs, one
state and two parameters, and set the class identifier. The reset method
is called to initialize the internal state of the control block.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1058'
        name = 'documentation'
        modelElement = 'S.329'>
   <UML:TaggedValue.dataValue>
    	Reset the control block by setting the state value to 1.0.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1060'
        name = 'documentation'
        modelElement = 'S.148'>
   <UML:TaggedValue.dataValue>
    	Default component implementing a dummy data pool.
A dummy data pool is a &lt;i&gt;basic data pool&lt;/i&gt; that can hold only one single integer-valued
data pool item. The value of 
this single data pool item is initialized to zero.
This data pool is useful for testing purposes as a placeholder for components of 
type &lt;code&gt;DataPool&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1061'
        name = 'author'
        modelElement = 'S.148'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1062'
        name = 'version'
        modelElement = 'S.148'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1063'
        name = 'documentation'
        modelElement = 'S.330'>
   <UML:TaggedValue.dataValue>
    	Instantiate a dummy data pool component. The class identifier is set.
The size of the data pool is set to the size of an instance of type &lt;code&gt;TD_Integer&lt;/code&gt;
and the value of the single item in the data pool is initialized to zero.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1064'
        name = 'documentation'
        modelElement = 'S.156'>
   <UML:TaggedValue.dataValue>
    	Dummy data pool control block useful for testing purposes.
This control block has three inputs, two outputs, one state and
two parameters.
The &lt;i&gt;state propagation function&lt;/i&gt; is as follows:&lt;PRE&gt;
x[0](k+1) = p[0]*x[0](k) + u[0](k) + u[1](k) + u[2](k);&lt;/PRE&gt;
The &lt;i&gt;output update function&lt;/i&gt; is as follows:&lt;PRE&gt;
y[0](k) = x[0](k);
y[1](k) = p[1]*x[0](k);&lt;/PRE&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1065'
        name = 'author'
        modelElement = 'S.156'>
   <UML:TaggedValue.dataValue>
    	Roberto Totaro
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1066'
        name = 'version'
        modelElement = 'S.156'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1067'
        name = 'documentation'
        modelElement = 'S.331'>
   <UML:TaggedValue.dataValue>
    	Implement the state propagation function.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1068'
        name = 'see'
        modelElement = 'S.331'>
   <UML:TaggedValue.dataValue>
    	ControlBlock#propagate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1070'
        name = 'documentation'
        modelElement = 'S.332'>
   <UML:TaggedValue.dataValue>
    	Implement the output update function.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1071'
        name = 'see'
        modelElement = 'S.332'>
   <UML:TaggedValue.dataValue>
    	ControlBlock#propagate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1073'
        name = 'documentation'
        modelElement = 'S.333'>
   <UML:TaggedValue.dataValue>
    	Configure the control block to have three inputs, two outputs, one
state and two parameters, and set the class identifier. The reset method
is called to initialize the internal state of the control block.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1074'
        name = 'documentation'
        modelElement = 'S.334'>
   <UML:TaggedValue.dataValue>
    	Reset the control block by setting the state value to 1.0.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1076'
        name = 'documentation'
        modelElement = 'S.154'>
   <UML:TaggedValue.dataValue>
    	Dummy pointer control block useful for testing purposes.
This control block has three inputs, two outputs, one state and
two parameters.
The &lt;i&gt;state propagation function&lt;/i&gt; is as follows:&lt;PRE&gt;
x[0](k+1) = p[0]*x[0](k) + u[0](k) + u[1](k) + u[2](k);&lt;/PRE&gt;
The &lt;i&gt;output update function&lt;/i&gt; is as follows:&lt;PRE&gt;
y[0](k) = x[0](k);
y[1](k) = p[1]*x[0](k);&lt;/PRE&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1077'
        name = 'author'
        modelElement = 'S.154'>
   <UML:TaggedValue.dataValue>
    	Roberto Totaro
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1078'
        name = 'version'
        modelElement = 'S.154'>
   <UML:TaggedValue.dataValue>
    	1.1
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1079'
        name = 'documentation'
        modelElement = 'S.335'>
   <UML:TaggedValue.dataValue>
    	Implement the state propagation function.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1080'
        name = 'see'
        modelElement = 'S.335'>
   <UML:TaggedValue.dataValue>
    	ControlBlock#propagate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1082'
        name = 'documentation'
        modelElement = 'S.336'>
   <UML:TaggedValue.dataValue>
    	Implement the output update function.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1083'
        name = 'see'
        modelElement = 'S.336'>
   <UML:TaggedValue.dataValue>
    	ControlBlock#propagate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1085'
        name = 'documentation'
        modelElement = 'S.337'>
   <UML:TaggedValue.dataValue>
    	Configure the control block to have three inputs, two outputs, one
state and two parameters, and set the class identifier. The reset method
is called to initialize the internal state of the control block.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1086'
        name = 'documentation'
        modelElement = 'S.338'>
   <UML:TaggedValue.dataValue>
    	Reset the control block by setting the state value to 1.0.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1088'
        name = 'documentation'
        modelElement = 'S.162'>
   <UML:TaggedValue.dataValue>
    	This class encapsulates a raw data item.
A &lt;i&gt;raw data item&lt;/i&gt; is a data item that encapsulates a &quot;raw pointer&quot;,
namely a pointer that does not have a specific type and is defined simply 
as a &quot;pointer to void&quot;. The raw data item offers accessors methods that allow
its underlying variable to be accessed as a variable of the following
types: &lt;code&gt;unsigned int&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;unsigned short&lt;/code&gt;,
&lt;code&gt;short&lt;/code&gt;, &lt;code&gt;unsigned char&lt;/code&gt;, &lt;code&gt;char&lt;/code&gt;,
&lt;code&gt;float&lt;/code&gt;, and &lt;code&gt;double&lt;/code&gt;. The raw data item therefore
essentially allows cast to be performed between types in a controlled manner.
This is useful when manipulating registers or other low-level variables.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1089'
        name = 'author'
        modelElement = 'S.162'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1090'
        name = 'version'
        modelElement = 'S.162'>
   <UML:TaggedValue.dataValue>
    	2.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1091'
        name = 'documentation'
        modelElement = 'S.339'>
   <UML:TaggedValue.dataValue>
    	Instantiate a raw data item component.
This constructor simply calls the constructor of the super class and
passes its argument to it as shown in the following pseudocode:&lt;pre&gt;
DC_DataItem((TD_Integer*)d);  &lt;/pre&gt;
The cast to the type &quot;pointer to TD_Integer&quot; is arbitrary and only 
serves to select one of the two constructors defined in the superclass.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1092'
        name = 'param'
        modelElement = 'S.339'>
   <UML:TaggedValue.dataValue>
    	d reference to the variable encapsulated by the data item
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1094'
        name = 'documentation'
        modelElement = 'S.340'>
   <UML:TaggedValue.dataValue>
    	Return the value of the data item intepreted as a variable of
type &lt;code&gt;char&lt;/code&gt;. The pointer that is encapsulated by the
data item is interpreted as a pointer to type &lt;code&gt;char&lt;/code&gt;
and its dereferenced value is returned.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1095'
        name = 'return'
        modelElement = 'S.340'>
   <UML:TaggedValue.dataValue>
    	the value of the variable encapsulated in the data item
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1097'
        name = 'documentation'
        modelElement = 'S.341'>
   <UML:TaggedValue.dataValue>
    	Set the value of the data item intepreted as a variable of
type &lt;code&gt;char&lt;/code&gt;. The pointer that is encapsulated by the
data item is interpreted as a pointer to type &lt;code&gt;char&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1098'
        name = 'param'
        modelElement = 'S.341'>
   <UML:TaggedValue.dataValue>
    	newValue the new value of the variable encapsulated in the data item
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1101'
        name = 'documentation'
        modelElement = 'S.342'>
   <UML:TaggedValue.dataValue>
    	Return the value of the data item intepreted as a variable of
type &lt;code&gt;unsigned char&lt;/code&gt;. The pointer that is encapsulated by the
data item is interpreted as a pointer to type &lt;code&gt;unsigned char&lt;/code&gt;
and its dereferenced value is returned.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1102'
        name = 'return'
        modelElement = 'S.342'>
   <UML:TaggedValue.dataValue>
    	the value of the variable encapsulated in the data item
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1104'
        name = 'documentation'
        modelElement = 'S.343'>
   <UML:TaggedValue.dataValue>
    	Set the value of the data item intepreted as a variable of
type &lt;code&gt;unsigned char&lt;/code&gt;. The pointer that is encapsulated by the
data item is interpreted as a pointer to type &lt;code&gt;unsigned char&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1105'
        name = 'param'
        modelElement = 'S.343'>
   <UML:TaggedValue.dataValue>
    	newValue the new value of the variable encapsulated in the data item
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1108'
        name = 'documentation'
        modelElement = 'S.344'>
   <UML:TaggedValue.dataValue>
    	Return the value of the data item intepreted as a variable of
type &lt;code&gt;short&lt;/code&gt;. The pointer that is encapsulated by the
data item is interpreted as a pointer to type &lt;code&gt;short&lt;/code&gt;
and its dereferenced value is returned.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1109'
        name = 'return'
        modelElement = 'S.344'>
   <UML:TaggedValue.dataValue>
    	the value of the variable encapsulated in the data item
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1111'
        name = 'documentation'
        modelElement = 'S.345'>
   <UML:TaggedValue.dataValue>
    	Set the value of the data item intepreted as a variable of
type &lt;code&gt;short&lt;/code&gt;. The pointer that is encapsulated by the
data item is interpreted as a pointer to type &lt;code&gt;short&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1112'
        name = 'param'
        modelElement = 'S.345'>
   <UML:TaggedValue.dataValue>
    	newValue the new value of the variable encapsulated in the data item
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1115'
        name = 'documentation'
        modelElement = 'S.346'>
   <UML:TaggedValue.dataValue>
    	Return the value of the data item intepreted as a variable of
type &lt;code&gt;unsigned short&lt;/code&gt;. The pointer that is encapsulated by the
data item is interpreted as a pointer to type &lt;code&gt;unsigned short&lt;/code&gt;
and its dereferenced value is returned.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1116'
        name = 'return'
        modelElement = 'S.346'>
   <UML:TaggedValue.dataValue>
    	the value of the variable encapsulated in the data item
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1118'
        name = 'documentation'
        modelElement = 'S.347'>
   <UML:TaggedValue.dataValue>
    	Set the value of the data item intepreted as a variable of
type &lt;code&gt;unsigned short&lt;/code&gt;. The pointer that is encapsulated by the
data item is interpreted as a pointer to type &lt;code&gt;unsigned short&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1119'
        name = 'param'
        modelElement = 'S.347'>
   <UML:TaggedValue.dataValue>
    	newValue the new value of the variable encapsulated in the data item
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1122'
        name = 'documentation'
        modelElement = 'S.348'>
   <UML:TaggedValue.dataValue>
    	Return the value of the data item intepreted as a variable of
type &lt;code&gt;int&lt;/code&gt;. The pointer that is encapsulated by the
data item is interpreted as a pointer to type &lt;code&gt;int&lt;/code&gt;
and its dereferenced value is returned.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1123'
        name = 'return'
        modelElement = 'S.348'>
   <UML:TaggedValue.dataValue>
    	the value of the variable encapsulated in the data item
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1125'
        name = 'documentation'
        modelElement = 'S.349'>
   <UML:TaggedValue.dataValue>
    	Set the value of the data item intepreted as a variable of
type &lt;code&gt;int&lt;/code&gt;. The pointer that is encapsulated by the
data item is interpreted as a pointer to type &lt;code&gt;int&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1126'
        name = 'param'
        modelElement = 'S.349'>
   <UML:TaggedValue.dataValue>
    	newValue the new value of the variable encapsulated in the data item
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1129'
        name = 'documentation'
        modelElement = 'S.350'>
   <UML:TaggedValue.dataValue>
    	Return the value of the data item intepreted as a variable of
type &lt;code&gt;unsigned int&lt;/code&gt;. The pointer that is encapsulated by the
data item is interpreted as a pointer to type &lt;code&gt;unsigned int&lt;/code&gt;
and its dereferenced value is returned.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1130'
        name = 'return'
        modelElement = 'S.350'>
   <UML:TaggedValue.dataValue>
    	the value of the variable encapsulated in the data item
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1132'
        name = 'documentation'
        modelElement = 'S.351'>
   <UML:TaggedValue.dataValue>
    	Set the value of the data item intepreted as a variable of
type &lt;code&gt;unsigned int&lt;/code&gt;. The pointer that is encapsulated by the
data item is interpreted as a pointer to type &lt;code&gt;unsigned int&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1133'
        name = 'param'
        modelElement = 'S.351'>
   <UML:TaggedValue.dataValue>
    	newValue the new value of the variable encapsulated in the data item
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1136'
        name = 'documentation'
        modelElement = 'S.352'>
   <UML:TaggedValue.dataValue>
    	Return the value of the data item intepreted as a variable of
type &lt;code&gt;float&lt;/code&gt;. The pointer that is encapsulated by the
data item is interpreted as a pointer to type &lt;code&gt;float&lt;/code&gt;
and its dereferenced value is returned.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1137'
        name = 'return'
        modelElement = 'S.352'>
   <UML:TaggedValue.dataValue>
    	the value of the variable encapsulated in the data item
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1139'
        name = 'documentation'
        modelElement = 'S.353'>
   <UML:TaggedValue.dataValue>
    	Set the value of the data item intepreted as a variable of
type &lt;code&gt;float&lt;/code&gt;. The pointer that is encapsulated by the
data item is interpreted as a pointer to type &lt;code&gt;float&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1140'
        name = 'param'
        modelElement = 'S.353'>
   <UML:TaggedValue.dataValue>
    	newValue the new value of the variable encapsulated in the data item
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1143'
        name = 'documentation'
        modelElement = 'S.354'>
   <UML:TaggedValue.dataValue>
    	Return the value of the data item intepreted as a variable of
type &lt;code&gt;double&lt;/code&gt;. The pointer that is encapsulated by the
data item is interpreted as a pointer to type &lt;code&gt;double&lt;/code&gt;
and its dereferenced value is returned.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1144'
        name = 'return'
        modelElement = 'S.354'>
   <UML:TaggedValue.dataValue>
    	the value of the variable encapsulated in the data item
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1146'
        name = 'documentation'
        modelElement = 'S.355'>
   <UML:TaggedValue.dataValue>
    	Set the value of the data item intepreted as a variable of
type &lt;code&gt;double&lt;/code&gt;. The pointer that is encapsulated by the
data item is interpreted as a pointer to type &lt;code&gt;double&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1147'
        name = 'param'
        modelElement = 'S.355'>
   <UML:TaggedValue.dataValue>
    	newValue the new value of the variable encapsulated in the data item
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1150'
        name = 'documentation'
        modelElement = 'S.166'>
   <UML:TaggedValue.dataValue>
    	This class encapsulates a settable data item.
A &lt;i&gt;settable data item&lt;/i&gt; is a data item that allows the encapsulated variable
to be dynamically updated. Data items are used to set up permanent links between
a component A that needs some input data and a component B that provides the input 
data. In such a situation, component A can be passed a data item that encapsulates
access to the data from component B. Use of a settable data item (as opposed to an 
ordinary data item of the
kind that is directly instantiated from &lt;code&gt;DC_DataItem&lt;/code&gt;) is useful when
it is desired to keep the option open of changing the input for component A.
This can be done by changing the variable that is encapsulated in the data item 
that A uses as the source for its input.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1151'
        name = 'author'
        modelElement = 'S.166'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1152'
        name = 'todo'
        modelElement = 'S.166'>
   <UML:TaggedValue.dataValue>
    	create a test case for this class
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1153'
        name = 'version'
        modelElement = 'S.166'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1154'
        name = 'documentation'
        modelElement = 'S.356'>
   <UML:TaggedValue.dataValue>
    	Instantiate a settable data item component that encapsulates an
integer-valued variable.
This constructor simply calls the constructor of the super class.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1155'
        name = 'param'
        modelElement = 'S.356'>
   <UML:TaggedValue.dataValue>
    	d reference to the variable encapsulated by the data item
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1157'
        name = 'documentation'
        modelElement = 'S.357'>
   <UML:TaggedValue.dataValue>
    	Instantiate a settable data item component that encapsulates a
real-valued variable.
This constructor simply calls the constructor of the super class.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1158'
        name = 'param'
        modelElement = 'S.357'>
   <UML:TaggedValue.dataValue>
    	d reference to the variable encapsulated by the data item
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1160'
        name = 'documentation'
        modelElement = 'S.358'>
   <UML:TaggedValue.dataValue>
    	Set a new integer-valued variable as the variable that is encapsulated
by the data item.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1161'
        name = 'param'
        modelElement = 'S.358'>
   <UML:TaggedValue.dataValue>
    	pNewVar the new variable encapsulated in the data item
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1164'
        name = 'documentation'
        modelElement = 'S.359'>
   <UML:TaggedValue.dataValue>
    	Set a new real-valued variable as the variable that is encapsulated
by the data item.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1165'
        name = 'param'
        modelElement = 'S.359'>
   <UML:TaggedValue.dataValue>
    	pNewVar the new variable encapsulated in the data item
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1168'
        name = 'documentation'
        modelElement = 'S.157'>
   <UML:TaggedValue.dataValue>
    	Base class from which all parameter database classes are derived.
A parameter database object encapsulates a set of parameter values.
Each parameter can have two values: the &lt;i&gt;default value&lt;/i&gt; and the
&lt;i&gt;current value&lt;/i&gt;.
The default value is the value of the parameters immediately after the
database object is created or reset.
The current values are initialized with the default values at the time the
database object is created or
reset and they can subsequently be modified.
&lt;p&gt;
Parameters are identified by a &lt;i&gt;parameter identifier&lt;/i&gt;.
Syntactically, this is a positive integer.
Each application instantiated from the framework would have its own set of
parameter identifiers.
&lt;p&gt;
In order to properly use the parameter database abstraction, it is
necessary to understand the conceptual implementation model that is
behind the interface defined in this class.
Parameter database information is stored in two tables: the &lt;i&gt;Default Table&lt;/i&gt;
and the &lt;i&gt;Operational Table&lt;/i&gt;. Each table stores a sequence of pairs.
The pairs have the form: (parameter value, parameter identifier).
Each entry in the table, in other words, contains the value of a parameter
and its identifier.
The two tables store values for the same set of parameters.
They differ only because the values stored in the default table are
intended to remain fixed whereas the values stored in the operational table
can be dynamically updated.
The operational table is initialized with a copy of the default table (this
is done using the &lt;code&gt;reset&lt;/code&gt; operation).
&lt;p&gt;
In many implementations, the default table will be stored in ROM and the
operational table will be stored in RAM.
&lt;p&gt;
No methods are defined to set the default parameter values. This is because,
in most cases, these are defined outside the parameter database class
(they may, for instance, be burnt in PROM).
&lt;p&gt;
A parameter database is a low-level data structure whose implementation will
usually require use of pointers. Most implementations of this class
will therefore violate project specific coding rule PR3.1.
&lt;p&gt;
Client components can access the parameters in two ways. They can either
get their values using the getter methods defined in this interface. Or
they can &lt;i&gt;link&lt;/i&gt; to the parameters using the &lt;code&gt;getParameterPointer&lt;/code&gt;
method. This method returns a pointer to a specific parameter (as identified
by its identifier) which the client component can then store internally and
use to directly access the parameter value.
&lt;p&gt;
Parameters have a type.
The type of the parameter defines how the raw parameter value is
interpreted and how it is returned to the
external user of the database.
The possible types for the parameters are: unsigned int, int, unsigned short,
unsigned char, char, float, double.
For each paramete type, there is a dedicated parameter getter method.
Note that this interface does not mandate any protection against attempts to
access parameters with the wrong type.
Thus, for instance, if the parameter identified by identifier ID is
intended to represent an integer,
attempts to retrieve it as if it were of float type (using method
&lt;CODE&gt;getFloatParameter(ID)&lt;/CODE&gt;) will not necessarily result
in an error and may produce a meaningless result.
Avoiding this type of errors is the responsibility of the user.
Subclasses, however, are free to introduce some run-time check to catch
this kind of error.
&lt;p&gt;
For similar reasons, the interface defined by this class does not mandate
any checks on the legality of the value of the parameter identifier in the
method calls. Such checks can again be added by subclasses.
&lt;p&gt;
The methods declared by this class allow an application component to
establish a link between their internal variables and the database parameters.
The process whereby this link is established is called &lt;i&gt;database linking&lt;/i&gt;.
Two types of database linking are allowed by this class: &lt;i&gt;copy link&lt;/i&gt;
and &lt;i&gt;pointer link&lt;/i&gt;.
&lt;p&gt;
In a &lt;i&gt;copy link&lt;/i&gt;, the application component holds a reference to
the parameter database and to the identifier of the target parameter
and periodically updates the value of its internal variable by copying
the value of the target database parameter.
&lt;p&gt;
In a &lt;i&gt;pointer link&lt;/i&gt;, the application component internally defines
a pointer which is then initialized to point to the target database
parameter. The application component effectively uses the target database
parameter as its internal variable.
&lt;p&gt;
This is an abstract class because the internal organization of the
parameter database is application-dependent.
All the class methods are declared abstract.
In particular, the data structure used to represent the parameter tables
and the way parameters and their identifiers are associated is
application dependent.
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1169'
        name = 'author'
        modelElement = 'S.157'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1170'
        name = 'todo'
        modelElement = 'S.157'>
   <UML:TaggedValue.dataValue>
    	This class defines the setter and getter methods to be virtual. This
is expensive in CPU time. Given that database implementations will often
be generated automatically by XSL programs, and given that an application
would normally only have one database component, it may be wiser to 
have the XSL program generate an implementation for class ParameterDatabase that 
is defined to have only non-virtual methods. The problem with this approach
is that it is not possible to have multiple implementations of a database
in a single delivery and that therefore it is not possible to have several
database test cases in the same delivery (this could be alleviated by
generating the test case for the database as well as the database
implementation).
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1171'
        name = 'version'
        modelElement = 'S.157'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1172'
        name = 'ingroup'
        modelElement = 'S.157'>
   <UML:TaggedValue.dataValue>
    	Data
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1173'
        name = 'documentation'
        modelElement = 'S.360'>
   <UML:TaggedValue.dataValue>
    	Instantiate a parameter database object.
This method returns without taking any actions.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1174'
        name = 'documentation'
        modelElement = 'S.361'>
   <UML:TaggedValue.dataValue>
    	Load the current values of the parameters with their default values.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1176'
        name = 'documentation'
        modelElement = 'S.362'>
   <UML:TaggedValue.dataValue>
    	Set the current value of a parameter interpreted as an unsigned integer.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1177'
        name = 'param'
        modelElement = 'S.362'>
   <UML:TaggedValue.dataValue>
    	parId the identifier of the parameter to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1178'
        name = 'param'
        modelElement = 'S.362'>
   <UML:TaggedValue.dataValue>
    	newValue the new current value of the parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1182'
        name = 'documentation'
        modelElement = 'S.363'>
   <UML:TaggedValue.dataValue>
    	Set the current value of a parameter interpreted as an integer.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1183'
        name = 'param'
        modelElement = 'S.363'>
   <UML:TaggedValue.dataValue>
    	parId the identifier of the parameter to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1184'
        name = 'param'
        modelElement = 'S.363'>
   <UML:TaggedValue.dataValue>
    	newValue the new current value of the parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1188'
        name = 'documentation'
        modelElement = 'S.364'>
   <UML:TaggedValue.dataValue>
    	Set the current value of a parameter interpreted as an unsigned short.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1189'
        name = 'param'
        modelElement = 'S.364'>
   <UML:TaggedValue.dataValue>
    	parId the identifier of the parameter to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1190'
        name = 'param'
        modelElement = 'S.364'>
   <UML:TaggedValue.dataValue>
    	newValue the new current value of the parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1194'
        name = 'documentation'
        modelElement = 'S.365'>
   <UML:TaggedValue.dataValue>
    	Set the current value of a parameter interpreted as an short.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1195'
        name = 'param'
        modelElement = 'S.365'>
   <UML:TaggedValue.dataValue>
    	parId the identifier of the parameter to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1196'
        name = 'param'
        modelElement = 'S.365'>
   <UML:TaggedValue.dataValue>
    	newValue the new current value of the parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1200'
        name = 'documentation'
        modelElement = 'S.366'>
   <UML:TaggedValue.dataValue>
    	Set the current value of a parameter interpreted as a boolean.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1201'
        name = 'param'
        modelElement = 'S.366'>
   <UML:TaggedValue.dataValue>
    	parId the identifier of the parameter to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1202'
        name = 'param'
        modelElement = 'S.366'>
   <UML:TaggedValue.dataValue>
    	newValue the new current value of the parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1206'
        name = 'documentation'
        modelElement = 'S.367'>
   <UML:TaggedValue.dataValue>
    	Set the current value of a parameter interpreted as a char.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1207'
        name = 'param'
        modelElement = 'S.367'>
   <UML:TaggedValue.dataValue>
    	parId the identifier of the parameter to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1208'
        name = 'param'
        modelElement = 'S.367'>
   <UML:TaggedValue.dataValue>
    	newValue the new current value of the parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1212'
        name = 'documentation'
        modelElement = 'S.368'>
   <UML:TaggedValue.dataValue>
    	Set the current value of a parameter interpreted as an unsigned char.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1213'
        name = 'param'
        modelElement = 'S.368'>
   <UML:TaggedValue.dataValue>
    	parId the identifier of the parameter to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1214'
        name = 'param'
        modelElement = 'S.368'>
   <UML:TaggedValue.dataValue>
    	newValue the new current value of the parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1218'
        name = 'documentation'
        modelElement = 'S.369'>
   <UML:TaggedValue.dataValue>
    	Set the current value of a parameter interpreted as a float.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1219'
        name = 'param'
        modelElement = 'S.369'>
   <UML:TaggedValue.dataValue>
    	parId the identifier of the parameter to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1220'
        name = 'param'
        modelElement = 'S.369'>
   <UML:TaggedValue.dataValue>
    	newValue the new current value of the parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1224'
        name = 'documentation'
        modelElement = 'S.370'>
   <UML:TaggedValue.dataValue>
    	Set the current value of a parameter interpreted as a double.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1225'
        name = 'param'
        modelElement = 'S.370'>
   <UML:TaggedValue.dataValue>
    	parId the identifier of the parameter to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1226'
        name = 'param'
        modelElement = 'S.370'>
   <UML:TaggedValue.dataValue>
    	newValue the new current value of the parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1230'
        name = 'documentation'
        modelElement = 'S.371'>
   <UML:TaggedValue.dataValue>
    	Get the current value of a parameter interpreted as an unsigned integer.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1231'
        name = 'param'
        modelElement = 'S.371'>
   <UML:TaggedValue.dataValue>
    	parId the identifier of the parameter to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1232'
        name = 'return'
        modelElement = 'S.371'>
   <UML:TaggedValue.dataValue>
    	the current value of the parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1235'
        name = 'documentation'
        modelElement = 'S.372'>
   <UML:TaggedValue.dataValue>
    	Get the current value of a parameter interpreted as an integer.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1236'
        name = 'param'
        modelElement = 'S.372'>
   <UML:TaggedValue.dataValue>
    	parId the identifier of the parameter to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1237'
        name = 'return'
        modelElement = 'S.372'>
   <UML:TaggedValue.dataValue>
    	the current value of the parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1240'
        name = 'documentation'
        modelElement = 'S.373'>
   <UML:TaggedValue.dataValue>
    	Get the current value of a parameter interpreted as an unsigned short.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1241'
        name = 'param'
        modelElement = 'S.373'>
   <UML:TaggedValue.dataValue>
    	parId the identifier of the parameter to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1242'
        name = 'return'
        modelElement = 'S.373'>
   <UML:TaggedValue.dataValue>
    	the current value of the parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1245'
        name = 'documentation'
        modelElement = 'S.374'>
   <UML:TaggedValue.dataValue>
    	Get the current value of a parameter interpreted as a short.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1246'
        name = 'param'
        modelElement = 'S.374'>
   <UML:TaggedValue.dataValue>
    	parId the identifier of the parameter to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1247'
        name = 'return'
        modelElement = 'S.374'>
   <UML:TaggedValue.dataValue>
    	the current value of the parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1250'
        name = 'documentation'
        modelElement = 'S.375'>
   <UML:TaggedValue.dataValue>
    	Get the current value of a parameter interpreted as a boolean.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1251'
        name = 'param'
        modelElement = 'S.375'>
   <UML:TaggedValue.dataValue>
    	parId the identifier of the parameter to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1252'
        name = 'return'
        modelElement = 'S.375'>
   <UML:TaggedValue.dataValue>
    	the current value of the parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1255'
        name = 'documentation'
        modelElement = 'S.376'>
   <UML:TaggedValue.dataValue>
    	Get the current value of a parameter interpreted as an unsigned char.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1256'
        name = 'param'
        modelElement = 'S.376'>
   <UML:TaggedValue.dataValue>
    	parId the identifier of the parameter to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1257'
        name = 'return'
        modelElement = 'S.376'>
   <UML:TaggedValue.dataValue>
    	the current value of the parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1260'
        name = 'documentation'
        modelElement = 'S.377'>
   <UML:TaggedValue.dataValue>
    	Get the current value of a parameter interpreted as a char.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1261'
        name = 'param'
        modelElement = 'S.377'>
   <UML:TaggedValue.dataValue>
    	parId the identifier of the parameter to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1262'
        name = 'return'
        modelElement = 'S.377'>
   <UML:TaggedValue.dataValue>
    	the current value of the parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1265'
        name = 'documentation'
        modelElement = 'S.378'>
   <UML:TaggedValue.dataValue>
    	Get the current value of a parameter interpreted as a float.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1266'
        name = 'param'
        modelElement = 'S.378'>
   <UML:TaggedValue.dataValue>
    	parId the identifier of the parameter to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1267'
        name = 'return'
        modelElement = 'S.378'>
   <UML:TaggedValue.dataValue>
    	the current value of the parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1270'
        name = 'documentation'
        modelElement = 'S.379'>
   <UML:TaggedValue.dataValue>
    	Get the current value of a parameter interpreted as a double.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1271'
        name = 'param'
        modelElement = 'S.379'>
   <UML:TaggedValue.dataValue>
    	parId the identifier of the parameter to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1272'
        name = 'return'
        modelElement = 'S.379'>
   <UML:TaggedValue.dataValue>
    	the current value of the parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1275'
        name = 'documentation'
        modelElement = 'S.380'>
   <UML:TaggedValue.dataValue>
    	Return the pointer to the variable in the operational table storing the
parameter identified by &lt;code&gt;parId&lt;/code&gt;. The variable is interpreted
as of type &lt;code&gt;unsigned int&lt;/code&gt;.
&lt;p&gt;
This and other methods returing pointers to parameters are typically
used to set up a &lt;i&gt;pointer link&lt;/i&gt; between a
target database parameter and the internal variable of an application
component. This can be done as follows. Consider an application component
instantiated from class &lt;code&gt;Comp&lt;/code&gt; which defines an internal
variable &lt;code&gt;var&lt;/code&gt;. Suppose that it is desired to link this
variable to the parameter characterized by identifier &lt;code&gt;PAR_ID&lt;/code&gt;
in the database &lt;code&gt;pDatabase&lt;/code&gt;. The &lt;code&gt;Comp&lt;/code&gt; class
should expose a &lt;i&gt;database linker method&lt;/i&gt;:&lt;PRE&gt;
class Comp {
unsigned int* par;
. . .
void linkParToDatabase(TD_DatabaseId parId, ParameterDatabase* pDB) {
par = pDB-&gt;getParameterPointerUnsignedInt(parId);
}
. . .  &lt;/PRE&gt;
The application component must then be configured as follows:&lt;PRE&gt;
Comp* comp;                 // the application component
ParameterDatabase* pDB;     // the parameter database
TD_DatabaseId PAR_ID;       // the parameter identifier
. . .
comp-&gt;linkParToDatabase(PAR_ID,pDB); &lt;/PRE&gt;
The last statement sets up a permanent link between the internal
application component variable and the database parameter.
Note that use of this mechanism entails a violation of coding
rule PR3.1. This is inevitable if the database linking is to be
performed in an efficient manner.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1276'
        name = 'return'
        modelElement = 'S.380'>
   <UML:TaggedValue.dataValue>
    	the parameter pointer
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1277'
        name = 'param'
        modelElement = 'S.380'>
   <UML:TaggedValue.dataValue>
    	parId the parameter identifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1280'
        name = 'documentation'
        modelElement = 'S.381'>
   <UML:TaggedValue.dataValue>
    	Return the pointer to the variable in the operational table storing the
parameter identified by &lt;code&gt;parId&lt;/code&gt;. The variable is interpreted
as of type &lt;code&gt;int&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1281'
        name = 'see'
        modelElement = 'S.381'>
   <UML:TaggedValue.dataValue>
    	#getParameterPointerUnsignedInt
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1282'
        name = 'return'
        modelElement = 'S.381'>
   <UML:TaggedValue.dataValue>
    	the parameter pointer
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1283'
        name = 'param'
        modelElement = 'S.381'>
   <UML:TaggedValue.dataValue>
    	parId the parameter identifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1286'
        name = 'documentation'
        modelElement = 'S.382'>
   <UML:TaggedValue.dataValue>
    	Return the pointer to the variable in the operational table storing the
parameter identified by &lt;code&gt;parId&lt;/code&gt;. The variable is interpreted
as of type &lt;code&gt;unsigned short&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1287'
        name = 'see'
        modelElement = 'S.382'>
   <UML:TaggedValue.dataValue>
    	#getParameterPointerUnsignedInt
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1288'
        name = 'return'
        modelElement = 'S.382'>
   <UML:TaggedValue.dataValue>
    	the parameter pointer
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1289'
        name = 'param'
        modelElement = 'S.382'>
   <UML:TaggedValue.dataValue>
    	parId the parameter identifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1292'
        name = 'documentation'
        modelElement = 'S.383'>
   <UML:TaggedValue.dataValue>
    	Return the pointer to the variable in the operational table storing the
parameter identified by &lt;code&gt;parId&lt;/code&gt;. The variable is interpreted
as of type &lt;code&gt;short&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1293'
        name = 'see'
        modelElement = 'S.383'>
   <UML:TaggedValue.dataValue>
    	#getParameterPointerUnsignedInt
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1294'
        name = 'return'
        modelElement = 'S.383'>
   <UML:TaggedValue.dataValue>
    	the parameter pointer
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1295'
        name = 'param'
        modelElement = 'S.383'>
   <UML:TaggedValue.dataValue>
    	parId the parameter identifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1298'
        name = 'documentation'
        modelElement = 'S.384'>
   <UML:TaggedValue.dataValue>
    	Return the pointer to the variable in the operational table storing the
parameter identified by &lt;code&gt;parId&lt;/code&gt;. The variable is interpreted
as of type &lt;code&gt;unsigned char&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1299'
        name = 'see'
        modelElement = 'S.384'>
   <UML:TaggedValue.dataValue>
    	#getParameterPointerUnsignedInt
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1300'
        name = 'return'
        modelElement = 'S.384'>
   <UML:TaggedValue.dataValue>
    	the parameter pointer
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1301'
        name = 'param'
        modelElement = 'S.384'>
   <UML:TaggedValue.dataValue>
    	parId the parameter identifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1304'
        name = 'documentation'
        modelElement = 'S.385'>
   <UML:TaggedValue.dataValue>
    	Return the pointer to the variable in the operational table storing the
parameter identified by &lt;code&gt;parId&lt;/code&gt;. The variable is interpreted
as of type &lt;code&gt;char&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1305'
        name = 'see'
        modelElement = 'S.385'>
   <UML:TaggedValue.dataValue>
    	#getParameterPointerUnsignedInt
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1306'
        name = 'return'
        modelElement = 'S.385'>
   <UML:TaggedValue.dataValue>
    	the parameter pointer
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1307'
        name = 'param'
        modelElement = 'S.385'>
   <UML:TaggedValue.dataValue>
    	parId the parameter identifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1310'
        name = 'documentation'
        modelElement = 'S.386'>
   <UML:TaggedValue.dataValue>
    	Return the pointer to the variable in the operational table storing the
parameter identified by &lt;code&gt;parId&lt;/code&gt;. The variable is interpreted
as of type &lt;code&gt;bool&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1311'
        name = 'see'
        modelElement = 'S.386'>
   <UML:TaggedValue.dataValue>
    	#getParameterPointerUnsignedInt
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1312'
        name = 'return'
        modelElement = 'S.386'>
   <UML:TaggedValue.dataValue>
    	the parameter pointer
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1313'
        name = 'param'
        modelElement = 'S.386'>
   <UML:TaggedValue.dataValue>
    	parId the parameter identifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1316'
        name = 'documentation'
        modelElement = 'S.387'>
   <UML:TaggedValue.dataValue>
    	Return the pointer to the variable in the operational table storing the
parameter identified by &lt;code&gt;parId&lt;/code&gt;. The variable is interpreted
as of type &lt;code&gt;float&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1317'
        name = 'see'
        modelElement = 'S.387'>
   <UML:TaggedValue.dataValue>
    	#getParameterPointerUnsignedInt
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1318'
        name = 'return'
        modelElement = 'S.387'>
   <UML:TaggedValue.dataValue>
    	the parameter pointer
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1319'
        name = 'param'
        modelElement = 'S.387'>
   <UML:TaggedValue.dataValue>
    	parId the parameter identifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1322'
        name = 'documentation'
        modelElement = 'S.388'>
   <UML:TaggedValue.dataValue>
    	Return the pointer to the variable in the operational table storing the
parameter identified by &lt;code&gt;parId&lt;/code&gt;. The variable is interpreted
as of type &lt;code&gt;double&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1323'
        name = 'see'
        modelElement = 'S.388'>
   <UML:TaggedValue.dataValue>
    	#getParameterPointerUnsignedInt
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1324'
        name = 'return'
        modelElement = 'S.388'>
   <UML:TaggedValue.dataValue>
    	the parameter pointer
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1325'
        name = 'param'
        modelElement = 'S.388'>
   <UML:TaggedValue.dataValue>
    	parId the parameter identifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1328'
        name = 'documentation'
        modelElement = 'S.161'>
   <UML:TaggedValue.dataValue>
    	Base class for pointer control blocks. 
A &lt;i&gt;pointer control block&lt;/i&gt; is a control block that is linked to its inputs
and outputs through pointers. It adds to its &lt;code&gt;ControlBlock&lt;/code&gt; base class
the following attributes:&lt;ul&gt;
&lt;li&gt;The &lt;i&gt;input pointers&lt;/i&gt;: the pointers to the external locations from which the input
values are loaded.&lt;/li&gt;
&lt;li&gt;The &lt;i&gt;output pointers&lt;/i&gt;: the pointers to the external locations to which the output
values are written.&lt;/li&gt;
&lt;/ul&gt;
This class adds services to set up the link between the block inputs and outputs and the
external locations from which the inputs are read and to which the outputs are written.
&lt;p&gt;
This class deviates from the project-specific coding rule PR3.1.
Use of pointers to a variable of primitive type is necessary to fulfill
the function of the class.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1329'
        name = 'author'
        modelElement = 'S.161'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1330'
        name = 'version'
        modelElement = 'S.161'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1331'
        name = 'ingroup'
        modelElement = 'S.161'>
   <UML:TaggedValue.dataValue>
    	Data
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1332'
        name = 'documentation'
        modelElement = 'S.389'>
   <UML:TaggedValue.dataValue>
    	Array of input pointers.
pU[i] holds the pointer to the i-th input variable with i lying in the 
interval [0,N-1] where N is the number of inputs.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1333'
        name = 'see'
        modelElement = 'S.389'>
   <UML:TaggedValue.dataValue>
    	#setInputLink
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1334'
        name = 'documentation'
        modelElement = 'S.390'>
   <UML:TaggedValue.dataValue>
    	Array of output pointers.
pY[i] holds the pointer to the i-th output variable with i lying in the 
interval [0,N-1] where N is the number of outputs.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1335'
        name = 'see'
        modelElement = 'S.390'>
   <UML:TaggedValue.dataValue>
    	#setOutputLink
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1336'
        name = 'documentation'
        modelElement = 'S.391'>
   <UML:TaggedValue.dataValue>
    	Set the number of inputs. This method causes the memory for the array holding
the input pointers to be allocated. This is an initialization method:  it shall
be called only once.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1337'
        name = 'param'
        modelElement = 'S.391'>
   <UML:TaggedValue.dataValue>
    	n the number of inputs
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1340'
        name = 'documentation'
        modelElement = 'S.392'>
   <UML:TaggedValue.dataValue>
    	Set the number of outputs. This method causes the memory for the array holding
the output pointers to be allocated. This is an initialization method:  it shall
be called only once.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1341'
        name = 'param'
        modelElement = 'S.392'>
   <UML:TaggedValue.dataValue>
    	n the number of outputs
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1344'
        name = 'documentation'
        modelElement = 'S.393'>
   <UML:TaggedValue.dataValue>
    	Instantiate a pointer control block. The input pointers and output pointers are
initialized to illegal values to signify that the component is not yet configured.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1345'
        name = 'documentation'
        modelElement = 'S.394'>
   <UML:TaggedValue.dataValue>
    	Set the i-th input pointer. This method sets the pointer to the location from which the
the i-th input should be read. The argument i must lie in the interval [0,n-1] where
n is the number of inputs.
Illegal argument values trigger the generation of an event report EVT_ILLEGAL_CB.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1346'
        name = 'param'
        modelElement = 'S.394'>
   <UML:TaggedValue.dataValue>
    	i the index of the input
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1347'
        name = 'param'
        modelElement = 'S.394'>
   <UML:TaggedValue.dataValue>
    	pInput the pointer to the external input location
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1351'
        name = 'documentation'
        modelElement = 'S.395'>
   <UML:TaggedValue.dataValue>
    	Set the i-th output pointer. This method sets the pointer to the location to which the
the i-th output should be written. The argument i must lie in the interval [0,n-1]
where n is the number of outputs.
Illegal argument values trigger the generation of an event report EVT_ILLEGAL_CB.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1352'
        name = 'param'
        modelElement = 'S.395'>
   <UML:TaggedValue.dataValue>
    	i the index of the output
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1353'
        name = 'param'
        modelElement = 'S.395'>
   <UML:TaggedValue.dataValue>
    	pOutput the pointer to the external output location
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1357'
        name = 'documentation'
        modelElement = 'S.396'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on a pointer control block. 
It is checked that the input and output pointers have been loaded.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1362'
        name = 'documentation'
        modelElement = 'S.405'>
   <UML:TaggedValue.dataValue>
    	Base class from which all event classes are derived.
An event class encapsulates an &lt;i&gt;event report&lt;/i&gt;.
An event report is used to store information that is generated by
an application upon the occurrence of certain conditions. From an implementation
point of view, an event is a container for attributes that describe the occurrence
that triggered the creation of event report. This class recognizes only
two such attributes:&lt;ul&gt;
&lt;li&gt;an &lt;i&gt;event type identifier&lt;/i&gt; that defines the event category,&lt;/li&gt;
&lt;li&gt;a &lt;i&gt;time stamp&lt;/i&gt; that defines the time when the event was created.&lt;/li&gt;
&lt;/ul&gt;
Both attributes are read-write. Applications that need to attach more information
to an event report can do so by extending this class.
&lt;p&gt;
Normally, to each event class is associated an event repository class that
encapsulates a container for a set of event reports.
The event repository class associated to the &lt;code&gt;DC_Event&lt;/code&gt;
class is &lt;CODE&gt;DC_EventRepository&lt;/CODE&gt;.
Events should normally be manipulated only by their associated &lt;i&gt;event
repository&lt;/i&gt;. Applications should normally have no need to directly
interact with an event object.
&lt;p&gt;
This class is intended to be very light-weight because it may be
instantiated in large numbers within an event repository.
For this reason, unlike most OBS Framework classes, it is a stand-alone class
which does not inherit from &lt;CODE&gt;DC_RootObject&lt;/CODE&gt;. This is a deviation
from project-specific coding rule PR1.1.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1363'
        name = 'author'
        modelElement = 'S.405'>
   <UML:TaggedValue.dataValue>
    	A. Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1364'
        name = 'see'
        modelElement = 'S.405'>
   <UML:TaggedValue.dataValue>
    	DC_EventRepository
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1365'
        name = 'version'
        modelElement = 'S.405'>
   <UML:TaggedValue.dataValue>
    	1.o
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1366'
        name = 'documentation'
        modelElement = 'S.408'>
   <UML:TaggedValue.dataValue>
    	Instantiate an event object. In order to minimize the overhead due to the
instantiation of a &lt;code&gt;DC_Event&lt;/code&gt; component, this constructor
returns without
taking any action. The time stamp and event type therefore remain
uninitialized (note that the &lt;code&gt;DC_Event&lt;/code&gt; components should only be seen
inside an event repository and are not intended to be ever directly accessed
by the application code).
&lt;p&gt;
The constructor is declared &lt;code&gt;inline&lt;/code&gt; which should result in
it being optimized away.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1367'
        name = 'documentation'
        modelElement = 'S.409'>
   <UML:TaggedValue.dataValue>
    	Getter method for the time stamp attribute of the event.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1368'
        name = 'return'
        modelElement = 'S.409'>
   <UML:TaggedValue.dataValue>
    	the time stamp
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1370'
        name = 'documentation'
        modelElement = 'S.410'>
   <UML:TaggedValue.dataValue>
    	Getter method for the event identifier attribute of the event.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1371'
        name = 'return'
        modelElement = 'S.410'>
   <UML:TaggedValue.dataValue>
    	the event type
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1373'
        name = 'documentation'
        modelElement = 'S.411'>
   <UML:TaggedValue.dataValue>
    	Setter method for the time stamp attribute of the event.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1374'
        name = 'param'
        modelElement = 'S.411'>
   <UML:TaggedValue.dataValue>
    	timeStamp the event time stamp
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1377'
        name = 'documentation'
        modelElement = 'S.412'>
   <UML:TaggedValue.dataValue>
    	Setter method for the event identifier attribute of the event.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1378'
        name = 'param'
        modelElement = 'S.412'>
   <UML:TaggedValue.dataValue>
    	eventType the event type
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1381'
        name = 'documentation'
        modelElement = 'S.403'>
   <UML:TaggedValue.dataValue>
    	Base class from which all event repository classes are derived.
An event repository is a generic container for &lt;i&gt;event reports&lt;/i&gt;.
An event report is intended to record an occurrence of relevance
to an application.
The event reports are stored in instances of an &lt;i&gt;event class&lt;/i&gt;.
To each event repository class is associated an event class. The event class
associated to the &lt;code&gt;DC_EventRepository&lt;/code&gt; class is DC_Event.
&lt;p&gt;
Event repositories are characterized by one attribute and three services.
The attribute is the &lt;i&gt;repository size&lt;/i&gt;. The repository size defines the
maximum number of event reports that can be stored in the repository. In a
typical implementation, event reports might be stored in a circular buffer and
only the S most recent reports are kept where S is the repository size.
&lt;p&gt;
The three services are the &lt;i&gt;event creation service&lt;/i&gt;, the &lt;i&gt;repository
iteration service&lt;/i&gt; and the &lt;i&gt;event enable service&lt;/i&gt;.
&lt;p&gt;
The &lt;i&gt;event creation service&lt;/i&gt; allows a client to make a new entry in
the event repository. Normally, to each type of event, some data that describe
the circumstances that led to its creation are associated. The transfer of
this information from the event creating component to the event repository
component follows a mixed &quot;push-pull&quot; model. The component that creates the event
passes an &lt;i&gt;event type identifier&lt;/i&gt; to the event repository (&quot;information push&quot;).
Additionally, it passes a reference to itself that allows the event repository
to collect additional information about the event (&quot;information pull&quot;). This
model makes it easy for designers to change the type and amount of information that
is associated to each event since this is defined only in the event repository,
not in the event creating component.
&lt;p&gt;
The &lt;i&gt;repository iteration service&lt;/i&gt; allows clients to inspect all
event reports currently stored in the
repository in sequence starting with the most recently stored event report.
The event repository maintains an &lt;i&gt;event pointer&lt;/i&gt; that points to one
of the event reports currently stored in the repository.
This pointer can be made to iterate through the event reports in the repository
using the &lt;CODE&gt;latest&lt;/CODE&gt;,
&lt;CODE&gt;previous&lt;/CODE&gt; and &lt;CODE&gt;isIterationFinished&lt;/CODE&gt; methods.
The attributes of the event report pointed at by the event pointer can be
retrieved by using getter methods that are defined by the repository itself.
&lt;p&gt;
The &lt;i&gt;event enable service&lt;/i&gt; allows creation of new event reports to be enabled and
disabled. This can be done either globally by disabling the creation of all
new event or selectively by disabling only some events.
&lt;p&gt;
This class offers a basic implementation of an event repository.
Applications which need more specialized types of event reports or different
implementation of the event report services, or additional services,
should extend this class and, if necessary, the associated event class.
&lt;p&gt;
This class implements the event creation service in a single method called
&lt;code&gt;create&lt;/code&gt;. This method takes as its input the pointer to the &quot;event
originator&quot; and the event type. The originator of the event is seen as a
generic component of type &lt;code&gt;CC_RootObject&lt;/code&gt;. Normally, the event originator
is the component that is calling the &lt;code&gt;create&lt;/code&gt; method.
&lt;p&gt;
Subclasses can offer multiple
implementations of method &lt;code&gt;create&lt;/code&gt; that
differ on the basis of the type of the &quot;event originator&quot; (for instance,
one could have a &lt;code&gt;create&lt;/code&gt; method for event originators of type &lt;code&gt;Telecommand&lt;/code&gt;
that intercepts event reports originating from telecommands, another &lt;code&gt;create&lt;/code&gt; method
for event originators of type &lt;code&gt;Manouvre&lt;/code&gt; that intercepts
event reports for manoeuvres, etc). Each
&lt;code&gt;create&lt;/code&gt; method would gather type-specific information from its
event originator and create the appropriate event report.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1382'
        name = 'author'
        modelElement = 'S.403'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1383'
        name = 'see'
        modelElement = 'S.403'>
   <UML:TaggedValue.dataValue>
    	DC_Event
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1384'
        name = 'version'
        modelElement = 'S.403'>
   <UML:TaggedValue.dataValue>
    	1.1
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1385'
        name = 'documentation'
        modelElement = 'S.419'>
   <UML:TaggedValue.dataValue>
    	Array of pointers to the events in the repository. Event repository
classes differ, among other things, in the type of event reports they
store. Individual event reports are stored in objects of type
&lt;code&gt;DC_Event&lt;/code&gt;. In general, to a subclass of &lt;code&gt;DC_EventRepository&lt;/code&gt;
there should correspond a subclass of &lt;code&gt;DC_Event&lt;/code&gt;.
In order to allow the implementation provided by this class to be
as far as possible reused by its subclasses, the manipulation of the
event reports is done through pointers to objects of type &lt;code&gt;DC_Event&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1386'
        name = 'documentation'
        modelElement = 'S.420'>
   <UML:TaggedValue.dataValue>
    	Event pointer. This variable is updated by the iterator methods.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1387'
        name = 'see'
        modelElement = 'S.420'>
   <UML:TaggedValue.dataValue>
    	#latest
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1388'
        name = 'documentation'
        modelElement = 'S.421'>
   <UML:TaggedValue.dataValue>
    	Create the data structure holding the event instances in the repository.
This implementation creates a data structure for events of type
&lt;code&gt;DC_Event&lt;/code&gt;. Repository subclasses that must hold different
kinds of events should override this method to create a data structure
appropriate to their type of events.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1389'
        name = 'see'
        modelElement = 'S.421'>
   <UML:TaggedValue.dataValue>
    	#setRepositorySize
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1391'
        name = 'documentation'
        modelElement = 'S.422'>
   <UML:TaggedValue.dataValue>
    	Instantiate an event repository.
The global enable status of the repository is initialized to &quot;enabled&quot;.
The selective enable status is initialized to &quot;enabled&quot; for all event types.
The repository size is initialized with an illegal value to signify
that the repository is not yet configured.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1392'
        name = 'documentation'
        modelElement = 'S.423'>
   <UML:TaggedValue.dataValue>
    	Setter method for the repository size.
The repository size defines the maximum number of event reports that can be
stored by the repository. A call to this method causes the internal data
structure where event reports are stored to be created and initialized.
This class offers a default implementation as follows:  &lt;PRE&gt;
pList = new DC_Event*[repositorySize];
createEventDataStructure(repositorySize);&lt;/PRE&gt;
The method thus creates and initializes the data structure that
holds the pointers to the events in the repository but creation of the data
structure where the event themselves are held is delegated to the (protected)
method &lt;code&gt;createEventDataStructure&lt;/code&gt;. Subclasses
must re-implement this latter method to instantiate a data structure to
hold events as instances of the appropriate subclass of
&lt;code&gt;DC_Event&lt;/code&gt; (recall that to each event repository class,
an event class is associated). Method &lt;code&gt;setRepositorySize&lt;/code&gt; can
instead be re-used unchanged since it is independent of the concrete
type of events that are stored in the repository.
&lt;p&gt;
This is an initialization method. It should be called before the
event repository is used for the first time and it should not be called more
than once. It is not legal to set the repository size to 0.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1393'
        name = 'see'
        modelElement = 'S.423'>
   <UML:TaggedValue.dataValue>
    	#createEventDataStructure
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1394'
        name = 'see'
        modelElement = 'S.423'>
   <UML:TaggedValue.dataValue>
    	#pList
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1395'
        name = 'param'
        modelElement = 'S.423'>
   <UML:TaggedValue.dataValue>
    	repositorySize the maximum number of events that can be stored
in the event repository
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1398'
        name = 'documentation'
        modelElement = 'S.424'>
   <UML:TaggedValue.dataValue>
    	Implement the event creation service.
A call to this method causes a new event report to be stored in the
repository if event creation is enabled.
Event creation can be disabled either globally (through method
&lt;code&gt;setEnable(boolean)&lt;/code&gt;) or selectively (through
method &lt;code&gt;setSelectiveEnableMask(int)&lt;/code&gt;).
Clients that call this method in order to report an event should pass to it a
reference to the originator of the event and the event type identifier.
The &lt;i&gt;originator&lt;/i&gt; is the component that detected or triggered the event.
The &lt;i&gt;event type identifier&lt;/i&gt; is an enumeration value that identifies the type
of event.
An event repository can use the pointer to the event originator to acquire
additional information about the event. This implementation however does not
use it. It takes the event type identifier, adds a time stamp to it and
stores it in a circular FIFO buffer.
If the buffer is already full, the oldest event report is overwritten.
The pseudo-code for this method is as follows:  &lt;PRE&gt;
if (isEnabled())
return;
if (isEnabled(eventId))
. . .  // add timestamp to event and store in repository
else
return; &lt;/PRE&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1399'
        name = 'see'
        modelElement = 'S.424'>
   <UML:TaggedValue.dataValue>
    	#setEnabled
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1400'
        name = 'param'
        modelElement = 'S.424'>
   <UML:TaggedValue.dataValue>
    	originator the originator of the event
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1401'
        name = 'param'
        modelElement = 'S.424'>
   <UML:TaggedValue.dataValue>
    	eventId the event type identifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1405'
        name = 'documentation'
        modelElement = 'S.425'>
   <UML:TaggedValue.dataValue>
    	Set the global enable status of the repository.
When the repository is disabled, a call to method &lt;CODE&gt;create&lt;/CODE&gt;
has no effect.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1406'
        name = 'param'
        modelElement = 'S.425'>
   <UML:TaggedValue.dataValue>
    	isEnabled if true, then the repository is enabled; if false,
then the repository is disabled
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1409'
        name = 'documentation'
        modelElement = 'S.426'>
   <UML:TaggedValue.dataValue>
    	Set the selective enable status of the repository.
This method can be used to enabled or disable creation of events of
type &lt;code&gt;eventType&lt;/code&gt;.
When creation of events of a certain type is disabled, a call
to method &lt;CODE&gt;create&lt;/CODE&gt; for
an event of that type has no effect.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1410'
        name = 'param'
        modelElement = 'S.426'>
   <UML:TaggedValue.dataValue>
    	eventType the event type
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1411'
        name = 'param'
        modelElement = 'S.426'>
   <UML:TaggedValue.dataValue>
    	isEnabled the new enable status for events of the specified type
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1415'
        name = 'documentation'
        modelElement = 'S.427'>
   <UML:TaggedValue.dataValue>
    	Check the global enable status of the repository.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1416'
        name = 'return'
        modelElement = 'S.427'>
   <UML:TaggedValue.dataValue>
    	true if the repository is enabled, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1418'
        name = 'documentation'
        modelElement = 'S.428'>
   <UML:TaggedValue.dataValue>
    	Check the enable status for events of type &lt;code&gt;eventType&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1419'
        name = 'return'
        modelElement = 'S.428'>
   <UML:TaggedValue.dataValue>
    	true if the generation of events of type &lt;code&gt;eventType&lt;/code&gt;
is enabled, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1422'
        name = 'documentation'
        modelElement = 'S.429'>
   <UML:TaggedValue.dataValue>
    	Iteration method to position the &lt;i&gt;event pointer&lt;/i&gt; on the  most recently
stored event.
The iteration methods are typically used in a loop like the following:
&lt;PRE&gt;
for (latest(); !isIterationFinished(); previous())
. . .  // process event pointed to by event pointer &lt;/PRE&gt;
If the repository is empty, the event pointer is set to the first
(non-configured) event in the repository.
The attributes of the event report pointed to by the event pointer can be
retrieved with the &lt;CODE&gt;getEventId&lt;/CODE&gt; and
&lt;CODE&gt;getTimeStamp&lt;/CODE&gt; methods.
The effect of this and the other iterator methods is simply to update the
value of the event pointer variable. The event pointer is declared as a
&lt;code&gt;protected&lt;/code&gt; variable and can therefore be accessed by subclasses.
Subclasses can therefore re-use the iteration services declared by this
class.
&lt;p&gt;
Calling this method also has the effect of resetting an on-going iteration.
&lt;p&gt;
The implementation of this method is robust to calls of method &lt;code&gt;create&lt;/code&gt;
during an on-going iteration. The effect of doing this is that the iterators
may skip one event but the internal state of the repository remains consistent.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1423'
        name = 'see'
        modelElement = 'S.429'>
   <UML:TaggedValue.dataValue>
    	#eventPointer
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1424'
        name = 'see'
        modelElement = 'S.429'>
   <UML:TaggedValue.dataValue>
    	DC_Event#getEventType
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1425'
        name = 'see'
        modelElement = 'S.429'>
   <UML:TaggedValue.dataValue>
    	DC_Event#getTimeStamp
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1427'
        name = 'documentation'
        modelElement = 'S.430'>
   <UML:TaggedValue.dataValue>
    	Iteration method to advance the event pointer to the next oldest
event.
If the repository is empty or if the oldest event in the repository
has already been reached, then this methods has no effect.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1428'
        name = 'see'
        modelElement = 'S.430'>
   <UML:TaggedValue.dataValue>
    	#latest
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1430'
        name = 'documentation'
        modelElement = 'S.431'>
   <UML:TaggedValue.dataValue>
    	Iteration method to return true if the iteration is finished.
The iteration is finished if method &lt;code&gt;previous&lt;/code&gt; has been called
N times since the last time method &lt;code&gt;latest&lt;/code&gt; was called
where N is either the size of the repository (if the repository is
is full) of the number of items in the repository (if it is not
full).
&lt;p&gt;
If the repository is empty, this method returns true.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1431'
        name = 'see'
        modelElement = 'S.431'>
   <UML:TaggedValue.dataValue>
    	#latest
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1432'
        name = 'return'
        modelElement = 'S.431'>
   <UML:TaggedValue.dataValue>
    	true if the iteration is finished
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1434'
        name = 'documentation'
        modelElement = 'S.432'>
   <UML:TaggedValue.dataValue>
    	Return the event identifier of the event currently pointed to by the
event pointer.
This method is typically used in conjunctions with the iteration
methods.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1435'
        name = 'see'
        modelElement = 'S.432'>
   <UML:TaggedValue.dataValue>
    	#latest
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1436'
        name = 'return'
        modelElement = 'S.432'>
   <UML:TaggedValue.dataValue>
    	event identifier of the event currently pointed to by the
event pointer
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1438'
        name = 'documentation'
        modelElement = 'S.433'>
   <UML:TaggedValue.dataValue>
    	Return the time stamp of the event currently pointed to by the event
pointer.
This method is typically used in conjunctions with the iteration
methods.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1439'
        name = 'see'
        modelElement = 'S.433'>
   <UML:TaggedValue.dataValue>
    	#latest
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1440'
        name = 'return'
        modelElement = 'S.433'>
   <UML:TaggedValue.dataValue>
    	time stamp of the event currently pointed to by the event
pointer
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1442'
        name = 'documentation'
        modelElement = 'S.434'>
   <UML:TaggedValue.dataValue>
    	Return the number of events that have been stored in the repository
since it was created (including events that have been overwritten).
The event counter is stored in an &lt;code&gt;unsigned int&lt;/code&gt; variable.
For reasons of run-time efficiency, there is no overflow check and
this class will generate an exception when the number of events exceeds
the capacity of the counter.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1443'
        name = 'return'
        modelElement = 'S.434'>
   <UML:TaggedValue.dataValue>
    	number of events created in the repostory since repository
creation.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1445'
        name = 'documentation'
        modelElement = 'S.435'>
   <UML:TaggedValue.dataValue>
    	Return the size of the event repository.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1446'
        name = 'return'
        modelElement = 'S.435'>
   <UML:TaggedValue.dataValue>
    	the size of the event repository
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1448'
        name = 'documentation'
        modelElement = 'S.436'>
   <UML:TaggedValue.dataValue>
    	Load the OBS Clock component. The event repository needs access to
this component in order to time-stamp events as they are created.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1449'
        name = 'param'
        modelElement = 'S.436'>
   <UML:TaggedValue.dataValue>
    	pObsClock the OBS Clock component.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1452'
        name = 'documentation'
        modelElement = 'S.437'>
   <UML:TaggedValue.dataValue>
    	Return the OBS Clock component.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1453'
        name = 'see'
        modelElement = 'S.437'>
   <UML:TaggedValue.dataValue>
    	#setObsClock
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1454'
        name = 'return'
        modelElement = 'S.437'>
   <UML:TaggedValue.dataValue>
    	the OBS Clock component.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1456'
        name = 'documentation'
        modelElement = 'S.438'>
   <UML:TaggedValue.dataValue>
    	Reset the repository.
When a repository is reset, all its event entries are cleared and the
event pointer is reset to point to the first (non-configured) entry
in the repository. Note that the event counter and the enable flags
are not affected by a call to this method.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1458'
        name = 'documentation'
        modelElement = 'S.439'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on a repository object:
verify that the repository size
has a legal value and that the OBS clock component has been loaded.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1459'
        name = 'return'
        modelElement = 'S.439'>
   <UML:TaggedValue.dataValue>
    	true if the object is configured, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1461'
        name = 'documentation'
        modelElement = 'S.404'>
   <UML:TaggedValue.dataValue>
    	Event repository for PUS applications.
This event repository differs from the basic repository implemented by its
base class in that it processes telecommand-related events separately from
other events. For this purpose, it adds two new &lt;code&gt;create&lt;/code&gt; methods
that intercept events generated by PUS telecommands (i.e. events whose originator
is a component of type &lt;code&gt;PUSTelecommand&lt;/code&gt;) and by PUS telecommand 
manoeuvres (i.e. events whose originator is a component of type
&lt;code&gt;PUSTcManoeuvre&lt;/code&gt;). Events of this kind signal a change in execution
status of a PUS telecommand. Their detection results in the generation of
a telecommand verification telemetry packet (instance of class 
&lt;code&gt;DC_PUSTcVerificationPacket&lt;/code&gt;). 
&lt;p&gt;
The events that are intercepted by this repository and the way they are interpreted
is as follows:&lt;ul&gt;
&lt;li&gt;EVT_TC_LOADED is interpreted as: &quot;telecommand acceptance - success&quot;.&lt;/li&gt;
&lt;li&gt;EVT_TC_NOT_VALID is interpreted as: &quot;telecommand acceptance - failure&quot;. The error
code in the verification telemetry packet is the &lt;i&gt;validity check code&lt;/i&gt; of the telecommand
if this is different from zero, otherwise it is the event identifier EVT_TC_NOT_VALID.&lt;/li&gt;
&lt;li&gt;EVT_TC_LIST_FULL is interpreted as: &quot;telecommand acceptance - failure&quot;. The error
code in the verification telemetry packet is the event identifier EVT_TC_LIST_FULL.&lt;/li&gt;
&lt;li&gt;EVT_MAN_STARTED is interpreted as: &quot;telecommand execution start - success&quot;. This
event identifier can only be generated for manoeuvre telecommands.&lt;/li&gt;
&lt;li&gt;EVT_MAN_LIST_FULL is interpreted as: &quot;telecommand execution start - failure&quot;. The error
code in the verification telemetry packet is the event identifier EVT_MAN_LIST_FULL. This
event identifier can only be generated for manoeuvre telecommands.&lt;/li&gt;
&lt;li&gt;EVT_TC_EXEC_CHECK_FAIL is interpreted as: &quot;telecommand execution start - failure&quot;. The error
code in the verification telemetry packet is the &lt;i&gt;execution check code&lt;/i&gt; of the telecommand
if this is different from zero, otherwise it is the event identifier EVT_TC_EXEC_CHECK_FAIL.&lt;/li&gt;
&lt;li&gt;EVT_TC_ABORTED is interpreted as: &quot;telecommand execution start - failure&quot;. The error
code in the verification telemetry packet is the event identifier EVT_TC_ABORTED.&lt;/li&gt;
&lt;li&gt;EVT_MAN_PROGRESS is interpreted as: &quot;telecommand execution progress - success&quot;. This
event identifier can only be generated for telemecommand manoeuvres.&lt;/li&gt;
&lt;li&gt;EVT_TC_EXEC_SUCC is interpreted as: &quot;telecommand execution completion - success&quot;. &lt;/li&gt;
&lt;li&gt;EVT_TC_EXEC_FAIL is interpreted as: &quot;telecommand execution completion - failure&quot;. The error
code in the verification telemetry packet is the &lt;i&gt;outcome code&lt;/i&gt; of the telecommand.&lt;/li&gt;
&lt;li&gt;EVT_MAN_ABORTED is interpreted as: &quot;telecommand execution progress - failure&quot;. The error
code in the verification telemetry packet is the &lt;i&gt;continuation check code&lt;/i&gt; of the telecommand
manoeuvre if this is different from zero, otherwise it is the event identifier EVT_MAN_ABORTED. This
event identifier can only be generated for telemecommand manoeuvres.&lt;/li&gt;
&lt;li&gt;EVT_MAN_TERMINATED is interpreted as: &quot;telecommand execution completion - success&quot;. This
event identifier can only be generated for telemecommand manoeuvres.&lt;/li&gt;
&lt;/ul&gt;
For events that indicate &quot;success&quot;, the disptaching of the associated telemetry packet is only
done if the telecommand had set the associated &quot;acknowledge flag&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1462'
        name = 'author'
        modelElement = 'S.404'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1463'
        name = 'todo'
        modelElement = 'S.404'>
   <UML:TaggedValue.dataValue>
    	Verify whether the declaration and implementation of method create(CC_RootObject*,TD_EventId)
is really needed (try omitting it on the gnu compiler). Its presence seems unnecessary and it
is undesirable because it adds a level of indirection
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1464'
        name = 'todo'
        modelElement = 'S.404'>
   <UML:TaggedValue.dataValue>
    	Modify the processing of the events denoting &quot;success&quot; to include a check on the 
acknowledge flag of the telecommand that is being verified: a verification packet should
only be sent in case of success if this is explicitly requested by the telecommand through
its acknowledge flags (see pag. 44 of PUS standard).
to most calls of the event creation service.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1465'
        name = 'see'
        modelElement = 'S.404'>
   <UML:TaggedValue.dataValue>
    	PUSTelecommand
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1466'
        name = 'see'
        modelElement = 'S.404'>
   <UML:TaggedValue.dataValue>
    	PUSTcManoeuvre
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1467'
        name = 'see'
        modelElement = 'S.404'>
   <UML:TaggedValue.dataValue>
    	DC_PUSTcVerificationPacket
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1468'
        name = 'version'
        modelElement = 'S.404'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1469'
        name = 'ingroup'
        modelElement = 'S.404'>
   <UML:TaggedValue.dataValue>
    	PUS
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1470'
        name = 'documentation'
        modelElement = 'S.441'>
   <UML:TaggedValue.dataValue>
    	Instantiate a PUS event repository.
The PUS event repository maintains as an internal variable an instance of 
class &lt;code&gt;DC_PUSTcVerificationPacket&lt;/code&gt;. This is used to encapsulate
the telemetry packet that describes a change in telecommand execution status.
This constructor creates and configures this component and sets the class
identifier.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1471'
        name = 'documentation'
        modelElement = 'S.442'>
   <UML:TaggedValue.dataValue>
    	Implement the event creation service for event originators of type
&lt;code&gt;PUSTelecommand&lt;/code&gt;. A pseudo-code implementation for this method
is as follows: &lt;pre&gt;
if ( isEnabled() &amp;&amp; isEnabled(eventId) ) {
allocate a TC verification packet from the telemetry packet factory
if (allocation fails) {
create((CC_RootObject*)originator,EVT_TM_PCK_ALLOC_FAIL);
create((CC_RootObject*)originator,eventId); 
return;
}
configure TC verification packet according to value of eventId;
submit TC verification packet to TM manager for immediate dispatch;
create((CC_RootObject*)originator,eventId); 
} &lt;/pre&gt;
The mapping of the event identifiers to the configuration of the TC verification 
packet is explained in the class comment. The last instruction in the &quot;if&quot;
clause indicates that the event processing is delegated to the default version
of the &lt;code&gt;create&lt;/code&gt; method provided by the superclass &lt;code&gt;DC_EventRepositor&lt;/code&gt;.
If the event is a &quot;success event&quot;, then the above processing is only performed
if the associated &quot;acknowledge flag&quot; in the telecommand is set.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1472'
        name = 'param'
        modelElement = 'S.442'>
   <UML:TaggedValue.dataValue>
    	originator the originator of the event
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1473'
        name = 'param'
        modelElement = 'S.442'>
   <UML:TaggedValue.dataValue>
    	eventId the event type identifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1477'
        name = 'documentation'
        modelElement = 'S.443'>
   <UML:TaggedValue.dataValue>
    	Implement the event creation service for event originators of type
&lt;code&gt;PUSTcManoeuvre&lt;/code&gt;. The implementation logic of this method is
the same as for the &lt;code&gt;create(PUSTelecommand*, TD_EventType)&lt;/code&gt; method
in this same class.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1478'
        name = 'param'
        modelElement = 'S.443'>
   <UML:TaggedValue.dataValue>
    	originator the originator of the event
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1479'
        name = 'param'
        modelElement = 'S.443'>
   <UML:TaggedValue.dataValue>
    	eventId the event type identifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1483'
        name = 'documentation'
        modelElement = 'S.444'>
   <UML:TaggedValue.dataValue>
    	Implement the event creation service for event originators of type
other than &lt;code&gt;PUSTcManoeuvre&lt;/code&gt; or &lt;code&gt;PUSTelecommand&lt;/code&gt;. 
This method simply calls the implementation of the create method in the 
super class.
&lt;p&gt;
&lt;i&gt;Implementation Note&lt;/i&gt;: this method is strictly speaking unnecessary because
it simply calls the same virtual method in the superclass. However its absence 
causes a warning (C4264) in the Microsoft Visual Studio compiler.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1484'
        name = 'param'
        modelElement = 'S.444'>
   <UML:TaggedValue.dataValue>
    	originator the originator of the event
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1485'
        name = 'param'
        modelElement = 'S.444'>
   <UML:TaggedValue.dataValue>
    	eventId the event type identifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1489'
        name = 'documentation'
        modelElement = 'S.445'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on a repository object:
verify that the telemetry manager plug-in component has been loaded.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1490'
        name = 'return'
        modelElement = 'S.445'>
   <UML:TaggedValue.dataValue>
    	true if the object is configured, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1492'
        name = 'documentation'
        modelElement = 'S.446'>
   <UML:TaggedValue.dataValue>
    	Load the telemetry manager component. The event repository needs access to
the telemetry manager to dispatch the telecommand verification telemetry 
packet.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1493'
        name = 'param'
        modelElement = 'S.446'>
   <UML:TaggedValue.dataValue>
    	pTmManager the telemetry manager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1496'
        name = 'documentation'
        modelElement = 'S.447'>
   <UML:TaggedValue.dataValue>
    	Return the telemetry manager component.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1497'
        name = 'see'
        modelElement = 'S.447'>
   <UML:TaggedValue.dataValue>
    	#setTelemetryManager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1498'
        name = 'return'
        modelElement = 'S.447'>
   <UML:TaggedValue.dataValue>
    	the the telemetry manager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1523'
        name = 'documentation'
        modelElement = 'S.459'>
   <UML:TaggedValue.dataValue>
    	Default component implementing a &quot;stuck data&quot; monitoring profile.
This monitoring profile reports a &quot;deviation from profile&quot; if the 
value of the monitored variable undergoes a change in between two 
successive checks greater than a certain threshold. 
The threshold is called the &lt;i&gt;delta threshold&lt;/i&gt;.
The delta threshold is a settable parameter. Its value must be
greater than zero.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1524'
        name = 'author'
        modelElement = 'S.459'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1525'
        name = 'version'
        modelElement = 'S.459'>
   <UML:TaggedValue.dataValue>
    	1.1
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1526'
        name = 'documentation'
        modelElement = 'S.473'>
   <UML:TaggedValue.dataValue>
    	Version of method &lt;CODE&gt;doProfileCheck()&lt;/CODE&gt; for monitored variables 
of type integer. The check is performed by using the &quot;TD_Float&quot; version
of &lt;code&gt;doProfileCheck&lt;/code&gt;.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
return doProfileCheck( (TD_Float)value ); &lt;/PRE&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1527'
        name = 'see'
        modelElement = 'S.473'>
   <UML:TaggedValue.dataValue>
    	#doProfileCheck
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1530'
        name = 'documentation'
        modelElement = 'S.474'>
   <UML:TaggedValue.dataValue>
    	Check whether the monitored value differs from its value at the previous
activation by more than the delta threshold.
If it does, a &quot;deviation from profile&quot; is reported.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
if ( ( abs(value-previousValue) &gt; deltaThreshold ) &amp;&amp; notFirst )
{  previousValue = value;
return MON_PROFILE_DEVIATION; 
}
notFirst = true;
previousValue = value;   
return NO_MON_PROFILE_DEVIATION; &lt;/PRE&gt;
&lt;p&gt;
The value of the &lt;code&gt;notFirst&lt;/code&gt; flag is initialized to 
&apos;false&apos; by the constructor and by the reset operation.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1531'
        name = 'see'
        modelElement = 'S.474'>
   <UML:TaggedValue.dataValue>
    	#reset
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1532'
        name = 'see'
        modelElement = 'S.474'>
   <UML:TaggedValue.dataValue>
    	#DC_DeltaProfile
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1533'
        name = 'param'
        modelElement = 'S.474'>
   <UML:TaggedValue.dataValue>
    	value the value of the monitored variable
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1534'
        name = 'return'
        modelElement = 'S.474'>
   <UML:TaggedValue.dataValue>
    	true if the monitored variable is stuck, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1537'
        name = 'documentation'
        modelElement = 'S.475'>
   <UML:TaggedValue.dataValue>
    	Instantiate a delta monitoring profile.
The class identifier is set, the delta threshold is initialized to 0 to 
signify that the component is not yet configured, and the component is
reset.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1538'
        name = 'documentation'
        modelElement = 'S.476'>
   <UML:TaggedValue.dataValue>
    	Set the delta threshold.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1539'
        name = 'see'
        modelElement = 'S.476'>
   <UML:TaggedValue.dataValue>
    	#doProfileCheck
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1540'
        name = 'param'
        modelElement = 'S.476'>
   <UML:TaggedValue.dataValue>
    	deltaThreshold the value of the delta threshold
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1543'
        name = 'documentation'
        modelElement = 'S.477'>
   <UML:TaggedValue.dataValue>
    	Get the delta threshold.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1544'
        name = 'see'
        modelElement = 'S.477'>
   <UML:TaggedValue.dataValue>
    	#doProfileCheck
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1545'
        name = 'return'
        modelElement = 'S.477'>
   <UML:TaggedValue.dataValue>
    	the value of the delta threshold
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1547'
        name = 'documentation'
        modelElement = 'S.478'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on the monitoring
profile: verify that the delta threshold has a value greater than zero.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1548'
        name = 'return'
        modelElement = 'S.478'>
   <UML:TaggedValue.dataValue>
    	true if the monitoring profile is configured, false otherwise.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1550'
        name = 'documentation'
        modelElement = 'S.479'>
   <UML:TaggedValue.dataValue>
    	Reset the delta monitoring profile check. With reference to the 
implementation of method &lt;code&gt;doProfileCheck(TD_Integer)&lt;/code&gt;, a call to
this method causes the flag &lt;code&gt;notFirst&lt;/code&gt; to be reset to 
&apos;false&apos;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1552'
        name = 'documentation'
        modelElement = 'S.454'>
   <UML:TaggedValue.dataValue>
    	Recovery action that performs no action and returns a configurable
outcome (see &lt;code&gt;setActionOutcome()&lt;/code&gt;). This recovery action is
used only for testing purposes.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1553'
        name = 'author'
        modelElement = 'S.454'>
   <UML:TaggedValue.dataValue>
    	Roberto Totaro
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1554'
        name = 'version'
        modelElement = 'S.454'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1555'
        name = 'documentation'
        modelElement = 'S.482'>
   <UML:TaggedValue.dataValue>
    	Return &lt;code&gt;actionOutcome&lt;/code&gt; without taking any action.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1556'
        name = 'see'
        modelElement = 'S.482'>
   <UML:TaggedValue.dataValue>
    	#setActionOutcome
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1557'
        name = 'see'
        modelElement = 'S.482'>
   <UML:TaggedValue.dataValue>
    	RecoveryAction#doAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1558'
        name = 'return'
        modelElement = 'S.482'>
   <UML:TaggedValue.dataValue>
    	return the outcome code set by the caller
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1560'
        name = 'documentation'
        modelElement = 'S.483'>
   <UML:TaggedValue.dataValue>
    	Return &lt;code&gt;actionCanExecute&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1561'
        name = 'see'
        modelElement = 'S.483'>
   <UML:TaggedValue.dataValue>
    	#setExecutionFlag
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1562'
        name = 'see'
        modelElement = 'S.483'>
   <UML:TaggedValue.dataValue>
    	RecoveryAction#doAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1563'
        name = 'return'
        modelElement = 'S.483'>
   <UML:TaggedValue.dataValue>
    	true if the action can be executed, false if the action cannot
be executed.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1565'
        name = 'documentation'
        modelElement = 'S.484'>
   <UML:TaggedValue.dataValue>
    	Instantiate a dummy recovery action. The class identifier is set,
&lt;code&gt;actionOutcome&lt;/code&gt; is initialized to &lt;code&gt;ACTION_SUCCESS&lt;/code&gt;
and &lt;code&gt;actionCanExecute&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1566'
        name = 'documentation'
        modelElement = 'S.485'>
   <UML:TaggedValue.dataValue>
    	Set the action&apos;s outcome.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1567'
        name = 'see'
        modelElement = 'S.485'>
   <UML:TaggedValue.dataValue>
    	#doRecoveryAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1568'
        name = 'param'
        modelElement = 'S.485'>
   <UML:TaggedValue.dataValue>
    	nextOutcome the outcome of the action
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1571'
        name = 'documentation'
        modelElement = 'S.486'>
   <UML:TaggedValue.dataValue>
    	Set the status of the execution flag.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1572'
        name = 'see'
        modelElement = 'S.486'>
   <UML:TaggedValue.dataValue>
    	#canExecute
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1573'
        name = 'param'
        modelElement = 'S.486'>
   <UML:TaggedValue.dataValue>
    	canExecute the value returned by &lt;code&gt;canExecute()&lt;/code&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1576'
        name = 'documentation'
        modelElement = 'S.465'>
   <UML:TaggedValue.dataValue>
    	Encapsulation of a failure detection and isolation check and of its
associated recovery action. A FDIR (fault detection, isolation
and recovery) check usually consists of two parts. A check that
determines the existence of a fault and isolates its cause (the
&lt;i&gt;failure detection and isolation check&lt;/i&gt; or FDI check), and a
a &lt;i&gt;recovery action&lt;/i&gt; to counteract the fault. This component
encapsulates a complete FDIR check and allows both the
FDI check and the recovery action to be executed
as a single action.
&lt;p&gt;
This component assumes that the FDI check check is encapsulated
in a component of type &lt;code&gt;PunctualAction&lt;/code&gt;.
and that the recovery action is encapsulated in a component of type
&lt;code&gt;RecoveryAction&lt;/code&gt;.
&lt;p&gt;
This component is offered as a form of &lt;i&gt;punctual action&lt;/i&gt; (it
is derived from the base class &lt;code&gt;PunctualAction&lt;/code&gt;). Its
associated action consists in the execution of the FDI check
and, if this returns with a failure code, in
the subsequent and immediate execution of the associated recovery
action. Note that there is no conditional execution check associated to an
FDIR check: the FDI check is always executed when the &lt;code&gt;FdirCheck&lt;/code&gt;
component is executed. If it is desired to have the FDIR check executed only
if certain conditions hold, the conditional execution check can be built
into the FDI check (this is typically done by implementing the FDI check
as a subclass of &lt;code&gt;ConditionalPunctualAction&lt;/code&gt;).
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1577'
        name = 'author'
        modelElement = 'S.465'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1578'
        name = 'todo'
        modelElement = 'S.465'>
   <UML:TaggedValue.dataValue>
    	change the name of this class to: DC_FdirAction (remember to update
the comments to reflect the change of class name)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1579'
        name = 'version'
        modelElement = 'S.465'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1580'
        name = 'ingroup'
        modelElement = 'S.465'>
   <UML:TaggedValue.dataValue>
    	FDIR
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1581'
        name = 'documentation'
        modelElement = 'S.488'>
   <UML:TaggedValue.dataValue>
    	Execute the FDI check and, if this returns a failure code, execute
the recovery action.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
outcome = pFdiCheck-&gt;execute();
if ( outcome == ACTION_FAILURE )
outcome = pRecoveryAction-&gt;execute();
return outcome; &lt;/PRE&gt;
Note that the outcome code returned by this punctual action is either
the return code of the FDI check or of the recovery action, whichever
is executed last.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1582'
        name = 'see'
        modelElement = 'S.488'>
   <UML:TaggedValue.dataValue>
    	TD_ActionOutcome
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1583'
        name = 'return'
        modelElement = 'S.488'>
   <UML:TaggedValue.dataValue>
    	the outcome code of the last recovery action to be executed
or ACTION_CANNOT_EXECUTE if no action can be executed
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1585'
        name = 'documentation'
        modelElement = 'S.489'>
   <UML:TaggedValue.dataValue>
    	Instantiate an FDIR check. The recovery action and FDI check are
left undefined to signify that the component is not yet configured.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1586'
        name = 'documentation'
        modelElement = 'S.490'>
   <UML:TaggedValue.dataValue>
    	Set the FDI check.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1587'
        name = 'see'
        modelElement = 'S.490'>
   <UML:TaggedValue.dataValue>
    	#doAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1588'
        name = 'param'
        modelElement = 'S.490'>
   <UML:TaggedValue.dataValue>
    	pFdiCheck the FDI check component
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1591'
        name = 'documentation'
        modelElement = 'S.491'>
   <UML:TaggedValue.dataValue>
    	Get the FDI check.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1592'
        name = 'see'
        modelElement = 'S.491'>
   <UML:TaggedValue.dataValue>
    	#doAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1593'
        name = 'return'
        modelElement = 'S.491'>
   <UML:TaggedValue.dataValue>
    	the FDI check component
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1595'
        name = 'documentation'
        modelElement = 'S.492'>
   <UML:TaggedValue.dataValue>
    	Set the recovery action.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1596'
        name = 'see'
        modelElement = 'S.492'>
   <UML:TaggedValue.dataValue>
    	#doAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1597'
        name = 'param'
        modelElement = 'S.492'>
   <UML:TaggedValue.dataValue>
    	pRecoveryAction the recovery action
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1600'
        name = 'documentation'
        modelElement = 'S.493'>
   <UML:TaggedValue.dataValue>
    	Get the recovery action.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1601'
        name = 'see'
        modelElement = 'S.493'>
   <UML:TaggedValue.dataValue>
    	#doAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1602'
        name = 'return'
        modelElement = 'S.493'>
   <UML:TaggedValue.dataValue>
    	the recovery action
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1604'
        name = 'documentation'
        modelElement = 'S.494'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on the FDIR check:
verify that the recovery action and FDI check have been set.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1605'
        name = 'return'
        modelElement = 'S.494'>
   <UML:TaggedValue.dataValue>
    	true if the FDIR check is configured, false otherwise.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1607'
        name = 'documentation'
        modelElement = 'S.460'>
   <UML:TaggedValue.dataValue>
    	Default component implementing a forbidden value monitoring profile.
This monitoring profile reports a &quot;deviation from profile&quot; if the 
value of the monitored variable is equal to a pre-specified 
&lt;i&gt;forbidden value&lt;/i&gt;. The forbidden value is a settable parameter. 
&lt;p&gt;
This type of check only makes sense for monitored variables of
integer type. The version of the monitoring check for variables
of doble type is therefore implemented as a dummy operation
that always returns &quot;deviation from profile has been detected&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1608'
        name = 'author'
        modelElement = 'S.460'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1609'
        name = 'version'
        modelElement = 'S.460'>
   <UML:TaggedValue.dataValue>
    	1.1
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1610'
        name = 'documentation'
        modelElement = 'S.496'>
   <UML:TaggedValue.dataValue>
    	Check whether the monitored value is equal to the forbidden value.
If it is, a &quot;devation from profile&quot; is reported.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
if ( value == forbiddenValue )
return MON_PROFILE_DEVIATION;
return NO_MON_PROFILE_DEVIATION; &lt;/PRE&gt;
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1611'
        name = 'param'
        modelElement = 'S.496'>
   <UML:TaggedValue.dataValue>
    	value the value of the monitored variable
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1612'
        name = 'return'
        modelElement = 'S.496'>
   <UML:TaggedValue.dataValue>
    	true if the monitored variable is equal to the forbidden value,
false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1615'
        name = 'documentation'
        modelElement = 'S.497'>
   <UML:TaggedValue.dataValue>
    	Dummy implementation of a monitoring check that always returns &quot;deviation
from profile detected&quot;.
This operation should never be called since a forbidden value monitoring 
check on
non-integer variables may give unpredictable results due to numerical
precision errors.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1616'
        name = 'param'
        modelElement = 'S.497'>
   <UML:TaggedValue.dataValue>
    	value the value of the monitored variable
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1617'
        name = 'return'
        modelElement = 'S.497'>
   <UML:TaggedValue.dataValue>
    	always returns true
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1620'
        name = 'documentation'
        modelElement = 'S.498'>
   <UML:TaggedValue.dataValue>
    	Instantiate a forbidden value profile.
The class identifier is set and the forbidden value is initialized to zero.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1621'
        name = 'documentation'
        modelElement = 'S.499'>
   <UML:TaggedValue.dataValue>
    	Set the forbidden value against which the monitoring check is performed.
The forbidden value can be modified dynamically.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1622'
        name = 'see'
        modelElement = 'S.499'>
   <UML:TaggedValue.dataValue>
    	#doProfileCheck
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1623'
        name = 'param'
        modelElement = 'S.499'>
   <UML:TaggedValue.dataValue>
    	forbiddenValue the forbidden value
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1626'
        name = 'documentation'
        modelElement = 'S.500'>
   <UML:TaggedValue.dataValue>
    	Get the forbidden value.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1627'
        name = 'see'
        modelElement = 'S.500'>
   <UML:TaggedValue.dataValue>
    	#setForbiddenValue
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1628'
        name = 'return'
        modelElement = 'S.500'>
   <UML:TaggedValue.dataValue>
    	the value of the reference value
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1630'
        name = 'documentation'
        modelElement = 'S.455'>
   <UML:TaggedValue.dataValue>
    	Default component implementing an &quot;in range&quot; monitoring profile.
This monitoring profile reports a &quot;deviation from profile&quot; if the 
value of the monitored variable lies inside a predefined
range interval [lowerBound, upperBound].
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1631'
        name = 'author'
        modelElement = 'S.455'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1632'
        name = 'version'
        modelElement = 'S.455'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1633'
        name = 'documentation'
        modelElement = 'S.501'>
   <UML:TaggedValue.dataValue>
    	Check whether the monitored value is within the range.
If it is, a &quot;devation from profile&quot; is reported.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
if ( ( value&gt;lowerBound) &amp;&amp; (value&lt;upperBound) )
return MON_PROFILE_DEVIATION; 
else
return NO_MON_PROFILE_DEVIATION; &lt;/PRE&gt;
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1634'
        name = 'param'
        modelElement = 'S.501'>
   <UML:TaggedValue.dataValue>
    	value the value of the monitored variable
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1635'
        name = 'return'
        modelElement = 'S.501'>
   <UML:TaggedValue.dataValue>
    	true if the monitored variable lies within the range, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1638'
        name = 'documentation'
        modelElement = 'S.502'>
   <UML:TaggedValue.dataValue>
    	Instantiate an in-range monitoring profile.
The class identifier is set.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1639'
        name = 'documentation'
        modelElement = 'S.456'>
   <UML:TaggedValue.dataValue>
    	Default component implementing a &quot;null monitoring profile&quot;.
A null monitoring profile always reports &quot;no deviation from profile&quot;.
This profile is typically useful as a placeholder where a component of type
&lt;code&gt;MonitoringProfile&lt;/code&gt; is needed to complete the configuration of a component
but where there is no need to perform any profile monitoring check.
It is similarly useful where a variable must formally be subjected to 
profile monitoring but its value in fact not subject to any limitation.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1640'
        name = 'author'
        modelElement = 'S.456'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1641'
        name = 'version'
        modelElement = 'S.456'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1642'
        name = 'documentation'
        modelElement = 'S.503'>
   <UML:TaggedValue.dataValue>
    	Always return &quot;no deviation from profile&quot;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1643'
        name = 'param'
        modelElement = 'S.503'>
   <UML:TaggedValue.dataValue>
    	value the value of the monitored variable
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1644'
        name = 'return'
        modelElement = 'S.503'>
   <UML:TaggedValue.dataValue>
    	alway returns false
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1647'
        name = 'documentation'
        modelElement = 'S.504'>
   <UML:TaggedValue.dataValue>
    	Always return &quot;no deviation from profile&quot;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1648'
        name = 'param'
        modelElement = 'S.504'>
   <UML:TaggedValue.dataValue>
    	value the value of the monitored variable
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1649'
        name = 'return'
        modelElement = 'S.504'>
   <UML:TaggedValue.dataValue>
    	alway returns false
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1652'
        name = 'documentation'
        modelElement = 'S.505'>
   <UML:TaggedValue.dataValue>
    	Instantiate a null monitoring profile.
The class identifier is set.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1653'
        name = 'documentation'
        modelElement = 'S.463'>
   <UML:TaggedValue.dataValue>
    	Recovery action that performs no action.
This recovery action is useful as a &quot;placeholder&quot; where a component
of type &lt;code&gt;RecoveryAction&lt;/code&gt; is required but where no
concrete recovery actions are defined.
&lt;p&gt;
Note that there is no preclusion to linking non-null recovery
actions to a null recovery action.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1654'
        name = 'author'
        modelElement = 'S.463'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1655'
        name = 'version'
        modelElement = 'S.463'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1656'
        name = 'documentation'
        modelElement = 'S.506'>
   <UML:TaggedValue.dataValue>
    	Instantiate a null recovery action. The class identifier is set.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1657'
        name = 'documentation'
        modelElement = 'S.507'>
   <UML:TaggedValue.dataValue>
    	Return without taking any action.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1658'
        name = 'see'
        modelElement = 'S.507'>
   <UML:TaggedValue.dataValue>
    	RecoveryAction#doAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1659'
        name = 'return'
        modelElement = 'S.507'>
   <UML:TaggedValue.dataValue>
    	always return the outcome code ACTION_SUCCESS
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1661'
        name = 'documentation'
        modelElement = 'S.466'>
   <UML:TaggedValue.dataValue>
    	Default component implementing an &quot;out of range&quot; monitoring profile.
This monitoring profile reports a &quot;deviation from profile&quot; if the 
value of the monitored variable lies outside a predefined
range interval [lowerBound, upperBound].
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1662'
        name = 'author'
        modelElement = 'S.466'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1663'
        name = 'version'
        modelElement = 'S.466'>
   <UML:TaggedValue.dataValue>
    	1.1
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1664'
        name = 'documentation'
        modelElement = 'S.508'>
   <UML:TaggedValue.dataValue>
    	Check whether the monitored value is outside the range.
If it is, a &quot;devation from profile&quot; is reported.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
if ( ( value&lt;lowerBound) || (value&gt;upperBound) )
return MON_PROFILE_DEVIATION; 
else
return NO_MON_PROFILE_DEVIATION; &lt;/PRE&gt;
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1665'
        name = 'param'
        modelElement = 'S.508'>
   <UML:TaggedValue.dataValue>
    	value the value of the monitored variable
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1666'
        name = 'return'
        modelElement = 'S.508'>
   <UML:TaggedValue.dataValue>
    	true if the monitored variable lies within the range, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1669'
        name = 'documentation'
        modelElement = 'S.509'>
   <UML:TaggedValue.dataValue>
    	Instantiate an in-range monitoring profile.
The class identifier is set.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1670'
        name = 'documentation'
        modelElement = 'S.461'>
   <UML:TaggedValue.dataValue>
    	Monitoring profile that encapsulates a list of monitoring profiles.
This monitoring profile reports a &quot;deviation from profile&quot; if any of the
monitoring profiles in the list report &quot;deviation from profile&quot;.
This component is useful when there is a need to subject a variable
to a sequence of monitoring actions. Use of this component allows the
client (the component that is responsible for performing the monitoring
action) to be shielded from the knowledge of which and how many monitoring
profiles are being used.
&lt;p&gt;
The size of the list of monitoring profiles is set as an initialization
parameter.
&lt;p&gt;
&lt;i&gt;Note:&lt;/i&gt; This class has effectively become redundant after class 
&lt;code&gt;MonitoringProfile&lt;/code&gt; was modified to handle chains of linked 
monitoring profiles.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1671'
        name = 'author'
        modelElement = 'S.461'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1672'
        name = 'version'
        modelElement = 'S.461'>
   <UML:TaggedValue.dataValue>
    	1.2
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1673'
        name = 'documentation'
        modelElement = 'S.510'>
   <UML:TaggedValue.dataValue>
    	Array of pointers to the monitoring profiles
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1674'
        name = 'documentation'
        modelElement = 'S.511'>
   <UML:TaggedValue.dataValue>
    	Size of the monitoring profile list
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1675'
        name = 'documentation'
        modelElement = 'S.512'>
   <UML:TaggedValue.dataValue>
    	Version of method &lt;CODE&gt;doProfileCheck()&lt;/CODE&gt; for monitored variables
of type TD_Integer. The logic of this method is the same as for the version
that takes a &lt;code&gt;TD_Float&lt;/code&gt; argument.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1676'
        name = 'see'
        modelElement = 'S.512'>
   <UML:TaggedValue.dataValue>
    	#doProfileCheck
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1679'
        name = 'documentation'
        modelElement = 'S.513'>
   <UML:TaggedValue.dataValue>
    	Pass the monitored value through all the monitoring profiles in the
list and report &quot;devation from profile&quot; if any of the profiles in
the list report &quot;deviation from profile&quot;.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
flag = NO_MON_PROFILE_DEVIATION;
for (all monitoring profiles p in the list)
{  if ( p-&gt;deviatesFromProfile(value) )
flag = MON_PROFILE_DEVIATION;
}
return flag; &lt;/PRE&gt;
Note that the monitored value is always passed through all
monitoring profiles in the list.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1680'
        name = 'param'
        modelElement = 'S.513'>
   <UML:TaggedValue.dataValue>
    	value the value of the monitored variable
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1681'
        name = 'return'
        modelElement = 'S.513'>
   <UML:TaggedValue.dataValue>
    	true if the monitored variable deviates from the profile,
false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1684'
        name = 'documentation'
        modelElement = 'S.514'>
   <UML:TaggedValue.dataValue>
    	Instantiate a monitoring profile list.
The class identifier is set, the size of the monitoring profile list
is initialized to 0 to
signify that the component is not yet configured.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1685'
        name = 'documentation'
        modelElement = 'S.515'>
   <UML:TaggedValue.dataValue>
    	Set the size of the list of monitoring profiles.
The list size defines the maximum number of monitoring profiles
that can be loaded into this component. A call to this method
causes memory for an internal data structure to be allocated.
This is an initialization method: it shall be called only
once, before the component is used for the first time.
It is not legal to set the repository size to 0.
The entries in the list are initialized to pNULL.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1686'
        name = 'param'
        modelElement = 'S.515'>
   <UML:TaggedValue.dataValue>
    	listSize the size of the monitoring list size
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1689'
        name = 'documentation'
        modelElement = 'S.516'>
   <UML:TaggedValue.dataValue>
    	Return the size of the list of monitoring profiles.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1690'
        name = 'see'
        modelElement = 'S.516'>
   <UML:TaggedValue.dataValue>
    	#setListSize
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1691'
        name = 'return'
        modelElement = 'S.516'>
   <UML:TaggedValue.dataValue>
    	listSize the size of the monitoring list size
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1693'
        name = 'documentation'
        modelElement = 'S.517'>
   <UML:TaggedValue.dataValue>
    	Set the i-th entry in the list of monitoring profiles.
Only non-null entries are legal. The index i must lie in the range [0,N-1]
where N is size of the monitoring profile list.
Use of illegal values result in the generation of the
EVT_ILLEGAL_MP event report.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1694'
        name = 'see'
        modelElement = 'S.517'>
   <UML:TaggedValue.dataValue>
    	TD_EventId
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1695'
        name = 'param'
        modelElement = 'S.517'>
   <UML:TaggedValue.dataValue>
    	i the index of the monitoring list
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1696'
        name = 'param'
        modelElement = 'S.517'>
   <UML:TaggedValue.dataValue>
    	item the item to be added to the list at position i
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1700'
        name = 'documentation'
        modelElement = 'S.518'>
   <UML:TaggedValue.dataValue>
    	Get the i-th entry in the list of monitoring profiles.
If the i-th entry has not yet been loaded, a null value is returned.
The index i should lie in the range [0,N-1]
where N is size of the monitoring profile list.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1701'
        name = 'param'
        modelElement = 'S.518'>
   <UML:TaggedValue.dataValue>
    	i the index of the monitoring list
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1702'
        name = 'return'
        modelElement = 'S.518'>
   <UML:TaggedValue.dataValue>
    	the item at position i of the monitoring profile list
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1705'
        name = 'documentation'
        modelElement = 'S.519'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on the monitoring
profile: verify that the size of the list of monitoring profiles has
a value greater than zero and that all the entries in the list
have been loaded with monitoring profiles.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1706'
        name = 'return'
        modelElement = 'S.519'>
   <UML:TaggedValue.dataValue>
    	true if the monitoring profile is configured, false otherwise.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1708'
        name = 'documentation'
        modelElement = 'S.458'>
   <UML:TaggedValue.dataValue>
    	Default component implementing a simple change monitoring profile.
This monitoring profile reports a &quot;deviation from profile&quot; if the 
value of the monitored variable is different
from a fixed reference value. 
The reference value is a settable parameter.
&lt;p&gt;
This type of check only makes sense for monitored variables of
integer type. The version of the monitoring check for variables
of doble type is therefore implemented as a dummy operation
that always returns &quot;deviation from profile has been detected&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1709'
        name = 'author'
        modelElement = 'S.458'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1710'
        name = 'version'
        modelElement = 'S.458'>
   <UML:TaggedValue.dataValue>
    	1.1
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1711'
        name = 'documentation'
        modelElement = 'S.521'>
   <UML:TaggedValue.dataValue>
    	Check whether the monitored value is different from the reference value.
If it is, a &quot;devation from profile&quot; is reported.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
if ( value != refValue )
return MON_PROFILE_DEVIATION;
return NO_MON_PROFILE_DEVIATION; &lt;/PRE&gt;
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1712'
        name = 'param'
        modelElement = 'S.521'>
   <UML:TaggedValue.dataValue>
    	value the value of the monitored variable
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1713'
        name = 'return'
        modelElement = 'S.521'>
   <UML:TaggedValue.dataValue>
    	true if the monitored variable is different from the reference value,
false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1716'
        name = 'documentation'
        modelElement = 'S.522'>
   <UML:TaggedValue.dataValue>
    	Dummy implementation of a monitoring check that always returns &quot;deviation
from profile detected&quot;.
This operation should never be called since simple monitoring check on
non-integer variables may give unpredictable results due to numerical
precision errors.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1717'
        name = 'param'
        modelElement = 'S.522'>
   <UML:TaggedValue.dataValue>
    	value the value of the monitored variable
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1718'
        name = 'return'
        modelElement = 'S.522'>
   <UML:TaggedValue.dataValue>
    	always returns true
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1721'
        name = 'documentation'
        modelElement = 'S.523'>
   <UML:TaggedValue.dataValue>
    	Instantiate a simple change profile.
The class identifier is set and the reference value is initialized to zero.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1722'
        name = 'documentation'
        modelElement = 'S.524'>
   <UML:TaggedValue.dataValue>
    	Set the reference value against which the monitoring check is performed.
The reference value can be modified dynamically.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1723'
        name = 'see'
        modelElement = 'S.524'>
   <UML:TaggedValue.dataValue>
    	#doProfileCheck
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1724'
        name = 'param'
        modelElement = 'S.524'>
   <UML:TaggedValue.dataValue>
    	refValue the value of the reference value
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1727'
        name = 'documentation'
        modelElement = 'S.525'>
   <UML:TaggedValue.dataValue>
    	Get the reference value.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1728'
        name = 'see'
        modelElement = 'S.525'>
   <UML:TaggedValue.dataValue>
    	#setReferenceValue
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1729'
        name = 'return'
        modelElement = 'S.525'>
   <UML:TaggedValue.dataValue>
    	the value of the reference value
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1731'
        name = 'documentation'
        modelElement = 'S.462'>
   <UML:TaggedValue.dataValue>
    	Default component implementing a &quot;stuck data&quot; monitoring profile.
This monitoring profile reports a &quot;deviation from profile&quot; if the 
value of the monitored variable remains unchanged for more
a certain number of consecutive activations. 
The number of consecutive activations that the
monitored variable must remain unchanged before the monitoring check is
detected is called the &lt;i&gt;stuck threshold&lt;/i&gt;.
The stuck threshold is a settable parameter. Its value must be
greater than zero.
&lt;p&gt;
This type of check only makes sense for monitored variables of
integer type. The version of the monitoring check for variables
of doble type is therefore implemented as a dummy operation
that always returns &quot;deviation from profile has been detected&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1732'
        name = 'author'
        modelElement = 'S.462'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1733'
        name = 'version'
        modelElement = 'S.462'>
   <UML:TaggedValue.dataValue>
    	1.1
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1734'
        name = 'documentation'
        modelElement = 'S.529'>
   <UML:TaggedValue.dataValue>
    	Check whether the monitored value is stuck.
If it is, a &quot;devation from profile&quot; is reported.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
if ( value == previousValue )
{  counter++;
previousValue = value;
if (counter == stuckThreshold)
{ counter = 0;
return MON_PROFILE_DEVIATION; 
}
else
return NO_MON_PROFILE_DEVIATION; 
}
else
counter = 0;
previousValue = value;   
return NO_MON_PROFILE_DEVIATION; &lt;/PRE&gt;
&lt;p&gt;
The value of &lt;code&gt;previousValue&lt;/code&gt; and &lt;code&gt;counter&lt;/code&gt;
are initialized by the constructor and by method &lt;code&gt;reset&lt;/code&gt;. 
Spurious triggerings can occurr either after a reset or after the
component is created.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1735'
        name = 'see'
        modelElement = 'S.529'>
   <UML:TaggedValue.dataValue>
    	#reset
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1736'
        name = 'see'
        modelElement = 'S.529'>
   <UML:TaggedValue.dataValue>
    	#DC_StuckDataProfile
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1737'
        name = 'param'
        modelElement = 'S.529'>
   <UML:TaggedValue.dataValue>
    	value the value of the monitored variable
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1738'
        name = 'return'
        modelElement = 'S.529'>
   <UML:TaggedValue.dataValue>
    	true if the monitored variable is stuck, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1741'
        name = 'documentation'
        modelElement = 'S.530'>
   <UML:TaggedValue.dataValue>
    	Dummy implementation of a monitoring check that always returns &quot;deviation
from profile detected&quot;.
This operation should never be called since stuck data monitoring checks on
non-integer variables may give unpredictable results due to numerical
precision errors.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1742'
        name = 'param'
        modelElement = 'S.530'>
   <UML:TaggedValue.dataValue>
    	value the value of the monitored variable
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1743'
        name = 'return'
        modelElement = 'S.530'>
   <UML:TaggedValue.dataValue>
    	always returns true
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1746'
        name = 'documentation'
        modelElement = 'S.531'>
   <UML:TaggedValue.dataValue>
    	Instantiate a stuck data profile.
The class identifier is set, the stuck threshold is initialized to 0 to 
signify that the component is not yet configured, and the component is
reset.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1747'
        name = 'documentation'
        modelElement = 'S.532'>
   <UML:TaggedValue.dataValue>
    	Set the stuck threshold.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1748'
        name = 'see'
        modelElement = 'S.532'>
   <UML:TaggedValue.dataValue>
    	#doProfileCheck
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1749'
        name = 'param'
        modelElement = 'S.532'>
   <UML:TaggedValue.dataValue>
    	stuckThreshold the value of the stuck threshold
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1752'
        name = 'documentation'
        modelElement = 'S.533'>
   <UML:TaggedValue.dataValue>
    	Get the stuck thresholde.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1753'
        name = 'see'
        modelElement = 'S.533'>
   <UML:TaggedValue.dataValue>
    	#setStuckThreshold
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1754'
        name = 'return'
        modelElement = 'S.533'>
   <UML:TaggedValue.dataValue>
    	the value of the stuck threshold
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1756'
        name = 'documentation'
        modelElement = 'S.534'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on the monitoring
profile: verify that the stuck threshold has a value greater than zero.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1757'
        name = 'return'
        modelElement = 'S.534'>
   <UML:TaggedValue.dataValue>
    	true if the monitoring profile is configured, false otherwise.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1759'
        name = 'documentation'
        modelElement = 'S.535'>
   <UML:TaggedValue.dataValue>
    	Reset the stuck value profile check. With reference to the 
implementation of method &lt;code&gt;doProfileCheck(TD_Integer)&lt;/code&gt;, a call to
this method causes the variable &lt;code&gt;counter&lt;/code&gt; to be reset to
zero and the variable &lt;code&gt;previousValue&lt;/code&gt; to be reset to 
PREVIOUS_VALUE_INIT.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1761'
        name = 'documentation'
        modelElement = 'S.453'>
   <UML:TaggedValue.dataValue>
    	Base class from which all monitoring profile classes are derived.
A monitoring profile encapsulates a profile against which the value
of a monitored variable must be checked (&lt;i&gt;monitoring check&lt;/i&gt;).
Two versions of the monitoring check are offered by this class,
one for monitored variables of &lt;code&gt;TD_Float&lt;/code&gt; type and one for monitored
variables of &lt;code&gt;TD_Integer&lt;/code&gt; type.
&lt;p&gt;
Monitoring profiles can be enabled or disabled.
A monitoring profile that is disabled will always report:
&quot;no deviation from profile&quot;.
&lt;p&gt;
Monitoring profiles can be linked in sequential
chains. The client only sees one single monitoring profile (the one
at the head of the chain) but its execution can lead to all profiles 
in the chain being executed in sequence. This class defines a &lt;i&gt;next monitoring
profile&lt;/i&gt; attribute that holds the pointer to the next monitoring profile in the
chain. A monitoring profile reports &quot;no profile violation detected&quot; only if
neither itself nor any of the monitoring profiles downstream in the chain of
linked profiles report &quot;no profile violation detected&quot;.
&lt;p&gt;
A violation of a monitoring profile is reported as an event.
&lt;p&gt;
This class is abstract because the implementation of the monitoring
profile is class-specific and must be defined in the derived classes
that implement concrete profiles.
The management of the enable status and the reporting of profile
violation as events is however performed in this base class.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1762'
        name = 'author'
        modelElement = 'S.453'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1763'
        name = 'todo'
        modelElement = 'S.453'>
   <UML:TaggedValue.dataValue>
    	Add an internal variable that to record the reason for the violation
and that concrete monitoring profiles can set to indicate how the profile
was violated (e.g. violation of upper boundary of a range interval). Clients
can then inspect the value of this variable to know the exact reason of the
profile violation.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1764'
        name = 'todo'
        modelElement = 'S.453'>
   <UML:TaggedValue.dataValue>
    	Add a test case to cover the &quot;next monitoring profile&quot; functionality.
This could be obtained by modifying the test case of DC_ProfileList.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1765'
        name = 'todo'
        modelElement = 'S.453'>
   <UML:TaggedValue.dataValue>
    	Monitoring profiles use parameters that are implemented as internal variables.
In practice, these parameters will often have to come from the parameter database.
Two solutions are possible: generators are used to parameterize the concrete 
monitoring profiles classes with respect to the mode of implementation of the
profile parameters. Or aspect programs are used modify the monitoring profile class
as follows: code to set the link to the parameter database is inserted, and 
code to update the value of the internal parameter with the value read from the
parameter database is added at the beginning of method doProfileCheck.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1766'
        name = 'version'
        modelElement = 'S.453'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1767'
        name = 'ingroup'
        modelElement = 'S.453'>
   <UML:TaggedValue.dataValue>
    	FDIR
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1768'
        name = 'documentation'
        modelElement = 'S.537'>
   <UML:TaggedValue.dataValue>
    	Encapsulate the check of the monitored variable value against the
monitoring profile.
This method is called by method &lt;CODE&gt;deviatesFromProfile()&lt;/CODE&gt;
in this same class.
User of monitoring profiles do not see &lt;CODE&gt;method doProfileCheck()&lt;/CODE&gt;,
they only see method
&lt;CODE&gt;deviatesFromProfile()&lt;/CODE&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1769'
        name = 'see'
        modelElement = 'S.537'>
   <UML:TaggedValue.dataValue>
    	#deviatesFromProfile
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1770'
        name = 'param'
        modelElement = 'S.537'>
   <UML:TaggedValue.dataValue>
    	value the value of the monitored variable
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1771'
        name = 'return'
        modelElement = 'S.537'>
   <UML:TaggedValue.dataValue>
    	true if the monitored variable deviates from the monitoring profile, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1774'
        name = 'documentation'
        modelElement = 'S.538'>
   <UML:TaggedValue.dataValue>
    	Version of method &lt;CODE&gt;doProfileCheck()&lt;/CODE&gt; for monitored variables
of integer type.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1775'
        name = 'see'
        modelElement = 'S.538'>
   <UML:TaggedValue.dataValue>
    	#doProfileCheck
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1778'
        name = 'documentation'
        modelElement = 'S.539'>
   <UML:TaggedValue.dataValue>
    	Instantiate a monitoring profile.
The enabled status of the profile is initialized to &quot;enabled&quot;.
The &quot;next monitoring profile&quot; attribute is set to NULL.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1779'
        name = 'documentation'
        modelElement = 'S.540'>
   <UML:TaggedValue.dataValue>
    	Check whether the value of the monitored variable - passed as an argument
to the method - is within
the profile encapsulated by the monitoring profile object.
The check is only done if the monitoring profile object is enabled.
If it is disabled, the method returns true indicating that there is no
deviation from the profile.
After performing the monitoring check encapsulated by this class, 
it is verified whether there are any linked monitoring checks and, if
so, the check value is passed on to them. A return value of &quot;deviation
detected&quot; may indicate either that this check has detected a violation
or that a violation has been detected by the next monitoring profile 
in the chain.
&lt;p&gt;
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
bool outcome = NO_MON_PROFILE_DEVIATION;
if ( isEnabled() )
{ if (doProfileCheck(value))
{ createEventReport(EVT_MON_PROFILE_VIOLATION);
outcome = MON_PROFILE_DEVIATION;
}
}
if ( pNext!=pNULL )     // there is a next monitoring profile 
if ( next-&gt;deviatesFromProfile(value) )
outcome = MON_PROFILE_DEVIATION;
return outcome; &lt;/PRE&gt;
The &lt;CODE&gt;doProfileCheck()&lt;/CODE&gt; method is abstract and encapsulates
the implementation of the profile check.
Thus, this class enforces the management of the enabled status and 
of the &quot;next monitoring profile&quot; but delegates implementation of the
monitoring profile check to derived classes implementing concrete profiles.
An event is created when deviations from the profile are detected.
The event parameter is the class identifier of the monitoring profile
object itself.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1780'
        name = 'param'
        modelElement = 'S.540'>
   <UML:TaggedValue.dataValue>
    	value the value of the monitored variable
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1781'
        name = 'return'
        modelElement = 'S.540'>
   <UML:TaggedValue.dataValue>
    	true if the monitored variable deviates from the monitoring profile,
false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1784'
        name = 'documentation'
        modelElement = 'S.541'>
   <UML:TaggedValue.dataValue>
    	Version of method &lt;CODE&gt;deviatesFromProfile()&lt;/CODE&gt; for monitored
variables of integer type.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1785'
        name = 'see'
        modelElement = 'S.541'>
   <UML:TaggedValue.dataValue>
    	#deviatesFromProfile
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1788'
        name = 'documentation'
        modelElement = 'S.542'>
   <UML:TaggedValue.dataValue>
    	Set the enable status of the monitoring profile.
When the profile is disabled, a call to method &lt;CODE&gt;deviatesFromProfile()&lt;/CODE&gt;
always returns &quot;no deviation from profile&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1789'
        name = 'param'
        modelElement = 'S.542'>
   <UML:TaggedValue.dataValue>
    	enableStatus if true, then the profile is enabled; if false, then
the profile is disabled
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1792'
        name = 'documentation'
        modelElement = 'S.543'>
   <UML:TaggedValue.dataValue>
    	Check the enable status of the monitoring profile.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1793'
        name = 'return'
        modelElement = 'S.543'>
   <UML:TaggedValue.dataValue>
    	true if the profile is enabled, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1795'
        name = 'documentation'
        modelElement = 'S.544'>
   <UML:TaggedValue.dataValue>
    	Set the next monitoring profile.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1796'
        name = 'see'
        modelElement = 'S.544'>
   <UML:TaggedValue.dataValue>
    	#deviatesFromProfile
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1797'
        name = 'param'
        modelElement = 'S.544'>
   <UML:TaggedValue.dataValue>
    	pNextMonitoringProfile the next monitoring profile
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1800'
        name = 'documentation'
        modelElement = 'S.545'>
   <UML:TaggedValue.dataValue>
    	Get the next monitoring profile. If no monitoring profile has been chained
to this one, then a value of pNULL is returned.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1801'
        name = 'see'
        modelElement = 'S.545'>
   <UML:TaggedValue.dataValue>
    	#deviatesFromProfile
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1802'
        name = 'return'
        modelElement = 'S.545'>
   <UML:TaggedValue.dataValue>
    	the next monitoring profile
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1804'
        name = 'documentation'
        modelElement = 'S.546'>
   <UML:TaggedValue.dataValue>
    	Reset the internal state of the monitoring profile to the value it had
immediately after instantiation.
Some monitoring profiles need to keep track of past values of the monitored
variable and therefore have
an internal state.
This method allows this internal state to be reset.
This class offers a default implementation of this method that does not
do anything.
Subclasses may need to override this default implementation.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1806'
        name = 'documentation'
        modelElement = 'S.464'>
   <UML:TaggedValue.dataValue>
    	Base class for monitoring profile components that
build a monitoring check as a function of a range interval. 
The range interval is
characterized by a &lt;i&gt;lower bound&lt;/i&gt; and by an &lt;i&gt;upper bound&lt;/i&gt;
and takes the following form: [lowerBound, upperBound].
The lower and upper bounds are settable parameter. The upper bound
is constrained to be greater than the lower bound.
&lt;p&gt;
This class is abstract because it does not define any specific
monitoring checks. It only provides the services to define the
range interval
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1807'
        name = 'author'
        modelElement = 'S.464'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1808'
        name = 'version'
        modelElement = 'S.464'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1809'
        name = 'documentation'
        modelElement = 'S.549'>
   <UML:TaggedValue.dataValue>
    	Version of method &lt;CODE&gt;doProfileCheck()&lt;/CODE&gt; for monitored variables 
of type TD_Integer. The check is performed by using the &quot;TD_Float&quot; version
of &lt;code&gt;doProfileCheck&lt;/code&gt;.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
return doProfileCheck( (TD_Float)value ); &lt;/PRE&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1810'
        name = 'see'
        modelElement = 'S.549'>
   <UML:TaggedValue.dataValue>
    	#doProfileCheck
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1813'
        name = 'documentation'
        modelElement = 'S.550'>
   <UML:TaggedValue.dataValue>
    	This method shall be implemented by the derived classes.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1816'
        name = 'documentation'
        modelElement = 'S.551'>
   <UML:TaggedValue.dataValue>
    	Instantiate an range monitoring profile.
The lower and upper values are both set
to zero to signify that the component is not yet configured.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1817'
        name = 'documentation'
        modelElement = 'S.552'>
   <UML:TaggedValue.dataValue>
    	Set the lower bound.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1818'
        name = 'param'
        modelElement = 'S.552'>
   <UML:TaggedValue.dataValue>
    	lowerBound the value of the lower bound
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1821'
        name = 'documentation'
        modelElement = 'S.553'>
   <UML:TaggedValue.dataValue>
    	Set the upper bound.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1822'
        name = 'param'
        modelElement = 'S.553'>
   <UML:TaggedValue.dataValue>
    	upperBound the value of the lower bound
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1825'
        name = 'documentation'
        modelElement = 'S.554'>
   <UML:TaggedValue.dataValue>
    	Get the lower bound.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1826'
        name = 'return'
        modelElement = 'S.554'>
   <UML:TaggedValue.dataValue>
    	the value of the lower bound
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1828'
        name = 'documentation'
        modelElement = 'S.555'>
   <UML:TaggedValue.dataValue>
    	Get the upper bound.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1829'
        name = 'return'
        modelElement = 'S.555'>
   <UML:TaggedValue.dataValue>
    	the value of the lower bound
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1831'
        name = 'documentation'
        modelElement = 'S.556'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on the range monitoring
profile: verify that the lower bound is smaller than the upper bound.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1832'
        name = 'return'
        modelElement = 'S.556'>
   <UML:TaggedValue.dataValue>
    	true if the monitoring profile is configured, false otherwise.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1834'
        name = 'documentation'
        modelElement = 'S.457'>
   <UML:TaggedValue.dataValue>
    	Punctual action that performs a &lt;i&gt;recovery action&lt;/i&gt;.
A recovery action is an action that is executed in response to the
detection of a failure. Recovery actions are implemented as a
form of &lt;i&gt;punctual action&lt;/i&gt;. They add to their base class
the &lt;i&gt;next recovery action&lt;/i&gt; attribute and the &lt;i&gt;execution
check&lt;/i&gt;.
&lt;p&gt;
Recovery actions can be linked in sequential
chains. The client only sees one single recovery action (the one
at the head of the chain) but its execution can lead to all actions
in the chain being executed in sequence. The &lt;i&gt;next recovery action&lt;/i&gt;
attribute holds the pointer to the next recovery action in the
chain.
&lt;p&gt;
The execution check is performed before executing the recovery
action. Its implementation is left open and concrete subclasses
can use it to define the conditions under which the execution of
the recovery action is allowed.
&lt;p&gt;
This is an abstract class because it leaves open the definition of
actual actions to be performed by the recovery action component
and the definition of the execution check open.
This class only implements the management of the next recovery
action.
&lt;p&gt;
Punctual actions return an &lt;i&gt;outcome&lt;/i&gt;. The outcome of a
recovery action R is the outcome of the last recovery action in
the chain of recovery actions that has R as its first item.
&lt;p&gt;
&lt;i&gt;Implementation Note:&lt;/i&gt; This could in principle be implemented
as a subclass of &lt;code&gt;ConditionalPunctualAction&lt;/code&gt;. This is
not done because class a failure of the execution check in
class &lt;code&gt;ConditionalPunctualAction&lt;/code&gt; simply leads
to an immediate termination of the punctual action. In the case
of the &lt;code&gt;RecoveryAction&lt;/code&gt; class, instead, a failure
of the execution check leads to an attempt to execute the next
recovery action.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1835'
        name = 'author'
        modelElement = 'S.457'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1836'
        name = 'version'
        modelElement = 'S.457'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1837'
        name = 'ingroup'
        modelElement = 'S.457'>
   <UML:TaggedValue.dataValue>
    	FDIR
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1838'
        name = 'documentation'
        modelElement = 'S.557'>
   <UML:TaggedValue.dataValue>
    	Instantiate a recovery action. The &lt;i&gt;next recovery action&lt;/i&gt; is
set to null.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1839'
        name = 'documentation'
        modelElement = 'S.558'>
   <UML:TaggedValue.dataValue>
    	Set the next recovery action.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1840'
        name = 'see'
        modelElement = 'S.558'>
   <UML:TaggedValue.dataValue>
    	#doAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1841'
        name = 'param'
        modelElement = 'S.558'>
   <UML:TaggedValue.dataValue>
    	pNextRecoveryAction the next recovery action
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1844'
        name = 'documentation'
        modelElement = 'S.559'>
   <UML:TaggedValue.dataValue>
    	Get the next recovery action. If no recovery action has been chained
to this one, then a value of pNULL is returned.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1845'
        name = 'see'
        modelElement = 'S.559'>
   <UML:TaggedValue.dataValue>
    	#doAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1846'
        name = 'return'
        modelElement = 'S.559'>
   <UML:TaggedValue.dataValue>
    	the next recovery action
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1848'
        name = 'documentation'
        modelElement = 'S.560'>
   <UML:TaggedValue.dataValue>
    	Execute the recovery action if the execution check is satisfied
and pass on the execute request to the next recovery action
(if one is defined).
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
outcome = ACTION_CANNOT_EXECUTE;
if ( canExecute() )
outcome = doRecoveryAction()
if ( nextRecoveryAction != pNULL)
outcome = nextRecoveryAction-&gt;execute();
return outcome; &lt;/PRE&gt;
The &lt;CODE&gt;doRecoveryAction()&lt;/CODE&gt; method is abstract and encapsulates
the implementation of the actions associated to this recovery action.
Thus, this class enforces the handing over of execution requests
from one recovery action
to the next but it leaves the definition of the
specific recovery actions to concrete subclasses.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1849'
        name = 'see'
        modelElement = 'S.560'>
   <UML:TaggedValue.dataValue>
    	#setNextRecoveryAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1850'
        name = 'see'
        modelElement = 'S.560'>
   <UML:TaggedValue.dataValue>
    	TD_ActionOutcome
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1851'
        name = 'return'
        modelElement = 'S.560'>
   <UML:TaggedValue.dataValue>
    	the outcome code of the last recovery action to be executed
or ACTION_CANNOT_EXECUTE if no action can be executed
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1853'
        name = 'documentation'
        modelElement = 'S.561'>
   <UML:TaggedValue.dataValue>
    	Encapsulate implementation of the &lt;i&gt;execution check&lt;/i&gt;.
This method is called by method &lt;CODE&gt;doAction()&lt;/CODE&gt; in this same
class. This class provides a default implementation that always
returns &quot;can execute&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1854'
        name = 'see'
        modelElement = 'S.561'>
   <UML:TaggedValue.dataValue>
    	#doAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1855'
        name = 'return'
        modelElement = 'S.561'>
   <UML:TaggedValue.dataValue>
    	true if the action can be executed, false if the action cannot
be executed.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1857'
        name = 'documentation'
        modelElement = 'S.562'>
   <UML:TaggedValue.dataValue>
    	Encapsulate implementation of the concrete recovery actions associated
to this component.
This method is called by method &lt;CODE&gt;doAction()&lt;/CODE&gt; in this same
class.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1858'
        name = 'see'
        modelElement = 'S.562'>
   <UML:TaggedValue.dataValue>
    	#doAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1859'
        name = 'return'
        modelElement = 'S.562'>
   <UML:TaggedValue.dataValue>
    	the outcome code of the punctual action
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1883'
        name = 'documentation'
        modelElement = 'S.568'>
   <UML:TaggedValue.dataValue>
    	This class encapsulates a finite state machine or FSM.
This class implements the &lt;CODE&gt;FSM&lt;/CODE&gt; core component.
&lt;p&gt;
The FSM is responsible for controlling the transition among the states of
the finite state machine and
for controlling the execution of the actions associated to these states.
The states associated to the FSM are loaded into the FSM during the object
configuration.
The states associated to the FSM are represented by objects of type
&lt;CODE&gt;FsmState&lt;/CODE&gt;.
The states associated to the FSM are referred to using integers in the
range [0,N-1] where N is the total
number of states in the FSM.
The 0-th state is by convention the initial state of the FSM.
The &lt;i&gt;current state&lt;/i&gt; is the state that is active at a particular point
in time.
&lt;p&gt;
The FMS is intended to be periodically &lt;i&gt;activated&lt;/i&gt; by an external
entity (perhaps a scheduler).
When it is activated, the FSM executes the actions associated to the
current state and, if appropriate,
it performs a state transition.
State transitions can be either &lt;i&gt;autonomous&lt;/i&gt; or they can be
&lt;i&gt;requested&lt;/i&gt;.
An autonomous state transition takes place when the current state declares
it has terminated all its
actions (its &lt;CODE&gt;isFinished&lt;/CODE&gt; method returns true) and it has a
non-null next state.
In that case, the FSM performs a transition to the next state offered by
the current state.
A requested state transition is started when an outside entity (typically,
an FsmEvent object) calls method
&lt;CODE&gt;makeTransitionRequest&lt;/CODE&gt;.
State transitions take place only when the FSM is activated.
Thus, calls to &lt;code&gt;makeTransitionRequest&lt;/code&gt; should really be seen as requests for
transitions that are buffered and
executed when the FSM is activated.
If several such state transition requests are made, only the last one will
be executed.
A transition - either requested or autonomous - takes place only if all
the following conditions are
satisfied: the transition is enabled, the exit check for the current state
returns &quot;exit OK&quot;, the entry
check for the target state returns &quot;entry OK&quot;.
&lt;p&gt;
Enabling or disabling of state transitions can be done only in the sense
of enabling/disabling the transitions &lt;i&gt;into&lt;/i&gt; a particular state or
of disabling transitions &lt;i&gt;tout court&lt;/i&gt;. That is,
it is not possible to enable/disable transitions &lt;i&gt;between&lt;/i&gt; particular
states.
&lt;p&gt;
State transitions can be disabled at two levels.
It is possible to disable all transitions into a certain target state or
it is possible to disable transitions between
two specific states.
&lt;p&gt;
The FSM creates event reports to record the following occurrences: a state
transition has been performed.
&lt;p&gt;
The initialization sequence of an FSM is as follows: &lt;ul&gt;
&lt;li&gt;The number of states is set by calling &lt;code&gt;setNumberOfStates&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The states are loaded by repeatedly calling &lt;code&gt;setState&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The current state is set to its initial default value by calling
&lt;code&gt;reset&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
In all cases, the &lt;i&gt;event originator&lt;/i&gt; is the FSM component itself.
&lt;p&gt;
The initialization sequence must be performed following the order given above.
The FSM object is intended to be used &quot;as is&quot; and without changes.
All its methods are accordingly declared to be final (i.e. non-virtual).
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1884'
        name = 'author'
        modelElement = 'S.568'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1885'
        name = 'see'
        modelElement = 'S.568'>
   <UML:TaggedValue.dataValue>
    	FsmState
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1886'
        name = 'version'
        modelElement = 'S.568'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1887'
        name = 'ingroup'
        modelElement = 'S.568'>
   <UML:TaggedValue.dataValue>
    	FSM
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1888'
        name = 'documentation'
        modelElement = 'S.589'>
   <UML:TaggedValue.dataValue>
    	Try to perform a state transtion from the current state to the target
state.
The transition is performed if all the following conditions are
satisfied: the transition is enabled, the exit check for the current
state returns &quot;exit OK&quot;, the entry
check for the target state returns &quot;entry OK&quot;.
If a transition is performed, an event report is created to record the
fact.
Event reports are also created when the state transition fails.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
if (!isTransitionEnabled())
{  createEventReport(EVT_FSM_ALL_TRANSITION_DISABLED);
return;
}
if (!isTransitionEnabled(targetState))
{  createEventReport(EVT_FSM_TRANSITION_DISABLED);
return;
}
if (!currentState.canExit())
{  createEventReport(EVT_FSM_EXIT_FAILED);
return;
}
if (!targetState.canEnter())
{  createEventReport(EVT_FSM_ENTER_FAILED)
return;
}
currentState.doExit();
currentState=targetState;
currentState.doInit();
createEventReport(EVT_FSM_TRANSITION);
return; &lt;/PRE&gt;
The index &lt;code&gt;targetState&lt;/code&gt; should denote a legal state (ie. it should
lie in the interval [0,N-1] where N is the total number of states). No check
on its legality is performed.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1889'
        name = 'see'
        modelElement = 'S.589'>
   <UML:TaggedValue.dataValue>
    	#activate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1890'
        name = 'param'
        modelElement = 'S.589'>
   <UML:TaggedValue.dataValue>
    	targetState the target state
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1893'
        name = 'documentation'
        modelElement = 'S.590'>
   <UML:TaggedValue.dataValue>
    	Instantiate a finite state machine (FSM).
The number of states is initialized to an illegal value to signify
that the finite state machine is not yet configured.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1894'
        name = 'documentation'
        modelElement = 'S.591'>
   <UML:TaggedValue.dataValue>
    	Bring the FSM to its initial state (ie the state with index 0) and
enable all state transitions.
Unless the method is called just after the FSM was instantiated, a
termination action is performed on the state in which the FSM is at the
time the method is called. The initialization action is performed on the
initial state.
Finally, a call to this method causes the &lt;code&gt;nextState&lt;/code&gt; array
to be loaded. Element &lt;code&gt;nextState[i]&lt;/code&gt; holds the index of the next
state associated to the i-th state. This array is useful to speed up
execution of an autonomous state transition (see method &lt;code&gt;activate&lt;/code&gt;
in this class). When an autonomous state transition is executed, the
FSM asks the &lt;code&gt;currentState&lt;/code&gt; for its associated
&lt;code&gt;nextState&lt;/code&gt; and makes a transition to this &lt;code&gt;nextState&lt;/code&gt;.
The transition however can be done efficiently only if the target state
is specified through its index. The &lt;code&gt;nextState&lt;/code&gt; array makes
precisely this information available. Note that, as a consequence,
changes to the &lt;code&gt;nextState&lt;/code&gt; associated to a given state
become active only after the FSM has been reset.
&lt;p&gt;
The execution time of this method grows quadratically with the number
of states in the FSM.
&lt;p&gt;
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
for (all states in the FSM)
transitionEnabled[i] = ENABLED;
for (all states in the FSM)
nextState[i] = index of ( state[i].getNextState() );
if (!initialization)
currentState.doExit();
currentState=initialState;
currentState.doInit(); &lt;/PRE&gt;
Note that no exit check is performed on the &lt;code&gt;currentState&lt;/code&gt;
and no entry check is performed on the initial state.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1895'
        name = 'todo'
        modelElement = 'S.591'>
   <UML:TaggedValue.dataValue>
    	the implementation of this method is not robust against any of the
states having been loaded with an illegal nextState. It is not clear
whether this kind of robustness should be built into the method since
an illegal nextState would typically be the result of a configuration
error and the framework classes are not requierd to be robust against
configuration errors (but there should at least be an assertion-level
protection).
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1896'
        name = 'see'
        modelElement = 'S.591'>
   <UML:TaggedValue.dataValue>
    	#activate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1898'
        name = 'documentation'
        modelElement = 'S.592'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on an FSM object: verify
that the number of states
has a legal value and that all FsmState objects have been loaded.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1900'
        name = 'documentation'
        modelElement = 'S.593'>
   <UML:TaggedValue.dataValue>
    	Set the number of states to be managed by the FSM.
The FSM maintains an internal data structure where all FsmState
objects are held.
This method causes memory for this data structure to be allocated and
the data structure to be
initialized.
The number of states must be greater than zero.
&lt;p&gt;
This is an initialization method. It should only be called once.
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1901'
        name = 'param'
        modelElement = 'S.593'>
   <UML:TaggedValue.dataValue>
    	numberOfStates the number of states to be managed by the FSM
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1904'
        name = 'documentation'
        modelElement = 'S.594'>
   <UML:TaggedValue.dataValue>
    	Get the number of states to be managed by the FSM.
If the number of states has not yet been set, a negative value is
returned.
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1905'
        name = 'return'
        modelElement = 'S.594'>
   <UML:TaggedValue.dataValue>
    	the number of states managed by the FSM
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1907'
        name = 'documentation'
        modelElement = 'S.595'>
   <UML:TaggedValue.dataValue>
    	Load the i-th state into the FSM.
The state to be loaded is seen as an instance of the abstract class
&lt;code&gt;FsmState&lt;/code&gt;.
The index &lt;code&gt;i&lt;/code&gt; should denote a legal state (ie. it should
lie in the interval [0,N-1] where N is the total number of states). If
an illegal value of i is used, then the method generates an event report
of type EVT_ILLEGAL_ST and returns without taking any action.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1908'
        name = 'see'
        modelElement = 'S.595'>
   <UML:TaggedValue.dataValue>
    	#setNumberOfStates
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1909'
        name = 'param'
        modelElement = 'S.595'>
   <UML:TaggedValue.dataValue>
    	i the state to be loaded
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1910'
        name = 'param'
        modelElement = 'S.595'>
   <UML:TaggedValue.dataValue>
    	state the FsmState object to be loaded
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1914'
        name = 'documentation'
        modelElement = 'S.596'>
   <UML:TaggedValue.dataValue>
    	Get the FsmState associated to the i-th state of the FSM.
The index &lt;code&gt;i&lt;/code&gt; should denote a legal state (ie. it should
lie in the interval [0,N-1] where N is the total number of states). No check
on its legality is performed.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1915'
        name = 'see'
        modelElement = 'S.596'>
   <UML:TaggedValue.dataValue>
    	#setState
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1916'
        name = 'param'
        modelElement = 'S.596'>
   <UML:TaggedValue.dataValue>
    	i the state indicator
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1917'
        name = 'return'
        modelElement = 'S.596'>
   <UML:TaggedValue.dataValue>
    	the FsmState associated to the i-th state
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1920'
        name = 'documentation'
        modelElement = 'S.597'>
   <UML:TaggedValue.dataValue>
    	Get the current state.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1921'
        name = 'return'
        modelElement = 'S.597'>
   <UML:TaggedValue.dataValue>
    	the current state of the FSM
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1923'
        name = 'documentation'
        modelElement = 'S.598'>
   <UML:TaggedValue.dataValue>
    	Enable/disable all state transitions.
Both requested and autonomous transitions are disabled.
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1924'
        name = 'see'
        modelElement = 'S.598'>
   <UML:TaggedValue.dataValue>
    	#activate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1925'
        name = 'param'
        modelElement = 'S.598'>
   <UML:TaggedValue.dataValue>
    	enabled the transition are disabled if false, enabled if true
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1928'
        name = 'documentation'
        modelElement = 'S.599'>
   <UML:TaggedValue.dataValue>
    	Enable/disable transitions to the &lt;code&gt;toState&lt;/code&gt;-th state.
Both requested and autonomous transitions are disabled.
The index &lt;code&gt;toState&lt;/code&gt; should denote a legal state (ie. it should
lie in the interval [0,N-1] where N is the total number of states). If
an illegal value is used, then the method generates an event report
of type EVT_ILLEGAL_ST and returns without taking any action.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1929'
        name = 'see'
        modelElement = 'S.599'>
   <UML:TaggedValue.dataValue>
    	#activate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1930'
        name = 'param'
        modelElement = 'S.599'>
   <UML:TaggedValue.dataValue>
    	toState the state into which transitions are enabled/disabled
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1931'
        name = 'param'
        modelElement = 'S.599'>
   <UML:TaggedValue.dataValue>
    	enabled the transition is disabled if false, enabled if true
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1935'
        name = 'documentation'
        modelElement = 'S.600'>
   <UML:TaggedValue.dataValue>
    	Check whether state transitions are enabled.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1936'
        name = 'see'
        modelElement = 'S.600'>
   <UML:TaggedValue.dataValue>
    	#setTransitionEnableStatus
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1937'
        name = 'return'
        modelElement = 'S.600'>
   <UML:TaggedValue.dataValue>
    	true if state transitions are enabled, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1939'
        name = 'documentation'
        modelElement = 'S.601'>
   <UML:TaggedValue.dataValue>
    	Check whether a transition from the current state to the argument
target state is enabled.
The index &lt;code&gt;toState&lt;/code&gt; should denote a legal state (ie. it should
lie in the interval [0,N-1] where N is the total number of states). No check
on its legality is performed.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1940'
        name = 'see'
        modelElement = 'S.601'>
   <UML:TaggedValue.dataValue>
    	#activate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1941'
        name = 'param'
        modelElement = 'S.601'>
   <UML:TaggedValue.dataValue>
    	toState the target state
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1942'
        name = 'return'
        modelElement = 'S.601'>
   <UML:TaggedValue.dataValue>
    	true if a transition from the current into the target state is
enabled
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1945'
        name = 'documentation'
        modelElement = 'S.602'>
   <UML:TaggedValue.dataValue>
    	Lodge a request for a transition to the argument target state.
The transition will be considered for execution at the next activation
of the FSM.
If a previous transition request had already been done, it is lost.
Only the last request is preserved and will be considered at
activation time.
The index &lt;code&gt;targetState&lt;/code&gt; should denote a legal state (ie. it should
lie in the interval [0,N-1] where N is the total number of states). If
an illegal value is used, then the method generates an event report
of type EVT_ILLEGAL_ST and returns without taking any action.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1946'
        name = 'see'
        modelElement = 'S.602'>
   <UML:TaggedValue.dataValue>
    	#activate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1947'
        name = 'param'
        modelElement = 'S.602'>
   <UML:TaggedValue.dataValue>
    	targetState the target state for the requested transition
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1950'
        name = 'documentation'
        modelElement = 'S.603'>
   <UML:TaggedValue.dataValue>
    	Activate the FSM: execute the actions associated to the current state
and perform a state transition
if required.
An event report is created when a state transition takes place.
This method would typically be called by an external scheduler.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
if (transition request pending)   // request lodged to make transition
// to some targetState
{  tryTransition(targetState);
currentState.doContinue();
return;
}
if ( (currentState.isFinished()) &amp;&amp;
(currentState.getNextState()!=pNULL) )
tryTransition(currentState.getNextState());
currentState.doContinue();
return; &lt;/PRE&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1951'
        name = 'see'
        modelElement = 'S.603'>
   <UML:TaggedValue.dataValue>
    	#tryTransition
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1953'
        name = 'documentation'
        modelElement = 'S.572'>
   <UML:TaggedValue.dataValue>
    	Dummy configurable FsmState useful for testing purposes. It represents an
FsmState with simple actions and configurable check results.
The actions
associated to the FsmState consist in the incrementation of three counters:
the &lt;i&gt;activation counter&lt;/i&gt;, &lt;i&gt;initialization counter&lt;/i&gt; and the
&lt;i&gt;termination counter&lt;/i&gt;.
The checks associated to the FsmState are implemented
to return user-defined values.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1954'
        name = 'author'
        modelElement = 'S.572'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1955'
        name = 'see'
        modelElement = 'S.572'>
   <UML:TaggedValue.dataValue>
    	CC_FSM
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1956'
        name = 'version'
        modelElement = 'S.572'>
   <UML:TaggedValue.dataValue>
    	1.1
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1957'
        name = 'documentation'
        modelElement = 'S.610'>
   <UML:TaggedValue.dataValue>
    	Instantiate a dummy FsmState object, initialize all the action counters
to zero, the initialization and exit check to true, and the termination
check to false.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1958'
        name = 'documentation'
        modelElement = 'S.611'>
   <UML:TaggedValue.dataValue>
    	Implement dummy continued action: the method increments the activation
counter by 1 returns.
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1959'
        name = 'see'
        modelElement = 'S.611'>
   <UML:TaggedValue.dataValue>
    	FsmState#doContinue
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1961'
        name = 'documentation'
        modelElement = 'S.612'>
   <UML:TaggedValue.dataValue>
    	Return the value set by the user with the last call to
&lt;code&gt;setInitializationCheckValue&lt;/code&gt;
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1962'
        name = 'see'
        modelElement = 'S.612'>
   <UML:TaggedValue.dataValue>
    	CC_FSM#activate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1963'
        name = 'see'
        modelElement = 'S.612'>
   <UML:TaggedValue.dataValue>
    	setInitializationCheckValue
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1964'
        name = 'return'
        modelElement = 'S.612'>
   <UML:TaggedValue.dataValue>
    	true if the continued action associated to this state has been
terminated, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1966'
        name = 'documentation'
        modelElement = 'S.613'>
   <UML:TaggedValue.dataValue>
    	Implement dummy initialization action: the method increments the
initialization counter by 1 returns.
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1967'
        name = 'see'
        modelElement = 'S.613'>
   <UML:TaggedValue.dataValue>
    	FsmState#doInit
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1969'
        name = 'documentation'
        modelElement = 'S.614'>
   <UML:TaggedValue.dataValue>
    	Return the value set by the user with the last call to
&lt;code&gt;setExitCheckValue&lt;/code&gt;
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1970'
        name = 'see'
        modelElement = 'S.614'>
   <UML:TaggedValue.dataValue>
    	CC_FSM#activate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1971'
        name = 'see'
        modelElement = 'S.614'>
   <UML:TaggedValue.dataValue>
    	#setExitCheckValue
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1972'
        name = 'return'
        modelElement = 'S.614'>
   <UML:TaggedValue.dataValue>
    	true if the continued action associated to this state has been
terminated, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1974'
        name = 'documentation'
        modelElement = 'S.615'>
   <UML:TaggedValue.dataValue>
    	Implement dummy exit action: the method increments the exit
counter by 1 returns.
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1975'
        name = 'see'
        modelElement = 'S.615'>
   <UML:TaggedValue.dataValue>
    	FsmState#doExit
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1977'
        name = 'documentation'
        modelElement = 'S.616'>
   <UML:TaggedValue.dataValue>
    	Return the value set by the user with the last call to
&lt;code&gt;setTerminationCheckValue&lt;/code&gt;
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1978'
        name = 'see'
        modelElement = 'S.616'>
   <UML:TaggedValue.dataValue>
    	CC_FSM#activate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1979'
        name = 'see'
        modelElement = 'S.616'>
   <UML:TaggedValue.dataValue>
    	#setTerminationCheckValue
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1980'
        name = 'return'
        modelElement = 'S.616'>
   <UML:TaggedValue.dataValue>
    	true if the continued action associated to this state has been
terminated, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1982'
        name = 'documentation'
        modelElement = 'S.617'>
   <UML:TaggedValue.dataValue>
    	Return the value of the activation counter.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1983'
        name = 'return'
        modelElement = 'S.617'>
   <UML:TaggedValue.dataValue>
    	the value of the activation counter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1985'
        name = 'documentation'
        modelElement = 'S.618'>
   <UML:TaggedValue.dataValue>
    	Return the value of the initialization counter.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1986'
        name = 'return'
        modelElement = 'S.618'>
   <UML:TaggedValue.dataValue>
    	the value of the initialization counter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1988'
        name = 'documentation'
        modelElement = 'S.619'>
   <UML:TaggedValue.dataValue>
    	Return the value of the exit counter.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1989'
        name = 'return'
        modelElement = 'S.619'>
   <UML:TaggedValue.dataValue>
    	the value of the exit counter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1991'
        name = 'documentation'
        modelElement = 'S.620'>
   <UML:TaggedValue.dataValue>
    	Set the return value of the initialization check.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1992'
        name = 'return'
        modelElement = 'S.620'>
   <UML:TaggedValue.dataValue>
    	the value that shall be returned by the next call to the
initialization check
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1995'
        name = 'documentation'
        modelElement = 'S.621'>
   <UML:TaggedValue.dataValue>
    	Set the return value of the exit check.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1996'
        name = 'return'
        modelElement = 'S.621'>
   <UML:TaggedValue.dataValue>
    	the value that shall be returned by the next call to the
exit check
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.1999'
        name = 'documentation'
        modelElement = 'S.622'>
   <UML:TaggedValue.dataValue>
    	Set the return value of the termination check.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2000'
        name = 'return'
        modelElement = 'S.622'>
   <UML:TaggedValue.dataValue>
    	the value that shall be returned by the next call to the
termination check
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2003'
        name = 'documentation'
        modelElement = 'S.577'>
   <UML:TaggedValue.dataValue>
    	Dummy FsmState useful for testing purposes and to represent FsmStates to
which no actions and no checks are associated. The actions
associated to the FsmState are implemented as dummy actions that return
without doing anything. The checks associated to the FsmState are implemented
to always return: &quot;state can be entered&quot;, &quot;state can be exited&quot;, and
&quot;continued action has not yet terminated&quot;. This means that this state
is a stable state that will not be exited unless a state change is
commanded to the FSM.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2004'
        name = 'author'
        modelElement = 'S.577'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2005'
        name = 'see'
        modelElement = 'S.577'>
   <UML:TaggedValue.dataValue>
    	CC_FSM
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2006'
        name = 'version'
        modelElement = 'S.577'>
   <UML:TaggedValue.dataValue>
    	1.1
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2007'
        name = 'documentation'
        modelElement = 'S.623'>
   <UML:TaggedValue.dataValue>
    	Instantiate a dummy FsmState object and initialize the activation counter
to zero.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2008'
        name = 'documentation'
        modelElement = 'S.624'>
   <UML:TaggedValue.dataValue>
    	Implement dummy continued action: the method increments the activation
counter by 1 returns.
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2009'
        name = 'see'
        modelElement = 'S.624'>
   <UML:TaggedValue.dataValue>
    	FsmState#doContinue
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2011'
        name = 'documentation'
        modelElement = 'S.575'>
   <UML:TaggedValue.dataValue>
    	Default component encapsulating an FsmEvent that requests a transition in
the target FSM between two states.
The two states across which the transition is attempted are the
&lt;i&gt;starting state&lt;/i&gt; and the &lt;i&gt;target state&lt;/i&gt;.
Both are configuration parameters for the FsmEvent.
When the FsmEvent is fired, it checks whether the target FSM is in the
starting state and, if it is, it
makes a request for a transition to the target state.
If the target FSM is not in the starting state, no action is taken.
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2012'
        name = 'author'
        modelElement = 'S.575'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2013'
        name = 'version'
        modelElement = 'S.575'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2014'
        name = 'documentation'
        modelElement = 'S.626'>
   <UML:TaggedValue.dataValue>
    	Instantiate an FromFsmEvent object. Set the class identifier and
initialize the starting state.
The starting state is initialized to an illegal values to signify that
the FromFsmEvent is not yet configured.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2015'
        name = 'documentation'
        modelElement = 'S.627'>
   <UML:TaggedValue.dataValue>
    	Setter method for the starting state.
The starting state is expressed as an integer that should be in the
range [0,N-1] where N is the total number of states in the target FSM.
This is an initialization method.
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2016'
        name = 'param'
        modelElement = 'S.627'>
   <UML:TaggedValue.dataValue>
    	startingState the starting state
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2019'
        name = 'documentation'
        modelElement = 'S.628'>
   <UML:TaggedValue.dataValue>
    	Getter method for the starting state.
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2020'
        name = 'return'
        modelElement = 'S.628'>
   <UML:TaggedValue.dataValue>
    	the starting state
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2022'
        name = 'documentation'
        modelElement = 'S.629'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on a repository object:
verify that the starting state has been
loaded and that it has a legal value.
The legality of the starting state is checked by verifying that its
value lies in the range [0,N-1] where N is the total
number of states in the target FSM.
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2024'
        name = 'documentation'
        modelElement = 'S.630'>
   <UML:TaggedValue.dataValue>
    	Execute the FsmEvent: lodge a request to the target FSM to perform a
state transition from the
starting state to the target state.
The request is only lodged if the FSM is in the starting state.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
if (targetFsm.getCurrentState() eq startingState)
targetFsm.makeTransitionRequest(targetState);
return ACTION_SUCCESS;
else
return ACTION_FAILURE; &lt;/PRE&gt;
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2025'
        name = 'return'
        modelElement = 'S.630'>
   <UML:TaggedValue.dataValue>
    	the ACTION_SUCCESS code if the transition request was lodged,
the ACTION_FAILURE code if it was not
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2027'
        name = 'documentation'
        modelElement = 'S.571'>
   <UML:TaggedValue.dataValue>
    	Base class from which all FsmEvents are derived.
An FsmEvent is a &lt;i&gt;punctual action&lt;/i&gt; that, when it is executed, causes
an FSM to attempt a state transition.
The FSM upon which the FsmEvent acts is called the &lt;i&gt;target FSM&lt;/i&gt;.
The FSM state to which the transition is commanded is called the &lt;i&gt;target
state&lt;/i&gt;.
Both the target FSM and target state are encapsulated in the FsmEvent
object as configuration parameters.
This class encapsulate the following FsmEvent execution logic: when the
event is executed, a state
transition request to the target state is made to the target FSM.
Other FsmEvent execution logic would in principle be possible.
For instance, the state transition request might be not just to a certain
target state but from a given starting state to a given target state.
Alternative execution logic can be implemented by subclassing this class
and overriding its &lt;CODE&gt;doAction&lt;/CODE&gt; method.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2028'
        name = 'author'
        modelElement = 'S.571'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2029'
        name = 'version'
        modelElement = 'S.571'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2030'
        name = 'ingroup'
        modelElement = 'S.571'>
   <UML:TaggedValue.dataValue>
    	FSM
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2031'
        name = 'documentation'
        modelElement = 'S.632'>
   <UML:TaggedValue.dataValue>
    	Instantiate an FsmEvent object. Set the class identifier and initialize
the target FSM and the target state.
The target FSM and the target state are initialized to illegal values
to signify that the FsmEvent is not
yet configured.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2032'
        name = 'documentation'
        modelElement = 'S.633'>
   <UML:TaggedValue.dataValue>
    	Setter method for the target FSM.
This is an initialization method.
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2033'
        name = 'param'
        modelElement = 'S.633'>
   <UML:TaggedValue.dataValue>
    	pTargetFsm the target FSM
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2036'
        name = 'documentation'
        modelElement = 'S.634'>
   <UML:TaggedValue.dataValue>
    	Setter method for the target state.
The target state is specified as an index that must lie in the range
[0,N-1] where N is the total number of states in the target FSM.
&lt;p&gt;
This is an initialization method.
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2037'
        name = 'see'
        modelElement = 'S.634'>
   <UML:TaggedValue.dataValue>
    	#isObjectConfigured
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2038'
        name = 'param'
        modelElement = 'S.634'>
   <UML:TaggedValue.dataValue>
    	targetState the target state
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2041'
        name = 'documentation'
        modelElement = 'S.635'>
   <UML:TaggedValue.dataValue>
    	Getter method for the target FSM.
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2042'
        name = 'return'
        modelElement = 'S.635'>
   <UML:TaggedValue.dataValue>
    	the target FSM
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2044'
        name = 'documentation'
        modelElement = 'S.636'>
   <UML:TaggedValue.dataValue>
    	Getter method for the target state.
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2045'
        name = 'see'
        modelElement = 'S.636'>
   <UML:TaggedValue.dataValue>
    	#setTargetState
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2046'
        name = 'return'
        modelElement = 'S.636'>
   <UML:TaggedValue.dataValue>
    	the target state
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2048'
        name = 'documentation'
        modelElement = 'S.637'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on a FsmEvent object:
verify that the target FSM has been
loaded, that the target state has been loaded, and that the loaded
target state has a legal value.
The legality of the target state is checked by verifying that its
value lies in the range [0,N-1] where N is the total
number of states in the target FSM.
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2050'
        name = 'documentation'
        modelElement = 'S.638'>
   <UML:TaggedValue.dataValue>
    	Execute the FsmEvent: lodge a request to the target FSM to perform a
state transition to the target state.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
targetFsm.makeTransitionRequest(targetState);
return ACTION_SUCCESS; &lt;/PRE&gt;
The method assumes that the FsmEvent is correctly configured and that
a target FSM and target state have
been loaded.
No check is made about the current state of the FSM.
Applications that wish to implement a more complex execution logic
should override this method.
Only one return value can be returned by this implementation
signifiying a successful outcome to execution
of the puncutal action.
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2051'
        name = 'see'
        modelElement = 'S.638'>
   <UML:TaggedValue.dataValue>
    	PunctualAction#execute
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2052'
        name = 'return'
        modelElement = 'S.638'>
   <UML:TaggedValue.dataValue>
    	the SUCCESS code for the FsmEvent punctual action
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2054'
        name = 'documentation'
        modelElement = 'S.573'>
   <UML:TaggedValue.dataValue>
    	FsmState that activates an FSM. This FsmState is useful to
implement &quot;nested FSM&quot; where one outer FSM controls one or more
&quot;inner&quot; FSMs. In this case, to each FsmState of the outer FSM,
one of the inner FSMs is associated. The task of the FsmStates is
activate their associated FSMs. This class can be used to implement
one of these FsmStates.
&lt;p&gt;
A &lt;code&gt;DC_NestedFsmActivator&lt;/code&gt; is configured with one parameter:
the &lt;i&gt;target FSM&lt;/i&gt;. The target FSM is the FSM that the FsmState controls
and must periodically activate. The &lt;i&gt;continuation action&lt;/i&gt; of an
&lt;code&gt;DC_NestedFsmActivator&lt;/code&gt; consists in activating the target FSM.
&lt;p&gt;
The &lt;i&gt;initialization action&lt;/i&gt; of the &lt;code&gt;DC_NestedFsmActivator&lt;/code&gt;
is implemented to reset the target FSM.
&lt;p&gt;
All other actions and checks associated to the &lt;code&gt;DC_NestedFsmActivator&lt;/code&gt;
have their default implementations as defined in the base class &lt;code&gt;FsmState&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2055'
        name = 'author'
        modelElement = 'S.573'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2056'
        name = 'see'
        modelElement = 'S.573'>
   <UML:TaggedValue.dataValue>
    	CC_FSM
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2057'
        name = 'version'
        modelElement = 'S.573'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2058'
        name = 'documentation'
        modelElement = 'S.639'>
   <UML:TaggedValue.dataValue>
    	Set the class identifier.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2059'
        name = 'documentation'
        modelElement = 'S.640'>
   <UML:TaggedValue.dataValue>
    	Set the target FSM.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2060'
        name = 'see'
        modelElement = 'S.640'>
   <UML:TaggedValue.dataValue>
    	#doContinue
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2063'
        name = 'documentation'
        modelElement = 'S.641'>
   <UML:TaggedValue.dataValue>
    	Get the target FSM.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2064'
        name = 'see'
        modelElement = 'S.641'>
   <UML:TaggedValue.dataValue>
    	#doContinue
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2066'
        name = 'documentation'
        modelElement = 'S.642'>
   <UML:TaggedValue.dataValue>
    	Activate the target FSM.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2067'
        name = 'see'
        modelElement = 'S.642'>
   <UML:TaggedValue.dataValue>
    	FsmState#doContinue
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2069'
        name = 'documentation'
        modelElement = 'S.643'>
   <UML:TaggedValue.dataValue>
    	Reset the target FSM.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2070'
        name = 'see'
        modelElement = 'S.643'>
   <UML:TaggedValue.dataValue>
    	FsmState#doInit
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2072'
        name = 'documentation'
        modelElement = 'S.644'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check:
verify that the target FSM has been loaded.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2073'
        name = 'return'
        modelElement = 'S.644'>
   <UML:TaggedValue.dataValue>
    	true if the object is configured, false otherwise.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2075'
        name = 'documentation'
        modelElement = 'S.570'>
   <UML:TaggedValue.dataValue>
    	FsmState that activates an FSM. This FsmState is useful to
implement &quot;nested FSM&quot; where one outer FSM controls one or more
&quot;inner&quot; FSMs. In this case, to each FsmState of the outer FSM,
one of the inner FSMs is associated. The task of the FsmStates is
to activate their associated FSMs. This class can be used to implement
one of these FsmStates.
&lt;p&gt;
A &lt;code&gt;DC_NestedFsmActivatorWithEndState&lt;/code&gt; is configured with two parameters:
the &lt;i&gt;target FSM&lt;/i&gt; and the &lt;i&gt;target state index&lt;/i&gt;. The target
FSM is the FSM that the FsmState controls and must periodically
activate. The &lt;i&gt;continuation action&lt;/i&gt; of an &lt;code&gt;DC_NestedFsmActivatorWithEndState&lt;/code&gt;
consists in activating the target FSM.
&lt;p&gt;
The FsmState activates the target FSM until it has reached the
target state. At that point, the FsmState terminates. In other
words, the &lt;i&gt;termination check&lt;/i&gt; of an &lt;code&gt;DC_NestedFsmActivator&lt;/code&gt;
returns &quot;terminated&quot; when the taregt FSM has reached the target state.
&lt;p&gt;
The &lt;i&gt;initialization action&lt;/i&gt; of the &lt;code&gt;DC_NestedFsmActivatorWithEndState&lt;/code&gt;
is implemented to reset the target FSM.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2076'
        name = 'author'
        modelElement = 'S.570'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2077'
        name = 'see'
        modelElement = 'S.570'>
   <UML:TaggedValue.dataValue>
    	CC_FSM
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2078'
        name = 'see'
        modelElement = 'S.570'>
   <UML:TaggedValue.dataValue>
    	DC_NestedFsmActivator
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2079'
        name = 'version'
        modelElement = 'S.570'>
   <UML:TaggedValue.dataValue>
    	1.1
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2080'
        name = 'documentation'
        modelElement = 'S.646'>
   <UML:TaggedValue.dataValue>
    	Set the class identifier. The target state is initialized to an illegal
value to signify that the object is not yet configured.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2081'
        name = 'documentation'
        modelElement = 'S.647'>
   <UML:TaggedValue.dataValue>
    	Set the target state index.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2082'
        name = 'see'
        modelElement = 'S.647'>
   <UML:TaggedValue.dataValue>
    	#isFinished
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2085'
        name = 'documentation'
        modelElement = 'S.648'>
   <UML:TaggedValue.dataValue>
    	Get the target state index.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2086'
        name = 'see'
        modelElement = 'S.648'>
   <UML:TaggedValue.dataValue>
    	#isFinished
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2088'
        name = 'documentation'
        modelElement = 'S.649'>
   <UML:TaggedValue.dataValue>
    	Return true if the target FSM has reached the target state.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2089'
        name = 'see'
        modelElement = 'S.649'>
   <UML:TaggedValue.dataValue>
    	FsmState#isFinished
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2090'
        name = 'return'
        modelElement = 'S.649'>
   <UML:TaggedValue.dataValue>
    	true if the target FSM has reached the target state
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2092'
        name = 'documentation'
        modelElement = 'S.650'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check: verify that the base
class is configured and that the target state has been loaded.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2093'
        name = 'return'
        modelElement = 'S.650'>
   <UML:TaggedValue.dataValue>
    	true if the object is configured, false otherwise.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2095'
        name = 'documentation'
        modelElement = 'S.569'>
   <UML:TaggedValue.dataValue>
    	FsmState that activates an FSM. This FsmState is useful to
implement &quot;nested FSM&quot; where one outer FSM controls one or more
&quot;inner&quot; FSMs. In this case, to each FsmState of the outer FSM,
one of the inner FSMs is associated. The task of the FsmStates is
activate their associated FSMs. This class can be used to implement
one of these FsmStates.
&lt;p&gt;
A &lt;code&gt;DC_NestedFsmActivatorWithExitCheck&lt;/code&gt; is configured with two parameters:
the &lt;i&gt;target FSM&lt;/i&gt; and the &lt;i&gt;target state index&lt;/i&gt;. The target
FSM is the FSM that the FsmState controls and must periodically
activate. The &lt;i&gt;continuation action&lt;/i&gt; of an &lt;code&gt;DC_NestedFsmActivatorWithExitCheck&lt;/code&gt;
consists in activating the target FSM.
The FsmState thus implemented by an
&lt;code&gt;DC_NestedFsmActivatorWithExitCheck&lt;/code&gt; is a stable state that,
barring any external action, never terminates.
&lt;p&gt;
This state performs an &lt;i&gt;exit check&lt;/i&gt; that consists in verifying whether
the target FSM has reached the &lt;i&gt;target state&lt;/i&gt; passed as to the
state as a configuration parameter.
&lt;p&gt;
The &lt;i&gt;initialization action&lt;/i&gt; of the &lt;code&gt;DC_NestedFsmActivatorWithEndState&lt;/code&gt;
is implemented to reset the target FSM.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2096'
        name = 'author'
        modelElement = 'S.569'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2097'
        name = 'see'
        modelElement = 'S.569'>
   <UML:TaggedValue.dataValue>
    	CC_FSM
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2098'
        name = 'see'
        modelElement = 'S.569'>
   <UML:TaggedValue.dataValue>
    	DC_NestedFsmActivator
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2099'
        name = 'version'
        modelElement = 'S.569'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2100'
        name = 'documentation'
        modelElement = 'S.652'>
   <UML:TaggedValue.dataValue>
    	Set the class identifier. The target state is initialized to an illegal
value to signify that the object is not yet configured.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2101'
        name = 'documentation'
        modelElement = 'S.653'>
   <UML:TaggedValue.dataValue>
    	Set the target state index.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2102'
        name = 'see'
        modelElement = 'S.653'>
   <UML:TaggedValue.dataValue>
    	#canExit
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2105'
        name = 'documentation'
        modelElement = 'S.654'>
   <UML:TaggedValue.dataValue>
    	Get the target state index.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2106'
        name = 'see'
        modelElement = 'S.654'>
   <UML:TaggedValue.dataValue>
    	#canExit
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2108'
        name = 'documentation'
        modelElement = 'S.655'>
   <UML:TaggedValue.dataValue>
    	Return true (state can be exited) if the target FSM has reached
the target state.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2109'
        name = 'see'
        modelElement = 'S.655'>
   <UML:TaggedValue.dataValue>
    	FsmState#canExit
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2110'
        name = 'return'
        modelElement = 'S.655'>
   <UML:TaggedValue.dataValue>
    	true if the target FSM has reached the target state
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2112'
        name = 'documentation'
        modelElement = 'S.656'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check: verify that the base
class is configured and that the target state has been loaded.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2113'
        name = 'return'
        modelElement = 'S.656'>
   <UML:TaggedValue.dataValue>
    	true if the object is configured, false otherwise.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2115'
        name = 'documentation'
        modelElement = 'S.574'>
   <UML:TaggedValue.dataValue>
    	FsmState that takes no action and exits immediately. This state is
useful as a placeholder state. The actions
associated to the FsmState are implemented as dummy actions that return
without doing anything. The checks associated to the FsmState are implemented
to always return: &quot;state can be entered&quot;, &quot;state can be exited&quot;, and
&quot;continued action has terminated&quot;. This means that this state
is an unstable state that will be immediately exited.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2116'
        name = 'author'
        modelElement = 'S.574'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2117'
        name = 'see'
        modelElement = 'S.574'>
   <UML:TaggedValue.dataValue>
    	CC_FSM
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2118'
        name = 'version'
        modelElement = 'S.574'>
   <UML:TaggedValue.dataValue>
    	1.1
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2119'
        name = 'documentation'
        modelElement = 'S.657'>
   <UML:TaggedValue.dataValue>
    	Instantiate the FsmState and set its class identifier.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2120'
        name = 'documentation'
        modelElement = 'S.658'>
   <UML:TaggedValue.dataValue>
    	This method returns without doing anything.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2121'
        name = 'see'
        modelElement = 'S.658'>
   <UML:TaggedValue.dataValue>
    	FsmState#doContinue
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2123'
        name = 'documentation'
        modelElement = 'S.659'>
   <UML:TaggedValue.dataValue>
    	This method always returns &quot;state has terminated&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2124'
        name = 'see'
        modelElement = 'S.659'>
   <UML:TaggedValue.dataValue>
    	FsmState#doContinue
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2125'
        name = 'return'
        modelElement = 'S.659'>
   <UML:TaggedValue.dataValue>
    	always return true
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2127'
        name = 'documentation'
        modelElement = 'S.576'>
   <UML:TaggedValue.dataValue>
    	Base class from which all FsmState classes are derived.
An FsmState class encapsulates a state of an finite state machine (FSM).
&lt;p&gt;
This is an abstract class that declares abstract methods to implement: the
actions associated to the
FsmState and the checks associated to the FsmState.
Concrete methods are also defined to implement configuration operations.
&lt;p&gt;
An FsmState can execute three types of actions.
An &lt;i&gt;initialization action&lt;/i&gt; that is a punctual action performed
immediately after the state is entered.
A &lt;i&gt;continuation action&lt;/i&gt; that is an action performed every time the
state is activated.
A &lt;i&gt;termination action&lt;/i&gt; that is a punctual action that is performed
immediately before the state is exited.
This class provides default implementation for the initialization and
termination actions that do not do anything.
&lt;p&gt;
An FsmState performs three types of checks.
An &lt;i&gt;initialization check&lt;/i&gt; that checks whether the state can be
entered.
A &lt;i&gt;exit check&lt;/i&gt; that checks whether the state can be exited.
A &lt;i&gt;termination check&lt;/i&gt; that checks whether the state has terminated
execution and is ready to perform
an autonomous state transition.
This class provides default implementations for the initialization and
exit checks that always return true (check is passed).
&lt;p&gt;
An FsmState holds a reference to a &lt;i&gt;next state&lt;/i&gt;.
This represents the state to which the current state wants to perform an
autonomous transition after it
has performed all its actions.
FsmStates however are &quot;passive&quot; objects and state transitions are under
the control of the FSM.
This class provides a default implementation that returns a null pointer
for the next state signifying that
there is no next state.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2128'
        name = 'author'
        modelElement = 'S.576'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2129'
        name = 'see'
        modelElement = 'S.576'>
   <UML:TaggedValue.dataValue>
    	CC_FSM
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2130'
        name = 'version'
        modelElement = 'S.576'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2131'
        name = 'ingroup'
        modelElement = 'S.576'>
   <UML:TaggedValue.dataValue>
    	FSM
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2132'
        name = 'documentation'
        modelElement = 'S.660'>
   <UML:TaggedValue.dataValue>
    	Instantiate an FsmState object.
The next state is initialized to pNULL.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2133'
        name = 'documentation'
        modelElement = 'S.661'>
   <UML:TaggedValue.dataValue>
    	Perform the entry check and return false if a transition into this
state would put the system
in an inconsistent or otherwise undesirable condition.
Note that the ultimate decision as to whether the state is entered or
not lies with the FSM that could
decide to ignore the return value of canEnter().
This class provides a default implementation that returns true (state
can be entered).
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2134'
        name = 'see'
        modelElement = 'S.661'>
   <UML:TaggedValue.dataValue>
    	CC_FSM#activate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2135'
        name = 'return'
        modelElement = 'S.661'>
   <UML:TaggedValue.dataValue>
    	true if the state can be safely entered.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2137'
        name = 'documentation'
        modelElement = 'S.662'>
   <UML:TaggedValue.dataValue>
    	Perform the initialization action associated to the FsmState.
This method is intended to be called by the FSM immediately after the
state has been entered.
This class provides a default implementation that returns without
doing anything.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2138'
        name = 'see'
        modelElement = 'S.662'>
   <UML:TaggedValue.dataValue>
    	CC_FSM#activate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2140'
        name = 'documentation'
        modelElement = 'S.663'>
   <UML:TaggedValue.dataValue>
    	Perform the exit check and return false if performing a transition out
of the this state would leave
the system in an inconsistent or otherwise undesirable condition.
Note that the ultimate decision as to whether the state is exited or
not lies with the FSM that could
decide to ignore the return value of canExit().
This class provides a default implementation that returns true (state
can be exited).
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2141'
        name = 'see'
        modelElement = 'S.663'>
   <UML:TaggedValue.dataValue>
    	CC_FSM#activate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2142'
        name = 'return'
        modelElement = 'S.663'>
   <UML:TaggedValue.dataValue>
    	true if the manoeuvre can continue execution
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2144'
        name = 'documentation'
        modelElement = 'S.664'>
   <UML:TaggedValue.dataValue>
    	Perform the continued action associated to this state.
This method is intended to be called by the FSM every time it is
activated when this state is the
current state.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2145'
        name = 'see'
        modelElement = 'S.664'>
   <UML:TaggedValue.dataValue>
    	CC_FSM#activate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2147'
        name = 'documentation'
        modelElement = 'S.665'>
   <UML:TaggedValue.dataValue>
    	Perform the exit action associated to this state.
This method is intended to be called by the FSM object just before it
exits this state.
This class provides a default implementation that returns without
doing anything.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2148'
        name = 'see'
        modelElement = 'S.665'>
   <UML:TaggedValue.dataValue>
    	CC_FSM#activate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2150'
        name = 'documentation'
        modelElement = 'S.666'>
   <UML:TaggedValue.dataValue>
    	Perform a termination check and return true if the continued action
associated to this state has
been completed and an autonomous transition to a next state should be
performed.
This class provides a default implementation that always returns &quot;not
terminated&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2151'
        name = 'see'
        modelElement = 'S.666'>
   <UML:TaggedValue.dataValue>
    	CC_FSM#activate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2152'
        name = 'return'
        modelElement = 'S.666'>
   <UML:TaggedValue.dataValue>
    	true if the continued action associated to this state has been
terminated, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2154'
        name = 'documentation'
        modelElement = 'S.667'>
   <UML:TaggedValue.dataValue>
    	Set the next state associated to this state.
This method would normally be called only once during the application
initialization phase.
However, it is not formally classified as an &lt;i&gt;initialization
method&lt;/i&gt; in order to leave the option
open to FsmState objects to dynamically set their next state on the
basis of their termination status.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2155'
        name = 'param'
        modelElement = 'S.667'>
   <UML:TaggedValue.dataValue>
    	pNextState the next state associated to the current state
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2158'
        name = 'documentation'
        modelElement = 'S.668'>
   <UML:TaggedValue.dataValue>
    	Return the next state associated to this state.
If no next state is associated to this state, then the method return
pNULL.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2159'
        name = 'return'
        modelElement = 'S.668'>
   <UML:TaggedValue.dataValue>
    	the next state associated to the current state
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2178'
        name = 'documentation'
        modelElement = 'S.680'>
   <UML:TaggedValue.dataValue>
    	Dynamic factory for components of type: &lt;code&gt;Manoeuvre&lt;/code&gt;.
A &lt;i&gt;dynamic factory&lt;/i&gt; is a component that manages a pool of instances of
components of a certain type. Clients of the factory can require one of these
instances at run-time. After the factory hands over a component instance to its
client, the instance is marked as &quot;in use&quot; and cannot be given to any other
clients. When the requesting client has finished using the instance, it should release
it by marking it as &quot;no longer in use&quot;. This will allow the factory to make it
available to other clients that request it. The &quot;in use&quot; status of the component
instances is controlled through method &lt;code&gt;setInUse&lt;/code&gt; declared on
the component instances.
&lt;p&gt;
A dynamic factory is configured in two steps. The first step is performed
by the factory constructor when the internal data structures to hold the component
instances are created. The second step is performed during application initialization
when the component instances are loaded in the factory. Reconfiguration at run time
during normal application operation is not allowed.
&lt;p&gt;
Dynamic factories are implemented as singletons. They can exist in one single instance
that can be accessed through the &lt;code&gt;getInstance&lt;/code&gt; method.
The one single instance of the class is created the first time that method
getInstance is called. In order to avoid possible disruptions of
real-time behaviour, applications should ensure that this method has been called
at least once before the application enters its operational phase.
&lt;p&gt;
This factory manages the following component instances:&lt;ul&gt;  
&lt;li&gt;Number of instances of type &lt;code&gt;DC_DummyConfigurableManoeuvre&lt;/code&gt;: 1&lt;/li&gt;    
&lt;li&gt;Number of instances of type &lt;code&gt;DC_DummyManoeuvre&lt;/code&gt;: 1&lt;/li&gt;    
&lt;li&gt;Number of instances of type &lt;code&gt;DC_TestPUSConfigurableManoeuvre&lt;/code&gt;: 1&lt;/li&gt;    
&lt;/ul&gt;
The code for this class was automatically generated by an XSL program processing
the XML-based application model.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2179'
        name = 'author'
        modelElement = 'S.680'>
   <UML:TaggedValue.dataValue>
    	Automatically Generated Class
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2180'
        name = 'ingroup'
        modelElement = 'S.680'>
   <UML:TaggedValue.dataValue>
    	Manoeuvre
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2181'
        name = 'see'
        modelElement = 'S.680'>
   <UML:TaggedValue.dataValue>
    	Manoeuvre
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2182'
        name = 'version'
        modelElement = 'S.680'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2183'
        name = 'documentation'
        modelElement = 'S.696'>
   <UML:TaggedValue.dataValue>
    	Instantiate the factory component. The class identifier is set and
the internal data structures to hold the component instances managed
by the factory are created.
This constructor is defined to be protected because this is a singleton
class.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2184'
        name = 'documentation'
        modelElement = 'S.697'>
   <UML:TaggedValue.dataValue>
    	Get the single instance of this singleton class. If the instance does not
yet exist, it is created.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2186'
        name = 'documentation'
        modelElement = 'S.698'>
   <UML:TaggedValue.dataValue>
    	Check that all component instances required by the factory have been loaded.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2187'
        name = 'return'
        modelElement = 'S.698'>
   <UML:TaggedValue.dataValue>
    	true if the component is configured, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2189'
        name = 'documentation'
        modelElement = 'S.699'>
   <UML:TaggedValue.dataValue>
    	Load one instance of type &lt;code&gt;DC_DummyConfigurableManoeuvre&lt;/code&gt; in the
factory. The component instances managed by the factory are internally stored in an
array. This method loads the i-th element of the array. The argument i should lie
in the interval [0,N-1] where N is the number of component instances of type
&lt;code&gt;DC_DummyConfigurableManoeuvre&lt;/code&gt;. The value of N is defined by
the class constructor.
&lt;p&gt;
The &quot;in use&quot; status of a newly loaded component is initialized
to: &quot;component is not in use&quot;.
&lt;p&gt;
This is an initialization method that should only be called during the application
configuration phase.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2190'
        name = 'param'
        modelElement = 'S.699'>
   <UML:TaggedValue.dataValue>
    	i the index in the internal array
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2191'
        name = 'param'
        modelElement = 'S.699'>
   <UML:TaggedValue.dataValue>
    	pItem the component instance
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2195'
        name = 'documentation'
        modelElement = 'S.700'>
   <UML:TaggedValue.dataValue>
    	Return the number of component instances of type &lt;code&gt;DC_DummyConfigurableManoeuvre&lt;/code&gt;
that are currently allocated. A component instance is allocated if its &quot;in use&quot; status is
equal to: &quot;component is in use&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2196'
        name = 'return'
        modelElement = 'S.700'>
   <UML:TaggedValue.dataValue>
    	the number of allocated component instances
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2198'
        name = 'documentation'
        modelElement = 'S.701'>
   <UML:TaggedValue.dataValue>
    	Return the number of component instances of type &lt;code&gt;DC_DummyConfigurableManoeuvre&lt;/code&gt;
that are in the factory. The value returned is the maximum number of component instances of
type &lt;code&gt;DC_DummyConfigurableManoeuvre&lt;/code&gt; that can be allocated.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2199'
        name = 'return'
        modelElement = 'S.701'>
   <UML:TaggedValue.dataValue>
    	the total number of component instances in the factory of
type &lt;code&gt;DC_DummyConfigurableManoeuvre&lt;/code&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2201'
        name = 'documentation'
        modelElement = 'S.702'>
   <UML:TaggedValue.dataValue>
    	Allocate one instance of type &lt;code&gt;DC_DummyConfigurableManoeuvre&lt;/code&gt;.
This method scans all the entries in the factory of type &lt;code&gt;DC_DummyConfigurableManoeuvre&lt;/code&gt;
and returns the first one which is not in use. 
Before being returned to the caller,
the status of the component instance is changed to: &quot;in use&quot;. A client that receives
a component instance through a call to this method, should release the instance when it
no longer needs it. This can be done by calling
method &lt;code&gt;setInUse(false)&lt;/code&gt; on the component itself.
&lt;p&gt;
If no free component instances are found, then the method returns null. Note that no
event report is generated to record the failure to allocate a component instance. Event
reporting is the responsibility of the caller.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2202'
        name = 'return'
        modelElement = 'S.702'>
   <UML:TaggedValue.dataValue>
    	the allocated component instance or null if no free instances were found
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2204'
        name = 'documentation'
        modelElement = 'S.703'>
   <UML:TaggedValue.dataValue>
    	Check whether a non-allocated component instance of type &lt;code&gt;DC_DummyConfigurableManoeuvre&lt;/code&gt;
is available within the factory. If this method return true, then the corresponding
&lt;code&gt;allocate&lt;/code&gt; method is guaranteed to return a non-null value.
The method parameters are used as in the corresponding &lt;code&gt;allocate&lt;/code&gt; method.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2205'
        name = 'see'
        modelElement = 'S.703'>
   <UML:TaggedValue.dataValue>
    	#allocateDC_DummyConfigurableManoeuvre
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2206'
        name = 'return'
        modelElement = 'S.703'>
   <UML:TaggedValue.dataValue>
    	true if free instances of type DC_DummyConfigurableManoeuvre are available,
false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2208'
        name = 'documentation'
        modelElement = 'S.704'>
   <UML:TaggedValue.dataValue>
    	Load one instance of type &lt;code&gt;DC_DummyManoeuvre&lt;/code&gt; in the
factory. The component instances managed by the factory are internally stored in an
array. This method loads the i-th element of the array. The argument i should lie
in the interval [0,N-1] where N is the number of component instances of type
&lt;code&gt;DC_DummyManoeuvre&lt;/code&gt;. The value of N is defined by
the class constructor.
&lt;p&gt;
The &quot;in use&quot; status of a newly loaded component is initialized
to: &quot;component is not in use&quot;.
&lt;p&gt;
This is an initialization method that should only be called during the application
configuration phase.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2209'
        name = 'param'
        modelElement = 'S.704'>
   <UML:TaggedValue.dataValue>
    	i the index in the internal array
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2210'
        name = 'param'
        modelElement = 'S.704'>
   <UML:TaggedValue.dataValue>
    	pItem the component instance
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2214'
        name = 'documentation'
        modelElement = 'S.705'>
   <UML:TaggedValue.dataValue>
    	Return the number of component instances of type &lt;code&gt;DC_DummyManoeuvre&lt;/code&gt;
that are currently allocated. A component instance is allocated if its &quot;in use&quot; status is
equal to: &quot;component is in use&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2215'
        name = 'return'
        modelElement = 'S.705'>
   <UML:TaggedValue.dataValue>
    	the number of allocated component instances
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2217'
        name = 'documentation'
        modelElement = 'S.706'>
   <UML:TaggedValue.dataValue>
    	Return the number of component instances of type &lt;code&gt;DC_DummyManoeuvre&lt;/code&gt;
that are in the factory. The value returned is the maximum number of component instances of
type &lt;code&gt;DC_DummyManoeuvre&lt;/code&gt; that can be allocated.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2218'
        name = 'return'
        modelElement = 'S.706'>
   <UML:TaggedValue.dataValue>
    	the total number of component instances in the factory of
type &lt;code&gt;DC_DummyManoeuvre&lt;/code&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2220'
        name = 'documentation'
        modelElement = 'S.707'>
   <UML:TaggedValue.dataValue>
    	Allocate one instance of type &lt;code&gt;DC_DummyManoeuvre&lt;/code&gt;.
This method scans all the entries in the factory of type &lt;code&gt;DC_DummyManoeuvre&lt;/code&gt;
and returns the first one which is not in use. 
Before being returned to the caller,
the status of the component instance is changed to: &quot;in use&quot;. A client that receives
a component instance through a call to this method, should release the instance when it
no longer needs it. This can be done by calling
method &lt;code&gt;setInUse(false)&lt;/code&gt; on the component itself.
&lt;p&gt;
If no free component instances are found, then the method returns null. Note that no
event report is generated to record the failure to allocate a component instance. Event
reporting is the responsibility of the caller.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2221'
        name = 'return'
        modelElement = 'S.707'>
   <UML:TaggedValue.dataValue>
    	the allocated component instance or null if no free instances were found
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2223'
        name = 'documentation'
        modelElement = 'S.708'>
   <UML:TaggedValue.dataValue>
    	Check whether a non-allocated component instance of type &lt;code&gt;DC_DummyManoeuvre&lt;/code&gt;
is available within the factory. If this method return true, then the corresponding
&lt;code&gt;allocate&lt;/code&gt; method is guaranteed to return a non-null value.
The method parameters are used as in the corresponding &lt;code&gt;allocate&lt;/code&gt; method.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2224'
        name = 'see'
        modelElement = 'S.708'>
   <UML:TaggedValue.dataValue>
    	#allocateDC_DummyManoeuvre
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2225'
        name = 'return'
        modelElement = 'S.708'>
   <UML:TaggedValue.dataValue>
    	true if free instances of type DC_DummyManoeuvre are available,
false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2227'
        name = 'documentation'
        modelElement = 'S.709'>
   <UML:TaggedValue.dataValue>
    	Load one instance of type &lt;code&gt;DC_TestPUSConfigurableManoeuvre&lt;/code&gt; in the
factory. The component instances managed by the factory are internally stored in an
array. This method loads the i-th element of the array. The argument i should lie
in the interval [0,N-1] where N is the number of component instances of type
&lt;code&gt;DC_TestPUSConfigurableManoeuvre&lt;/code&gt;. The value of N is defined by
the class constructor.
&lt;p&gt;
The &quot;in use&quot; status of a newly loaded component is initialized
to: &quot;component is not in use&quot;.
&lt;p&gt;
This is an initialization method that should only be called during the application
configuration phase.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2228'
        name = 'param'
        modelElement = 'S.709'>
   <UML:TaggedValue.dataValue>
    	i the index in the internal array
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2229'
        name = 'param'
        modelElement = 'S.709'>
   <UML:TaggedValue.dataValue>
    	pItem the component instance
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2233'
        name = 'documentation'
        modelElement = 'S.710'>
   <UML:TaggedValue.dataValue>
    	Return the number of component instances of type &lt;code&gt;DC_TestPUSConfigurableManoeuvre&lt;/code&gt;
that are currently allocated. A component instance is allocated if its &quot;in use&quot; status is
equal to: &quot;component is in use&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2234'
        name = 'return'
        modelElement = 'S.710'>
   <UML:TaggedValue.dataValue>
    	the number of allocated component instances
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2236'
        name = 'documentation'
        modelElement = 'S.711'>
   <UML:TaggedValue.dataValue>
    	Return the number of component instances of type &lt;code&gt;DC_TestPUSConfigurableManoeuvre&lt;/code&gt;
that are in the factory. The value returned is the maximum number of component instances of
type &lt;code&gt;DC_TestPUSConfigurableManoeuvre&lt;/code&gt; that can be allocated.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2237'
        name = 'return'
        modelElement = 'S.711'>
   <UML:TaggedValue.dataValue>
    	the total number of component instances in the factory of
type &lt;code&gt;DC_TestPUSConfigurableManoeuvre&lt;/code&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2239'
        name = 'documentation'
        modelElement = 'S.712'>
   <UML:TaggedValue.dataValue>
    	Allocate one instance of type &lt;code&gt;DC_TestPUSConfigurableManoeuvre&lt;/code&gt;.
This method scans all the entries in the factory of type &lt;code&gt;DC_TestPUSConfigurableManoeuvre&lt;/code&gt;
and returns the first one which is not in use. 
Before being returned to the caller,
the status of the component instance is changed to: &quot;in use&quot;. A client that receives
a component instance through a call to this method, should release the instance when it
no longer needs it. This can be done by calling
method &lt;code&gt;setInUse(false)&lt;/code&gt; on the component itself.
&lt;p&gt;
If no free component instances are found, then the method returns null. Note that no
event report is generated to record the failure to allocate a component instance. Event
reporting is the responsibility of the caller.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2240'
        name = 'return'
        modelElement = 'S.712'>
   <UML:TaggedValue.dataValue>
    	the allocated component instance or null if no free instances were found
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2242'
        name = 'documentation'
        modelElement = 'S.713'>
   <UML:TaggedValue.dataValue>
    	Check whether a non-allocated component instance of type &lt;code&gt;DC_TestPUSConfigurableManoeuvre&lt;/code&gt;
is available within the factory. If this method return true, then the corresponding
&lt;code&gt;allocate&lt;/code&gt; method is guaranteed to return a non-null value.
The method parameters are used as in the corresponding &lt;code&gt;allocate&lt;/code&gt; method.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2243'
        name = 'see'
        modelElement = 'S.713'>
   <UML:TaggedValue.dataValue>
    	#allocateDC_TestPUSConfigurableManoeuvre
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2244'
        name = 'return'
        modelElement = 'S.713'>
   <UML:TaggedValue.dataValue>
    	true if free instances of type DC_TestPUSConfigurableManoeuvre are available,
false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2246'
        name = 'documentation'
        modelElement = 'S.682'>
   <UML:TaggedValue.dataValue>
    	This class encapsulates a manoeuvre manager.
The manoeuvre manager is responsible for controlling the execution
of manoeuvres.
Manoeuvres are loaded into the manoeuvre manager and from
that moment onward their execution,
termination, and abortion remain under the control of the manoeuvre
manager.
The manoeuvre manager sees manoeuvres as instances of type
&lt;CODE&gt;Manoeuvre&lt;/CODE&gt;.
&lt;p&gt;
The manoeuvre manager maintains a list of pending manoeuvres.
This is called the &lt;i&gt;pending manoeuvre list&lt;/i&gt;.
The &lt;i&gt;pending manoeuvres&lt;/i&gt; are the manouvres that are currently
loaded into the manoeuvre manager and that
are either executing or awaiting to start execution.
&lt;p&gt;
External entities typically performs three types of operations
upon a manoeuvre manager.
They can &lt;i&gt;load&lt;/i&gt; a new manoeuvre in the manoeuvre manager.
They can &lt;i&gt;abort&lt;/i&gt; execution of an already loaded manoeuvre.
They can &lt;i&gt;activate&lt;/i&gt; the manoeuvre manager to advance the execution
of the pending manoeuvres.
&lt;p&gt;
The manoeuvre manager contributes to the management of the &quot;in use&quot; status of
manoeuvres. More precisely, before unloading a manoeuvre, the manoeuvre
manager marks if as &quot;no longer in use&quot;.
&lt;p&gt;
The manoeuvre manager creates event reports to record the following
occurrences:&lt;ul&gt;
&lt;li&gt;Attempt to load a manoeuvre when the list of pending manoeuvres
is already full&lt;/li&gt;
&lt;li&gt;A new manoeuvre is loaded&lt;/li&gt;
&lt;li&gt;A manoeuvre is unloaded&lt;/li&gt;
&lt;/ul&gt;
In all cases, the &lt;i&gt;event originator&lt;/i&gt; that is passed to the event creation
method is the manoeuvre that is being processed.
Note that the creation of event reports describing
changes of state of the manoeuvre are the responsibility of the
manoeuvres themselves.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2247'
        name = 'author'
        modelElement = 'S.682'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2248'
        name = 'see'
        modelElement = 'S.682'>
   <UML:TaggedValue.dataValue>
    	Manoeuvre
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2249'
        name = 'version'
        modelElement = 'S.682'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2250'
        name = 'ingroup'
        modelElement = 'S.682'>
   <UML:TaggedValue.dataValue>
    	FunctionalityManagers
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2251'
        name = 'ingroup'
        modelElement = 'S.682'>
   <UML:TaggedValue.dataValue>
    	Manoeuvre
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2252'
        name = 'documentation'
        modelElement = 'S.717'>
   <UML:TaggedValue.dataValue>
    	Unload a manoeuvre. The manoeuvre is removed from the list of
pending manoeuvres and will no longer be considered for execution.
The &quot;inUse&quot; status of the manoeuvre is changed to: &quot;manoeuvre not in use&quot;.
&lt;p&gt;
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
. . .       // remove manoeuvre from list of pending manoeuvres
pManoeuvre-&gt;inUse(false)   // mark manoeuvre as &quot;not in use&quot;
createEventReport(EVT_MAN_UNLOADED);
return; &lt;/PRE&gt;
The &lt;code&gt;manId&lt;/code&gt; parameter in the above pseudo-code is a manoeuvre
identifier. This class uses the class identifier of the manoeuvre
component as identifier.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2253'
        name = 'see'
        modelElement = 'S.717'>
   <UML:TaggedValue.dataValue>
    	TD_EventType
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2254'
        name = 'param'
        modelElement = 'S.717'>
   <UML:TaggedValue.dataValue>
    	pManoeuvre the manoeuvre that is loaded
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2257'
        name = 'documentation'
        modelElement = 'S.718'>
   <UML:TaggedValue.dataValue>
    	Instantiate a manoeuvre manager.
The size of the pending manoeuvre list is initialized to an illegal value
to signify that the manoeuvre manager is not yet configured. The class
identifier is set.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2258'
        name = 'documentation'
        modelElement = 'S.719'>
   <UML:TaggedValue.dataValue>
    	Unload all pending manoeuvres (aborting those that are executing).
A reset bring the telecommand manager
to the state where it was immediately after having being configured.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2260'
        name = 'documentation'
        modelElement = 'S.720'>
   <UML:TaggedValue.dataValue>
    	Set the size of the pending manoeuvre list representing the maximum number
of pending manoeuvre that can be managed by the manoeuvre manager.
This method causes the memory for the pending manoeuvre list data structure
to be allocated and the data structure to be initialized. Only positive values
of the manoeuvre list size are legal.
&lt;p&gt;
This is an initialization method. It should be called before the
manoeuvre manager is used the first time and it should not be called more
than once.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2261'
        name = 'param'
        modelElement = 'S.720'>
   <UML:TaggedValue.dataValue>
    	listSize the maximum number of pending manoeuvres that can be
managed by the Manoeuvre Manager. This should be a positive number.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2264'
        name = 'documentation'
        modelElement = 'S.721'>
   <UML:TaggedValue.dataValue>
    	Get the size of the pending manoeuvre list.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2265'
        name = 'see'
        modelElement = 'S.721'>
   <UML:TaggedValue.dataValue>
    	#setPendingManoeuvreListSize
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2266'
        name = 'return'
        modelElement = 'S.721'>
   <UML:TaggedValue.dataValue>
    	the maximum number of pending manoeuvres that can be
managed by the Manoeuvre Manager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2268'
        name = 'documentation'
        modelElement = 'S.722'>
   <UML:TaggedValue.dataValue>
    	Get the number of currently pending manoeuvres.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2269'
        name = 'see'
        modelElement = 'S.722'>
   <UML:TaggedValue.dataValue>
    	#setPendingManoeuvreListSize
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2270'
        name = 'return'
        modelElement = 'S.722'>
   <UML:TaggedValue.dataValue>
    	the number of currently pending manoeuvres
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2272'
        name = 'documentation'
        modelElement = 'S.723'>
   <UML:TaggedValue.dataValue>
    	Load a manoeuvre. When a manoeuvre is loaded, it is inserted in the list
of pending manoeuvres and is then considered for execution by method
&lt;code&gt;activate&lt;/code&gt;. The manoeuvre remains loaded until it has terminated
execution or is aborted.
&lt;p&gt;
If the list of pending manoeuvres is already full, no action is taken
other than the creation of an event report to record the attempted
manoeuvre load.
&lt;p&gt;
The manoeuvre manager creates an event whenever a new manoeuvre is loaded.
&lt;p&gt;
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
if (list of pending manoeuvres is full)    // the manoeuvre list is full
{   createEventReport(EVT_MAN_LIST_FULL);
return;
}
. . .       // insert manoeuvre in list of pending manoeuvres
createEventReport(EVT_MAN_LOADED);
return; &lt;/PRE&gt;
The &lt;code&gt;manId&lt;/code&gt; parameter in the above pseudo-code is a manoeuvre
identifier. This class uses the class identifier of the manoeuvre
component as its identifier.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2273'
        name = 'see'
        modelElement = 'S.723'>
   <UML:TaggedValue.dataValue>
    	TD_EventType
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2274'
        name = 'param'
        modelElement = 'S.723'>
   <UML:TaggedValue.dataValue>
    	pManoeuvre the manoeuvre that is loaded
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2277'
        name = 'documentation'
        modelElement = 'S.724'>
   <UML:TaggedValue.dataValue>
    	Abort a manoeuvre.
An &lt;CODE&gt;abort()&lt;/CODE&gt; request is sent to the manoeuvre and the
manoeuvre is then unloaded.
If the argument manoeuvre is not currently loaded, no action is taken.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
for (all manoeuvre m in the list of pending manoeuvres)
if (m==pManoeuvre) {
pManoeuvre-&gt;abort();
pManoeuvre-&gt;setInUse(false);
. . . // delete pManoeuvre from list of pending manoeuvres);
createEventReport(EVT_MAN_UNLOADED);
}
return; &lt;/PRE&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2278'
        name = 'see'
        modelElement = 'S.724'>
   <UML:TaggedValue.dataValue>
    	TD_EventType
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2279'
        name = 'see'
        modelElement = 'S.724'>
   <UML:TaggedValue.dataValue>
    	Manoeuvre#abort
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2280'
        name = 'param'
        modelElement = 'S.724'>
   <UML:TaggedValue.dataValue>
    	pManoeuvre the manoeuvre to be aborted
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2283'
        name = 'documentation'
        modelElement = 'S.725'>
   <UML:TaggedValue.dataValue>
    	Advance execution of pending manoeuvres.
When this method is called, the manoeuvre manager goes through the list
of pending manoeuvres and processes them in sequence.
This method would typically be called by an external scheduler.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
for (all manoeuvres m in the list of pending manoeuvres)
if ( (!m-&gt;isExecuting()) &amp;&amp; (m-&gt;canStart()) ) {
m-&gt;initialize();
m-&gt;doContinue();
}
else if ( (m-&gt;isExecuting()) &amp;&amp; (m-&gt;canContinue()) )
m-&gt;doContinue();
else if ( (m-&gt;isExecuting()) &amp;&amp; (!m-&gt;canContinue()) )
m-&gt;abort();

if ( m-&gt;isFinished() )
m-&gt;terminate();
unload(m);
} &lt;/PRE&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2285'
        name = 'documentation'
        modelElement = 'S.726'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check: verify that the size of the
pending manoeuvre list has a legal value.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2286'
        name = 'return'
        modelElement = 'S.726'>
   <UML:TaggedValue.dataValue>
    	true if the telecommand manager is configured, false otherwise.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2288'
        name = 'documentation'
        modelElement = 'S.681'>
   <UML:TaggedValue.dataValue>
    	Dummy implementation of the &lt;code&gt;Manoeuvre&lt;/code&gt; abstract class
to be used for testing purposes. This class implements some simple
forms of manoeuvre actions and it allows the return values of the
manoeuvre checks to be configured by the user.
&lt;p&gt;
This class associates three counters to each of the three actions
(&lt;i&gt;initialization action&lt;/i&gt;, &lt;i&gt;continuation action&lt;/i&gt;, and
&lt;i&gt;termination action&lt;/i&gt;) that characterize a manoeuvre.
The counters are initialized to zero
by the constructor and are incremented by one every time the
action is executed.
The return value of the three checks (&lt;i&gt;start check&lt;/i&gt;,
&lt;i&gt;continuation check&lt;/i&gt;, and &lt;i&gt;termination check&lt;/i&gt;) associated
to the manoeuvres can be set be the user. The value of the continuation
check code can also be set by the user.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2289'
        name = 'author'
        modelElement = 'S.681'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2290'
        name = 'version'
        modelElement = 'S.681'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2291'
        name = 'documentation'
        modelElement = 'S.734'>
   <UML:TaggedValue.dataValue>
    	Increment the continuation action counter by one.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2292'
        name = 'see'
        modelElement = 'S.734'>
   <UML:TaggedValue.dataValue>
    	Manoeuvre#doContinue
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2294'
        name = 'documentation'
        modelElement = 'S.735'>
   <UML:TaggedValue.dataValue>
    	Increment the termination action counter by one.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2295'
        name = 'see'
        modelElement = 'S.735'>
   <UML:TaggedValue.dataValue>
    	Manoeuvre#terminate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2297'
        name = 'documentation'
        modelElement = 'S.736'>
   <UML:TaggedValue.dataValue>
    	Instantiate a dummy configurable manoeuvre object.
The counters are initialized to zero; the return values of the start,
continuation and termination check are initialized to false; and the class
identified is set.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2298'
        name = 'documentation'
        modelElement = 'S.737'>
   <UML:TaggedValue.dataValue>
    	Return the value of the start check flag.
The value of the start check flag can be set by the user through method
&lt;code&gt;setCheckStatus&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2299'
        name = 'see'
        modelElement = 'S.737'>
   <UML:TaggedValue.dataValue>
    	#setCheckStatus
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2300'
        name = 'return'
        modelElement = 'S.737'>
   <UML:TaggedValue.dataValue>
    	true if the manoeuvre is ready to start
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2302'
        name = 'documentation'
        modelElement = 'S.738'>
   <UML:TaggedValue.dataValue>
    	Increment the initialization action counter by one.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2304'
        name = 'documentation'
        modelElement = 'S.739'>
   <UML:TaggedValue.dataValue>
    	Return the value of the continuation check flag.
The value of the continuation check flag can be set by the user through method
&lt;code&gt;setCheckStatus&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2305'
        name = 'see'
        modelElement = 'S.739'>
   <UML:TaggedValue.dataValue>
    	#setCheckStatus
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2306'
        name = 'return'
        modelElement = 'S.739'>
   <UML:TaggedValue.dataValue>
    	true if the manoeuvre can continue execution
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2308'
        name = 'documentation'
        modelElement = 'S.740'>
   <UML:TaggedValue.dataValue>
    	Return the value of the termination check flag.
The value of the termination check flag can be set by the user through method
&lt;code&gt;setCheckStatus&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2309'
        name = 'see'
        modelElement = 'S.740'>
   <UML:TaggedValue.dataValue>
    	#setCheckStatus
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2310'
        name = 'return'
        modelElement = 'S.740'>
   <UML:TaggedValue.dataValue>
    	true if the manoeuvre has terminated execution
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2312'
        name = 'documentation'
        modelElement = 'S.741'>
   <UML:TaggedValue.dataValue>
    	Set the value of the start check.
The value set with this method is the value returned by the start check method.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2313'
        name = 'see'
        modelElement = 'S.741'>
   <UML:TaggedValue.dataValue>
    	#canStart
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2314'
        name = 'param'
        modelElement = 'S.741'>
   <UML:TaggedValue.dataValue>
    	startCheck the return value of the start check
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2317'
        name = 'documentation'
        modelElement = 'S.742'>
   <UML:TaggedValue.dataValue>
    	Set the value of the continuation check.
The value set with this method is the value returned by the continuation check method.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2318'
        name = 'see'
        modelElement = 'S.742'>
   <UML:TaggedValue.dataValue>
    	#canContinue
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2319'
        name = 'param'
        modelElement = 'S.742'>
   <UML:TaggedValue.dataValue>
    	continuationCheck the return value of the continuation check
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2322'
        name = 'documentation'
        modelElement = 'S.743'>
   <UML:TaggedValue.dataValue>
    	Set the value of the continuation check code.
The value set with this method is the value returned by method &lt;code&gt;getContinuationCheckCode&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2323'
        name = 'see'
        modelElement = 'S.743'>
   <UML:TaggedValue.dataValue>
    	#canContinue
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2324'
        name = 'param'
        modelElement = 'S.743'>
   <UML:TaggedValue.dataValue>
    	continuationCheckCode the return value of the continuation check
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2327'
        name = 'documentation'
        modelElement = 'S.744'>
   <UML:TaggedValue.dataValue>
    	Get the value of the continuation check code.
In this class, the value of the continuation check code can be set by the user.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2328'
        name = 'see'
        modelElement = 'S.744'>
   <UML:TaggedValue.dataValue>
    	#setContinuationCheckCode
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2329'
        name = 'return'
        modelElement = 'S.744'>
   <UML:TaggedValue.dataValue>
    	he return value of the continuation check
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2331'
        name = 'documentation'
        modelElement = 'S.745'>
   <UML:TaggedValue.dataValue>
    	Set the value of the termination check.
The value set with this method is the value returned by the termination check methods.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2332'
        name = 'see'
        modelElement = 'S.745'>
   <UML:TaggedValue.dataValue>
    	#isFinished
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2333'
        name = 'param'
        modelElement = 'S.745'>
   <UML:TaggedValue.dataValue>
    	terminationCheck the return value of the termination check
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2336'
        name = 'documentation'
        modelElement = 'S.746'>
   <UML:TaggedValue.dataValue>
    	Getter method for the initialization action counter.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2337'
        name = 'see'
        modelElement = 'S.746'>
   <UML:TaggedValue.dataValue>
    	#initialize
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2338'
        name = 'return'
        modelElement = 'S.746'>
   <UML:TaggedValue.dataValue>
    	the initialization action counter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2340'
        name = 'documentation'
        modelElement = 'S.747'>
   <UML:TaggedValue.dataValue>
    	Getter method for the continuation action counter.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2341'
        name = 'see'
        modelElement = 'S.747'>
   <UML:TaggedValue.dataValue>
    	#doInternalContinue
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2342'
        name = 'return'
        modelElement = 'S.747'>
   <UML:TaggedValue.dataValue>
    	the continuation action counter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2344'
        name = 'documentation'
        modelElement = 'S.748'>
   <UML:TaggedValue.dataValue>
    	Getter method for the termination action counter.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2345'
        name = 'see'
        modelElement = 'S.748'>
   <UML:TaggedValue.dataValue>
    	#internalTerminate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2346'
        name = 'return'
        modelElement = 'S.748'>
   <UML:TaggedValue.dataValue>
    	the termination action counter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2348'
        name = 'documentation'
        modelElement = 'S.679'>
   <UML:TaggedValue.dataValue>
    	Dummy implementation of the &lt;code&gt;Manoeuvre&lt;/code&gt; abstract class 
to be used for testing purposes.
This class provides dummy implementation for the abstract methods
declared by its base class. It does not implement any behaviour 
beyond that which it inherits from its base class.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2349'
        name = 'author'
        modelElement = 'S.679'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2350'
        name = 'version'
        modelElement = 'S.679'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2351'
        name = 'documentation'
        modelElement = 'S.749'>
   <UML:TaggedValue.dataValue>
    	Implement a dummy continuation action. This method returns without
doing anything.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2352'
        name = 'see'
        modelElement = 'S.749'>
   <UML:TaggedValue.dataValue>
    	Manoeuvre#doContinue
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2354'
        name = 'documentation'
        modelElement = 'S.750'>
   <UML:TaggedValue.dataValue>
    	Construct a dummy manoeuvre. The class identifier is set.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2355'
        name = 'documentation'
        modelElement = 'S.751'>
   <UML:TaggedValue.dataValue>
    	Implement a dummy termination check that always returns 
&quot;manoeuvre can terminate&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2356'
        name = 'return'
        modelElement = 'S.751'>
   <UML:TaggedValue.dataValue>
    	true if the manoeuvre has terminated execution
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2358'
        name = 'documentation'
        modelElement = 'S.685'>
   <UML:TaggedValue.dataValue>
    	Punctual action that launches a manoeuvre.
The action associated to this punctual action consists in loading
manoeuvre in the manoeuvre manager. The manoeuvre to be loaded
is a configuration parameter.
This punctual action is useful to model an action that consists
in triggering other actions that extend over time and which
therefore cannot be directly executed by the punctual action
component itself. In such a case, the actions that extend over a
time interval can be encoded in a manoeuvre component.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2359'
        name = 'author'
        modelElement = 'S.685'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2360'
        name = 'see'
        modelElement = 'S.685'>
   <UML:TaggedValue.dataValue>
    	Manoeuvre
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2361'
        name = 'version'
        modelElement = 'S.685'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2362'
        name = 'documentation'
        modelElement = 'S.752'>
   <UML:TaggedValue.dataValue>
    	Instantiate a punctual action. The call identifier is set. The
manoeuvre manager and the manoeuvre are initialized to illegal
values to signify that the component is not yet configured.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2363'
        name = 'documentation'
        modelElement = 'S.753'>
   <UML:TaggedValue.dataValue>
    	Setter method for the manoeuvre manager into which the target
manoeuvre is to be loaded.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2364'
        name = 'see'
        modelElement = 'S.753'>
   <UML:TaggedValue.dataValue>
    	#doAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2365'
        name = 'param'
        modelElement = 'S.753'>
   <UML:TaggedValue.dataValue>
    	pManMan the manoeuvre manager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2368'
        name = 'documentation'
        modelElement = 'S.754'>
   <UML:TaggedValue.dataValue>
    	Getter method for the manoeuvre manager.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2369'
        name = 'see'
        modelElement = 'S.754'>
   <UML:TaggedValue.dataValue>
    	#setManoeuvreManager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2370'
        name = 'return'
        modelElement = 'S.754'>
   <UML:TaggedValue.dataValue>
    	pManMan the manoeuvre manager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2372'
        name = 'documentation'
        modelElement = 'S.755'>
   <UML:TaggedValue.dataValue>
    	Setter method for the manoeuvre to be loaded into the manoeuvre
manager.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2373'
        name = 'see'
        modelElement = 'S.755'>
   <UML:TaggedValue.dataValue>
    	#doAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2374'
        name = 'param'
        modelElement = 'S.755'>
   <UML:TaggedValue.dataValue>
    	pMan the manoeuvre
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2377'
        name = 'documentation'
        modelElement = 'S.756'>
   <UML:TaggedValue.dataValue>
    	Getter method for the manoeuvre.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2378'
        name = 'see'
        modelElement = 'S.756'>
   <UML:TaggedValue.dataValue>
    	#doAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2379'
        name = 'return'
        modelElement = 'S.756'>
   <UML:TaggedValue.dataValue>
    	pManMan the manoeuvre manager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2381'
        name = 'documentation'
        modelElement = 'S.757'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check: verify that the manoeuvre
and manoeuvre manager have been loaded.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2382'
        name = 'return'
        modelElement = 'S.757'>
   <UML:TaggedValue.dataValue>
    	true if the object is configured, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2384'
        name = 'documentation'
        modelElement = 'S.758'>
   <UML:TaggedValue.dataValue>
    	Load the manoeuvre in the manoeuvre manager. This method always
return &quot;action successfully executed&quot;. Note that reporting of
possible failures
related to the loading or execution of the manoeuvre should be
the responsibility of the manoeuvre manager.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2385'
        name = 'see'
        modelElement = 'S.758'>
   <UML:TaggedValue.dataValue>
    	PunctualAction#execute
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2386'
        name = 'see'
        modelElement = 'S.758'>
   <UML:TaggedValue.dataValue>
    	TD_ActionOutcome
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2387'
        name = 'return'
        modelElement = 'S.758'>
   <UML:TaggedValue.dataValue>
    	always returns ACTION_SUCCESS
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2389'
        name = 'documentation'
        modelElement = 'S.686'>
   <UML:TaggedValue.dataValue>
    	Test implementation of the &lt;code&gt;PUSManoeuvre&lt;/code&gt; abstract class
to be used for testing purposes. This class implements some simple
forms of manoeuvre actions and it allows the return values of the
manoeuvre checks to be configured by the user.
&lt;p&gt;
This class associates three counters to each of the three actions
(&lt;i&gt;initialization action&lt;/i&gt;, &lt;i&gt;continuation action&lt;/i&gt;, and
&lt;i&gt;termination action&lt;/i&gt;) that characterize a manoeuvre.
The counters are initialized to zero
by the constructor and are incremented by one every time the
action is executed. Execution of the continuation action also causes
the &lt;i&gt;progress event generation service&lt;/i&gt; to be called.
The return value of the three checks (&lt;i&gt;start check&lt;/i&gt;,
&lt;i&gt;continuation check&lt;/i&gt;, and &lt;i&gt;termination check&lt;/i&gt;) associated
to the manoeuvres can be set be the user. The value of the continuation
check code can also be set by the user.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2390'
        name = 'author'
        modelElement = 'S.686'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2391'
        name = 'version'
        modelElement = 'S.686'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2392'
        name = 'documentation'
        modelElement = 'S.766'>
   <UML:TaggedValue.dataValue>
    	Increment the continuation action counter by one and call the 
&lt;i&gt;progress event generation service&lt;/i&gt;. A pseudo-code implementation
of this method is as follows:&lt;pre&gt;
continuationActionCounter++;
generateProgressEvent();&lt;/pre&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2393'
        name = 'see'
        modelElement = 'S.766'>
   <UML:TaggedValue.dataValue>
    	PUSManoeuvre#generateProgressEvent
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2394'
        name = 'see'
        modelElement = 'S.766'>
   <UML:TaggedValue.dataValue>
    	Manoeuvre#doContinue
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2396'
        name = 'documentation'
        modelElement = 'S.767'>
   <UML:TaggedValue.dataValue>
    	Increment the termination action counter by one.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2397'
        name = 'see'
        modelElement = 'S.767'>
   <UML:TaggedValue.dataValue>
    	Manoeuvre#terminate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2399'
        name = 'documentation'
        modelElement = 'S.768'>
   <UML:TaggedValue.dataValue>
    	Instantiate a test PUS configurable manoeuvre object.
The counters are initialized to zero; the return values of the start,
continuation and termination check are initialized to false; and the class
identified is set.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2400'
        name = 'documentation'
        modelElement = 'S.769'>
   <UML:TaggedValue.dataValue>
    	Return the value of the start check flag.
The value of the start check flag can be set by the user through method
&lt;code&gt;setCheckStatus&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2401'
        name = 'see'
        modelElement = 'S.769'>
   <UML:TaggedValue.dataValue>
    	#setCheckStatus
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2402'
        name = 'return'
        modelElement = 'S.769'>
   <UML:TaggedValue.dataValue>
    	true if the manoeuvre is ready to start
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2404'
        name = 'documentation'
        modelElement = 'S.770'>
   <UML:TaggedValue.dataValue>
    	Increment the initialization action counter by one.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2406'
        name = 'documentation'
        modelElement = 'S.771'>
   <UML:TaggedValue.dataValue>
    	Return the value of the continuation check flag.
The value of the continuation check flag can be set by the user through method
&lt;code&gt;setCheckStatus&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2407'
        name = 'see'
        modelElement = 'S.771'>
   <UML:TaggedValue.dataValue>
    	#setCheckStatus
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2408'
        name = 'return'
        modelElement = 'S.771'>
   <UML:TaggedValue.dataValue>
    	true if the manoeuvre can continue execution
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2410'
        name = 'documentation'
        modelElement = 'S.772'>
   <UML:TaggedValue.dataValue>
    	Return the value of the termination check flag.
The value of the termination check flag can be set by the user through method
&lt;code&gt;setCheckStatus&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2411'
        name = 'see'
        modelElement = 'S.772'>
   <UML:TaggedValue.dataValue>
    	#setCheckStatus
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2412'
        name = 'return'
        modelElement = 'S.772'>
   <UML:TaggedValue.dataValue>
    	true if the manoeuvre has terminated execution
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2414'
        name = 'documentation'
        modelElement = 'S.773'>
   <UML:TaggedValue.dataValue>
    	Set the value of the start check.
The value set with this method is the value returned by the start check method.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2415'
        name = 'see'
        modelElement = 'S.773'>
   <UML:TaggedValue.dataValue>
    	#canStart
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2416'
        name = 'param'
        modelElement = 'S.773'>
   <UML:TaggedValue.dataValue>
    	startCheck the return value of the start check
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2419'
        name = 'documentation'
        modelElement = 'S.774'>
   <UML:TaggedValue.dataValue>
    	Set the value of the continuation check.
The value set with this method is the value returned by the continuation check method.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2420'
        name = 'see'
        modelElement = 'S.774'>
   <UML:TaggedValue.dataValue>
    	#canContinue
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2421'
        name = 'param'
        modelElement = 'S.774'>
   <UML:TaggedValue.dataValue>
    	continuationCheck the return value of the continuation check
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2424'
        name = 'documentation'
        modelElement = 'S.775'>
   <UML:TaggedValue.dataValue>
    	Set the value of the continuation check code.
The value set with this method is the value returned by method &lt;code&gt;getContinuationCheckCode&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2425'
        name = 'see'
        modelElement = 'S.775'>
   <UML:TaggedValue.dataValue>
    	#canContinue
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2426'
        name = 'param'
        modelElement = 'S.775'>
   <UML:TaggedValue.dataValue>
    	continuationCheckCode the return value of the continuation check
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2429'
        name = 'documentation'
        modelElement = 'S.776'>
   <UML:TaggedValue.dataValue>
    	Get the value of the continuation check code.
In this class, the value of the continuation check code can be set by the user.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2430'
        name = 'see'
        modelElement = 'S.776'>
   <UML:TaggedValue.dataValue>
    	#setContinuationCheckCode
return the return value of the continuation check
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2432'
        name = 'documentation'
        modelElement = 'S.777'>
   <UML:TaggedValue.dataValue>
    	Set the value of the termination check.
The value set with this method is the value returned by the termination check methods.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2433'
        name = 'see'
        modelElement = 'S.777'>
   <UML:TaggedValue.dataValue>
    	#isFinished
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2434'
        name = 'param'
        modelElement = 'S.777'>
   <UML:TaggedValue.dataValue>
    	terminationCheck the return value of the termination check
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2437'
        name = 'documentation'
        modelElement = 'S.778'>
   <UML:TaggedValue.dataValue>
    	Getter method for the initialization action counter.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2438'
        name = 'see'
        modelElement = 'S.778'>
   <UML:TaggedValue.dataValue>
    	#initialize
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2439'
        name = 'return'
        modelElement = 'S.778'>
   <UML:TaggedValue.dataValue>
    	the initialization action counter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2441'
        name = 'documentation'
        modelElement = 'S.779'>
   <UML:TaggedValue.dataValue>
    	Getter method for the continuation action counter.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2442'
        name = 'see'
        modelElement = 'S.779'>
   <UML:TaggedValue.dataValue>
    	#doInternalContinue
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2443'
        name = 'return'
        modelElement = 'S.779'>
   <UML:TaggedValue.dataValue>
    	the continuation action counter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2445'
        name = 'documentation'
        modelElement = 'S.780'>
   <UML:TaggedValue.dataValue>
    	Getter method for the termination action counter.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2446'
        name = 'see'
        modelElement = 'S.780'>
   <UML:TaggedValue.dataValue>
    	#internalTerminate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2447'
        name = 'return'
        modelElement = 'S.780'>
   <UML:TaggedValue.dataValue>
    	the termination action counter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2449'
        name = 'documentation'
        modelElement = 'S.684'>
   <UML:TaggedValue.dataValue>
    	Base class from which all manoeuvre classes are derived.
A manoeuvre is primarily characterized by its ability to encapsulate
an action that takes place over a period of time. In this sense, it
is opposed to a &lt;i&gt;punctual action&lt;/i&gt; which instead encapsulates
an action that takes place &quot;in one shot&quot;.
More specifically, manoeuvres are
characterized by three types of &lt;i&gt;actions&lt;/i&gt; and three
types of &lt;i&gt;checks&lt;/i&gt; which they can
perform. The actions are:&lt;ul&gt;
&lt;li&gt;An &lt;i&gt;initialization action&lt;/i&gt; that is executed once when the
manoeuvre first becomes due for execution.&lt;/li&gt;
&lt;li&gt;A &lt;i&gt;continuation action&lt;/i&gt; that is executed repeatedly until the
manoeuvre has terminated execution.&lt;/li&gt;
&lt;li&gt;A &lt;i&gt;termination action&lt;/i&gt; that is executed once when the manoeuvre
has terminated execution.&lt;/li&gt;
&lt;/ul&gt;
An &lt;i&gt;activation step counter&lt;/i&gt; is associated to the continuation
action. This is initialized to zero when the manoeuvre starts execution
and is incremented by one every time the continuation action is advanced
by a step (i.e. every time method &lt;code&gt;doInternalContinue&lt;/code&gt; is
executed). This counter helps other components keep track of the progress
of the manoeuvre.
&lt;p&gt;
The three checks that are associated to a manoeuvre are:&lt;ul&gt;
&lt;li&gt;A &lt;i&gt;start check&lt;/i&gt; to be performed just before launching
execution of a manoeuvre. It verifies whether the manoeuvre is
ready to start execution.&lt;/li&gt;
&lt;li&gt;A &lt;i&gt;continuation check&lt;/i&gt; to be performed while the manoeuvre
is executing to verify whether continuation can be continued
or whether the manoeuvre should be aborted. &lt;/li&gt;
&lt;li&gt;A &lt;i&gt;termination check&lt;/i&gt; to be performed before terminating
execution of the manoeuvre. It checks whether the manoeuvre has
terminated its execution and whether it should be terminated.
&lt;/ul&gt;
This class is abstract. Concrete manoeuvre actions and manoeuvre
checks are defined by subclasses. This class provides either default
trivial implementations or leaves the implementation of the actions
and checks undefined.
&lt;p&gt;
Execution of a manoeuvre as defined here must respect certain
constraints (e.g. a start check should be performed before
starting execution of a manoeuvre, a termination action should
be performed before terminating execution of a manoeuvre, etc).
Manoeuvres are defined here as low-level components that cannot
take responsibility for their own execution. They are intended
to be &lt;i&gt;loaded&lt;/i&gt; into some other component that is then
responsible for calling their methods in the correct sequence
and in compliance with the constraints defined by the present
interface. This class implements assertions that, to some
extent, ensure that the manoeuvre is used correctly but
responsibility for correct usage lies with the component managing
a manoeuvre.
In the OBS Framework, manoeuvres are normally loaded in the
&lt;i&gt;manoeuvre manager&lt;/i&gt; (instance of class &lt;code&gt;CC_ManoeuvreManager&lt;/code&gt;)
which then becomes responsible for their execution.
&lt;p&gt;
This class additionally manages three boolean flags: &lt;i&gt;isExecuting&lt;/i&gt;,
&lt;i&gt;inUse&lt;/i&gt;, and &lt;i&gt;isSuspended&lt;/i&gt;.
Flag isExecuting is set to true immediately after the execution of
the manoeuvre starts and is reset
to false when execution has terminated or the manoeuvre is aborted.
This flag is useful for external entities that wish to check whether
a manoeuvre is actually executing.
&lt;p&gt;
Manoeuvres are intended to be used by some other components. Since they have
an internal state, they cannot normally be used by more than one component at
a time. Flag inUse helps prevent this type of conflict. The component that
uses the manoeuvre should set it when it starts using it and should reset it
when it finishes using it. Normally, the management of the inUse flag is done
jointly by the manoeuvre factory component (instance of class &lt;code&gt;CC_ManoeuvreFactory&lt;/code&gt;)
and by the manoeuvre manager.
&lt;p&gt;
Flag isSuspended is set to true to signify that execution of the manoeuvre
should be temporarily suspended (&quot;the manoeuvre is held&quot;). Execution
resumes when the flag is reset to false. When a manoeuvre is suspended,
its continuation action is not performed but this is the only
effect of suspension: the other two actions and all three checks remain
unaffected. However, when a manoeuvre terminates or aborts, its
isSuspended flag is set to false.
&lt;p&gt;
Certain changes in the execution state of a manoeuvre should be
recorded through event reports. This class is responsible for
creating event reports in the following cases: &lt;ul&gt;
&lt;li&gt;The manoeuvre is suspended or resumed (its isSuspended flag changes
value)&lt;/li&gt;
&lt;li&gt;The manoeuvre starts and terminates execution (its isExecuting
flag changes value)&lt;/li&gt;
&lt;li&gt;The manoeuvre is aborted&lt;/li&gt;
&lt;/ul&gt;
Manoeuvres can be &lt;i&gt;disabled&lt;/i&gt; and &lt;i&gt;enabled&lt;/i&gt;.
When a manoeuvre is disabled, its start check is guaranteed to
return: &quot;manoeuvre cannot start&quot;. This class is responsible
for the management of the enable status and for ensuring that
this constraint is respected. Note that this means that changes
in the enable status of a manoeuvre have no effect upon
manoeuvres that are already executiong.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2450'
        name = 'author'
        modelElement = 'S.684'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2451'
        name = 'see'
        modelElement = 'S.684'>
   <UML:TaggedValue.dataValue>
    	CC_ManoeuvreFactory
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2452'
        name = 'see'
        modelElement = 'S.684'>
   <UML:TaggedValue.dataValue>
    	CC_ManoeuvreManager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2453'
        name = 'version'
        modelElement = 'S.684'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2454'
        name = 'ingroup'
        modelElement = 'S.684'>
   <UML:TaggedValue.dataValue>
    	Manoeuvre
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2455'
        name = 'documentation'
        modelElement = 'S.786'>
   <UML:TaggedValue.dataValue>
    	Encapsulate the implementation of the continuation actions to be carried
out by the manoeure.
This method is called by method &lt;CODE&gt;doContinue()&lt;/CODE&gt; in this same class.
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2456'
        name = 'see'
        modelElement = 'S.786'>
   <UML:TaggedValue.dataValue>
    	#doContinue
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2458'
        name = 'documentation'
        modelElement = 'S.787'>
   <UML:TaggedValue.dataValue>
    	Encapsulate the implementation of the actions to be carried out by the
manoeure after it is aborted.
This method is called by method &lt;CODE&gt;abort()&lt;/CODE&gt; in this same class.
This class offers a default implementation that returns without taking
any actions.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2459'
        name = 'see'
        modelElement = 'S.787'>
   <UML:TaggedValue.dataValue>
    	#abort
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2461'
        name = 'documentation'
        modelElement = 'S.788'>
   <UML:TaggedValue.dataValue>
    	Encapsulate the implementation of the termination actions associated to
this manoeuvre.
This method is called by method &lt;CODE&gt;terminate()&lt;/CODE&gt; in this same class.
This class offers a default implementation that returns without taking
any action.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2462'
        name = 'see'
        modelElement = 'S.788'>
   <UML:TaggedValue.dataValue>
    	#terminate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2464'
        name = 'documentation'
        modelElement = 'S.789'>
   <UML:TaggedValue.dataValue>
    	Encapsulate the implementation of the start check associated to
this manoeuvre.
This method is called by method &lt;CODE&gt;canStart()&lt;/CODE&gt; in this same class.
This class offers a default implementation that returns &quot;manoeuvre
can start&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2465'
        name = 'see'
        modelElement = 'S.789'>
   <UML:TaggedValue.dataValue>
    	#canStart
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2466'
        name = 'return'
        modelElement = 'S.789'>
   <UML:TaggedValue.dataValue>
    	true if the manoeuvre can start execution, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2468'
        name = 'documentation'
        modelElement = 'S.790'>
   <UML:TaggedValue.dataValue>
    	Instantiate a manoeuvre object.
The enabled status of the manoeuvre is initialized to &quot;enabled&quot;.
The isExecuting, isInUse and isSuspended flags are initialized to false.
The activation step counter is initialized to zero.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2469'
        name = 'documentation'
        modelElement = 'S.791'>
   <UML:TaggedValue.dataValue>
    	Perform the start check for the manoeuvre: return true if the manoeuvre is
ready to start execution.
This method should be called only on a manoeuvre that is already in used
but that is not yet executing.
Execution of a manoeuvre should be initiated only when this check has been
performed and has returned: &quot;manoeuvre ready to start&quot;.
If a manoeuvre is disabled, the check always returns: &quot;manoeuvre cannot
start&quot;. Otherwise, a manouvre-specific check is performed.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
if ( !isEnabled() )
return MAN_CANNOT_START;
else
return internalCanStart(); &lt;/PRE&gt;
The &lt;CODE&gt;internalCanStart()&lt;/CODE&gt; method is virtual and encapsulates
the implementation of the manoeuvre-specific part of the start check.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2470'
        name = 'see'
        modelElement = 'S.791'>
   <UML:TaggedValue.dataValue>
    	CC_ManoeuvreManager#activate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2471'
        name = 'return'
        modelElement = 'S.791'>
   <UML:TaggedValue.dataValue>
    	true if the manoeuvre is ready to start
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2473'
        name = 'documentation'
        modelElement = 'S.792'>
   <UML:TaggedValue.dataValue>
    	Perform the initialization action associated to this manoeuvre.
This method should be called on a manoeuvre that is alredy in use but
not yet executing. It should be called immediately before the execution of the
manoeuvre is initiated. It should be called only when the execution check
returns &quot;manoeuvre can start&quot;.
This class offers a default implementation that returns without doing anything.
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2474'
        name = 'see'
        modelElement = 'S.792'>
   <UML:TaggedValue.dataValue>
    	CC_ManoeuvreManager#activate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2475'
        name = 'see'
        modelElement = 'S.792'>
   <UML:TaggedValue.dataValue>
    	#canStart
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2477'
        name = 'documentation'
        modelElement = 'S.793'>
   <UML:TaggedValue.dataValue>
    	Perform the continuation check for the manoeuvre: return true if the
manoeuvre can safely continue execution.
A manoeuvre that whose continuation check returns &quot;cannot continue
execution&quot; should normally be aborted (method &lt;code&gt;abort&lt;/code&gt;).
This class offers a default implementation that returns &quot;manoeuvre can
continue&quot;.
&lt;p&gt;
This method should only be called on a manoeuvre that is in use and
that is already executing.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2478'
        name = 'see'
        modelElement = 'S.793'>
   <UML:TaggedValue.dataValue>
    	CC_ManoeuvreManager#activate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2479'
        name = 'see'
        modelElement = 'S.793'>
   <UML:TaggedValue.dataValue>
    	#abort
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2480'
        name = 'return'
        modelElement = 'S.793'>
   <UML:TaggedValue.dataValue>
    	true if the manoeuvre can continue execution
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2482'
        name = 'documentation'
        modelElement = 'S.794'>
   <UML:TaggedValue.dataValue>
    	Return the continuation check code for the manoeuvre.
The continuation check code allows a manoeuvre to make information available about
the reasons for the failure of the continuation check. The return value of this
method is only valid if the continuation check has returned &quot;manoeuvre cannot
continue&quot; (ie. if method &lt;code&gt;canContinue&lt;/code&gt; has returned false). This class
provides a default implementation that returns zero.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2483'
        name = 'see'
        modelElement = 'S.794'>
   <UML:TaggedValue.dataValue>
    	#canContinue
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2484'
        name = 'return'
        modelElement = 'S.794'>
   <UML:TaggedValue.dataValue>
    	the continuation check code
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2486'
        name = 'documentation'
        modelElement = 'S.795'>
   <UML:TaggedValue.dataValue>
    	Advance the execution of the manoeuvre.
Manoeuvres execute over a prolonged period of time.
This method is intended to be called to advance the execution of the
manoeuvre.
The implementation provided by this class is responsible for managing the
isExecuting flag, for managing the activation step counter, and for
creating an event report when the status of
the flag changes from &quot;not executing&quot; to &quot;executing&quot; (this signals the
beginning of the execution of the manoeuvre).
Execution of the manoeuvre is advanced only if the manoeuvre is not
suspended.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
if ( !isExecuting ) {
activationStepCounter = 0;
isExecuting=true;
createEventReport(EVT_MAN_STARTED);
}
if ( !isSuspended() ) {
activationStepCounter++;
doInternalContinue();
} &lt;/PRE&gt;
The &lt;CODE&gt;doInternalContinue()&lt;/CODE&gt; method is virtual and encapsulates
the implementation of the actions to be performed by the manoeuvre. This
method is only called if the manoeuvre is not suspended.
The &lt;CODE&gt;isExecuting&lt;/CODE&gt; flag is initialized to false by the constructor
and is reset to false when the manoeuvre has finished execution or is aborted.
Note that the activation
step counter is implemented as an unsigned integer and there is no protection
against overflow. This puts an upper ceiling on the number of activation
steps of a manoeuvre.
The &lt;code&gt;manId&lt;/code&gt; parameter in the pseudo-code is a manoeuvre identifier.
This class uses the &lt;i&gt;class identifier&lt;/i&gt; of the manoeuvre component as
manoeuvre identifier.
&lt;p&gt;
This method should only be called on a manoeuvre that is already in use.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2487'
        name = 'see'
        modelElement = 'S.795'>
   <UML:TaggedValue.dataValue>
    	TD_EventType
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2488'
        name = 'see'
        modelElement = 'S.795'>
   <UML:TaggedValue.dataValue>
    	CC_ManoeuvreManager#activate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2490'
        name = 'documentation'
        modelElement = 'S.796'>
   <UML:TaggedValue.dataValue>
    	Abort execution of a running manoeuvre.
If the manoeuvre is not currently executing (if the isExecuting flag is
false), no action is taken. Otherwise, its execution status is changed
to &quot;not executing&quot;, an event reporting the abort operation is created, and
the abort operations are executed.
The manoeuvre is forced into &quot;not suspended&quot; status (its isSuspended flag
is set to false).
&lt;p&gt;
In general, a manoeuvre may be aborted either as a result of an autonomous
decision of an external entity or because the manoeuvre itself declares that
it is unable to continue execution (i.e. its &lt;CODE&gt;canContinue&lt;/CODE&gt; method
returns false) in which case the manoeuvre must be aborted.
After being aborted, a manoeuvre should be de-scheduled and should no
longer be considered for execution.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
isSuspended = false;
if ( !isExecuting )
return;
else {
isExecuting = false;
createEventReport(EVT_MAN_ABORTED);
internalAbort(void);
} &lt;/PRE&gt;
The &lt;CODE&gt;internalAbort()&lt;/CODE&gt; method is intended to be overridden by
subclasses to specify concrete actions to be taken by a manoeuvre that is
aborted. These would typically be clean-up actions that bring the
internal state of the manoeuvre to some pre-defined and consistent state.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2491'
        name = 'see'
        modelElement = 'S.796'>
   <UML:TaggedValue.dataValue>
    	TD_EventType
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2492'
        name = 'see'
        modelElement = 'S.796'>
   <UML:TaggedValue.dataValue>
    	#canContinue
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2493'
        name = 'see'
        modelElement = 'S.796'>
   <UML:TaggedValue.dataValue>
    	CC_ManoeuvreManager#activate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2494'
        name = 'see'
        modelElement = 'S.796'>
   <UML:TaggedValue.dataValue>
    	CC_ManoeuvreManager#abort
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2496'
        name = 'documentation'
        modelElement = 'S.797'>
   <UML:TaggedValue.dataValue>
    	Perform the termination actions associated to this manoeuvre.
This method is intended to be called when a manoeuvre has terminated
execution nominally (after its &lt;code&gt;isFinished&lt;/code&gt; method returns true).
It can be used to implement any clean-up actions that is required at the end
of a manoeuvre&apos;s execution.
The manoeuvre is forced into &quot;not suspended&quot; status (its isSuspended flag
is set to false).
The implementation in this class is responsible for resetting the
isExecuting and isSuspended flags and for creating an event report recording the termination of
the manoeuvre. A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
isSuspended = false;
isExecuting = false;
createEventReport(EVT_MAN_TERMINATED);
internalTerminate(); &lt;/PRE&gt;
The &lt;CODE&gt;internalTerminate()&lt;/CODE&gt; method can be overridden by concrete
subclasses to implement their own termination actions.
&lt;p&gt;
This method should only be called on a manoeuvre that is in use and
that is already executing.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2497'
        name = 'see'
        modelElement = 'S.797'>
   <UML:TaggedValue.dataValue>
    	TD_EventType
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2498'
        name = 'see'
        modelElement = 'S.797'>
   <UML:TaggedValue.dataValue>
    	#doContinue
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2499'
        name = 'see'
        modelElement = 'S.797'>
   <UML:TaggedValue.dataValue>
    	CC_ManoeuvreManager#activate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2501'
        name = 'documentation'
        modelElement = 'S.798'>
   <UML:TaggedValue.dataValue>
    	Perform the termination check for the manoeuvre: return true if the manoeuvre
has terminated executing its allotted actions.
After this method returns &quot;manoeuvre has terminated&quot;, the termination
action should be executed.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2502'
        name = 'see'
        modelElement = 'S.798'>
   <UML:TaggedValue.dataValue>
    	CC_ManoeuvreManager#activate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2503'
        name = 'return'
        modelElement = 'S.798'>
   <UML:TaggedValue.dataValue>
    	true if the manoeuvre has terminated execution
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2505'
        name = 'documentation'
        modelElement = 'S.799'>
   <UML:TaggedValue.dataValue>
    	Set the value of the inUse flag.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2506'
        name = 'see'
        modelElement = 'S.799'>
   <UML:TaggedValue.dataValue>
    	TD_EventType
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2507'
        name = 'see'
        modelElement = 'S.799'>
   <UML:TaggedValue.dataValue>
    	CC_ManoeuvreManager#load
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2508'
        name = 'param'
        modelElement = 'S.799'>
   <UML:TaggedValue.dataValue>
    	newInUse the new value of the inUse flag
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2511'
        name = 'documentation'
        modelElement = 'S.800'>
   <UML:TaggedValue.dataValue>
    	Return the value of the inUse flag.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2512'
        name = 'return'
        modelElement = 'S.800'>
   <UML:TaggedValue.dataValue>
    	the value of the inUse flag
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2514'
        name = 'documentation'
        modelElement = 'S.801'>
   <UML:TaggedValue.dataValue>
    	Set the value of the isSuspended flag. If the requested value of the
flag is different from the current value (indicating a change in the
state of the manoevre), this is recorded through an even report.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
if ( isSuspended and !newIsSuspended )      // manoeuvre is resumed
createEventReport(EVT_MAN_RESUMED);
else if ( !isSuspended and newIsSuspended )
createEventReport(EVT_MAN_SUSPENDED);
isSuspended = newIsSuspended; &lt;/PRE&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2515'
        name = 'see'
        modelElement = 'S.801'>
   <UML:TaggedValue.dataValue>
    	TD_EventType
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2516'
        name = 'see'
        modelElement = 'S.801'>
   <UML:TaggedValue.dataValue>
    	#doContinue
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2517'
        name = 'param'
        modelElement = 'S.801'>
   <UML:TaggedValue.dataValue>
    	newIsSuspended the new value of the isSuspended flag
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2520'
        name = 'documentation'
        modelElement = 'S.802'>
   <UML:TaggedValue.dataValue>
    	Return the value of the isSuspended flag.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2521'
        name = 'return'
        modelElement = 'S.802'>
   <UML:TaggedValue.dataValue>
    	the value of the isSuspended flag
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2523'
        name = 'documentation'
        modelElement = 'S.803'>
   <UML:TaggedValue.dataValue>
    	Return the value of the isExecuting flag.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2524'
        name = 'return'
        modelElement = 'S.803'>
   <UML:TaggedValue.dataValue>
    	the value of the isExecuting flag.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2526'
        name = 'documentation'
        modelElement = 'S.804'>
   <UML:TaggedValue.dataValue>
    	Set the enable status of the manoeuvre.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2527'
        name = 'param'
        modelElement = 'S.804'>
   <UML:TaggedValue.dataValue>
    	isEnabled if true, then the manoeuvre is enabled; if false, then
the manoeuvre is disabled
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2530'
        name = 'documentation'
        modelElement = 'S.805'>
   <UML:TaggedValue.dataValue>
    	Check the enable status of the manoeuvre profile.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2531'
        name = 'return'
        modelElement = 'S.805'>
   <UML:TaggedValue.dataValue>
    	true if the manoeuvre is enabled, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2533'
        name = 'documentation'
        modelElement = 'S.806'>
   <UML:TaggedValue.dataValue>
    	Return the value of the activation step counter.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2534'
        name = 'see'
        modelElement = 'S.806'>
   <UML:TaggedValue.dataValue>
    	#doContinue
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2535'
        name = 'return'
        modelElement = 'S.806'>
   <UML:TaggedValue.dataValue>
    	the current value of the activation step counter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2537'
        name = 'documentation'
        modelElement = 'S.683'>
   <UML:TaggedValue.dataValue>
    	Base class for classes encapsulating a &lt;i&gt;PUS telecommand manoeuvre&lt;/i&gt;.
A PUS telecommand manoeuvre models the manoeuvre-like actions associated
to a PUS telecommand.
The OBS Framework implements a telecommand as a form of &lt;i&gt;punctual action&lt;/i&gt;
that is executed in one-shot mode (i.e. its execution terminates in the same cycle
in which it begins). The Packet Utilization Standard (PUS) instead
allows for actions to be associated to a telecommand that must be executed over
an interval of time. This class models this type of actions as a form of
&lt;i&gt;manoeuvre&lt;/i&gt;. A manoeuvre of this type would normally be launched by
a PUS telecommand.
&lt;p&gt;
This class adds to its base class the following attributes that
describe the telecommand that launches the manoeuvre: &lt;ul&gt;
&lt;li&gt;The &lt;i&gt;telecommand identifier attribute&lt;/i&gt; of the PUS telecommand that triggered
execution of the manoeuvre. In a PUS telecommand, this attribute is identical to the
packet sequence control attribute.&lt;/li&gt;
&lt;li&gt;The &lt;i&gt;execution start acknowledge flag&lt;/i&gt; of the PUS telecommand that triggered
execution of the manoeuvre. &lt;/li&gt;
&lt;li&gt;The &lt;i&gt;progress acknowledge flag&lt;/i&gt; of the PUS telecommand that triggered
execution of the manoeuvre. &lt;/li&gt;
&lt;li&gt;The &lt;i&gt;completion acknowledge flag&lt;/i&gt; of the PUS telecommand that triggered
execution of the manoeuvre. &lt;/li&gt;
&lt;/ul&gt;
Additionally, this class provides a &lt;i&gt;progress event generation service&lt;/i&gt;. This
service can be called by concrete subclasses to generate an event marking the
advancement of the execution of the PUS telecommand mananoeuvre.
&lt;p&gt;
A PUS telecommand manoeuvre is normally loaded into the manoeuvre manager by
a PUS telecommand. The PUS telecommand should configured the PUS manoeuvre as follows:&lt;ul&gt;
&lt;li&gt;It should set its telecommand identifier attribute&lt;/li&gt;
&lt;li&gt;It should set its execution start acknowledge flag&lt;/li&gt;
&lt;li&gt;It should set its progress acknowledge flag&lt;/li&gt;
&lt;li&gt;It should set its completion acknowledge flag&lt;/li&gt;
&lt;/ul&gt;
The above configuration actions can be performed in any order.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2538'
        name = 'author'
        modelElement = 'S.683'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2539'
        name = 'see'
        modelElement = 'S.683'>
   <UML:TaggedValue.dataValue>
    	PUSTelecommand
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2540'
        name = 'version'
        modelElement = 'S.683'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2541'
        name = 'ingroup'
        modelElement = 'S.683'>
   <UML:TaggedValue.dataValue>
    	PUS
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2542'
        name = 'ingroup'
        modelElement = 'S.683'>
   <UML:TaggedValue.dataValue>
    	Manoeuvre
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2543'
        name = 'documentation'
        modelElement = 'S.811'>
   <UML:TaggedValue.dataValue>
    	This method generates an event of type EVT_MAN_PROGRESS (manoeuvre progress event report). 
Some applications require that telemetry packets be generated to
mark the advancement of the execution of the actions associated to a PUS telecommand.
This method is intended as a facility to be called by concrete subclasses at points
where generation of an execution progress report is required. It would typically be
called from inside the implementation of method &lt;code&gt;doInternalContinue&lt;/code&gt;.
A pseudo-code implementation for this method is as follows:&lt;pre&gt;
createEventReport(this, EVT_MAN_PROGRESS); &lt;/pre&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2544'
        name = 'see'
        modelElement = 'S.811'>
   <UML:TaggedValue.dataValue>
    	#isProgressAckRequired
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2546'
        name = 'documentation'
        modelElement = 'S.812'>
   <UML:TaggedValue.dataValue>
    	Instantiate a PUS telecommand manoeuvre component.
The acknoweldge flags are set to false (&quot;no acknowledge is required&quot;) and the telecommand
identifier is set to an illegal value to signify that the component is not yet configured.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2547'
        name = 'documentation'
        modelElement = 'S.813'>
   <UML:TaggedValue.dataValue>
    	Return true if acknowledgement of manoeuvre execution start is
required. This flag should normally have the same value as the execution start 
acknowledgement flag of the telecommand that triggered the execution of this
manoeuvre.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2548'
        name = 'see'
        modelElement = 'S.813'>
   <UML:TaggedValue.dataValue>
    	#setStartAckFlag
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2549'
        name = 'return'
        modelElement = 'S.813'>
   <UML:TaggedValue.dataValue>
    	the value of the execution start acknowledge flag
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2551'
        name = 'documentation'
        modelElement = 'S.814'>
   <UML:TaggedValue.dataValue>
    	Return true if acknowledgement of manoeuvre execution progress is
required. This flag should normally have the same value as the progress
acknowledgement flag of the telecommand that triggered the execution of this
manoeuvre.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2552'
        name = 'see'
        modelElement = 'S.814'>
   <UML:TaggedValue.dataValue>
    	#setProgressAckFlag
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2553'
        name = 'return'
        modelElement = 'S.814'>
   <UML:TaggedValue.dataValue>
    	the value of the progress acknowledge flag
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2555'
        name = 'documentation'
        modelElement = 'S.815'>
   <UML:TaggedValue.dataValue>
    	Return the true if acknowledgement of manoeuvre execution completion is
required. This flag should normally have the same value as the completion
acknowledgement flag of the telecommand that triggered the execution of this
manoeuvre.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2556'
        name = 'see'
        modelElement = 'S.815'>
   <UML:TaggedValue.dataValue>
    	#setCompletionAckFlag
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2557'
        name = 'return'
        modelElement = 'S.815'>
   <UML:TaggedValue.dataValue>
    	the value of the completion acknowledge flag
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2559'
        name = 'documentation'
        modelElement = 'S.816'>
   <UML:TaggedValue.dataValue>
    	Set the value of the start acknowledge flag.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2560'
        name = 'see'
        modelElement = 'S.816'>
   <UML:TaggedValue.dataValue>
    	#isStartAckRequired
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2561'
        name = 'param'
        modelElement = 'S.816'>
   <UML:TaggedValue.dataValue>
    	startAckFlag the value of the execution start acknowledge flag
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2564'
        name = 'documentation'
        modelElement = 'S.817'>
   <UML:TaggedValue.dataValue>
    	Set the value of the completion acknowledge flag.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2565'
        name = 'see'
        modelElement = 'S.817'>
   <UML:TaggedValue.dataValue>
    	#isCompletionAckRequired
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2566'
        name = 'param'
        modelElement = 'S.817'>
   <UML:TaggedValue.dataValue>
    	completionAckFlag the value of the completion acknowledge flag
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2569'
        name = 'documentation'
        modelElement = 'S.818'>
   <UML:TaggedValue.dataValue>
    	Set the value of the progress acknowledge flag.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2570'
        name = 'see'
        modelElement = 'S.818'>
   <UML:TaggedValue.dataValue>
    	#isCompletionAckRequired
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2571'
        name = 'param'
        modelElement = 'S.818'>
   <UML:TaggedValue.dataValue>
    	progressAckFlag the value of the progress acknowledge flag
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2574'
        name = 'documentation'
        modelElement = 'S.819'>
   <UML:TaggedValue.dataValue>
    	Getter method for the identifier of the telecommand that launched this
manoeuvre.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2575'
        name = 'see'
        modelElement = 'S.819'>
   <UML:TaggedValue.dataValue>
    	#setTelecommandId
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2576'
        name = 'return'
        modelElement = 'S.819'>
   <UML:TaggedValue.dataValue>
    	the telecommand identifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2578'
        name = 'documentation'
        modelElement = 'S.820'>
   <UML:TaggedValue.dataValue>
    	Setter method for the identifier of the telecommand that launched this
manoeuvre.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2579'
        name = 'see'
        modelElement = 'S.820'>
   <UML:TaggedValue.dataValue>
    	#getTelecommandId
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2580'
        name = 'param'
        modelElement = 'S.820'>
   <UML:TaggedValue.dataValue>
    	tcIdentifier the telecommand identifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2686'
        name = 'documentation'
        modelElement = 'S.869'>
   <UML:TaggedValue.dataValue>
    	Verify the functionalities implemented by the
&lt;code&gt;DC_BasicDatabase&lt;/code&gt; component.
An instance of the component is created and the following
specific tests are performed upon it: &lt;ol&gt;
&lt;li&gt;It is verified that the class ID of the component has the correct value.&lt;/li&gt;
&lt;li&gt;It is verified that, after instantiation, the configuration service
of the component reports &quot;not configured&quot;.&lt;/li&gt;
&lt;li&gt;The database size is set and then read back and it is checked that the read-back
value is correct.&lt;/li&gt;
&lt;li&gt;The configuration of the database component is completed by loading the default and
operational tables and it is verified that the configuration service
of the component reports &quot;configured&quot;.&lt;/li&gt;
&lt;li&gt;It is verified that the operational table is initialized to hold a copy
of the default table.&lt;/li&gt;
&lt;li&gt;The setter and getter methods for all parameters types are verified.&lt;/li&gt;
&lt;li&gt;The pointer getter methods for all parameters types are verified.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2687'
        name = 'author'
        modelElement = 'S.869'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2688'
        name = 'see'
        modelElement = 'S.869'>
   <UML:TaggedValue.dataValue>
    	DC_BasicDatabase
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2689'
        name = 'version'
        modelElement = 'S.869'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2690'
        name = 'documentation'
        modelElement = 'S.936'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_BASICDATABASE*10+1 and &quot;TestCaseBasicDatabase_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2691'
        name = 'documentation'
        modelElement = 'S.937'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2693'
        name = 'documentation'
        modelElement = 'S.845'>
   <UML:TaggedValue.dataValue>
    	Check the functionalities implemented by the &lt;code&gt;DataPool&lt;/code&gt; class.
Since this class is abstract, its functionalities are checked in the
implementation of its concrete subclass &lt;code&gt;DC_BasicDataPool_1&lt;/code&gt;.
An instance of the component is created and the following
specific checks are performed upon it: &lt;ol&gt;
&lt;li&gt;It is verified that the class ID of the component has the correct value.&lt;/li&gt;
&lt;li&gt;It is verified that, after instantiation, the configuration service
of the component reports &quot;not configured&quot;.&lt;/li&gt;
&lt;li&gt;The size of the data pool is set and read back and it is checked that the read-back
value is correct.&lt;/li&gt;
&lt;li&gt;It is checked that the configuration service
of the component reports &quot;configured&quot;.&lt;/li&gt;
&lt;li&gt;It is verified that the data item attribute of a data pool item encapsulates an unsigned
integer with value zero.&lt;/li&gt;
&lt;li&gt;It is verified that the time stamp attribute of a data pool item is equal to zero.&lt;/li&gt;
&lt;li&gt;It is verified that the validity attribute of a data pool item is &quot;valid&quot;.&lt;/li&gt;
&lt;li&gt;It is verified that the setter method for the validity status of a data pool item can be called
without an exception being generated.&lt;/li&gt;
&lt;li&gt;It is verified that both type checking services for a data pool item return &quot;true&quot;.&lt;/li&gt;
&lt;li&gt;It is verified that the &lt;code&gt;firstIdentifier&lt;/code&gt; and &lt;code&gt;nextIdentifier&lt;/code&gt; iteration
methods return zero and that the &lt;code&gt;isLastIdentifier&lt;/code&gt; method returns &quot;true&quot;.&lt;/li&gt;
&lt;li&gt;It is verified that the monitoring profile attribute of a data pool item is an
instance of class &lt;code&gt;DC_NullProfile&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;It is verified that the recovery action attribute of a data pool item is an
instance of class &lt;code&gt;DC_NullRecoveryAction&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;It is verified that the reset method can be called
without an exception being generated.&lt;/li&gt;
&lt;li&gt;A float value is set and then read and it is verified that the value that is read
back is the same as the value that was written.&lt;/li&gt;
&lt;li&gt;An integer value is set and then read and it is verified that the value that is read
back is the same as the value that was written.&lt;/li&gt;
&lt;li&gt;A float value is set and then its pointer is read and it is verified that the value that
was written can be correctly read from the pointer.&lt;/li&gt;
&lt;li&gt;An integer value is set and then its pointer is read and it is verified that the value that
was written can be correctly read from the pointer.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2694'
        name = 'author'
        modelElement = 'S.845'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2695'
        name = 'see'
        modelElement = 'S.845'>
   <UML:TaggedValue.dataValue>
    	DC_BasicDataPool
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2696'
        name = 'version'
        modelElement = 'S.845'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2697'
        name = 'documentation'
        modelElement = 'S.939'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_BASICDATAPOOL*10+1 and &quot;TestCaseBasicDataPool_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2698'
        name = 'documentation'
        modelElement = 'S.940'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2700'
        name = 'documentation'
        modelElement = 'S.842'>
   <UML:TaggedValue.dataValue>
    	Check the functionality of the &lt;code&gt;DC_BasicPUSTcLoader&lt;/code&gt;
class. The test case retrieves the following items from its super class
&lt;code&gt;TestCasePUSFull&lt;/code&gt; or from the telecommand factory:&lt;ul&gt;
&lt;li&gt;An instance of the basic telecommand loader&lt;/li&gt;
&lt;li&gt;Three instances of &lt;code&gt;DC_TestPUSTelecommand&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The telecommand manager&lt;/li&gt;
&lt;/ul&gt;
The following specific checks are then performed:&lt;ol&gt;
&lt;li&gt;The correctness of the class identifier of the TC loader is checked.&lt;/li&gt;
&lt;li&gt;The value of the maximum number of telecommands is set and read back. The correctness
of the read-back value is checked.&lt;/li&gt;
&lt;li&gt;The value of the maximum length of a telecommand packet is set and read back. The correctness
of the read-back value is checked.&lt;/li&gt;
&lt;li&gt;A single telecommand packet is written to the telecommand load area and the telecommand
loader is then activated. It is checked that the TC manager reports one telecommand loaded.&lt;/li&gt;
&lt;li&gt;The loaded telecommand is retrieved from the telecommand manager and it is checked that
its configuration is as expected and that it is marked as &quot;in use&quot;.&lt;/li&gt;
&lt;li&gt;The telecommand manager is activated and it is checked that afterwards the telecommand 
is marked as &quot;not in use&quot;.&lt;/li&gt;
&lt;li&gt;Two telecommand packets are written to the telecommand load area of which one has a 
packet ID field that indicates that it should not be processed by the telecommand loader. The telecommand
loader is activated. It is checked that the TC manager reports only one telecommand loaded.&lt;/li&gt;
&lt;li&gt;Three telecommand packets are written to the telecommand load area and the telecommand
loader is then activated. It is checked that the TC manager reports three telecommands loaded.&lt;/li&gt;
&lt;li&gt;The loaded telecommands are retrieved from the telecommand manager and it is checked that
their configuration is as expected and that they are marked as &quot;in use&quot;.&lt;/li&gt;
&lt;li&gt;The telecommand manager is activated and it is checked that afterwards the three telecommands 
are marked as &quot;not in use&quot;.&lt;/li&gt;
&lt;li&gt;A telecommand packet is written that has a length exceeding 
the maximum accepted by the loader is written to the
telecommand load area. The TC loader is activated and it is checked that the correct event is
generated.&lt;/li&gt;
&lt;li&gt;Two telecommand packets are written of which the first one has 
a type value not recognized by the TC loader is written to the
telecommand load area. The TC loader is activated and it is checked that the correct event is
generated.&lt;/li&gt;
&lt;li&gt;A number of telecommands exceeding the maximum accepted by the loader are written to the
telecommand load area. The TC loader is activated and it is checked that the correct event is
generated.&lt;/li&gt;
&lt;li&gt;Four &lt;code&gt;DC_BasicPUSTelecommands&lt;/code&gt; are written to the
telecommand load area. The TC loader is activated and it is checked that the correct event is
generated. This test assumes that the telecommand fctory only manages three telecommand of
type &lt;code&gt;DC_BasicPUSTelecommands&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
Note that, in order to be loaded into the list of pending telecommands in the telecommand
manager, the test telecommands used in this test case are always configured to be valid.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2701'
        name = 'author'
        modelElement = 'S.842'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2702'
        name = 'see'
        modelElement = 'S.842'>
   <UML:TaggedValue.dataValue>
    	DC_BasicPUSTcLoader
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2703'
        name = 'version'
        modelElement = 'S.842'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2704'
        name = 'documentation'
        modelElement = 'S.943'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_BASICPUSTCLOADER*10+1 and &quot;TestCaseBasicPUSTcLoader_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2705'
        name = 'documentation'
        modelElement = 'S.944'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2707'
        name = 'documentation'
        modelElement = 'S.945'>
   <UML:TaggedValue.dataValue>
    	Write the header part of a &lt;code&gt;DC_TestPUSTelecommand&lt;/code&gt; packet starting at location
&lt;code&gt;start&lt;/code&gt; with a configuration as defined by the method parameters.
Both the packet header and the header part of the packet data field are written.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2708'
        name = 'see'
        modelElement = 'S.945'>
   <UML:TaggedValue.dataValue>
    	DC_TestPUSTelecommand
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2709'
        name = 'param'
        modelElement = 'S.945'>
   <UML:TaggedValue.dataValue>
    	start the location in the telecommand loader where the TC header is to be written
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2710'
        name = 'param'
        modelElement = 'S.945'>
   <UML:TaggedValue.dataValue>
    	packetID the packet ID
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2711'
        name = 'param'
        modelElement = 'S.945'>
   <UML:TaggedValue.dataValue>
    	packetSeqControl the packet sequence control
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2712'
        name = 'param'
        modelElement = 'S.945'>
   <UML:TaggedValue.dataValue>
    	packetLength the packet length
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2713'
        name = 'param'
        modelElement = 'S.945'>
   <UML:TaggedValue.dataValue>
    	ackField the acknowledge field
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2714'
        name = 'param'
        modelElement = 'S.945'>
   <UML:TaggedValue.dataValue>
    	tcType the TC type
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2715'
        name = 'param'
        modelElement = 'S.945'>
   <UML:TaggedValue.dataValue>
    	tcSubType the TC subtype
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2716'
        name = 'param'
        modelElement = 'S.945'>
   <UML:TaggedValue.dataValue>
    	tcSource the TC source
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2726'
        name = 'documentation'
        modelElement = 'S.946'>
   <UML:TaggedValue.dataValue>
    	Write the data part of a &lt;code&gt;DC_TestPUSTelecommand&lt;/code&gt; packet starting at location
&lt;code&gt;start&lt;/code&gt; with a configuration as defined by the method parameters.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2727'
        name = 'see'
        modelElement = 'S.946'>
   <UML:TaggedValue.dataValue>
    	DC_TestPUSTelecommand
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2728'
        name = 'param'
        modelElement = 'S.946'>
   <UML:TaggedValue.dataValue>
    	start the location in the telecommand loader where the TC data are to be written
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2729'
        name = 'param'
        modelElement = 'S.946'>
   <UML:TaggedValue.dataValue>
    	execCounter the execution counter value
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2730'
        name = 'param'
        modelElement = 'S.946'>
   <UML:TaggedValue.dataValue>
    	execCheckVal the execution check value
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2731'
        name = 'param'
        modelElement = 'S.946'>
   <UML:TaggedValue.dataValue>
    	valCheckVal the validity check value
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2732'
        name = 'param'
        modelElement = 'S.946'>
   <UML:TaggedValue.dataValue>
    	execCheckCode the execution check code
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2733'
        name = 'param'
        modelElement = 'S.946'>
   <UML:TaggedValue.dataValue>
    	valCheckCode the validity check code
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2734'
        name = 'param'
        modelElement = 'S.946'>
   <UML:TaggedValue.dataValue>
    	execOutcome the outcome of the execution check
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2743'
        name = 'documentation'
        modelElement = 'S.947'>
   <UML:TaggedValue.dataValue>
    	Check that the argument &lt;code&gt;DC_TestPUSTelecommand&lt;/code&gt; telecommand is configured as specified by the
method parameters. Note that in order to check the execution outcome, the method &quot;executes&quot;
the telecommand and therefore causes its execution counter to be incremented by one.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2744'
        name = 'see'
        modelElement = 'S.947'>
   <UML:TaggedValue.dataValue>
    	DC_TestPUSTelecommand
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2745'
        name = 'param'
        modelElement = 'S.947'>
   <UML:TaggedValue.dataValue>
    	pTC the telecommand to be checked
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2746'
        name = 'param'
        modelElement = 'S.947'>
   <UML:TaggedValue.dataValue>
    	packetID the packet ID
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2747'
        name = 'param'
        modelElement = 'S.947'>
   <UML:TaggedValue.dataValue>
    	packetSeqControl the packet sequence control
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2748'
        name = 'param'
        modelElement = 'S.947'>
   <UML:TaggedValue.dataValue>
    	ackField the acknowledge field
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2749'
        name = 'param'
        modelElement = 'S.947'>
   <UML:TaggedValue.dataValue>
    	tcSource the TC source
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2750'
        name = 'param'
        modelElement = 'S.947'>
   <UML:TaggedValue.dataValue>
    	execCounter the execution counter value
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2751'
        name = 'param'
        modelElement = 'S.947'>
   <UML:TaggedValue.dataValue>
    	execCheckVal the execution check value
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2752'
        name = 'param'
        modelElement = 'S.947'>
   <UML:TaggedValue.dataValue>
    	valCheckVal the validity check value
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2753'
        name = 'param'
        modelElement = 'S.947'>
   <UML:TaggedValue.dataValue>
    	execCheckCode the execution check code
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2754'
        name = 'param'
        modelElement = 'S.947'>
   <UML:TaggedValue.dataValue>
    	valCheckCode the validity check code
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2755'
        name = 'param'
        modelElement = 'S.947'>
   <UML:TaggedValue.dataValue>
    	execOutcome the outcome of the execution check
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2756'
        name = 'return'
        modelElement = 'S.947'>
   <UML:TaggedValue.dataValue>
    	true if the telecommand is configured as specified
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2769'
        name = 'documentation'
        modelElement = 'S.889'>
   <UML:TaggedValue.dataValue>
    	Check the functionality of the &lt;code&gt;DC_BasicPUSTmStream&lt;/code&gt;
class. An instance of this class is created and a sample telemetry packet (instance
of class &lt;code&gt;DC_DummyPUSTelemetryPacket&lt;/code&gt;) is
retrieved from the telemetry packet factory. The following
specific checks are then performed:&lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is checked.&lt;/li&gt;
&lt;li&gt;It is checked that the TM stream is initially not configured.&lt;/li&gt;
&lt;li&gt;The value of the stream capacity is set and read back. The correctness
of the read-back value is checked.&lt;/li&gt;
&lt;li&gt;The value of the start address of the telemetry write area is set and read back.
The correctness of the read-back value is checked. &lt;/li&gt;
&lt;li&gt;It is checked that the TM stream is now configured.&lt;/li&gt;
&lt;li&gt;The value of the packet counter is retrieved and it is checked that is equal to
zero. &lt;/li&gt;
&lt;li&gt;A telemetry packet is written to the stream and the correctness of the write
operation is checked.&lt;/li&gt;
&lt;li&gt;It is checked that the packet counter and the sequence counter are 
incremented by one after the write
operation.&lt;/li&gt;
&lt;li&gt;The packet is repeatedly written until the telemetry write area is filled.
It is checked that a write operation results
in the generation of the correct event report.&lt;/li&gt;
&lt;li&gt;The telemetry area is reset and it is checked that the next
write request executes successfully.&lt;/li&gt;
&lt;li&gt;It is checked that the packet counter and the write counters are reset to 0 and 1,
respectively.&lt;/li&gt;
&lt;li&gt;The last two checks are repeated using a flush operation instead of a reset
operation and it is checked that the outcome is the same.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2770'
        name = 'author'
        modelElement = 'S.889'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2771'
        name = 'see'
        modelElement = 'S.889'>
   <UML:TaggedValue.dataValue>
    	DC_BasicPUSTmStream
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2772'
        name = 'version'
        modelElement = 'S.889'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2773'
        name = 'documentation'
        modelElement = 'S.952'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_BASICPUSTMSTREAM*10+1 and &quot;TestCaseBasicPUSTmStream_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2774'
        name = 'documentation'
        modelElement = 'S.953'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2776'
        name = 'documentation'
        modelElement = 'S.954'>
   <UML:TaggedValue.dataValue>
    	Check the correctness of the telemetry image written by the telemetry stream under test.
The telemetry image is assumed to start at location &lt;code&gt;start&lt;/code&gt; in the
telemetry write area and the value of the application data generated by the
telemetry packet is assumed to be &lt;code&gt;value&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2777'
        name = 'param'
        modelElement = 'S.954'>
   <UML:TaggedValue.dataValue>
    	start the start location of the telemetry image
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2778'
        name = 'param'
        modelElement = 'S.954'>
   <UML:TaggedValue.dataValue>
    	value the value of the application data
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2779'
        name = 'return'
        modelElement = 'S.954'>
   <UML:TaggedValue.dataValue>
    	true if the telemetry image is correct, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2783'
        name = 'documentation'
        modelElement = 'S.861'>
   <UML:TaggedValue.dataValue>
    	Verify the services of the &lt;code&gt;DC_BasicReconfigurer&lt;/code&gt;. One
&lt;code&gt;DC_BasicReconfigurer&lt;/code&gt; object is created and the following
tests are performed upon it: &lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is verified.&lt;/li&gt;
&lt;li&gt;It is verified that the newly created object is not configured
and is enabled.&lt;/li&gt;
&lt;li&gt;The enable state is changed. The success of the operation is verified.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setNumberOfConfigurations()&lt;/code&gt; is invoked and it is verified that
the object is now fully configured, that the number of configurations was
correctly set, that all the configurations are &lt;code&gt;HEALTHY&lt;/code&gt; and finally
that the first configuration is set as the active one.&lt;/li&gt;
&lt;li&gt;Non-nominal behaviour check: &lt;code&gt;setActive()&lt;/code&gt; is invoked with an out-of-range configuration
number. It is verified that an &lt;code&gt;EVT_ILLEGAL_CONFIG&lt;/code&gt; is added to
the event repository.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setActive()&lt;/code&gt; is invoked with a configuration number different
from the currently active one. It is verified that &lt;code&gt;getActive()&lt;/code&gt; returns
the right value, and that an &lt;code&gt;EVT_RECONFIG&lt;/code&gt; is added to the event
repository.&lt;/li&gt;
&lt;li&gt;Non-nominal behaviour check: &lt;code&gt;setHealthStatus()&lt;/code&gt; is invoked with an out-of-range parameter.
It is verified that an &lt;code&gt;EVT_ILLEGAL_CONFIG&lt;/code&gt; is added to
the event repository.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setHealthStatus()&lt;/code&gt; is invoked with a valid configuration number.
It is verified that the health state of the configuration is correctly set.&lt;/li&gt;
&lt;li&gt;Without re-enabling the reconfigurer, &lt;code&gt;reconfigure()&lt;/code&gt; is called
and it is verified that an &lt;code&gt;EVT_RECONFIG_DISABLED&lt;/code&gt; event is added to
the repository.&lt;/li&gt;
&lt;li&gt;The reconfigurer is enabled and &lt;code&gt;reconfigure()&lt;/code&gt; is once again
called. It is verified that an &lt;code&gt;EVT_RECONFIG&lt;/code&gt; event is added to the
repository, that the previously active configuration is set to &lt;code&gt;NOT_HEALTHY&lt;/code&gt;,
and that the currently active one is healthy.&lt;/li&gt;
&lt;li&gt;All the configurations are set to &lt;code&gt;NOT_HEALTHY&lt;/code&gt;, &lt;code&gt;reconfigure()&lt;/code&gt;
is invoked and it is verified that an &lt;code&gt;EVT_RECONFIG_NO_HEALTHY&lt;/code&gt; event is
added to the repository.&lt;/li&gt;
&lt;li&gt; Finally, the reconfigurer is disabled and &lt;code&gt;reset()&lt;/code&gt; is ionvoked. It is
verified that after the call the configurer is once again enabled, that the active
configuration is set to 0, and that all the configurations are again healthy.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2784'
        name = 'author'
        modelElement = 'S.861'>
   <UML:TaggedValue.dataValue>
    	Roberto Totaro
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2785'
        name = 'see'
        modelElement = 'S.861'>
   <UML:TaggedValue.dataValue>
    	DC_BasicReconfigurer
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2786'
        name = 'version'
        modelElement = 'S.861'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2787'
        name = 'documentation'
        modelElement = 'S.956'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_BASICRECONFIGURER*10+1 and &quot;TestCaseBasicReconfigurer_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2788'
        name = 'documentation'
        modelElement = 'S.957'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2790'
        name = 'documentation'
        modelElement = 'S.875'>
   <UML:TaggedValue.dataValue>
    	Verify the telemetry stream services as implemented
by class &lt;code&gt;DC_ByteArrayTelemetryStream&lt;/code&gt;.
An instance of this class is created and the following specific
tests are performed: &lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is verified.&lt;/li&gt;
&lt;li&gt;It is verified that the configuration check service of the object
initially reports &quot;object not configured&quot;.&lt;/li&gt;
&lt;li&gt;The size of the byte array is set and then read out and
it is verified that that the read-out value is correct.&lt;/li&gt;
&lt;li&gt;The startiing address of the byte array is loaded and then read out and
it is verified that that the read-out value is correct.&lt;/li&gt;
&lt;li&gt;It is verified that the configuration check service now reports
&quot;object configured&quot;.&lt;/li&gt;
&lt;li&gt;A write request is made for a telemetry packet (an instance of class
&lt;code&gt;DC_DummyTelemetryPacket&lt;/code&gt;) is used and it is verified that
the correct values are writtent to the byte array.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;doesPacketFit&lt;/code&gt; method is called twice to return
&quot;item fits&quot; in the first case and &quot;item does not fit&quot; in the second
case.&lt;/li&gt;
&lt;li&gt;Additional write requests are made that should not be executed
because there is no more space in the byte array.&lt;/li&gt;
&lt;li&gt;The telemetry stream is reset and it is verified that the
write requests can now be processed.&lt;/li&gt;
&lt;li&gt;The byte array is again filled up and it is then flushed. It
is verified that the flush operation is successful.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2791'
        name = 'author'
        modelElement = 'S.875'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2792'
        name = 'see'
        modelElement = 'S.875'>
   <UML:TaggedValue.dataValue>
    	DC_ByteArrayTelemetryStream
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2793'
        name = 'version'
        modelElement = 'S.875'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2794'
        name = 'documentation'
        modelElement = 'S.959'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_BYTEARRAYTELEMETRYSTREAM*10+1 and &quot;TestCaseByteArrayTelemetryStream_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2795'
        name = 'documentation'
        modelElement = 'S.960'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2797'
        name = 'documentation'
        modelElement = 'S.882'>
   <UML:TaggedValue.dataValue>
    	Check the checksum functions provided in module &lt;code&gt;Checksum&lt;/code&gt;.
The following specific tests are performed: &lt;ol&gt;
&lt;li&gt;The checksum of a stream of bytes is computed and the correctness of
of the computed value is checked.&lt;/li&gt;
&lt;li&gt;A checksum check is performed over a stream of bytes and the correctness
of the check result is verifed.&lt;/li&gt;
&lt;/ol&gt;
The sample stream of data are taken from section A.2.5 of the PUS standard.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2798'
        name = 'author'
        modelElement = 'S.882'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2799'
        name = 'version'
        modelElement = 'S.882'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2800'
        name = 'documentation'
        modelElement = 'S.961'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_CHECKSUM*10+1 and &quot;TestCaseChecksum_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2801'
        name = 'documentation'
        modelElement = 'S.962'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2803'
        name = 'documentation'
        modelElement = 'S.881'>
   <UML:TaggedValue.dataValue>
    	Check the services offered by control actions. One
&lt;code&gt;DC_ControlAction&lt;/code&gt; component is created and the following
tests are performed upon it: &lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is verified.&lt;/li&gt;
&lt;li&gt;It is checked that the configuration check service initially
reports: &quot;not configured&quot;.&lt;/li&gt;
&lt;li&gt;A control block is loaded and it is verified that the load operations
was successful. The control block that is loaded is an instance of
&lt;code&gt;DC_DummyControlBlock&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;It is checked that the configuration check service now
reports: &quot;configured&quot;.&lt;/li&gt;
&lt;li&gt;An execution request is sent to the control action and it is verified
that the control block is propagated.&lt;/li&gt;
&lt;li&gt;A reset request is sent to the control action and it is verified
that the control block is reset.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2804'
        name = 'author'
        modelElement = 'S.881'>
   <UML:TaggedValue.dataValue>
    	A. Pasetti
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2805'
        name = 'see'
        modelElement = 'S.881'>
   <UML:TaggedValue.dataValue>
    	DC_ControlAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2806'
        name = 'see'
        modelElement = 'S.881'>
   <UML:TaggedValue.dataValue>
    	DC_DummyControlBlock
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2807'
        name = 'version'
        modelElement = 'S.881'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2808'
        name = 'documentation'
        modelElement = 'S.963'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_CONTROLACTION*10+1 and &quot;TestCaseControlAction_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2809'
        name = 'documentation'
        modelElement = 'S.964'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2811'
        name = 'documentation'
        modelElement = 'S.848'>
   <UML:TaggedValue.dataValue>
    	Verify the &lt;code&gt;DC_ControlList&lt;/code&gt; class.
An instance of this class is created and the following  tests are
performed on it:&lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is verified.&lt;/li&gt;
&lt;li&gt;It is verified that the newly created object is not configured.&lt;/li&gt;
&lt;li&gt;The control block list size is set. It is then verified that
&lt;code&gt;getListSize()&lt;/code&gt; returns the correct value.&lt;/li&gt;
&lt;li&gt;A number of pre-configured control blocks is loaded and it is verified that
&lt;code&gt;getControlBlock()&lt;/code&gt; returns the correct values.&lt;/li&gt;
&lt;li&gt;During the loading of the control blocks, it is verified that the object
stays in the unconfigured status until the last control block is loaded.&lt;/li&gt;
&lt;li&gt;Non-nominal behaviour check: it is verified that an invocation of &lt;code&gt;setControlBlock()&lt;/code&gt; with
an illegal index generates an error report.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;execute()&lt;/code&gt; method is invoked. It is verified that the return
code is &lt;code&gt;ACTION_SUCCESS&lt;/code&gt; and that the &lt;code&gt;propagate()&lt;/code&gt; method
of all the loaded control blocks is invoked.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reset()&lt;/code&gt; is called and it is verified that the status of all
the loaded control blocks is reset to its default value.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2812'
        name = 'author'
        modelElement = 'S.848'>
   <UML:TaggedValue.dataValue>
    	Roberto Totaro
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2813'
        name = 'see'
        modelElement = 'S.848'>
   <UML:TaggedValue.dataValue>
    	DC_ControlList
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2814'
        name = 'see'
        modelElement = 'S.848'>
   <UML:TaggedValue.dataValue>
    	DC_DummyControlBlock
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2815'
        name = 'version'
        modelElement = 'S.848'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2816'
        name = 'documentation'
        modelElement = 'S.965'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_CONTROLLIST*10+1 and &quot;TestCaseControlList_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2817'
        name = 'documentation'
        modelElement = 'S.966'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2819'
        name = 'documentation'
        modelElement = 'S.876'>
   <UML:TaggedValue.dataValue>
    	Verify the telemetry stream services as implemented
by class &lt;code&gt;DC_CycleDataItem16TmStream&lt;/code&gt;.
An instance of this class is created and the following specific
tests are performed: &lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is verified.&lt;/li&gt;
&lt;li&gt;It is verified that the configuration check service of the object
initially reports &quot;object not configured&quot;.&lt;/li&gt;
&lt;li&gt;The number of data items in the &lt;code&gt;DC_CycleDataItem16TmStream&lt;/code&gt;
is set to 3 and it is verified that it is correctly returned by the
&lt;code&gt;getSize&lt;/code&gt; service.&lt;/li&gt;
&lt;li&gt;Three data items are loaded into the &lt;code&gt;DC_CycleDataItem16TmStream&lt;/code&gt;
and it is verified that the configuration check service now reports
&quot;object configured&quot;.&lt;/li&gt;
&lt;li&gt;A dummy telemetry packet (instance of class &lt;code&gt;DC_DummyTelemetryPacket&lt;/code&gt;) is
configured to hold 4 bytes. The service &lt;code&gt;doesPacketFit&lt;/code&gt; is used to check whether
the telemetry packet fits in the telemetry stream.&lt;/li&gt;
The telemetry packet is written to the telemetry stream
and it is verified that the write request is correctly executed.&lt;/li&gt;
&lt;li&gt;The service &lt;code&gt;doesPacketFit&lt;/code&gt; is used to check whether
the telemetry packet can be written a second time telemetry stream.&lt;/li&gt;
&lt;li&gt;The telemetry packet is written again to the telemetry stream
and it is verified that only its first two bytes are written to the data items
encapsulated by the telemetry stream.&lt;/li&gt;
&lt;li&gt;The telemetry stream is reset, the telemetry packet is written again and
it is verified that the write request is correctly executed.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2820'
        name = 'author'
        modelElement = 'S.876'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2821'
        name = 'see'
        modelElement = 'S.876'>
   <UML:TaggedValue.dataValue>
    	DC_CycleDataItem16TmStream
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2822'
        name = 'version'
        modelElement = 'S.876'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2823'
        name = 'documentation'
        modelElement = 'S.967'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_CYCLEDATAITEM16TMSTREAM*10+1 and &quot;TestCaseCycleDataItem16TmStream_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2824'
        name = 'documentation'
        modelElement = 'S.968'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2826'
        name = 'documentation'
        modelElement = 'S.929'>
   <UML:TaggedValue.dataValue>
    	Verify the services implemented
by class &lt;code&gt;CyclingPunctualActionModeManager&lt;/code&gt;.
For the test, the mode manager is configured as follows:
&lt;ul&gt;
&lt;li&gt;The number of modes (and hence the number of lists) is 3&lt;/li&gt;
&lt;li&gt;The length of the three lists associated to the three
modes is as follows: 3, 2, 3&lt;/li&gt;
&lt;li&gt;The items loaded in the the lists are instances of class
&lt;code&gt;DC_DummyPunctualAction&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
The following specific checks are performed on the list mode manager:&lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is verified.&lt;/li&gt;
&lt;li&gt;It is verified that the mode manager is not configured at
creation.&lt;/li&gt;
&lt;li&gt;The mode manager is configured as described above and
it is verified that the configuration check service reports:
&quot;object configured&quot;.&lt;/li&gt;
&lt;li&gt;An iteration through the items in the current list
is performed and it is verified that the items in the list
are returned without error and in the correct sequence.&lt;/li&gt;
&lt;li&gt;A (non-nominal) call to method &lt;code&gt;nextInt&lt;/code&gt; is performed
after the iteration has terminated and it is verified that the
last item in the iteration list is returned.&lt;/li&gt;
&lt;li&gt;A new iteration is performed. While the iteration is under
way, an update request is performed and it is verified
that this has no effect on the continuation of the iteration.&lt;/li&gt;
&lt;li&gt;Non-nominal behaviour check: an attempt is made to reconfigure the
list by loading an item at a non-existent location and it is checked that
the correct event is generated.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2827'
        name = 'author'
        modelElement = 'S.929'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2828'
        name = 'see'
        modelElement = 'S.929'>
   <UML:TaggedValue.dataValue>
    	DC_CyclingPunctualActionModeManager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2829'
        name = 'version'
        modelElement = 'S.929'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2830'
        name = 'documentation'
        modelElement = 'S.969'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_CYCLINGPUNCTUALACTIONMODEMANAGER*10+1 and &quot;TestCaseCyclingPunctualActionModeManager_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2831'
        name = 'documentation'
        modelElement = 'S.970'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2833'
        name = 'documentation'
        modelElement = 'S.847'>
   <UML:TaggedValue.dataValue>
    	Verify the services implemented
by class &lt;code&gt;CyclingTelemetryListModeManager&lt;/code&gt;.
For the test, the list mode manager is configured as follows:
&lt;ul&gt;
&lt;li&gt;The number of modes (and hence the number of lists) is 3&lt;/li&gt;
&lt;li&gt;The length of the three lists associated to the three
modes is as follows: 3, 2, 3&lt;/li&gt;
&lt;li&gt;The items loaded in the the lists are instances of class
&lt;code&gt;DC_DummyTelemetryPacket&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
The following specific checks are performed on the list mode manager:&lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is verified.&lt;/li&gt;
&lt;li&gt;It is verified that the mode manager is not configured at
creation.&lt;/li&gt;
&lt;li&gt;The mode manager is configured as described above and
it is verified that the configuration check service reports:
&quot;object configured&quot;.&lt;/li&gt;
&lt;li&gt;An iteration through the items in the current list
is performed and it is verified that the items in the list
are returned without error and in the correct sequence.&lt;/li&gt;
&lt;li&gt;A (non-nominal) call to method &lt;code&gt;nextInt&lt;/code&gt; is performed
after the iteration has terminated and it is verified that the
last item in the iteration list is returned.&lt;/li&gt;
&lt;li&gt;A new iteration is performed. While the iteration is under
way, an update request is performed and it is verified
that this has no effect on the continuation of the iteration.&lt;/li&gt;
&lt;li&gt;Non-nominal behaviour check: an attempt is made to reconfigure the
list by loading an item at a non-existent location and it is checked that
the correct event is generated.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2834'
        name = 'author'
        modelElement = 'S.847'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2835'
        name = 'see'
        modelElement = 'S.847'>
   <UML:TaggedValue.dataValue>
    	DC_CyclingTelemetryModeManager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2836'
        name = 'version'
        modelElement = 'S.847'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2837'
        name = 'documentation'
        modelElement = 'S.971'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_CYCLINGTELEMETRYMODEMANAGER*10+1 and &quot;TestCaseDummyListModeManager_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2838'
        name = 'documentation'
        modelElement = 'S.972'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2840'
        name = 'documentation'
        modelElement = 'S.865'>
   <UML:TaggedValue.dataValue>
    	Verify the structured telemetry packet services as implemented
by class &lt;code&gt;DC_DataItem16TmWord&lt;/code&gt;.
An instance of this class is created and the following specific
tests are performed: &lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is verified.&lt;/li&gt;
&lt;li&gt;It is verified that the configuration check service of the object
initially reports &quot;object not configured&quot;.&lt;/li&gt;
&lt;li&gt;A data item object is loaded into the &lt;code&gt;DC_DataItem16TmWord&lt;/code&gt;
and it is verified that the configuration check service now reports
&quot;object configured&quot;.&lt;/li&gt;
&lt;li&gt;It is verified that the &lt;code&gt;getNumberOfBytes&lt;/code&gt; on
&lt;code&gt;DC_DataItem16TmWord&lt;/code&gt; reports the correct result.&lt;/li&gt;
&lt;li&gt;It is verified that the &lt;i&gt;validity service&lt;/i&gt; on
&lt;code&gt;DC_DataItem16TmWord&lt;/code&gt; reports &quot;data valid&quot;.&lt;/li&gt;
&lt;li&gt;An &lt;i&gt;update request&lt;/i&gt; is made to the &lt;code&gt;DC_DataItem16TmWord&lt;/code&gt;.
This is followed by a &lt;i&gt;data acquisition request&lt;/i&gt;. This is implemented
first through the &lt;code&gt;getUnsignedShort&lt;/code&gt; and then through the
&lt;code&gt;getUnsignedByte&lt;/code&gt; services and it is verified that in
both cases the correct values are returned.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2841'
        name = 'author'
        modelElement = 'S.865'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2842'
        name = 'see'
        modelElement = 'S.865'>
   <UML:TaggedValue.dataValue>
    	DC_DataItem16TmWord
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2843'
        name = 'version'
        modelElement = 'S.865'>
   <UML:TaggedValue.dataValue>
    	1.1
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2844'
        name = 'documentation'
        modelElement = 'S.973'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_DATAITEM16TMWORD*10+1 and &quot;TestCaseDataItem16TmWord_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2845'
        name = 'documentation'
        modelElement = 'S.974'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2847'
        name = 'documentation'
        modelElement = 'S.887'>
   <UML:TaggedValue.dataValue>
    	Check the data set and get services for class &lt;code&gt;DC_DataItem&lt;/code&gt;.
Two &lt;code&gt;DC_DataItem&lt;/code&gt; objects are created to encapsulate access to,
respectively, a &lt;code&gt;TD_Float&lt;/code&gt; and &lt;code&gt;TD_Integer&lt;/code&gt; variable.
The following specific checks are performed:
&lt;ol&gt;
&lt;li&gt;The values of the encapsulated variables are set and then read back
through the data item accessor methods and it is checked that the read-back value
is correct.&lt;/li&gt;
&lt;li&gt;The values of the data item are set through the data item accessor methods
and then read back and it is checked that the read-back value
is correct.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2848'
        name = 'author'
        modelElement = 'S.887'>
   <UML:TaggedValue.dataValue>
    	Roberto Totaro
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2849'
        name = 'version'
        modelElement = 'S.887'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2850'
        name = 'documentation'
        modelElement = 'S.975'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_DATAITEM*10+1 and &quot;TestCaseDataItem_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2851'
        name = 'documentation'
        modelElement = 'S.976'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2853'
        name = 'documentation'
        modelElement = 'S.888'>
   <UML:TaggedValue.dataValue>
    	Verify the services provided by the &lt;code&gt;DC_DataPoolMonitor&lt;/code&gt; class.
A &lt;code&gt;DC_SampleFullDataPool&lt;/code&gt; is created and configured with
a &lt;code&gt;DC_NullRecoveryAction&lt;/code&gt; and a &lt;code&gt;DC_OutOfRangeProfile&lt;/code&gt;
for each of the values it contains. The data pool is then linked to the
&lt;code&gt;CC_RootObject&lt;/code&gt;. A &lt;code&gt;DC_DataPoolMonitor&lt;/code&gt; object
is then created and the following tests are performed upon it: &lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is verified.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;execute()&lt;/code&gt; method is called and it is verified that the
validity status of the data items is left unchanged and no recovery action
was invoked.&lt;/li&gt;
&lt;li&gt;The values in the data pool are set outside the range defined by the
monitoring profiles and &lt;code&gt;DC_DataPoolMonitor::execute()&lt;/code&gt; is
invoked once again. It is then checked that the validity status of all the
values in the data pool is set to &lt;code&gt;NOT_VALID&lt;/code&gt; and that the
recovery actions were invoked.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2854'
        name = 'author'
        modelElement = 'S.888'>
   <UML:TaggedValue.dataValue>
    	Roberto Totaro
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2855'
        name = 'version'
        modelElement = 'S.888'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2856'
        name = 'documentation'
        modelElement = 'S.977'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_DATAPOOLMONITOR*10+1 and &quot;TestCaseDataPoolMonitor_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2857'
        name = 'documentation'
        modelElement = 'S.978'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2859'
        name = 'documentation'
        modelElement = 'S.879'>
   <UML:TaggedValue.dataValue>
    	Check the functionality of the &lt;code&gt;DeltaProfile&lt;/code&gt; class.
One instance of the class is created and
the following specific tests are performed: &lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is verified.&lt;/li&gt;
&lt;li&gt;It is verified that the configuration check service of the
simple change profile initially reports &quot;not configured&quot;.&lt;/li&gt;
&lt;li&gt;A delta threshold is loaded in the profile component
and it is verified that the load operation is correctly performed.&lt;/li&gt;
&lt;li&gt;It is verified that the configuration check service of the
profile component reports &quot;configured&quot;.&lt;/li&gt;
&lt;li&gt;A sequence of test values of double type that should not
trigger the profile are
passed through its monitoring check service it is verified that the
check service reports &quot;no deviation from profile detected&quot;.&lt;/li&gt;
&lt;li&gt;A sequence of test values of double type that should trigger
the monitoring
check are passed through the profile component and it is verified that
the check service reports &quot;deviation from profile detected&quot;.&lt;/li&gt;
&lt;li&gt;A reset operation is performed and it is verified that
this interrupts the execution of the monitoring check.&lt;/li&gt;
&lt;li&gt;A sequence of test values of integer type that should not
trigger the profile are
passed through its monitoring check service it is verified that the
check service reports &quot;no deviation from profile detected&quot;.&lt;/li&gt;
&lt;li&gt;A sequence of test values of integer type that should trigger
the monitoring
check are passed through the profile component and it is verified that
the check service reports &quot;deviation from profile detected&quot;.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2860'
        name = 'author'
        modelElement = 'S.879'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2861'
        name = 'see'
        modelElement = 'S.879'>
   <UML:TaggedValue.dataValue>
    	DC_DeltaProfile
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2862'
        name = 'version'
        modelElement = 'S.879'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2863'
        name = 'documentation'
        modelElement = 'S.979'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_DELTAPROFILE*10+1 and &quot;TestCaseStuckDeltaProfile_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2864'
        name = 'documentation'
        modelElement = 'S.980'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2866'
        name = 'documentation'
        modelElement = 'S.840'>
   <UML:TaggedValue.dataValue>
    	Verify the services of conditional punctual actions. One
&lt;code&gt;DC_DummyConditionalPunctualAction&lt;/code&gt; object is created and the following
tests are performed upon it: &lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is verified.&lt;/li&gt;
&lt;li&gt;The execution flag is set to &lt;code&gt;false&lt;/code&gt; and an &lt;code&gt;execute&lt;/code&gt; request
is made on the conditional punctual action. It is verified that the outcome is
&lt;code&gt;ACTION_CANNOT_EXECUTE&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The execution flag is set to &lt;code&gt;true&lt;/code&gt; and an &lt;code&gt;execute&lt;/code&gt; request
is made on the conditional punctual action. It is verified that the outcome is
&lt;code&gt;ACTION_SUCCESS&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2867'
        name = 'author'
        modelElement = 'S.840'>
   <UML:TaggedValue.dataValue>
    	Roberto Totaro
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2868'
        name = 'see'
        modelElement = 'S.840'>
   <UML:TaggedValue.dataValue>
    	DC_DummyConditionalPunctualAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2869'
        name = 'see'
        modelElement = 'S.840'>
   <UML:TaggedValue.dataValue>
    	ConditionalPunctualAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2870'
        name = 'version'
        modelElement = 'S.840'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2871'
        name = 'documentation'
        modelElement = 'S.981'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_DUMMYCONDITIONALPUNCTUALACTION*10+1 and &quot;TestCaseDummyConditionalPunctualAction_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2872'
        name = 'documentation'
        modelElement = 'S.982'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2874'
        name = 'documentation'
        modelElement = 'S.909'>
   <UML:TaggedValue.dataValue>
    	Verify the services implemented by the
&lt;code&gt;DC_DummyConfigurableManoeuvre&lt;/code&gt;. One instance
of this class is created and the following tests are performed
upon it: &lt;ol&gt;
&lt;li&gt;The correctness of the class identified is verified.&lt;/li&gt;
&lt;li&gt;It is verified that the action counters are equal to zero at
creation.&lt;/li&gt;
&lt;li&gt;The manoeuvre is put in use it is verified that its
start check returns &quot;manoeuvre cannot start&quot;.&lt;/li&gt;
&lt;li&gt;The initialization action is performed and it is verified that
the initialization action counter is incremented by one.&lt;/li&gt;
&lt;li&gt;The continuation action is performed and it is verified that
the continuation action counter is incremented by one.&lt;/li&gt;
&lt;li&gt;It is verified that the continuaion check returns &quot;manoeuvre
cannot continue&quot;.&lt;/li&gt;
&lt;li&gt;It is verified that the termination check returns &quot;manoeuvre
cannot terminate&quot;.&lt;/li&gt;
&lt;li&gt;The termination action is executed and it is verfied that the
termination action counter is incremented by one.&lt;/li&gt;
&lt;li&gt;The configurable return values of the manoeuvre checks are
inverted through method &lt;code&gt;setCheckStatus&lt;/code&gt;. A complete
execution cycle for the manoeuvre is executed again (initialization,
one continuation action, termination) and it is verified that the
return values of the manoeuvre checks reflect the new settings.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2875'
        name = 'author'
        modelElement = 'S.909'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2876'
        name = 'see'
        modelElement = 'S.909'>
   <UML:TaggedValue.dataValue>
    	DC_DummyConfigurableManoeuvre
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2877'
        name = 'see'
        modelElement = 'S.909'>
   <UML:TaggedValue.dataValue>
    	Manoeuvre
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2878'
        name = 'version'
        modelElement = 'S.909'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2879'
        name = 'documentation'
        modelElement = 'S.983'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_DUMMYCONFIGURABLEMANOEUVRE*10+1 and &quot;TestCaseDummyConfigurableManoeuvre_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2880'
        name = 'documentation'
        modelElement = 'S.984'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2882'
        name = 'documentation'
        modelElement = 'S.896'>
   <UML:TaggedValue.dataValue>
    	Check the services implemented by the &lt;code&gt;CopyControlBlock&lt;/code&gt; class.
Since this class is abstract, the check is performed upon
its concrete subclass &lt;code&gt;DC_DummyCopyControlBlock&lt;/code&gt;. One instance
of this class is created and the following checks are performed upon it: &lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is verified.&lt;/li&gt;
&lt;li&gt;It is verified that the control block is configured at creation.&lt;/li&gt;
&lt;li&gt;The number of states, inputs, outputs and parameters is read
with the getter methods and it is checked that their values are correct.&lt;/li&gt;
&lt;li&gt;It is verified that the initial values of the state and inputs are correctly set.&lt;/li&gt;
&lt;li&gt;The parameter values are set and the correctness of their values is checked.&lt;/li&gt;
&lt;li&gt;The input values are set and &lt;code&gt;propagate()&lt;/code&gt; is invoked. It is
verified that both state and outputs are properly updated.&lt;/li&gt;
&lt;li&gt;The output values are set and the correctness of their values is checked.&lt;/li&gt;
&lt;li&gt;The state values are set and the correctness of their values is checked.&lt;/li&gt;
&lt;li&gt;Non-nominal behaviour check: an attempt is made to set a state value with an illegal state index and it is
checked that the correct event is generated.&lt;/li&gt;
&lt;li&gt;Non-nominal behaviour check: an  attempt is made to set an output value with an illegal output index and it is
checked that the correct event is generated.&lt;/li&gt;
&lt;li&gt;Non-nominal behaviour check: an  attempt is made to set an input value with an illegal input index and it is
checked that the correct event is generated.&lt;/li&gt;
&lt;li&gt;Non-nominal behaviour check: an  attempt is made to set a parameter value with an illegal parameter index and it is
checked that the correct event is generated.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;reset()&lt;/code&gt; method is invoked and it is verified that the
states and inputs are reset to their default values.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2883'
        name = 'author'
        modelElement = 'S.896'>
   <UML:TaggedValue.dataValue>
    	Roberto Totaro, Alessandro Pasetti
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2884'
        name = 'see'
        modelElement = 'S.896'>
   <UML:TaggedValue.dataValue>
    	DC_DummyCopyControlBlock
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2885'
        name = 'see'
        modelElement = 'S.896'>
   <UML:TaggedValue.dataValue>
    	CopyControlBlock
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2886'
        name = 'version'
        modelElement = 'S.896'>
   <UML:TaggedValue.dataValue>
    	1.2
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2887'
        name = 'documentation'
        modelElement = 'S.985'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_DUMMYCOPYCONTROLBLOCK*10+1 and &quot;TestCaseDummyCopyControlBlock_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2888'
        name = 'documentation'
        modelElement = 'S.986'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2890'
        name = 'documentation'
        modelElement = 'S.851'>
   <UML:TaggedValue.dataValue>
    	Verify the basic services offered by critical telecommands as implemented
by the &lt;code&gt;DC_DummyCriticalTelecommand&lt;/code&gt; class. The &lt;code&gt;canExecute()&lt;/code&gt;,
&lt;code&gt;doAction()&lt;/code&gt; and &lt;code&gt;reset()&lt;/code&gt; methods are tested by
&lt;code&gt;TestCaseDummyCriticalTelecommand_2&lt;/code&gt;. An instance of this class is created
and the following tests are performed:&lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is verified.&lt;/li&gt;
&lt;li&gt;The Telecommand class (CriticalTelecommand&apos;s base class) is
configured by invoking &lt;code&gt;setTimeTag()&lt;/code&gt;. It
is verified that the &lt;code&gt;DC_DummyCriticalTelecommand&lt;/code&gt; class is not yet fully
configured.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setMaxArmedDuration()&lt;/code&gt; is called. It is verified that the class is not
yet configured and that &lt;code&gt;getMaxArmedDuration&lt;/code&gt; returns the correct value.&lt;/li&gt;
&lt;li&gt;An &lt;code&gt;DC_DummyObsClock&lt;/code&gt; object is created and it is attached to the critical
telecommand by calling &lt;code&gt;setObsClock()&lt;/code&gt;. It is verified that the object is finally
configured and that &lt;code&gt;getObsClock()&lt;/code&gt; returns the correct value.&lt;/li&gt;
&lt;li&gt;It is verified that the newly created telecommand is critical and not armed.&lt;/li&gt;
&lt;li&gt;It is verified that the criticality level can be modified.&lt;/li&gt;
&lt;li&gt;It is verified that the image validity flag can be set and retrieved correctly.&lt;/li&gt;
&lt;li&gt;Finally, it is verified that the &quot;time when armed&quot; is set to an invalid value.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2891'
        name = 'author'
        modelElement = 'S.851'>
   <UML:TaggedValue.dataValue>
    	Roberto Totaro
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2892'
        name = 'see'
        modelElement = 'S.851'>
   <UML:TaggedValue.dataValue>
    	DC_DummyCriticalTelecommand
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2893'
        name = 'see'
        modelElement = 'S.851'>
   <UML:TaggedValue.dataValue>
    	TestCaseDummyCriticalTelecommand_2
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2894'
        name = 'version'
        modelElement = 'S.851'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2895'
        name = 'documentation'
        modelElement = 'S.987'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_DUMMYCRITICALTELECOMMAND*10+1 and &quot;TestCaseDummyCriticalTelecommand_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2896'
        name = 'documentation'
        modelElement = 'S.988'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2898'
        name = 'documentation'
        modelElement = 'S.849'>
   <UML:TaggedValue.dataValue>
    	Check selected functionalities of critical telecommands. The check
is performed on an instance of class &lt;code&gt;DC_DummyCriticalTelecommand&lt;/code&gt;.
The following functionalities are checked:&lt;ol&gt;
&lt;li&gt;&lt;code&gt;canExecute()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;doAction()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reset()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;doCriticalAction()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getNumberOfExecutions()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
An instance of the &lt;code&gt;DC_DummyCriticalTelecommand&lt;/code&gt; class is created
and the following tests are performed:&lt;ol&gt;
&lt;li&gt;The object is initialized and its criticality level set to NOT_CRITICAL.
It is verified that &lt;code&gt;canExecute()&lt;/code&gt; returns true.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;execute()&lt;/code&gt; is called and it is verified that it returns
&lt;code&gt;ACTION_SUCCESS&lt;/code&gt; and that &lt;code&gt;doCriticalAction()&lt;/code&gt; is called.&lt;/li&gt;
&lt;li&gt;The TC criticality level is set to CRITICAL, &lt;code&gt;canExecute()&lt;/code&gt; is called
and it is verified that it returns true.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;execute()&lt;/code&gt; is invoked and it is verified that it returns
&lt;code&gt;ACTION_SUCCESS&lt;/code&gt;, that the TC is armed, that &lt;code&gt;timeWhenArmed&lt;/code&gt; is
set to the current time and that an &lt;code&gt;EVT_CRIT_TC_ARMED&lt;/code&gt; event is added
to the repository.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;canExecute()&lt;/code&gt; is invoced once again. This time it shall fail and add an
&lt;code&gt;EVT_CRIT_TC_IMG_INV&lt;/code&gt; event to the repository (the TC image is not valid). The
TC shall still be armed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reset()&lt;/code&gt; is called and it is verified that all the state variables are
set to their initial values. &lt;code&gt;pObsClock&lt;/code&gt; can not be accessed, however.&lt;/li&gt;
&lt;li&gt;The TC is re-initialized, re-armed (by calling &lt;code&gt;execute&lt;/code&gt;) and the image
validity flag is set to true. A this point it is verified that &lt;code&gt;canExecute()&lt;/code&gt;
returns true.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;execute()&lt;/code&gt; is invoked and it is verified that &lt;code&gt;numberOfExecutions&lt;/code&gt;
is incremented (meaning that &lt;code&gt;doCriticalAction&lt;/code&gt; was invoked). It is also
verified that the TC is no longer armed and that the &quot;time when armed&quot; is set to an
invalid value.&lt;/li&gt;
&lt;li&gt;The TC is reset, initialized and re-armed. The image validity is set to true and the
OBS clock is advanced to the end of the TC&apos;s armed duration interval. It is then
verified that a call to &lt;code&gt;canExecute()&lt;/code&gt; returns false and that an event of type
&lt;code&gt;EVT_CRIT_TC_TIMEOUT&lt;/code&gt; is added to the repository.&lt;/li&gt;
&lt;li&gt;The previous step is repeated with the only difference that now the image validity
flag is set to false.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2899'
        name = 'author'
        modelElement = 'S.849'>
   <UML:TaggedValue.dataValue>
    	Roberto Totaro
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2900'
        name = 'see'
        modelElement = 'S.849'>
   <UML:TaggedValue.dataValue>
    	DC_DummyCriticalTelecommand
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2901'
        name = 'see'
        modelElement = 'S.849'>
   <UML:TaggedValue.dataValue>
    	TestCaseDummyCriticalTelecommand_1
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2902'
        name = 'version'
        modelElement = 'S.849'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2903'
        name = 'documentation'
        modelElement = 'S.989'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_DUMMYCRITICALTELECOMMAND*10+2 and &quot;TestCaseDummyCriticalTelecommand_2&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2904'
        name = 'documentation'
        modelElement = 'S.990'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2906'
        name = 'documentation'
        modelElement = 'S.930'>
   <UML:TaggedValue.dataValue>
    	Check the functionalities implemented by the
&lt;code&gt;DC_DummyDatabase&lt;/code&gt; component.
An instance of the component is created and the following
specific checks are performed upon it: &lt;ol&gt;
&lt;li&gt;It is checked that the class ID of the component has the correct value.&lt;/li&gt;
&lt;li&gt;It is verified that the size of the database has the correct value.&lt;/li&gt;
&lt;li&gt;It is verified that the single item in the database has the correct value.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2907'
        name = 'author'
        modelElement = 'S.930'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2908'
        name = 'see'
        modelElement = 'S.930'>
   <UML:TaggedValue.dataValue>
    	DC_BasicDatabase
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2909'
        name = 'version'
        modelElement = 'S.930'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2910'
        name = 'documentation'
        modelElement = 'S.991'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_DUMMYDATABASE*10+1 and &quot;TestCaseDummyDatabase_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2911'
        name = 'documentation'
        modelElement = 'S.992'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2913'
        name = 'documentation'
        modelElement = 'S.866'>
   <UML:TaggedValue.dataValue>
    	Check the services implemented by the &lt;code&gt;DataItemControlBlock&lt;/code&gt; class.
Since this class is abstract, the check is performed upon
its concrete subclass &lt;code&gt;DC_DummyDataItemControlBlock&lt;/code&gt;. One instance
of this class is created and the following checks are performed upon it:&lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is verified.&lt;/li&gt;
&lt;li&gt;The number of states, inputs, outputs and parameters read
with the getter methods and it is checked that their values are correct.&lt;/li&gt;
&lt;li&gt;The control block&apos;s inputs and outputs are linked to previously created
&lt;code&gt;DC_DataItem&lt;/code&gt; objects and it is verified that the control block
is configured only when all inputs and outputs are linked.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reset()&lt;/code&gt; is called and it is verified that the initial values of
the state variables are correctly set.&lt;/li&gt;
&lt;li&gt;The parameter values are set and the correctness of their values is checked.&lt;/li&gt;
&lt;li&gt;The input values are set and &lt;code&gt;propagate()&lt;/code&gt; is invoked. It is
verified that both state and outputs are properly updated.&lt;/li&gt;
&lt;li&gt;The state values are set and the correctness of their values is checked.&lt;/li&gt;
&lt;/ol&gt;
The following tests are performed only if the non nominal checks are allowed:
&lt;ol&gt;
&lt;li&gt;An attempt is made to link an input with an illegal index and it is
checked that the correct event is generated.&lt;/li&gt;
&lt;li&gt;An attempt is made to link an output with an illegal index and it is
checked that the correct event is generated.&lt;/li&gt;
&lt;li&gt;An attempt is made to set a state value with an illegal index and it is
checked that the correct event is generated.&lt;/li&gt;
&lt;li&gt;An attempt is made to set a parameter value with an illegal index and
it is  checked that the correct event is generated.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2914'
        name = 'author'
        modelElement = 'S.866'>
   <UML:TaggedValue.dataValue>
    	Roberto Totaro
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2915'
        name = 'see'
        modelElement = 'S.866'>
   <UML:TaggedValue.dataValue>
    	DC_DummyDataItemControlBlock
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2916'
        name = 'see'
        modelElement = 'S.866'>
   <UML:TaggedValue.dataValue>
    	DataItemControlBlock
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2917'
        name = 'version'
        modelElement = 'S.866'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2918'
        name = 'documentation'
        modelElement = 'S.993'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_DUMMYDATAITEMCONTROLBLOCK*10+1 and &quot;TestCaseDummyDataItemControlBlock_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2919'
        name = 'documentation'
        modelElement = 'S.994'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2921'
        name = 'documentation'
        modelElement = 'S.916'>
   <UML:TaggedValue.dataValue>
    	Check the functionalities implemented by the &lt;code&gt;DC_DummyDataPool&lt;/code&gt; class.
An instance of the component is created and the following
specific checks are performed upon it: &lt;ol&gt;
&lt;li&gt;It is verified that the class identifier has the correct value.&lt;/li&gt;
&lt;li&gt;It is verified that the size of the data pool is equal to the size of the type
&lt;code&gt;TD_Integer&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;It is verified that the value of the item in the data pool is zero.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2922'
        name = 'author'
        modelElement = 'S.916'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2923'
        name = 'see'
        modelElement = 'S.916'>
   <UML:TaggedValue.dataValue>
    	DC_BasicDataPool
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2924'
        name = 'version'
        modelElement = 'S.916'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2925'
        name = 'documentation'
        modelElement = 'S.995'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_DUMMYDATAPOOL*10+1 and &quot;TestCaseDummyDataPool_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2926'
        name = 'documentation'
        modelElement = 'S.996'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2928'
        name = 'documentation'
        modelElement = 'S.908'>
   <UML:TaggedValue.dataValue>
    	Check the services implemented by the &lt;code&gt;DataPoolControlBlock&lt;/code&gt; class.
Since this class is abstract, the check is performed upon
its concrete subclass &lt;code&gt;DC_DummyDataPoolControlBlock&lt;/code&gt;. One instance
of this class is created and the following checks are performed upon it:&lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is verified.&lt;/li&gt;
&lt;li&gt;The number of states, inputs, outputs and parameters read
with the getter methods and it is checked that their values are correct.&lt;/li&gt;
&lt;li&gt;The control block&apos;s inputs and outputs are linked to a previously configured
&lt;code&gt;DC_BasicDataPool&lt;/code&gt; object and it is verified that the control block
is configured only when all inputs and outputs are linked.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reset()&lt;/code&gt; is called and it is verified that the initial values of
the state variables are correctly set.&lt;/li&gt;
&lt;li&gt;The parameter values are set and the correctness of their values is checked.&lt;/li&gt;
&lt;li&gt;The input values are set and &lt;code&gt;propagate()&lt;/code&gt; is invoked. It is
verified that both state and outputs are properly updated.&lt;/li&gt;
&lt;li&gt;The state values are set and the correctness of their values is checked.&lt;/li&gt;
&lt;/ol&gt;
The following tests are performed only if the non nominal checks are allowed:
&lt;ol&gt;
&lt;li&gt;An attempt is made to link an input with an illegal index and it is
checked that the correct event is generated.&lt;/li&gt;
&lt;li&gt;An attempt is made to link an output with an illegal index and it is
checked that the correct event is generated.&lt;/li&gt;
&lt;li&gt;An attempt is made to set a state value with an illegal index and it is
checked that the correct event is generated.&lt;/li&gt;
&lt;li&gt;An attempt is made to set a parameter value with an illegal index and
it is  checked that the correct event is generated.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2929'
        name = 'author'
        modelElement = 'S.908'>
   <UML:TaggedValue.dataValue>
    	Roberto Totaro
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2930'
        name = 'see'
        modelElement = 'S.908'>
   <UML:TaggedValue.dataValue>
    	DC_DummyDataPoolControlBlock
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2931'
        name = 'see'
        modelElement = 'S.908'>
   <UML:TaggedValue.dataValue>
    	DataPoolControlBlock
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2932'
        name = 'version'
        modelElement = 'S.908'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2933'
        name = 'documentation'
        modelElement = 'S.997'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_DUMMYDATAPOOLCONTROLBLOCK*10+1 and &quot;TestCaseDummyDataPoolControlBlock_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2934'
        name = 'documentation'
        modelElement = 'S.998'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2936'
        name = 'documentation'
        modelElement = 'S.841'>
   <UML:TaggedValue.dataValue>
    	Verify the functionalities implemented by the
&lt;code&gt;DC_FsmEvent&lt;/code&gt; component.
An instance of the &lt;code&gt;DC_DummyFsmState&lt;/code&gt; is created and the following
specific tests are performed upon it: &lt;ol&gt;
&lt;li&gt;It is verified that the class ID of the component has the correct value.&lt;/li&gt;
&lt;li&gt;It is verified that the &quot;next state&quot; at creation is pNULL.&lt;/li&gt;
&lt;li&gt;A &quot;next state&quot; is loaded in the component and it is verified that
the load operation is correctly executed.&lt;/li&gt;
&lt;li&gt;It is verified that the initialization, exit and termination checks report
the correct results.&lt;/li&gt;
&lt;li&gt;The initialization, continued and exit actions are executed and then it is
verified that the initialization, exit and termination checks still report
the correct results.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2937'
        name = 'author'
        modelElement = 'S.841'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2938'
        name = 'version'
        modelElement = 'S.841'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2939'
        name = 'documentation'
        modelElement = 'S.999'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_OBSDUMMYFSMSTATE*10+1 and &quot;TestCaseDummyFsmState_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2940'
        name = 'documentation'
        modelElement = 'S.1000'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2942'
        name = 'documentation'
        modelElement = 'S.868'>
   <UML:TaggedValue.dataValue>
    	Verify the services implemented by the &lt;code&gt;Manoeuvre&lt;/code&gt; class.
Since this class is abstract, the verification is performed upon
its concrete subclass &lt;code&gt;DC_DummyManoeuvre&lt;/code&gt;. One instance
of this class is created and the following tests are performed upon it: &lt;ol&gt;
&lt;li&gt;The correctness of the class identified is verified.&lt;/li&gt;
&lt;li&gt;It is verified that the manoeuvre is enabled at creation.&lt;/li&gt;
&lt;li&gt;It is verified that the continuation check code is equal to zero.&lt;/li&gt;
&lt;li&gt;It is verified that the inUse flag at creation has value:
&quot;not in use&quot;.&lt;/li&gt;
&lt;li&gt;It is verified that the isExecuting flag at creation has value:
&quot;not executing&quot;.&lt;/li&gt;
&lt;li&gt;It is verified that the isSuspended flag at creation has value:
&quot;not suspended&quot;.&lt;/li&gt;
&lt;li&gt;The manoeuvre is disabled and it is verified that the change in
enable status is correctly reported by the manoeuvre.&lt;/li&gt;
&lt;li&gt;The inUse status of the manoeuvre is changed to &quot;manoeuvre
in use&quot; and it is verified that the status change is correctly
reported.&lt;/li&gt;
&lt;li&gt;The isSuspended status of the manoeuvre is changed to &quot;manoeuvre
is suspended&quot; and it is verified that the status change is correctly
reported.&lt;/li&gt;
&lt;li&gt;It is verified that the correct event is generated to record
the supension of the manoeuvre.&lt;/li&gt;
&lt;li&gt;The isSuspended status is changed back to &quot;not suspended&quot; and it is
verified that the correct event is generated to record
the resumption of the manoeuvre.&lt;/li&gt;
&lt;li&gt;It is verified that its start check reports:
&quot;manoeuvre cannot start&quot; (the manoeuvre is still disabled).&lt;/li&gt;
&lt;li&gt;The manoeuvre is enabled and it is verified that its start
check now reports: &quot;manoeuvre can start&quot;.&lt;/li&gt;
&lt;li&gt;The initialization and continuation actions are executed
once and it is verified that the isExecuting flag changes its
value to: &quot;manoeuvre is executing&quot;.&lt;/li&gt;
&lt;li&gt;It is verified that the correct event is generated to record
the start of the execution of the manoeuvre.&lt;/li&gt;
&lt;li&gt;It is verified that the continuation check of the manoeuvre
reports: &quot;manoeuvre can continue&quot;.&lt;/li&gt;
&lt;li&gt;It is verified that the termination check of the manoeuvre reports
&quot;manoeuvre has terminated execution&quot;.&lt;/li&gt;
&lt;li&gt;An abort request is issued to the manoeuvre and it is
verified that its isExecuting flag changes its
value to: &quot;manoeuvre is not executing&quot;.&lt;/li&gt;
&lt;li&gt;It is verified that the correct event is generated to record
the abort of the nanoeuvre.&lt;/li&gt;
&lt;li&gt;The manoeuvre is again brought into &quot;executing&quot; status by
executing its initialization and continuation actions. The
termination action is then executed and it is verified that
the isExecuting flag changes its value to: &quot;manoeuvre is
not executing&quot;.&lt;/li&gt;
&lt;li&gt;It is verified that the correct event is generated to record
the termination of the manoeuvre.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2943'
        name = 'author'
        modelElement = 'S.868'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2944'
        name = 'see'
        modelElement = 'S.868'>
   <UML:TaggedValue.dataValue>
    	DC_DummyManoeuvre
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2945'
        name = 'see'
        modelElement = 'S.868'>
   <UML:TaggedValue.dataValue>
    	Manoeuvre
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2946'
        name = 'version'
        modelElement = 'S.868'>
   <UML:TaggedValue.dataValue>
    	1.1
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2947'
        name = 'documentation'
        modelElement = 'S.1001'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_DUMMYMANOEUVRE*10+1 and &quot;TestCaseDummyManoeuvre_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2948'
        name = 'documentation'
        modelElement = 'S.1002'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2950'
        name = 'documentation'
        modelElement = 'S.897'>
   <UML:TaggedValue.dataValue>
    	Verify the configuration and mode management services implemented
by class &lt;code&gt;ModeManager&lt;/code&gt;. Since this class is abstract, the
verification is performed on the class &lt;code&gt;DummyModeManager&lt;/code&gt;.
An instance of this class is created and the following tests
are performed upon it: &lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is verified.&lt;/li&gt;
&lt;li&gt;It is verified that the mode manager is not configured at
creation.&lt;/li&gt;
&lt;li&gt;The number of modes is loaded and the correctness of the
load operation is verified.&lt;/li&gt;
&lt;li&gt;The default mode is loaded and it is verified that the mode
manager is now configured and that the current mode is
equal to the default mode.&lt;/li&gt;
&lt;li&gt;noon-nominal behaviour check: an out-of-range default mode is loaded and
it is checked that the correct event is generated.&lt;/li&gt;
&lt;li&gt;It is verified that all mode transitions are enabled.&lt;/li&gt;
&lt;li&gt;An update request is performed, it is verified that it
results in a change of mode and that this is recorded as an
event.&lt;/li&gt;
&lt;li&gt;All mode transitions are disabled and it is verified that
the disable request is correctly performed.&lt;/li&gt;
&lt;li&gt;A second update request is performed, it is verified that
no mode change occurs, and that an event is generated to
report the fact that a mode transition was attempted but
could not be executed because the transition was disabled.&lt;/li&gt;
&lt;li&gt;General mode transitions are again enabled and then mode
transitions to a particular target mode are
disabled and it is verified that the disable request is
correctly executed.&lt;/li&gt;
&lt;li&gt;A third update request is performed that should trigger
the disabled mode transition and it is verified that
no mode transition occurs.&lt;/li&gt;
&lt;li&gt;Non-nominal behaviour check: an attempt is made to disable mode
transitions to an out-of-range target mode and it is checked
that the correct event is generated.&lt;/li&gt;
&lt;li&gt;A reset request is made and it is verified that the state
of the mode manager is brought back to where it was after
the component&apos;s configuration was terminated.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2951'
        name = 'author'
        modelElement = 'S.897'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2952'
        name = 'see'
        modelElement = 'S.897'>
   <UML:TaggedValue.dataValue>
    	DC_DummyModeManager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2953'
        name = 'see'
        modelElement = 'S.897'>
   <UML:TaggedValue.dataValue>
    	ModeManager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2954'
        name = 'version'
        modelElement = 'S.897'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2955'
        name = 'documentation'
        modelElement = 'S.1003'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_DUMMYMODEMANAGER*10+1 and &quot;TestCaseDummyModeManager_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2956'
        name = 'documentation'
        modelElement = 'S.1004'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2958'
        name = 'documentation'
        modelElement = 'S.899'>
   <UML:TaggedValue.dataValue>
    	Verify the timing provision and object configuration services of class
&lt;code&gt;DC_DummyObsClock&lt;/code&gt;.
The following specific tests are performed: &lt;ol&gt;
&lt;li&gt;A &lt;code&gt;DC_DummyObsClock&lt;/code&gt; instance is created and it is verified
that its object configuration service reports &quot;object configured&quot;.&lt;/li&gt;
&lt;li&gt;The OBS time and cycle services are called on the newly created object
and it is verified that they report 0.&lt;/li&gt;
&lt;li&gt;The OBS time and cycle are set with the &lt;code&gt;setTime&lt;/code&gt; service and
it is then verified that the OBS time and cycle services report the newly
set values.&lt;/li&gt;
&lt;li&gt;The Dummy OBS Clock component is reset and it is verified that its time
and cycle data are reset to 0.&lt;/li&gt;
&lt;li&gt;A dummy call to method &lt;code&gt;synchronizeWithSystemTime&lt;/code&gt; is done.
This is necessary to ensure full statement coverage of the class under test.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2959'
        name = 'author'
        modelElement = 'S.899'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2960'
        name = 'version'
        modelElement = 'S.899'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2961'
        name = 'documentation'
        modelElement = 'S.1005'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_OBSDUMMYCLOCK*10+1 and &quot;TestCaseDummyObsClock_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2962'
        name = 'documentation'
        modelElement = 'S.1006'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2964'
        name = 'documentation'
        modelElement = 'S.852'>
   <UML:TaggedValue.dataValue>
    	Check the services implemented by the &lt;code&gt;PointerControlBlock&lt;/code&gt; class.
Since this class is abstract, the check is performed upon
its concrete subclass &lt;code&gt;DC_DummyPointerControlBlock&lt;/code&gt;. One instance
of this class is created and the following checks are performed upon it: &lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is verified.&lt;/li&gt;
&lt;li&gt;The number of states, inputs, outputs and parameters read
with the getter methods and it is checked that their values are correct.&lt;/li&gt;
&lt;li&gt;The input and output variables are linked to the control block and it is
verified that the object is configured only when all the variables are linked.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reset()&lt;/code&gt; is called and it is verified that the initial values of
the state variables are correctly set.&lt;/li&gt;
&lt;li&gt;The parameter values are set and the correctness of their values is checked.&lt;/li&gt;
&lt;li&gt;The input values are set and &lt;code&gt;propagate()&lt;/code&gt; is invoked. It is
verified that both state and outputs are properly updated.&lt;/li&gt;
&lt;li&gt;The state values are set and the correctness of their values is checked.&lt;/li&gt;
&lt;li&gt;Non-nominal behaviour check: an attempt is made to set a state value with an illegal state index and it is
checked that the correct event is generated.&lt;/li&gt;
&lt;li&gt;Non-nominal behaviour check: an attempt is made to set a parameter value with an illegal parameter index and it is
checked that the correct event is generated.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2965'
        name = 'author'
        modelElement = 'S.852'>
   <UML:TaggedValue.dataValue>
    	Roberto Totaro
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2966'
        name = 'see'
        modelElement = 'S.852'>
   <UML:TaggedValue.dataValue>
    	DC_DummyPointerControlBlock
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2967'
        name = 'see'
        modelElement = 'S.852'>
   <UML:TaggedValue.dataValue>
    	PointerControlBlock
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2968'
        name = 'version'
        modelElement = 'S.852'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2969'
        name = 'documentation'
        modelElement = 'S.1007'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_DUMMYPOINTERCONTROLBLOCK*10+1 and &quot;TestCaseDummyPointerControlBlock_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2970'
        name = 'documentation'
        modelElement = 'S.1008'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2972'
        name = 'documentation'
        modelElement = 'S.857'>
   <UML:TaggedValue.dataValue>
    	Verify the enable service and the event registration service
of punctual actions.
One &lt;code&gt;DC_DummyPunctualAction&lt;/code&gt; is created and the following tests
are performed upon it: &lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is verified.&lt;/li&gt;
&lt;li&gt;It is verified that the punctual action is enabled at creation.&lt;/li&gt;
&lt;li&gt;It is verified that &lt;code&gt;getLastOutcome&lt;/code&gt; returns &lt;code&gt;ACTION_RESET&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;An &lt;code&gt;execute&lt;/code&gt; request is made on the punctual action and it is verified
that the punctual action returns a &quot;action successful&quot; outcome and
that an event recording the correct execution status is created.&lt;/li&gt;
&lt;li&gt;The punctual action is disabled and it is verified that the disabled
status is correctly reported by the punctual action.&lt;/li&gt;
&lt;li&gt;An &lt;code&gt;execute&lt;/code&gt; request is made on the disabled punctual action
and it is verified that an event recording the correct execution status is created.&lt;/li&gt;
&lt;li&gt;It is verified that &lt;code&gt;getLastOutcome&lt;/code&gt; correctly reports the latest event.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;resetLastOutcome&lt;/code&gt; is invoked and it is verified that
&lt;code&gt;getLastOutcome&lt;/code&gt; returns &lt;code&gt;ACTION_RESET&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2973'
        name = 'author'
        modelElement = 'S.857'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2974'
        name = 'see'
        modelElement = 'S.857'>
   <UML:TaggedValue.dataValue>
    	DC_DummyPunctualAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2975'
        name = 'see'
        modelElement = 'S.857'>
   <UML:TaggedValue.dataValue>
    	PunctualAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2976'
        name = 'version'
        modelElement = 'S.857'>
   <UML:TaggedValue.dataValue>
    	1.3
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2977'
        name = 'documentation'
        modelElement = 'S.1009'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_DUMMYPUNCTUALACTION*10+1 and &quot;TestCaseDummyPunctualAction_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2978'
        name = 'documentation'
        modelElement = 'S.1010'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2980'
        name = 'documentation'
        modelElement = 'S.906'>
   <UML:TaggedValue.dataValue>
    	Check the functionalities implemented in the &lt;code&gt;PUSTelecommand&lt;/code&gt; class.
Since this class is abstract, it is tested through its concrete subclass
&lt;code&gt;DC_DummyPUSTelecommand&lt;/code&gt;.
An instance of this class is created and the following specific
tests are performed: &lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is checked.&lt;/li&gt;
&lt;li&gt;It is checked that the telecommand is not configured.&lt;/li&gt;
&lt;li&gt;The time tag is set and read back and the correctness of the read-back
value is checked.&lt;/li&gt;
&lt;li&gt;The telecommand identifier is read out and its correctness is checked.&lt;/li&gt;
&lt;li&gt;The telecommand type is read out and its correctness is checked.&lt;/li&gt;
&lt;li&gt;The telecommand subtype read out and its correctness is checked.&lt;/li&gt;
&lt;li&gt;The telecommand acknowledge level is read out and its correctness is checked.&lt;/li&gt;
&lt;li&gt;The packet identifier is read and the correctness of its value is checked.&lt;/li&gt;
&lt;li&gt;The telecommand ackowledge level is updated and it is checked that
the value of the acceptance flag, the start flag, the progress flag
and the completion flags are consistent with the value of the acknoledge level attribute.&lt;/li&gt;
&lt;li&gt;It is verified that the configuration service of the telecommand
now reports &quot;telecommand is configured&quot;.&lt;/li&gt;
&lt;li&gt;It is verified that the initial value of the execution counter
is equal to zero.&lt;/li&gt;
&lt;li&gt;Two execution requests are sent to the telecommand and it is
verified that the execution counter is incremented by two.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2981'
        name = 'author'
        modelElement = 'S.906'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2982'
        name = 'see'
        modelElement = 'S.906'>
   <UML:TaggedValue.dataValue>
    	DC_DummyPUSTelecommand
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2983'
        name = 'version'
        modelElement = 'S.906'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2984'
        name = 'documentation'
        modelElement = 'S.1011'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_DUMMYPUSTELECOMMAND*10+1 and &quot;TestCaseDummyPUSTelecommand_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2985'
        name = 'documentation'
        modelElement = 'S.1012'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2987'
        name = 'documentation'
        modelElement = 'S.935'>
   <UML:TaggedValue.dataValue>
    	Check the functionalities implemented by class &lt;code&gt;PUSTelemetryPacket&lt;/code&gt;.
Since this class is abstract, the checks are carried out on its concrete subclass
&lt;code&gt;DC_DummyPUSTelemetryPacket&lt;/code&gt;.
An instance of this class is created and the following specific
checks are carried out: &lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is verified.&lt;/li&gt;
&lt;li&gt;The value of the encapsulated byte is set and read out with
the data acquisition service and its correctness is verified.&lt;/li&gt;
&lt;li&gt;It is verified that the default value returned by the
data acquisitions service is 0.&lt;/li&gt;
&lt;li&gt;The implementation of the update service is verified.&lt;/li&gt;
&lt;li&gt;The value of the encapsulated byte is set to 255 and an
update request is made. It is verified that the value of the
encapsulated byte is correctly wrapped around to 0..&lt;/li&gt;
&lt;li&gt;The telemetry packet time tag is set and then read back and its correctness
is checked.&lt;/li&gt;
&lt;li&gt;The telemetry packet type is set and then read back and its correctness
is checked.&lt;/li&gt;
&lt;li&gt;The telemetry packet sub type is set and then read back and its correctness
is checked.&lt;/li&gt;
&lt;li&gt;The telemetry packet identifier is read and the correctness of its value is
checked.&lt;/li&gt;
&lt;li&gt;The default value of the telemetry packet destination is checked.&lt;/li&gt;
&lt;li&gt;The telemetry packet destination is modified and then read back and its correctness
is checked.&lt;/li&gt;
&lt;li&gt;The value of the OBS Clock is read and it is checkes that it is different from NULL.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2988'
        name = 'author'
        modelElement = 'S.935'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2989'
        name = 'see'
        modelElement = 'S.935'>
   <UML:TaggedValue.dataValue>
    	DC_PUSTelemetryPacket
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2990'
        name = 'version'
        modelElement = 'S.935'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2991'
        name = 'documentation'
        modelElement = 'S.1013'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_DUMMYPUSTELEMETRYPACKET*10+1 and &quot;TestCaseDummyPUSTelemetryPacket_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2992'
        name = 'documentation'
        modelElement = 'S.1014'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2994'
        name = 'documentation'
        modelElement = 'S.870'>
   <UML:TaggedValue.dataValue>
    	Verify the basic services offered by telecommands as implemented
by the &lt;code&gt;DC_DummyTelecommand&lt;/code&gt; class.
An instance of this class is created and the following specific
tests are performed: &lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is verified.&lt;/li&gt;
&lt;li&gt;It is verified that the telecommand is not configured.&lt;/li&gt;
&lt;li&gt;It is verified that the default value of the &quot;time tag&quot; attribute
is: 0.&lt;/li&gt;
&lt;li&gt;It is verified that the telecommand identifier is equal to the
instance identifier.&lt;/li&gt;
&lt;li&gt;It is verified that the telecommand type is equal to the
class identifier.&lt;/li&gt;
&lt;li&gt;It is verified that the telecommand sub-type is equal to zero.&lt;/li&gt;
&lt;li&gt;It is verified that the telecommand acknowledge level is equal to zero.&lt;/li&gt;
&lt;li&gt;The time tag value is set and read back and it is checked that
the read-back value is correct.&lt;/li&gt;
&lt;li&gt;It is verified that the configuration service of the telecommand
now reports &quot;telecommand is configured&quot;.&lt;/li&gt;
&lt;li&gt;The value of the &quot;in use&quot; attribute is changed to &quot;telecommand
is in use&quot; and it is verified that this operation is correctly performed.&lt;/li&gt;
&lt;li&gt;It is verified that the initial value of the execution counter
is equal to zero.&lt;/li&gt;
&lt;li&gt;It is verified that the number of raw data is zero.&lt;/li&gt;
&lt;li&gt;It is verified that the telecommand execution check returns
&quot;telecommand can execute&quot;.&lt;/li&gt;
&lt;li&gt;It is verified that the telecommand validity check returns
&quot;telecommand is valid&quot;.&lt;/li&gt;
&lt;li&gt;Two execution requests are sent to the telecommand and it is
verified that the execution counter is incremented by two.&lt;/li&gt;
&lt;li&gt;The execution check return value is forced to &quot;telecommand
cannot execute&quot; and it is verified that this is reflected
in the return value of the execution check.&lt;/li&gt;
&lt;li&gt;The validity check return value is forced to &quot;telecommand
is not valid&quot; and it is verified that this is reflected
in the return value of the validity check.&lt;/li&gt;
&lt;li&gt;The validity check code is set and then read back and it is verified
that the read-back value is correct.&lt;/li&gt;
&lt;li&gt;The execution check code is set and then read back and it is verified
that the read-back value is correct.&lt;/li&gt;
&lt;li&gt;The setter methods for the telecommand identifier, the telecommand
type, the telecommand subtype, the telecommand source, and the
telecommand acknowledge level are called. These are dummy
calls that are only useful to ensure a high degree of statement coverage
for the class under test.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2995'
        name = 'author'
        modelElement = 'S.870'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2996'
        name = 'see'
        modelElement = 'S.870'>
   <UML:TaggedValue.dataValue>
    	DC_DummyTelecommand
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2997'
        name = 'version'
        modelElement = 'S.870'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2998'
        name = 'documentation'
        modelElement = 'S.1015'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_DUMMYTELECOMMAND*10+1 and &quot;TestCaseDummyTelecommand_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.2999'
        name = 'documentation'
        modelElement = 'S.1016'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3001'
        name = 'documentation'
        modelElement = 'S.900'>
   <UML:TaggedValue.dataValue>
    	Verify the services offered by the &lt;code&gt;DC_DummyTelecommandLoader&lt;/code&gt;
class.
An instance of this class is created and the following specific
tests are performed: &lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is verified.&lt;/li&gt;
&lt;li&gt;It is verified that the configuration check service of the telecommand
loader initially reports &quot;object not configured&quot;.&lt;/li&gt;
&lt;li&gt;A telecommand manager and three sample telecommands are loaded
into the telecommand loader
and it is verified that the configuration check service of the telecommand
loader reports &quot;object configured&quot;.&lt;/li&gt;
&lt;li&gt;Two activation requests are sent to the telecommand loader and
it is verified that the allocation counter is incremented by two.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3002'
        name = 'author'
        modelElement = 'S.900'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3003'
        name = 'see'
        modelElement = 'S.900'>
   <UML:TaggedValue.dataValue>
    	DC_DummyTelecommandLoader
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3004'
        name = 'version'
        modelElement = 'S.900'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3005'
        name = 'documentation'
        modelElement = 'S.1017'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_DUMMYTELECOMMANDLOADER*10+1 and &quot;TestCaseDummyTelecommandLoader_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3006'
        name = 'documentation'
        modelElement = 'S.1018'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3008'
        name = 'documentation'
        modelElement = 'S.910'>
   <UML:TaggedValue.dataValue>
    	Verify the telemetry packet services as implemented
by class &lt;code&gt;DC_DummyTelemetryPacket&lt;/code&gt;.
An instance of this class is created and the following specific
tests are performed: &lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is verified.&lt;/li&gt;
&lt;li&gt;It is verified that the configuration service reports &quot;object not configured&quot;.&lt;/li&gt;
&lt;li&gt;The number of encapsulated bytes is set to 2 and it is verified that
the configuration service reports &quot;object configured&quot;.&lt;/li&gt;
&lt;li&gt;It is verified that the number of encapsulated bytes is correctly reported
to be equal to 2.&lt;/li&gt;
&lt;li&gt;The value of the encapsulated bytes is set and read out with
the data acquisition service and its correctness is verified.&lt;/li&gt;
&lt;li&gt;It is verified that the default value returned by the
data acquisitions service is 0 for all encapsulated bytes.&lt;/li&gt;
&lt;li&gt;It is verified that the default value returned by the
the validity check is &quot;data valid&quot;.&lt;/li&gt;
&lt;li&gt;The validity status is set and read out and its correctness
is verified.&lt;/li&gt;
&lt;li&gt;The implementation of the update service is verified.&lt;/li&gt;
&lt;li&gt;The value of one of encapsulated bytes is set to 255 and an
update request is made. It is verified that the value of the
encapsulated byte is correctly wrapped around to 0..&lt;/li&gt;
&lt;li&gt;The default value of the telemetry packet time tag is read out and its correctness
is verified.&lt;/li&gt;
&lt;li&gt;The default value of the telemetry packet type is read out and its correctness
is verified.&lt;/li&gt;
&lt;li&gt;The default value of the telemetry packet subtype is read out and its correctness
is verified.&lt;/li&gt;
&lt;li&gt;The default value of the telemetry packet destination is read out and its correctness
is verified.&lt;/li&gt;
&lt;li&gt;The default value of the &quot;in use&quot; flag is read out and its correctness is verified.&lt;/li&gt;
&lt;li&gt;The implementation of the &quot;in use&quot; flag is checked.&lt;/li&gt;
&lt;li&gt;The default implementation of the &quot;fast data acqusition service&quot; is checked.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3009'
        name = 'author'
        modelElement = 'S.910'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3010'
        name = 'see'
        modelElement = 'S.910'>
   <UML:TaggedValue.dataValue>
    	DC_DummyTelemetryPacket
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3011'
        name = 'version'
        modelElement = 'S.910'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3012'
        name = 'documentation'
        modelElement = 'S.1019'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_DUMMYTelemetryPacket*10+1 and &quot;TestCaseDummyTelemetryPacket_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3013'
        name = 'documentation'
        modelElement = 'S.1020'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3015'
        name = 'documentation'
        modelElement = 'S.911'>
   <UML:TaggedValue.dataValue>
    	Verify the telemetry stream services as implemented
by class &lt;code&gt;DC_DummyTelemetryStream&lt;/code&gt;.
An instance of this class is created and the following specific
tests are performed: &lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is checked.&lt;/li&gt;
&lt;li&gt;The default return value of method &lt;code&gt;getCapacity&lt;/code&gt; is checked.&lt;/li&gt;
&lt;li&gt;The default return value of method &lt;code&gt;doesPacketFit&lt;/code&gt; is checked.&lt;/li&gt;
&lt;li&gt;Dummy calls are performed to methods &lt;code&gt;reset&lt;/code&gt;, &lt;code&gt;flsuh&lt;/code&gt;
and &lt;code&gt;write&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3016'
        name = 'author'
        modelElement = 'S.911'>
   <UML:TaggedValue.dataValue>
    	Roberto Totaro
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3017'
        name = 'see'
        modelElement = 'S.911'>
   <UML:TaggedValue.dataValue>
    	DC_DummyTelemetryStream
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3018'
        name = 'version'
        modelElement = 'S.911'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3019'
        name = 'documentation'
        modelElement = 'S.1021'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_DUMMYTELEMETRYSTREAM*10+1 and &quot;TestCaseDummyTelemetryStream_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3020'
        name = 'documentation'
        modelElement = 'S.1022'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3022'
        name = 'documentation'
        modelElement = 'S.890'>
   <UML:TaggedValue.dataValue>
    	Verify the functionality of the
&lt;code&gt;DC_DummyTracer&lt;/code&gt; component.
The following specific tests are performed: &lt;ol&gt;
&lt;li&gt;A &lt;code&gt;DC_DummyTracer&lt;/code&gt; instance is created and it is verified
that it enable status is &quot;disabled&quot;.&lt;/li&gt;
&lt;li&gt;A synch trace signal is sent through the dummy tracer component.
This operation should have no effect.&lt;/li&gt;
&lt;li&gt;A packet trace signal is sent through the dummy tracer component.
This operation should have no effect.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3023'
        name = 'author'
        modelElement = 'S.890'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3024'
        name = 'see'
        modelElement = 'S.890'>
   <UML:TaggedValue.dataValue>
    	DC_DummyTracer
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3025'
        name = 'version'
        modelElement = 'S.890'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3026'
        name = 'documentation'
        modelElement = 'S.1023'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_OBSDUMMYTRACER*10+1 and &quot;TestCaseDummyTracer_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3027'
        name = 'documentation'
        modelElement = 'S.1024'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3029'
        name = 'documentation'
        modelElement = 'S.931'>
   <UML:TaggedValue.dataValue>
    	Verify the attribute setting and object configuration services of class
&lt;code&gt;DC_Event&lt;/code&gt;.
The following specific tests are performed: &lt;ol&gt;
&lt;li&gt;The event type attribute of an event object is set
and then read out
and the correctness of its values is verified.&lt;/li&gt;
&lt;li&gt;The time stamp attribute of an event object is set
and then read out
and the correctness of its values is verified.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3030'
        name = 'author'
        modelElement = 'S.931'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3031'
        name = 'version'
        modelElement = 'S.931'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3032'
        name = 'documentation'
        modelElement = 'S.1025'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_EVENT*10+1 and &quot;TestCaseEvent_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3033'
        name = 'documentation'
        modelElement = 'S.1026'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3035'
        name = 'documentation'
        modelElement = 'S.850'>
   <UML:TaggedValue.dataValue>
    	Verify the attribute default values and the object configuration service of class
&lt;code&gt;DC_EventRepository&lt;/code&gt;.
The following specific tests are performed: &lt;ol&gt;
&lt;li&gt;The correctness of the class identifier for the &lt;code&gt;DC_EventRepository&lt;/code&gt;
class is verified&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;DC_EventRepository&lt;/code&gt; instance is created and it is verified
that its object configuration service reports &quot;object not configured&quot;.&lt;/li&gt;
&lt;li&gt;The initial (un-configured) values of the event repository attributes are
read out and the correctness of their values is verified.&lt;/li&gt;
&lt;li&gt;A dummy OBS Clock component is loaded and it is verified that &lt;code&gt;getObsClock()&lt;/code&gt;
returns the correct value.&lt;/li&gt;
&lt;li&gt;The event repository size is set
and it is then verified that the object configuration service correctly reports
&quot;object configured&quot;.&lt;/li&gt;
&lt;li&gt;The event repository size attribute is read out and its correctness is
verified.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3036'
        name = 'author'
        modelElement = 'S.850'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3037'
        name = 'see'
        modelElement = 'S.850'>
   <UML:TaggedValue.dataValue>
    	DC_EventRepository
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3038'
        name = 'version'
        modelElement = 'S.850'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3039'
        name = 'documentation'
        modelElement = 'S.1027'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_EVENTREPOSITORY*10+1 and &quot;TestCaseEventRepository_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3040'
        name = 'documentation'
        modelElement = 'S.1028'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3042'
        name = 'documentation'
        modelElement = 'S.905'>
   <UML:TaggedValue.dataValue>
    	Verify the event creation and retrieval service of class
&lt;code&gt;DC_EventRepository&lt;/code&gt;.
The following specific tests are performed: &lt;ol&gt;
&lt;li&gt;Two events are created in a configured event repository and it is
verified that the event counter is incremented by two. &lt;/li&gt;
&lt;li&gt;The iteration service of the event repository is used to retrieve the
events in the repository and it is checked that the correct events are retrieved.&lt;/li&gt;
&lt;li&gt;More events are added to the event repository until one is overwritten after
the repository size is exceeded and it is checked that the event counter has the
correct value and that the iterator performs as expected.&lt;/li&gt;
&lt;li&gt;It is verified that &lt;code&gt;reset()&lt;/code&gt; does not clear the event counter.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3043'
        name = 'author'
        modelElement = 'S.905'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3044'
        name = 'see'
        modelElement = 'S.905'>
   <UML:TaggedValue.dataValue>
    	DC_EventRepository
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3045'
        name = 'version'
        modelElement = 'S.905'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3046'
        name = 'documentation'
        modelElement = 'S.1029'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_EVENTREPOSITORY*10+2 and &quot;TestCaseEventRepository_2&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3047'
        name = 'documentation'
        modelElement = 'S.1030'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3049'
        name = 'documentation'
        modelElement = 'S.860'>
   <UML:TaggedValue.dataValue>
    	Verify the enable and disable services of the
&lt;code&gt;DC_EventRepository&lt;/code&gt; class.
One instance of the class is created and the following specific tests are
performed upon it: &lt;ol&gt;
&lt;li&gt;The enable status of the repository is changed to &quot;disabled&quot; and it
it is verified that the change is correctly reported.&lt;/li&gt;
&lt;li&gt;An &quot;event create&quot; request is sent to the disabled repository and it is checked that
the event counter and the latest event in the repository are not
changed (which indicates that no event was created in the repository).&lt;/li&gt;
&lt;li&gt;The enable status of the repository is changed back to &quot;enabled&quot; and it
it is verified that &quot;event create&quot; requests are correctly executed and
results in the creation of a new event in the repository.&lt;/li&gt;
&lt;li&gt;A &quot;selective disable request&quot; is made to disable collection of event reports of
a specific type and it is verified that the change in enable status is correctly
reported.&lt;/li&gt;
&lt;li&gt;An &quot;event create&quot; request is sent to the repository
for an event of the disabled type and it
is checked that the event counter does not
change (which indicates that no event was created in the repository).&lt;/li&gt;
&lt;li&gt;An &quot;event create&quot; request is sent to the repository
for an event that is still enabled and it
is checked that the event counter is incremented by 1
(which indicates that no event was created in the repository).&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3050'
        name = 'author'
        modelElement = 'S.860'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3051'
        name = 'see'
        modelElement = 'S.860'>
   <UML:TaggedValue.dataValue>
    	DC_EventRepository
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3052'
        name = 'version'
        modelElement = 'S.860'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3053'
        name = 'documentation'
        modelElement = 'S.1031'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_EVENTREPOSITORY*10+3 and &quot;TestCaseEventRepository_3&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3054'
        name = 'documentation'
        modelElement = 'S.1032'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3056'
        name = 'documentation'
        modelElement = 'S.932'>
   <UML:TaggedValue.dataValue>
    	Verify the services of the &lt;code&gt;DC_FdirCheck&lt;/code&gt; object. One object
(&lt;code&gt;pFDIR&lt;/code&gt;) is created and the following tests are performed upon it:&lt;ol&gt;
&lt;li&gt;The correctness of both class ids is verified.&lt;/li&gt;
&lt;li&gt;It is verified that a newly created object is not configured.&lt;/li&gt;
&lt;li&gt;A previously created &lt;code&gt;DC_DummyRecoveryAction&lt;/code&gt; (&lt;code&gt;pFDI&lt;/code&gt;) is
attached to the object as its FDI check. It is verified that the pointer
is correctly set and that the object is not yet configured.&lt;/li&gt;
&lt;li&gt;A previously created &lt;code&gt;DC_DummyRecoveryAction&lt;/code&gt; (&lt;code&gt;pDRA&lt;/code&gt;) is
attached to the object as its recovery action. It is verified that the
pointer is correctly set and that the object is configured.&lt;/li&gt;
&lt;li&gt;The outcome of the FDI check is set to &lt;code&gt;ACTION_CANNOT_EXECUTE&lt;/code&gt;,
&lt;code&gt;pFDIR-&gt;execute()&lt;/code&gt; is invoked and it is verified that its return code
is &lt;code&gt;ACTION_CANNOT_EXECUTE&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Now the FDI check outcome is set to &lt;code&gt;ACTION_FAILURE&lt;/code&gt; and the recovery
action&apos;s to &lt;code&gt;ACTION_CANNOT_EXECUTE&lt;/code&gt;. It is tested that
&lt;code&gt;pFDIR-&gt;execute()&lt;/code&gt; invokes the recovery action&apos;s &lt;code&gt;execute()&lt;/code&gt;
method by verifying that its return code is indeed &lt;code&gt;ACTION_CANNOT_EXECUTE&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3057'
        name = 'author'
        modelElement = 'S.932'>
   <UML:TaggedValue.dataValue>
    	Roberto Totaro
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3058'
        name = 'see'
        modelElement = 'S.932'>
   <UML:TaggedValue.dataValue>
    	DC_FdirCheck
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3059'
        name = 'see'
        modelElement = 'S.932'>
   <UML:TaggedValue.dataValue>
    	DC_DummyRecoveryAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3060'
        name = 'version'
        modelElement = 'S.932'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3061'
        name = 'documentation'
        modelElement = 'S.1033'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_FDIRCHECK*10+1 and &quot;TestCaseFdirCheck_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3062'
        name = 'documentation'
        modelElement = 'S.1034'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3064'
        name = 'documentation'
        modelElement = 'S.926'>
   <UML:TaggedValue.dataValue>
    	Verify the file-oriented telemetry stream as implemented
by class &lt;code&gt;DC_FileTelemetryStream&lt;/code&gt;.
In this test the telemetry data are written to the file
&lt;code&gt;TelemetryStream.txt&lt;/code&gt; which should be created in the
directory from which the program is run. The success or otherwise
of the test should be verified by inspecting this file.
An instance of this class is created and the following specific
tests are performed: &lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is verified.&lt;/li&gt;
&lt;li&gt;The telemetry stream file is set and it is verified that
the set operation succeeded.&lt;/li&gt;
&lt;li&gt;A dummy PUS telemetry packet (instance of class &lt;code&gt;DC_DummyTelemetryPacket&lt;/code&gt;)
is configured with two bytes with values of 1 and 2. The telemetry packet is written
to the telemetry stream
The success of this operation should be checked by inspecting
the telemetry output file.&lt;/li&gt;
&lt;li&gt;The value of the bytes encapsulated in the dummy telemetry packet
is incremented by one and the telemetry packet is again written to the
telemetry stream.
The success of this operation should be checked by inspecting
the telemetry output file.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3065'
        name = 'author'
        modelElement = 'S.926'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3066'
        name = 'see'
        modelElement = 'S.926'>
   <UML:TaggedValue.dataValue>
    	DC_FileTelemetryStream
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3067'
        name = 'see'
        modelElement = 'S.926'>
   <UML:TaggedValue.dataValue>
    	DC_DummyTelemetryPacket
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3068'
        name = 'version'
        modelElement = 'S.926'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3069'
        name = 'documentation'
        modelElement = 'S.1035'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_FILETELEMETRYSTREAM*10+1 and &quot;TestCaseFileTelemetryStream_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3070'
        name = 'documentation'
        modelElement = 'S.1036'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3072'
        name = 'documentation'
        modelElement = 'S.893'>
   <UML:TaggedValue.dataValue>
    	Verify the file-oriented telemetry stream as implemented
by class &lt;code&gt;DC_FileTelemetryStream&lt;/code&gt;.
In this test the telemetry data are written to the standard
output. The success or otherwise
of the test should be verified by checking the standard output.
An instance of this class is created and the following specific
tests are performed: &lt;ol&gt;
&lt;li&gt;The telemetry stream file is set to pNULL (to signify that
it is desired to direct the telemetry data to the standard
output) and it is verified that the set operation succeeded.&lt;/li&gt;
&lt;li&gt;A dummy PUS telemetry packet (instance of class &lt;code&gt;DC_DummyTelemetryPacket&lt;/code&gt;)
is configured with two bytes with values of 1 and 2. The telemetry packet is written
to the telemetry stream
The success of this operation should be checked by inspecting
the standard output.&lt;/li&gt;
&lt;li&gt;The value of the bytes encapsulated in the dummy telemetry packet
is incremented by one and the telemetry packet is again written to the
telemetry stream.
The success of this operation should be checked by inspecting
the standard output.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3073'
        name = 'author'
        modelElement = 'S.893'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3074'
        name = 'see'
        modelElement = 'S.893'>
   <UML:TaggedValue.dataValue>
    	DC_FileTelemetryStream
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3075'
        name = 'see'
        modelElement = 'S.893'>
   <UML:TaggedValue.dataValue>
    	DC_DummyTelemetryPacket
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3076'
        name = 'version'
        modelElement = 'S.893'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3077'
        name = 'documentation'
        modelElement = 'S.1037'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_FILETELEMETRYSTREAM*10+2 and &quot;TestCaseFileTelemetryStream_2&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3078'
        name = 'documentation'
        modelElement = 'S.1038'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3080'
        name = 'documentation'
        modelElement = 'S.934'>
   <UML:TaggedValue.dataValue>
    	Check the functionality of the &lt;code&gt;DC_ForbiddenValueProfile&lt;/code&gt;
class. One instance of the class is created and
the following specific tests are performed: &lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is verified.&lt;/li&gt;
&lt;li&gt;A forbidden value is loaded in the monitoring profile
and it is verified that the load operation is correctly performed.&lt;/li&gt;
&lt;li&gt;A test value different from the forbidden value is passed through
the monitoring profile and it is verified that the monitoring
check service reports &quot;no deviation from profile detected&quot;.&lt;/li&gt;
&lt;li&gt;A test value equal to the forbidden value is passed through
the monitoring profile and it is verified that the monitoring
check service reports &quot;deviation from profile detected&quot;.&lt;/li&gt;
&lt;li&gt;The monitoring profile is disabled and the test value is again passed through
the monitoring profile. It is checked that the monitoring
check service reports &quot;no deviation from profile detected&quot;.&lt;/li&gt;
&lt;li&gt;Non-nominal behaviour check: it is checked that the monitoring check with a real-valued argument
reports &quot;deviation from profile detected&quot;.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3081'
        name = 'author'
        modelElement = 'S.934'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3082'
        name = 'see'
        modelElement = 'S.934'>
   <UML:TaggedValue.dataValue>
    	DC_ForbiddenValueProfile
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3083'
        name = 'version'
        modelElement = 'S.934'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3084'
        name = 'documentation'
        modelElement = 'S.1039'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_FORBIDDENVALUEPROFILE*10+1 and &quot;TestCaseForbiddenValueProfile_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3085'
        name = 'documentation'
        modelElement = 'S.1040'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3087'
        name = 'documentation'
        modelElement = 'S.844'>
   <UML:TaggedValue.dataValue>
    	Verify the functionalities offered by the &lt;code&gt;DC_FromFsmEvent&lt;/code&gt;
class. One FSM instance
is created and configured with 4 dummy FsmStates (states 0 to 3). One
&lt;code&gt;FromFsmEvents&lt;/code&gt; is then instantiated and the following
specific tests are then performed: &lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is verified.&lt;/li&gt;
&lt;li&gt;It is verified
that the object configuration service on the &lt;code&gt;FromFsmEvents&lt;/code&gt;
reports &quot;object not configured&quot;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;FromFsmEvents&lt;/code&gt; is configured with a target
FSM, a starting and target state and it is verified that the configuration
operation on the class-specific part of the object (the definition of
the starting state) is correctly executed.&lt;/li&gt;
&lt;li&gt;It is verified
that the object configuration service on the &lt;code&gt;FromFsmEvents&lt;/code&gt;
reports &quot;object configured&quot;.&lt;/li&gt;
&lt;li&gt;The FSM is placed in a state different from the starting state
of the &lt;code&gt;FromFsmEvents&lt;/code&gt;, the latter is fired and it is verified
that the state of the FSM has not changed.&lt;/li&gt;
&lt;li&gt;The FSM is placed in a state equal to the starting state
of the &lt;code&gt;FromFsmEvents&lt;/code&gt;, the latter is fired and it is verified
that the FSM performs a transition to the target state of the
&lt;code&gt;FromFsmEvents&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3088'
        name = 'author'
        modelElement = 'S.844'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3089'
        name = 'see'
        modelElement = 'S.844'>
   <UML:TaggedValue.dataValue>
    	CC_FSM
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3090'
        name = 'see'
        modelElement = 'S.844'>
   <UML:TaggedValue.dataValue>
    	DC_FromFsmEvent
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3091'
        name = 'version'
        modelElement = 'S.844'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3092'
        name = 'documentation'
        modelElement = 'S.1041'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_FROMFSMSTATE*10+1 and &quot;TestCaseFromFsmEvent_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3093'
        name = 'documentation'
        modelElement = 'S.1042'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3095'
        name = 'documentation'
        modelElement = 'S.859'>
   <UML:TaggedValue.dataValue>
    	Verify the initialization and configuration of the
&lt;code&gt;CC_FSM&lt;/code&gt; class. One instance of the class is created
and the following tests are performed upon it: &lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is verified.&lt;/li&gt;
&lt;li&gt;It is verified
that the object configuration service immediately after object creation
reports &quot;object not configured&quot;.&lt;/li&gt;
&lt;li&gt;The number of states is set and it is verified that this is correctly
reported.&lt;/li&gt;
&lt;li&gt;Four dummy FsmStates are loaded into the FSM and it is verified that
the load operation is correctly performed.&lt;/li&gt;
&lt;li&gt;Non-nominal behaviour check: an attempt is made to load a state at an illegal location and it is
verified that the correct event is generated. &lt;/li&gt;
&lt;li&gt;The FSM is reset and it is checked that all state transitions are
initialized to &quot;enabled&quot;.&lt;/li&gt;
&lt;li&gt;The correctness of the default state is verified.&lt;/li&gt;
&lt;li&gt;Non-nominal behviour check: unload one state and check that the object configuration service
reports &quot;object not configured&quot; (this check is inserted to ensure full statement coverage of the
class under test).&lt;/li&gt;
&lt;li&gt;Reload the state and check that the object configuration service
now reports &quot;object configured&quot;.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3096'
        name = 'author'
        modelElement = 'S.859'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3097'
        name = 'see'
        modelElement = 'S.859'>
   <UML:TaggedValue.dataValue>
    	CC_FSM
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3098'
        name = 'version'
        modelElement = 'S.859'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3099'
        name = 'documentation'
        modelElement = 'S.1043'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_FSM*10+1 and &quot;TestCaseFSM_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3100'
        name = 'documentation'
        modelElement = 'S.1044'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3102'
        name = 'documentation'
        modelElement = 'S.913'>
   <UML:TaggedValue.dataValue>
    	Verify the basic state transition operations of an FSM. One FSM instance
is created and configured with 4 dummy FsmStates (states 0 to 3). Three
FsmEvents are created and configured to be associated to the FSM and to
trigger transitions to, respectively, states 1, 2 and 0.
The following tests are then performed: &lt;ol&gt;
&lt;li&gt;It is verified
that the object configuration service on the FSM
reports &quot;object configured&quot;.&lt;/li&gt;
&lt;li&gt;The first FsmEvent is fired and it is verified that the FSM makes
a transition to state 1. It is also verified that the transition is only
made after the FSM has been activated.&lt;/li&gt;
&lt;li&gt;It is checked that the correct event is created to record the
occurrence of the state transition.&lt;/li&gt;
&lt;li&gt;The FSM is activated twice and it is verified that no state transitions
take place.&lt;/li&gt;
&lt;li&gt;The second and third FsmEvents are fired in sequence and it is verified
that only the second firing has effect.&lt;/li&gt;
&lt;li&gt;Transitions into state 2 are disabled and then the second FsmEvent is
fired and it is verified that this has no effect.&lt;/li&gt;
&lt;li&gt;It is checked that the correct event is created to record the
failure of a state transition to occur due to the transition being
disabled.&lt;/li&gt;
&lt;li&gt;Non-nominal behaviour check: an attempt is made to disable a transition
into a non-existent state and it is
checked that the correct event is generated. &lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3103'
        name = 'author'
        modelElement = 'S.913'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3104'
        name = 'see'
        modelElement = 'S.913'>
   <UML:TaggedValue.dataValue>
    	CC_FSM
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3105'
        name = 'see'
        modelElement = 'S.913'>
   <UML:TaggedValue.dataValue>
    	DC_FsmEvent
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3106'
        name = 'see'
        modelElement = 'S.913'>
   <UML:TaggedValue.dataValue>
    	DC_DummyFsmState
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3107'
        name = 'version'
        modelElement = 'S.913'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3108'
        name = 'documentation'
        modelElement = 'S.1045'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_FSM*10+2 and &quot;TestCaseFSM_2&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3109'
        name = 'documentation'
        modelElement = 'S.1046'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3111'
        name = 'documentation'
        modelElement = 'S.885'>
   <UML:TaggedValue.dataValue>
    	Verify the state activation and autonomous transition operations of an FSM.
One FSM instance
is created and configured with 4 &lt;code&gt;DummyConfigurableFsmStates&lt;/code&gt;
(states 0 to 3). State i is configured to have state i+1 (modulus 4) as its
next state.
The following tests are then performed: &lt;ol&gt;
&lt;li&gt;The correctness of the &lt;code&gt;DummyConfigurableFsmStates&lt;/code&gt;
class identifier is verified.&lt;/li&gt;
&lt;li&gt;The FSM is activated twice and it is verified that this is reflected
in the value of the activation counter of its state 0.&lt;/li&gt;
&lt;li&gt;It is verified that the initialization counter of state 0 is equal to 1.&lt;/li&gt;
&lt;li&gt;The termination check of state 0 is loaded with &lt;code&gt;true&lt;/code&gt;, the
FSM is activated and it is verified that an autonomous state transition to
state 1 takes place.&lt;/li&gt;
&lt;li&gt;It is checked that the correct event is created to record the
occurrence of the state transition.&lt;/li&gt;
&lt;li&gt;It is checked that the exit counter of state 0 and the initialization
counter of state 1 are equal to 1.&lt;/li&gt;
&lt;li&gt;The exit check of state 1 is loaded with &lt;code&gt;false&lt;/code&gt;, and its
termination check is loaded with &lt;code&gt;true&lt;/code&gt;, the FSM is activated
and it is checked that no transition takes place.&lt;/li&gt;
&lt;li&gt;It is checked that the correct event to record the failure of the exit
check from state 1 was generated.&lt;/li&gt;
&lt;li&gt;It is checked that the activation counter of state 1 has been
incremented by 1.&lt;/li&gt;
&lt;li&gt;The initialization check of state 2 is loaded with &lt;code&gt;false&lt;/code&gt;,
the exit check of state 1 is loaded with &lt;code&gt;true&lt;/code&gt;, the FSM is
activated once, and it is checked that no state transition takes place.&lt;/li&gt;
&lt;li&gt;It is checked that the correct event to record the failure of the initialization
check for state 2 was generated.&lt;/li&gt;
&lt;li&gt;The initialization check of state 2 is loaded with &lt;code&gt;true&lt;/code&gt;,
FSM transitions into state 2 are disabled, the FSM is
activated once, and it is checked that no state transition takes place.&lt;/li&gt;
&lt;li&gt;It is checked that the correct event to record the failure of the
transition due to FSM transitions into state 2 being disabled was generated.&lt;/li&gt;
&lt;li&gt;The FSM transitions into state 2 are enabled, all FSM state transitions
are disabled, the FSM is activated once, and it is checked that no state
transition takes place.&lt;/li&gt;
&lt;li&gt;It is checked that the correct event to record the failure of the
transition due to all FSM transitions being disabled was generated.&lt;/li&gt;
&lt;li&gt;The FSM transitions are enabled, the FSM is activated once, and it is
checked that a state transition to state 2
takes place.&lt;/li&gt;
&lt;li&gt;It is checked that the exit counter of state 1, the initialization
counter of state 2, and the activation counter of state 2 are equal to 1.&lt;/li&gt;
&lt;li&gt;Non-nominal behaviour check: an attempt is made to make a transition request
to a non-existent state and it is
checked that the correct event is generated. &lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3112'
        name = 'author'
        modelElement = 'S.885'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3113'
        name = 'see'
        modelElement = 'S.885'>
   <UML:TaggedValue.dataValue>
    	DC_FsmEvent
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3114'
        name = 'see'
        modelElement = 'S.885'>
   <UML:TaggedValue.dataValue>
    	DC_DummyConfigurableFsmState
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3115'
        name = 'version'
        modelElement = 'S.885'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3116'
        name = 'documentation'
        modelElement = 'S.1047'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_FSM*10+3 and &quot;TestCaseFSM_3&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3117'
        name = 'documentation'
        modelElement = 'S.1048'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3119'
        name = 'documentation'
        modelElement = 'S.901'>
   <UML:TaggedValue.dataValue>
    	Verify the functionalities implemented by the
&lt;code&gt;DC_FsmEvent&lt;/code&gt; component.
An instance of the &lt;code&gt;DC_FsmEvent&lt;/code&gt; is created and the following
specific tests are performed upon it: &lt;ol&gt;
&lt;li&gt;It is verified that the class ID of the component has the correct value.&lt;/li&gt;
&lt;li&gt;It is verified that the FsmEvent is not configured at creation (object
configuration service reports
&quot;not configured&quot;).&lt;/li&gt;
&lt;li&gt;A target state is loaded in the FsmEvent and it is verified that
the load operation is correctly executed.&lt;/li&gt;
&lt;li&gt;A target FSM is loaded in the FsmEvent and it is verified that
the load operation is correctly executed.&lt;/li&gt;
&lt;li&gt;After the target FSM and target states have been loaded, it is verified
that the FsmEvent is configured (object configuration service reports
&quot;configured&quot;).&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3120'
        name = 'author'
        modelElement = 'S.901'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3121'
        name = 'see'
        modelElement = 'S.901'>
   <UML:TaggedValue.dataValue>
    	DC_FsmEvent
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3122'
        name = 'version'
        modelElement = 'S.901'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3123'
        name = 'documentation'
        modelElement = 'S.1049'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_OBSFSMEVENT*10+1 and &quot;TestCaseFsmEvent_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3124'
        name = 'documentation'
        modelElement = 'S.1050'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3126'
        name = 'documentation'
        modelElement = 'S.854'>
   <UML:TaggedValue.dataValue>
    	Check the functionalities implemented by the abstract class
&lt;code&gt;RangeProfile&lt;/code&gt;. The checks are performed on the concrete
class &lt;code&gt;DC_InRangeProfile&lt;/code&gt;. The specific functionalities
implemented by class &lt;code&gt;DC_InRangeProfile&lt;/code&gt; are also checked.
One instance of this class is created and
the following specific tests are performed: &lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is verified.&lt;/li&gt;
&lt;li&gt;It is verified that the configuration check service of the
in range profile initially reports &quot;not configured&quot;.&lt;/li&gt;
&lt;li&gt;A lower bound value is loaded in the monitoring profile
and it is verified that the load operation is correctly performed.&lt;/li&gt;
&lt;li&gt;An upper bound value is loaded in the monitoring profile
and it is verified that the load operation is correctly performed.&lt;/li&gt;
&lt;li&gt;It is verified that the configuration check service of the
in range profile now reports &quot;configured&quot;.&lt;/li&gt;
&lt;li&gt;A test value of type &lt;code&gt;double&lt;/code&gt; lying outside the
range is passed through
the monitoring profile and it is verified that the monitoring
check service reports &quot;no deviation from profile detected&quot;.&lt;/li&gt;
&lt;li&gt;A test value type &lt;code&gt;double&lt;/code&gt; lying within the
range is passed through
the monitoring profile and it is verified that the monitoring
check service reports &quot;deviation from profile detected&quot;.&lt;/li&gt;
&lt;li&gt;The monitoring profile is disabled and the same test valued
is again passed through the profile. It is checked that the monitoring
check service now reports &quot;no deviation from profile detected&quot;.&lt;/li&gt;
&lt;li&gt;The monitoring profile is enabled. A test value of type &lt;code&gt;int&lt;/code&gt; lying outside the
range is passed through
the monitoring profile and it is verified that the monitoring
check service reports &quot;no deviation from profile detected&quot;.&lt;/li&gt;
&lt;li&gt;A test value type &lt;code&gt;int&lt;/code&gt; lying within the
range is passed through
the monitoring profile and it is verified that the monitoring
check service reports &quot;deviation from profile detected&quot;.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3127'
        name = 'author'
        modelElement = 'S.854'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3128'
        name = 'see'
        modelElement = 'S.854'>
   <UML:TaggedValue.dataValue>
    	RangeProfile
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3129'
        name = 'see'
        modelElement = 'S.854'>
   <UML:TaggedValue.dataValue>
    	DC_InRangeProfile
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3130'
        name = 'version'
        modelElement = 'S.854'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3131'
        name = 'documentation'
        modelElement = 'S.1051'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_INRANGEPROFILE*10+1 and &quot;TestCaseInRangeProfile_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3132'
        name = 'documentation'
        modelElement = 'S.1052'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3134'
        name = 'documentation'
        modelElement = 'S.925'>
   <UML:TaggedValue.dataValue>
    	Verify the services implemented by the &lt;code&gt;CC_ManoeuvreManager&lt;/code&gt; class.
All the services are tested, apart from the &lt;code&gt;activate&lt;/code&gt; method.
One instance of the class is created and the following tests are performed: &lt;ol&gt;
&lt;li&gt;The correctness of the class identified is verified.&lt;/li&gt;
&lt;li&gt;It is verified that the manoeuvre manager is not configured at creation.&lt;/li&gt;
&lt;li&gt;The manoeuvre list is allocated and it is verified that its size is properly
reported and that the &lt;code&gt;isObjectConfigured&lt;/code&gt; return value reflects the
change (the object shall now be configured).&lt;/li&gt;
&lt;li&gt;It is verified that no manoeuvres are pending.&lt;/li&gt;
&lt;li&gt;A number of &lt;code&gt;DC_DummyManoeuvre&lt;/code&gt; objects equal to length of the
manoeuvre list is loaded into the manoeuvre manager (the manoeuvre list should
now be full). It is verified that &lt;code&gt;manCounter&lt;/code&gt; is updated.&lt;/li&gt;
&lt;li&gt;One of the previously loaded manoeuvre is aborted. It is verified that
&lt;code&gt;manCounter&lt;/code&gt; is decremented accordingly and that the aborted
manoeuvre is no longer in use.&lt;/li&gt;
&lt;li&gt;An attempt is made to load an already loaded manoeuvre. It is verified that
&lt;code&gt;manCounter&lt;/code&gt; is not modified and that a &lt;code&gt;EVT_MAN_ALREADY_IN_USE&lt;/code&gt;
event is reported.&lt;/li&gt;
&lt;li&gt;The previously aborted manoeuvre is re-loaded (the manoeuvre list is therefore
once again full). An attempt is made to load an additional manoeuvre. It is verified that a
&lt;code&gt;EVT_MAN_LIST_FULL&lt;/code&gt; event is reported.&lt;/li&gt;
&lt;li&gt;The manoeuvre manager is reset and it is verified that all the manoeuvres
have been aborted (they shall no longer be in use).&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3135'
        name = 'author'
        modelElement = 'S.925'>
   <UML:TaggedValue.dataValue>
    	Roberto Totaro
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3136'
        name = 'see'
        modelElement = 'S.925'>
   <UML:TaggedValue.dataValue>
    	CC_ManoeuvreManager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3137'
        name = 'see'
        modelElement = 'S.925'>
   <UML:TaggedValue.dataValue>
    	DC_DummyManoeuvre
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3138'
        name = 'see'
        modelElement = 'S.925'>
   <UML:TaggedValue.dataValue>
    	TestCaseManoeuvreManager_2
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3139'
        name = 'version'
        modelElement = 'S.925'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3140'
        name = 'documentation'
        modelElement = 'S.1053'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_MANOEUVREMANAGER*10+1 and &quot;TestCaseManoeuvreManager_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3141'
        name = 'documentation'
        modelElement = 'S.1054'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3145'
        name = 'documentation'
        modelElement = 'S.903'>
   <UML:TaggedValue.dataValue>
    	Verify the &lt;code&gt;CC_ManoeuvreManager::activate()&lt;/code&gt; method.
One instance of the class is created and the following operations are performed: &lt;ol&gt;
&lt;li&gt;The manoeuvre list is allocated.&lt;/li&gt;
&lt;li&gt;A number of &lt;code&gt;DC_DummyConfigurableManoeuvre&lt;/code&gt; objects equal to length
of the manoeuvre list is created.&lt;/li&gt;
&lt;li&gt; The created manoeuvres are loaded into the manager and their &lt;code&gt;startCheck&lt;/code&gt;
and &lt;code&gt;continuationCheck&lt;/code&gt; flags are set to &lt;code&gt;true&lt;/code&gt;.
&lt;code&gt;terminationCheck&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;activate()&lt;/code&gt; is invoked once and it is verified that the manoeuvres
are intializated and their &lt;code&gt;doContinue()&lt;/code&gt; method is called exactly once.&lt;/li&gt;
&lt;li&gt;The manoeuvres&apos; status is updated according to the &lt;code&gt;manoeuvreStateChange&lt;/code&gt;
table, then &lt;code&gt;activate()&lt;/code&gt; is invoked. It is verified that all the manoeuvres
in use are scheduled (i.e. &lt;code&gt;doContinue()&lt;/code&gt; is called) and that the manoeuvre
manager terminates/aborts and unloads the manoeuvres as expected.&lt;/li&gt;
&lt;li&gt;The previous step is repeated until no pending manoeuvres are left in the list (nominal
case) or a pre-defined maximum number of &lt;code&gt;activate()&lt;/code&gt; calls is reached (failure
mode).&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3146'
        name = 'author'
        modelElement = 'S.903'>
   <UML:TaggedValue.dataValue>
    	Roberto Totaro
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3147'
        name = 'see'
        modelElement = 'S.903'>
   <UML:TaggedValue.dataValue>
    	CC_ManoeuvreManager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3148'
        name = 'see'
        modelElement = 'S.903'>
   <UML:TaggedValue.dataValue>
    	DC_DummyConfigurableManoeuvre
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3149'
        name = 'see'
        modelElement = 'S.903'>
   <UML:TaggedValue.dataValue>
    	TestCaseManoeuvreManager_1
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3150'
        name = 'version'
        modelElement = 'S.903'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3151'
        name = 'documentation'
        modelElement = 'S.1060'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_MANOEUVREMANAGER*10+2 and &quot;TestCaseManoeuvreManager_2&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3152'
        name = 'documentation'
        modelElement = 'S.1061'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3154'
        name = 'documentation'
        modelElement = 'S.915'>
   <UML:TaggedValue.dataValue>
    	Verify the suspend/resume operations on manoeuvres and the use of the activation
step counter.
One instance of the &lt;code&gt;DC_DummyConfigurableManoeuvre&lt;/code&gt; class is created and loaded
in a manoeuvre manager. The following operations are then performed: &lt;ol&gt;
&lt;li&gt;The &lt;code&gt;startCheck&lt;/code&gt;
and &lt;code&gt;continuationCheck&lt;/code&gt; flags of the manoeuvre are set to &lt;code&gt;true&lt;/code&gt;.
The &lt;code&gt;terminationCheck&lt;/code&gt; of the manoeuvre is set to &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;It is verified that the initial value of the activation step counter is equal
to zero.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;activate()&lt;/code&gt; is invoked twice and it is verified that the continuation
action counter of the manoeuvre is incremented twice.&lt;/li&gt;
&lt;li&gt;It is verified that the activation step counter now has value 2.&lt;/li&gt;
&lt;li&gt;The manoeuvre is suspended (its isSuspended flag is set to true), the manoeuvre
manager is activated and it is verified that the continuation counter is not incremented.&lt;/li&gt;
&lt;li&gt;It is verified that the activation step counter has not been incremented.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;terminationCheck&lt;/code&gt; of the manoeuvre is set to &lt;code&gt;true&lt;/code&gt;, the
manoeuvre manager is activated (thus causing the manoeuvre to be terminated and
unloaded) and it is verified that the manoeuvre status is
&quot;not suspended&quot;.&lt;li&gt;
&lt;li&gt;The manoeuvre is reloaded, it is suspended and then manoeuvre manager is
activated. It is verified that the activation step counter has been reset to zero.&lt;li&gt;
&lt;li&gt;The manoeuvre is aborted. It is verified
that the manoeuvre status is changed to &quot;not suspended&quot;.&lt;li&gt;
&lt;li&gt;&lt;li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3155'
        name = 'author'
        modelElement = 'S.915'>
   <UML:TaggedValue.dataValue>
    	A. Pasetti
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3156'
        name = 'see'
        modelElement = 'S.915'>
   <UML:TaggedValue.dataValue>
    	CC_ManoeuvreManager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3157'
        name = 'see'
        modelElement = 'S.915'>
   <UML:TaggedValue.dataValue>
    	DC_DummyConfigurableManoeuvre
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3158'
        name = 'see'
        modelElement = 'S.915'>
   <UML:TaggedValue.dataValue>
    	Manoeuvre#setIsSuspended
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3159'
        name = 'version'
        modelElement = 'S.915'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3160'
        name = 'documentation'
        modelElement = 'S.1062'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_MANOEUVREMANAGER*10+3 and &quot;TestCaseManoeuvreManager_3&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3161'
        name = 'documentation'
        modelElement = 'S.1063'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3163'
        name = 'documentation'
        modelElement = 'S.878'>
   <UML:TaggedValue.dataValue>
    	Verify the functionality implemented  by the &lt;code&gt;DC_ManoeuvrePunctualActionr&lt;/code&gt;
class. An instance of this class is created and the following tests
are performed upon it: &lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is verified.&lt;/li&gt;
&lt;li&gt;It is verified that the action is not configured at creation.&lt;/li&gt;
&lt;li&gt;A previously created and configured &lt;code&gt;CC_ManoeuvreManager&lt;/code&gt; is
attached to the action. It is verified that the manoeuvre manager pointer
can be retrieved by calling &lt;code&gt;getManoeuvreManager&lt;/code&gt; and that the
action is not yet configured.&lt;/li&gt;
&lt;li&gt;A previously created &lt;code&gt;DC_DummyManoeuvre&lt;/code&gt; is attached to the
action. It is verified that the manoeuvre pointer can be retrieved by calling
&lt;code&gt;getManoeuvre&lt;/code&gt; and that the action is now fully configured.&lt;/li&gt;
&lt;li&gt;The inherited method &lt;code&gt;execute()&lt;/code&gt; is invoked and it is verified
that the manoeuvre is loaded into the manoeuvre manager.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3164'
        name = 'author'
        modelElement = 'S.878'>
   <UML:TaggedValue.dataValue>
    	Roberto Totaro
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3165'
        name = 'see'
        modelElement = 'S.878'>
   <UML:TaggedValue.dataValue>
    	DC_ManoeuvrePunctualAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3166'
        name = 'see'
        modelElement = 'S.878'>
   <UML:TaggedValue.dataValue>
    	PunctualAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3167'
        name = 'see'
        modelElement = 'S.878'>
   <UML:TaggedValue.dataValue>
    	CC_ManoeuvreManager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3168'
        name = 'see'
        modelElement = 'S.878'>
   <UML:TaggedValue.dataValue>
    	Manoeuvre
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3169'
        name = 'see'
        modelElement = 'S.878'>
   <UML:TaggedValue.dataValue>
    	DC_DummyManouvre
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3170'
        name = 'version'
        modelElement = 'S.878'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3171'
        name = 'documentation'
        modelElement = 'S.1064'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_MANOEUVREPUNCTUALACTION*10+1 and &quot;TestCaseManoeuvrePunctualAction_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3172'
        name = 'documentation'
        modelElement = 'S.1065'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3174'
        name = 'documentation'
        modelElement = 'S.884'>
   <UML:TaggedValue.dataValue>
    	Verify the services implemented by the &lt;code&gt;DC_MatlabCopyPID&lt;/code&gt; class.
One instance of this class is created and the following tests are performed: &lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is verified.&lt;/li&gt;
&lt;li&gt;It is verified that the control block is configured at creation.&lt;/li&gt;
&lt;li&gt;It is verified that the number of parameters returned by
&lt;code&gt;getNumberOfParameters&lt;/code&gt; is correct.&lt;/li&gt;
&lt;/ol&gt;
This and the following steps are performed only if the pre-processor symbol
&lt;code&gt;HAVE_SIMULINK&lt;/code&gt; is defined:
&lt;ol&gt;
&lt;li&gt;The control block&apos;s parameters are initialized.&lt;/li&gt;
&lt;li&gt;The input value is set to 1.0 and &lt;code&gt;propagate()&lt;/code&gt; is invoked twice. After
each call it is verified that the output is properly updated.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;reset()&lt;/code&gt; method is invoked and it is verified that the
state is reverted to the default value. The state of the Simulink model can not be
accessed, therefore this check is performed by examining the output value after
calling &lt;code&gt;propagate()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reset()&lt;/code&gt; is called, the &lt;code&gt;Kp&lt;/code&gt; parameter is set to 0.0 and
&lt;code&gt;propagate&lt;/code&gt; is invoked twice. It is verified that the output reflects the
change in the parameter value.&lt;/li&gt;
&lt;/ol&gt;
The use of the preprocessor symbol &lt;code&gt;HAVE_SIMULINK&lt;/code&gt; violates project-specific
coding rule PR9.2. This is necessary to allow construction of the regression test for
users who do not have access to the Matlab/simulink suite.
&lt;p/&gt;
Simulink is a trademark of The Mathworks, Inc.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3175'
        name = 'author'
        modelElement = 'S.884'>
   <UML:TaggedValue.dataValue>
    	Roberto Totaro
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3176'
        name = 'see'
        modelElement = 'S.884'>
   <UML:TaggedValue.dataValue>
    	DC_MatlabCopyPID
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3177'
        name = 'version'
        modelElement = 'S.884'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3178'
        name = 'documentation'
        modelElement = 'S.1066'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_MATLABCOPYPID*10+1 and &quot;TestCaseMatlabCopyPID_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3179'
        name = 'documentation'
        modelElement = 'S.1067'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3181'
        name = 'documentation'
        modelElement = 'S.904'>
   <UML:TaggedValue.dataValue>
    	Verify the services implemented by the &lt;code&gt;DC_MatlabDataItemPID&lt;/code&gt; class.
One instance of this class and two &lt;code&gt;DC_DataItem&lt;/code&gt; objects are created
and the following tests are performed: &lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is verified.&lt;/li&gt;
&lt;li&gt;It is verified that the control block is not configured at creation.&lt;/li&gt;
&lt;li&gt;The input data item is linked to the control block and it is checked that
the control block is not yet configured.&lt;/li&gt;
&lt;li&gt;The output data item is linked tp the control block and it is checked that
the control block is now configured.&lt;/li&gt;
&lt;li&gt;It is verified that the number of parameters returned by
&lt;code&gt;getNumberOfParameters&lt;/code&gt; is correct.&lt;/li&gt;
&lt;/ol&gt;
This and the following steps are performed only if the pre-processor symbol
&lt;code&gt;HAVE_SIMULINK&lt;/code&gt; is defined:
&lt;ol&gt;
&lt;li&gt;The control block&apos;s parameters are initialized.&lt;/li&gt;
&lt;li&gt;The input is set to 1.0 and &lt;code&gt;propagate()&lt;/code&gt; is invoked twice. After
each call it is verified that the output is properly updated.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;reset()&lt;/code&gt; method is invoked and it is verified that the
state is reverted to the default value. The state of the Simulink model can not be
accessed, therefore this check is performed by examining the output value after
calling &lt;code&gt;propagate()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reset()&lt;/code&gt; is called, the &lt;code&gt;Kp&lt;/code&gt; parameter is set to 0.0 and
&lt;code&gt;propagate&lt;/code&gt; is invoked twice. It is verified that the output reflects the
change in the parameter value.&lt;/li&gt;
&lt;/ol&gt;
The use of the preprocessor symbol &lt;code&gt;HAVE_SIMULINK&lt;/code&gt; violates project-specific
coding rule PR9.2. This is necessary to allow construction of the regression test for
users who do not have access to the Matlab/simulink suite.
&lt;p/&gt;
Simulink is a trademark of The Mathworks, Inc.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3182'
        name = 'author'
        modelElement = 'S.904'>
   <UML:TaggedValue.dataValue>
    	Roberto Totaro
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3183'
        name = 'see'
        modelElement = 'S.904'>
   <UML:TaggedValue.dataValue>
    	DC_MatlabDataItemPID
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3184'
        name = 'version'
        modelElement = 'S.904'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3185'
        name = 'documentation'
        modelElement = 'S.1068'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_MATLABDATAITEMPID*10+1 and &quot;TestCaseMatlabDataItemPID_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3186'
        name = 'documentation'
        modelElement = 'S.1069'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3188'
        name = 'documentation'
        modelElement = 'S.864'>
   <UML:TaggedValue.dataValue>
    	Verify the services implemented by the &lt;code&gt;DC_MatlabDataPoolPID&lt;/code&gt; class.
One instance of this class and a &lt;code&gt;DC_BasicDataPool&lt;/code&gt; objects are created
and the following tests are performed: &lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is verified.&lt;/li&gt;
&lt;li&gt;It is verified that the control block is not configured at creation.&lt;/li&gt;
&lt;li&gt;The input is linked to the control block and it is checked that
the control block is not yet configured.&lt;/li&gt;
&lt;li&gt;The output is linked tp the control block and it is checked that
the control block is now configured.&lt;/li&gt;
&lt;li&gt;It is verified that the number of parameters returned by
&lt;code&gt;getNumberOfParameters&lt;/code&gt; is correct.&lt;/li&gt;
&lt;/ol&gt;
This and the following steps are performed only if the pre-processor symbol
&lt;code&gt;HAVE_SIMULINK&lt;/code&gt; is defined:
&lt;ol&gt;
&lt;li&gt;The control block&apos;s parameters are initialized.&lt;/li&gt;
&lt;li&gt;The input is set to 1.0 and &lt;code&gt;propagate()&lt;/code&gt; is invoked twice. After
each call it is verified that the output is properly updated.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;reset()&lt;/code&gt; method is invoked and it is verified that the
state is reverted to the default value. The state of the Simulink model can not be
accessed, therefore this check is performed by examining the output value after
calling &lt;code&gt;propagate()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reset()&lt;/code&gt; is called, the &lt;code&gt;Kp&lt;/code&gt; parameter is set to 0.0 and
&lt;code&gt;propagate&lt;/code&gt; is invoked twice. It is verified that the output reflects the
change in the parameter value.&lt;/li&gt;
&lt;/ol&gt;
The use of the preprocessor symbol &lt;code&gt;HAVE_SIMULINK&lt;/code&gt; violates project-specific
coding rule PR9.2. This is necessary to allow construction of the regression test for
users who do not have access to the Matlab/simulink suite.
&lt;p/&gt;
Simulink is a trademark of The Mathworks, Inc.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3189'
        name = 'author'
        modelElement = 'S.864'>
   <UML:TaggedValue.dataValue>
    	Roberto Totaro
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3190'
        name = 'see'
        modelElement = 'S.864'>
   <UML:TaggedValue.dataValue>
    	DC_MatlabDataPoolPID
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3191'
        name = 'version'
        modelElement = 'S.864'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3192'
        name = 'documentation'
        modelElement = 'S.1070'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_MATLABDATAPOOLPID*10+1 and &quot;TestCaseMatlabDataPoolPID_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3193'
        name = 'documentation'
        modelElement = 'S.1071'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3195'
        name = 'documentation'
        modelElement = 'S.871'>
   <UML:TaggedValue.dataValue>
    	Verify the services implemented by the &lt;code&gt;DC_MatlabPointerPID&lt;/code&gt; class.
One instance of this class is created and the following tests are performed: &lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is verified.&lt;/li&gt;
&lt;li&gt;It is verified that the control block is not configured at creation.&lt;/li&gt;
&lt;li&gt;The input variable is linked and it is checked that the control block is not
yet configured.&lt;/li&gt;
&lt;li&gt;The output variable is linked and it is checked that the control block is
now configured.&lt;/li&gt;
&lt;li&gt;It is verified that the number of parameters returned by
&lt;code&gt;getNumberOfParameters&lt;/code&gt; is correct.&lt;/li&gt;
&lt;/ol&gt;
This and the following steps are performed only if the pre-processor symbol
&lt;code&gt;HAVE_SIMULINK&lt;/code&gt; is defined:
&lt;ol&gt;
&lt;li&gt;The control block&apos;s parameters are initialized.&lt;/li&gt;
&lt;li&gt;The input is set to 1.0 and &lt;code&gt;propagate()&lt;/code&gt; is invoked twice. After
each call it is verified that the output is properly updated.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;reset()&lt;/code&gt; method is invoked and it is verified that the
state is reverted to the default value. The state of the Simulink model can not be
accessed, therefore this check is performed by examining the output value after
calling &lt;code&gt;propagate()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reset()&lt;/code&gt; is called, the &lt;code&gt;Kp&lt;/code&gt; parameter is set to 0.0 and
&lt;code&gt;propagate&lt;/code&gt; is invoked twice. It is verified that the output reflects the
change in the parameter value.&lt;/li&gt;
&lt;/ol&gt;
The use of the preprocessor symbol &lt;code&gt;HAVE_SIMULINK&lt;/code&gt; violates project-specific
coding rule PR9.2. This is necessary to allow construction of the regression test for
users who do not have access to the Matlab/simulink suite.
&lt;p/&gt;
Simulink is a trademark of The Mathworks, Inc.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3196'
        name = 'author'
        modelElement = 'S.871'>
   <UML:TaggedValue.dataValue>
    	Roberto Totaro
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3197'
        name = 'see'
        modelElement = 'S.871'>
   <UML:TaggedValue.dataValue>
    	DC_MatlabPointerPID
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3198'
        name = 'version'
        modelElement = 'S.871'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3199'
        name = 'documentation'
        modelElement = 'S.1072'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_MATLABPOINTERPID*10+1 and &quot;TestCaseMatlabPointerPID_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3200'
        name = 'documentation'
        modelElement = 'S.1073'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3202'
        name = 'documentation'
        modelElement = 'S.921'>
   <UML:TaggedValue.dataValue>
    	Verify the services of conditional punctual actions. One
&lt;code&gt;DC_NestedFsmActivator&lt;/code&gt; object is created and the following
procedure is performed upon it: &lt;ol&gt;
&lt;li&gt;A FSM, its states and a corresponding number of events are created. The
FSM and the events are configured and initialized. These objects will be
used to test the &lt;code&gt;DC_NestedFsmActivator&lt;/code&gt; implementation.&lt;/li&gt;
&lt;li&gt;It is verified that the object under test returns the correct class id.&lt;/li&gt;
&lt;li&gt;It is verified that a newly created object is not configured.&lt;/li&gt;
&lt;li&gt;The previously created &lt;code&gt;CC_FSM&lt;/code&gt; is attached to the object. It is
verified that &lt;code&gt;getTargetFsm()&lt;/code&gt; returns the right value and that the
object is configured.&lt;/li&gt;
&lt;li&gt;The FSM is advanced to a non-zero state and &lt;code&gt;doInit()&lt;/code&gt; is invoked.
It is verified that the nested FSM is reset and brought back to the initial state.&lt;/li&gt;
&lt;li&gt;An event is raised and &lt;code&gt;doContinue()&lt;/code&gt; is called. It is verified that
the nested FSm performs a transition to the target state of the event previously raised.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3203'
        name = 'author'
        modelElement = 'S.921'>
   <UML:TaggedValue.dataValue>
    	Roberto Totaro
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3204'
        name = 'see'
        modelElement = 'S.921'>
   <UML:TaggedValue.dataValue>
    	DC_NestedFsmActivator
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3205'
        name = 'see'
        modelElement = 'S.921'>
   <UML:TaggedValue.dataValue>
    	CC_FSM
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3206'
        name = 'see'
        modelElement = 'S.921'>
   <UML:TaggedValue.dataValue>
    	FsmState
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3207'
        name = 'see'
        modelElement = 'S.921'>
   <UML:TaggedValue.dataValue>
    	DC_DummyFsmState
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3208'
        name = 'see'
        modelElement = 'S.921'>
   <UML:TaggedValue.dataValue>
    	DC_FsmEvent
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3209'
        name = 'version'
        modelElement = 'S.921'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3210'
        name = 'documentation'
        modelElement = 'S.1074'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_NESTEDFSMACTIVATOR*10+1 and &quot;TestCaseNestedFsmActivator_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3211'
        name = 'documentation'
        modelElement = 'S.1075'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3213'
        name = 'documentation'
        modelElement = 'S.895'>
   <UML:TaggedValue.dataValue>
    	Verify the services of nested FSM states. One
&lt;code&gt;DC_NestedFsmActivatorWithEndState&lt;/code&gt; object is created and the following
procedure is performed upon it: &lt;ol&gt;
&lt;li&gt;A FSM, its states and a corresponding number of events are created. The
FSM and the events are configured and initialized. These objects will be
used to test the &lt;code&gt;DC_NestedFsmActivatorWithEndState&lt;/code&gt; implementation.&lt;/li&gt;
&lt;li&gt;It is verified that the object under test returns the correct class id.&lt;/li&gt;
&lt;li&gt;It is verified that a newly created object is not configured.&lt;/li&gt;
&lt;li&gt;The previously created &lt;code&gt;CC_FSM&lt;/code&gt; is attached to the object. It is
verified that the object is not yet configured.&lt;/li&gt;
&lt;li&gt;The target state is set by calling &lt;code&gt;setTargetState()&lt;/code&gt;. It is verified
that &lt;code&gt;getTargetState()&lt;/code&gt; returns the proper value and that the object is
conofigured.&lt;/li&gt;
&lt;li&gt;The FSM is advanced through all its states and it is verified that
&lt;code&gt;isFinished()&lt;/code&gt; returns true only when the FSM state is equal to the
target state.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3214'
        name = 'author'
        modelElement = 'S.895'>
   <UML:TaggedValue.dataValue>
    	Roberto Totaro
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3215'
        name = 'see'
        modelElement = 'S.895'>
   <UML:TaggedValue.dataValue>
    	DC_NestedFsmActivatorWithEndState
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3216'
        name = 'see'
        modelElement = 'S.895'>
   <UML:TaggedValue.dataValue>
    	CC_FSM
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3217'
        name = 'see'
        modelElement = 'S.895'>
   <UML:TaggedValue.dataValue>
    	FsmState
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3218'
        name = 'see'
        modelElement = 'S.895'>
   <UML:TaggedValue.dataValue>
    	DC_DummyFsmState
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3219'
        name = 'see'
        modelElement = 'S.895'>
   <UML:TaggedValue.dataValue>
    	DC_FsmEvent
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3220'
        name = 'version'
        modelElement = 'S.895'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3221'
        name = 'documentation'
        modelElement = 'S.1076'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_NESTEDFSMACTIVATORWITHENDSTATE*10+1 and &quot;TestCaseNestedFsmActivatorWithEndState_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3222'
        name = 'documentation'
        modelElement = 'S.1077'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3224'
        name = 'documentation'
        modelElement = 'S.862'>
   <UML:TaggedValue.dataValue>
    	Verify the services of nested FSM states. One
&lt;code&gt;DC_NestedFsmActivatorWithExitCheck&lt;/code&gt; object is created and the following
procedure is performed upon it: &lt;ol&gt;
&lt;li&gt;A FSM, its states and a corresponding number of events are created. The
FSM and the events are configured and initialized. These objects will be
used to test the &lt;code&gt;DC_NestedFsmActivatorWithExitCheck&lt;/code&gt; implementation.&lt;/li&gt;
&lt;li&gt;It is verified that the object under test returns the correct class id.&lt;/li&gt;
&lt;li&gt;It is verified that a newly created object is not configured.&lt;/li&gt;
&lt;li&gt;The previously created &lt;code&gt;CC_FSM&lt;/code&gt; is attached to the object. It is
verified that the object is not yet configured.&lt;/li&gt;
&lt;li&gt;The target state is set by calling &lt;code&gt;setTargetState()&lt;/code&gt;. It is verified
that &lt;code&gt;getTargetState()&lt;/code&gt; returns the proper value and that the object is
conofigured.&lt;/li&gt;
&lt;li&gt;The FSM is advanced through all its states and it is verified that
&lt;code&gt;canExit()&lt;/code&gt; returns true only when the FSM state is equal to the
target state.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3225'
        name = 'author'
        modelElement = 'S.862'>
   <UML:TaggedValue.dataValue>
    	Roberto Totaro
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3226'
        name = 'see'
        modelElement = 'S.862'>
   <UML:TaggedValue.dataValue>
    	DC_NestedFsmActivatorWithExitCheck
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3227'
        name = 'see'
        modelElement = 'S.862'>
   <UML:TaggedValue.dataValue>
    	CC_FSM
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3228'
        name = 'see'
        modelElement = 'S.862'>
   <UML:TaggedValue.dataValue>
    	FsmState
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3229'
        name = 'see'
        modelElement = 'S.862'>
   <UML:TaggedValue.dataValue>
    	DC_DummyFsmState
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3230'
        name = 'see'
        modelElement = 'S.862'>
   <UML:TaggedValue.dataValue>
    	DC_FsmEvent
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3231'
        name = 'version'
        modelElement = 'S.862'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3232'
        name = 'documentation'
        modelElement = 'S.1078'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_NESTEDFSMACTIVATORWITHEXITCHECK*10+1 and &quot;TestCaseNestedFsmActivatorWithExitCheck_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3233'
        name = 'documentation'
        modelElement = 'S.1079'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3235'
        name = 'documentation'
        modelElement = 'S.894'>
   <UML:TaggedValue.dataValue>
    	Check the functionalities implemented by &lt;code&gt;DC_NullProfile&lt;/code&gt;.
One instance of this class is created and
the following specific tests are performed: &lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is verified.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;deviatesFromProfile()&lt;/code&gt; method (both the &lt;code&gt;TD_Float&lt;/code&gt;
and the &lt;code&gt;TD_Integer&lt;/code&gt; implementation) is invoked with 100 
different values and it is verified that it alwayas returns false.&lt;/li&gt;
&lt;li&gt;A call to &lt;code&gt;reset&lt;/code&gt; is performed. This is a dummy check that required to have full statement
coverage of the super class.&lt;li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3236'
        name = 'author'
        modelElement = 'S.894'>
   <UML:TaggedValue.dataValue>
    	Roberto Totaro
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3237'
        name = 'see'
        modelElement = 'S.894'>
   <UML:TaggedValue.dataValue>
    	MonitoringProfile
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3238'
        name = 'see'
        modelElement = 'S.894'>
   <UML:TaggedValue.dataValue>
    	DC_NullProfile
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3239'
        name = 'version'
        modelElement = 'S.894'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3240'
        name = 'documentation'
        modelElement = 'S.1080'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_NULLPROFILE*10+1 and &quot;TestCaseNullProfile_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3241'
        name = 'documentation'
        modelElement = 'S.1081'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3243'
        name = 'documentation'
        modelElement = 'S.883'>
   <UML:TaggedValue.dataValue>
    	Check the functionalities implemented by class
&lt;code&gt;DC_OutOfRangeProfile&lt;/code&gt;.
One instance of this class is created and
the following specific tests are performed: &lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is verified.&lt;/li&gt;
&lt;li&gt;The monitoring profile is configured, a test value
lying within the range is passed through the monitoring profile
and it is verified that the monitoring
check service reports &quot;no deviation from profile detected&quot;.&lt;/li&gt;
&lt;li&gt;A test value lying outside the range is passed through
the monitoring profile and it is verified that the monitoring
check service reports &quot;deviation from profile detected&quot;.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3244'
        name = 'author'
        modelElement = 'S.883'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3245'
        name = 'see'
        modelElement = 'S.883'>
   <UML:TaggedValue.dataValue>
    	DC_OutOfRangeProfile
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3246'
        name = 'version'
        modelElement = 'S.883'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3247'
        name = 'documentation'
        modelElement = 'S.1082'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_OUTOFRANGEPROFILE*10+1 and &quot;TestCaseOutOfRangeProfile_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3248'
        name = 'documentation'
        modelElement = 'S.1083'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3250'
        name = 'documentation'
        modelElement = 'S.933'>
   <UML:TaggedValue.dataValue>
    	Verify the &lt;code&gt;DC_ProfileList&lt;/code&gt; class.
An instance of this class is created and the following  tests are
performed on it: &lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is verified.&lt;/li&gt;
&lt;li&gt;It is verified that the newly created object is not configured.&lt;/li&gt;
&lt;li&gt;The profile list size is set. It is then verified that &lt;code&gt;getListSize()&lt;/code&gt;
returns the correct value.&lt;/li&gt;
&lt;li&gt;A number of pre-configured monitoring profiles is loaded and it is verified that
&lt;code&gt;getMonitoringProfile()&lt;/code&gt; returns the correct values.&lt;/li&gt;
&lt;li&gt;During the loading of the monitoring profiles, it is verified that the object
stays in the unconfigured status until the last profile is loaded.&lt;/li&gt;
&lt;li&gt;Non-nominal behaviour check: it is verified that an invokation of &lt;code&gt;loadMonitoringProfile()&lt;/code&gt; with
an illegal index generates an error report.&lt;/li&gt;
&lt;li&gt;The functionality of both implementations of &lt;code&gt;deviatesFromProfile()&lt;/code&gt; is
verified.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3251'
        name = 'author'
        modelElement = 'S.933'>
   <UML:TaggedValue.dataValue>
    	Roberto Totaro
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3252'
        name = 'see'
        modelElement = 'S.933'>
   <UML:TaggedValue.dataValue>
    	DC_ProfileList
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3253'
        name = 'see'
        modelElement = 'S.933'>
   <UML:TaggedValue.dataValue>
    	DC_InRangeProfile
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3254'
        name = 'version'
        modelElement = 'S.933'>
   <UML:TaggedValue.dataValue>
    	1.2
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3255'
        name = 'documentation'
        modelElement = 'S.1084'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_PROFILELIST*10+1 and &quot;TestCaseProfileList_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3256'
        name = 'documentation'
        modelElement = 'S.1085'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3258'
        name = 'documentation'
        modelElement = 'S.891'>
   <UML:TaggedValue.dataValue>
    	Verify the services offered by the punctual action manager as implemented
by the &lt;code&gt;CC_PunctualActionManager&lt;/code&gt; class.
An instance of this class is created and the following tests are performed:&lt;ol&gt;
&lt;li&gt;The correctness of the class id is verified.&lt;/li&gt;
&lt;li&gt;It is verified that the newly created object is not configured and that
&lt;code&gt;getPunctualActionModeManager()&lt;/code&gt; returns a null pointer.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;setPunctualActionModeManager()&lt;/code&gt; is invoked with a pointer
to a properly configured &lt;code&gt;PunctualActionModeManager&lt;/code&gt; object. It is
verified that &lt;code&gt;getPunctualActionModeManager()&lt;/code&gt; returns the correct
pointer and that the object is configured.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;activate()&lt;/code&gt; method is invoked twice and it is verified that
the activation counters of the &lt;code&gt;DC_DummyPunctualAction&lt;/code&gt; objects in the
mode manager list are equal to two.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3259'
        name = 'author'
        modelElement = 'S.891'>
   <UML:TaggedValue.dataValue>
    	Roberto Totaro
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3260'
        name = 'see'
        modelElement = 'S.891'>
   <UML:TaggedValue.dataValue>
    	CC_PunctualActionManager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3261'
        name = 'see'
        modelElement = 'S.891'>
   <UML:TaggedValue.dataValue>
    	DC_DummyPunctualAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3262'
        name = 'see'
        modelElement = 'S.891'>
   <UML:TaggedValue.dataValue>
    	DC_SimplePunctualActionModeManager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3263'
        name = 'version'
        modelElement = 'S.891'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3264'
        name = 'documentation'
        modelElement = 'S.1086'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_PUNCTUALACTIONMANAGER*10+1 and &quot;TestCasePunctualActionManager_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3265'
        name = 'documentation'
        modelElement = 'S.1087'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3267'
        name = 'documentation'
        modelElement = 'S.927'>
   <UML:TaggedValue.dataValue>
    	Check the functionality of the &lt;code&gt;DC_PUSClearDataReporting&lt;/code&gt;. 
One instance of this class is created. Two data 
reporting telemetry packets are retrieved from the telemetry packet factory and
configured 
with SIDs equal to SID_A and SID_B. The SID_B packet is loaded in the PUS 
Telemetry Mode Manager. 
The following specific tests are then performed:&lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is checked.&lt;/li&gt;
&lt;li&gt;It is checked that the telecommand component is initially not configured.&lt;/li&gt;
&lt;li&gt;The maximum number of SIDs is set to 2 and its value is read back. The correctness of the read-back value is 
checked.&lt;/li&gt;
&lt;li&gt;The telemetry manager is loaded and the correctness of the load operation
is checked.&lt;/li&gt;
&lt;li&gt;The PUS telemetry mode manager is loaded and the correctness of the load operation
is checked.&lt;/li&gt;
&lt;li&gt;It is checked that the component is now configured.&lt;/li&gt;
&lt;li&gt;The telecommand is loaded with raw data representing a request to clear two 
telemetry packet with SID equal to SID_A and SID_B. It is checked that the validity check of the
telecommand returns: &quot;telecommand is valid&quot;.&lt;/li&gt;
&lt;li&gt;The telecommand is executed and it is checked that the two telemetry
packets are now marked as &quot;not in use&quot; and that the SID_B packet has been 
unloaded from the PUS Telemetry Mode Manager.&lt;/li&gt;
&lt;li&gt;The telecommand is executed again and it is checked that this time it returns
ACTION_FAILURE&quot;.&lt;/li&gt;
&lt;li&gt;Non-nominal behaviour check: an attempt is made to load the telecommand with too many SIDs and the
correctness of the validity check code is checked.&lt;/li&gt;
&lt;li&gt;Non-nominal behaviour check: an attempt is made to load the telecommand with too many raw data and the
correctness of the validity check code is checked.&lt;/li&gt;
&lt;li&gt;Non-nominal behaviour check: an attempt is made to load the telecommand with an inconsistent number of raw data and the
correctness of the validity check code is checked.&lt;/li&gt;
&lt;/ol&gt;
Note that this test case uses the telemetry packet factory. It assumes that the structure
of the factory is such as to allow two packets of type &lt;code&gt;DC_PUSDataReportingPacket&lt;/code&gt;
to be loaded in the factory.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3268'
        name = 'author'
        modelElement = 'S.927'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3269'
        name = 'see'
        modelElement = 'S.927'>
   <UML:TaggedValue.dataValue>
    	DC_PUSControlDataReporting
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3270'
        name = 'see'
        modelElement = 'S.927'>
   <UML:TaggedValue.dataValue>
    	CC_TelemetryPacketFactory
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3271'
        name = 'version'
        modelElement = 'S.927'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3272'
        name = 'documentation'
        modelElement = 'S.1088'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_PUSCLEARDATAREPORTING*10+1 and &quot;TestCasePUSClearDataReporting_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3273'
        name = 'documentation'
        modelElement = 'S.1089'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3275'
        name = 'documentation'
        modelElement = 'S.928'>
   <UML:TaggedValue.dataValue>
    	Check the functionality of the &lt;code&gt;DC_PUSControlDataReporting&lt;/code&gt;
class under nominal conditions. The test case is configured as follows:&lt;ul&gt;
&lt;li&gt;The telemetry packet factory is retrieved.&lt;/li&gt;
&lt;li&gt;Two data reporting packet instances are created and loaded
in the packet factory. The SIDs of the telemetry packets are SID_A and
SID_B. &lt;/li&gt;
&lt;li&gt;One telecommand instance of type &lt;code&gt;DC_PUSControlDataReporting&lt;/code&gt; is created.&lt;/li&gt;
&lt;/ul&gt;
The following specific tests are then performed:&lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is checked.&lt;/li&gt;
&lt;li&gt;It is checked that the telecommand component is initially not configured.&lt;/li&gt;
&lt;li&gt;The maximum number of SIDs in the telecommand component is set to 2 and the correctness of the
set operation is checked.&lt;/li&gt;
&lt;li&gt;It is checked that the component is now configured.&lt;/li&gt;
&lt;li&gt;The telecommand is loaded with raw data representing a request to enable the
telemetry packet with SID equal to SID_A. It is checked that the validity check of the
telecommand returns: &quot;telecommand is valid&quot;.&lt;/li&gt;
&lt;li&gt;The telecommand is executed and it is checked that telemetry packet SID_A has been
enabled and that the outcome code of the telecommand is ACTION_SUCCESS.&lt;/li&gt;
&lt;li&gt;The telecommand is loaded with new raw data representing a request to disable the
telemetry packet with SID equal to SID_A. It is checked that the validity check of the
telecommand returns: &quot;telecommand is valid&quot;.&lt;/li&gt;
&lt;li&gt;The telecommand is executed and it is checked that telemetry packet SID_A has been
disabled and that the outcome code of the telecommand is ACTION_SUCCESS.&lt;/li&gt;
&lt;li&gt;The telecommand is loaded with raw data representing a request to enable the
telemetry packets with SID equal to SID_A and SID_B. It is checked that the validity check of the
telecommand returns: &quot;telecommand is valid&quot; and the correct validity check code is returned.&lt;/li&gt;
&lt;li&gt;The telecommand is executed and it is checked that both telemetry packets are 
enabled and that the outcome code of the telecommand is ACTION_SUCCESS.&lt;/li&gt;
&lt;li&gt;Non-nominal behaviour check: the telecommand is loaded with raw data representing a request to enable three
telemetry packets. It is checked that the validity check of the
telecommand returns: &quot;telecommand is not valid&quot; and the correct validity check code is returned.&lt;/li&gt;
&lt;li&gt;Non-nominal behaviour check: the telecommand is loaded with too many raw data 
and it is checked that the validity check of the
telecommand returns: &quot;telecommand is valid&quot;. &lt;/li&gt;
&lt;li&gt;Non-nominal behaviour check: the telecommand is loaded with inconsistent raw data 
and it is checked that the validity check of the
telecommand returns: &quot;telecommand is valid&quot;. &lt;/li&gt;
&lt;li&gt;The telecommand is loaded with raw data representing a request to enable two
telemetry packets with SID equal to SID_A and a non-existent SID. It is checked that the validity check of the
telecommand returns: &quot;telecommand is valid&quot;.&lt;/li&gt;
&lt;li&gt;The telecommand is executed and it is checked that the outcome code of the 
telecommand is ACTION_FAILURE.&lt;/li&gt;
&lt;/ol&gt;
Note that this test case uses the telemetry packet factory. It assumes that the structure
of the factory is such as to allow two packets of type &lt;code&gt;DC_PUSDataReportingPacket&lt;/code&gt;
to be loaded in the factory.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3276'
        name = 'author'
        modelElement = 'S.928'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3277'
        name = 'see'
        modelElement = 'S.928'>
   <UML:TaggedValue.dataValue>
    	DC_PUSControlDataReporting
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3278'
        name = 'see'
        modelElement = 'S.928'>
   <UML:TaggedValue.dataValue>
    	CC_TelemetryPacketFactory
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3279'
        name = 'version'
        modelElement = 'S.928'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3280'
        name = 'documentation'
        modelElement = 'S.1090'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_PUSCONTROLDATAREPORTING*10+1 and &quot;TestCasePUSControlDataReporting_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3281'
        name = 'documentation'
        modelElement = 'S.1091'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3283'
        name = 'documentation'
        modelElement = 'S.923'>
   <UML:TaggedValue.dataValue>
    	Check the functionality of the &lt;code&gt;DC_PUSDataReportingPacket&lt;/code&gt;
class for the case of a packet that only contains parameters to be
sampled once per collection interval. The test starts with the creation
of one data pool to serve as the source of the data to be collected.
This data pool is loaded into &lt;code&gt;CC_RootObject&lt;/code&gt; as &lt;i&gt;system
data pool&lt;/i&gt;.
Then, a data reporting packet instance is created and configured to
have a collection interval equal to 3 and two parameters. The following
specific checks are then performed:&lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is checked.&lt;/li&gt;
&lt;li&gt;It is checked that the component is initially not configured.&lt;/li&gt;
&lt;li&gt;The maximum number of fixed-length array is set and the correctness of the
set operation is checked.&lt;/li&gt;
&lt;li&gt;The maximum size of the packet definition buffer is set and the correctness of the
set operation is checked.&lt;/li&gt;
&lt;li&gt;The maximum size of the packet value buffer is set and the correctness of the
set operation is checked.&lt;/li&gt;
&lt;li&gt;It is checked that the component is now configured.&lt;/li&gt;
&lt;li&gt;It is checked that the component is disabled.&lt;/li&gt;
&lt;li&gt;The packet definition is loaded and the success of the load operation is checked.&lt;/li&gt;
&lt;li&gt;Three consecutive update requests are sent to the packet each followed by a data
acquisition request. It is checked that in all three cases the data acquisition service
reports: &quot;no telemetry data&quot;.&lt;/li&gt;
&lt;li&gt;The component is enabled and the correctness of the new enable status is checked.&lt;/li&gt;
&lt;li&gt;Two consecutive update requests are sent to the packet each followed by a data
acquisition request. It is checked that in both cases the data acquisition service
reports: &quot;no telemetry data&quot;.&lt;/li&gt;
&lt;li&gt;The values of the data items in the data pool are updated and then a third update request
is sent to the packet followed by a data
acquisition request. It is checked that the data acqusition service
now returns the correct values of the data pool items.&lt;/li&gt;
&lt;li&gt;It is checked that the fast version of the data acquisition service is provided.&lt;/li&gt;
&lt;li&gt;The data in the packet are acquired and checked again using the fast version of the
data acquisition service.&lt;/li&gt;
&lt;li&gt;The values of the data pool items are updated. Three more update-acquisition cycles are executed and
it is checked that the data returned by the component are correct.&lt;/li&gt;
&lt;li&gt;A new report definition packet is loaded with the following characteristics: collection
interval equal to 2, 1 single paramater. Two update-acqusition cycles are executed and
it is checked that the data returned by the component are correct.&lt;/li&gt;
&lt;li&gt;Non-nominal behaviour check: it is attempted to load a packet definition that exceeds
the maximum allowed size and it is checked that the correct event is generated.&lt;/li&gt;
&lt;/ol&gt;
This test case uses the &lt;code&gt;DC_SampleFullDataPool&lt;/code&gt; as system data pool. The
implementation of the test case assumes the following about this data pool:&lt;ul&gt;
&lt;li&gt;The data pool contains at least two data pool items with identifiers 1 and 2.&lt;/li&gt;
&lt;li&gt;The data pool item with identifier equal to 1 is of type &lt;code&gt;TD_Integer&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The data pool item with identifier equal to 2 is of type &lt;code&gt;TD_Float&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3284'
        name = 'author'
        modelElement = 'S.923'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3285'
        name = 'see'
        modelElement = 'S.923'>
   <UML:TaggedValue.dataValue>
    	DC_PUSDataReportingPacket
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3286'
        name = 'see'
        modelElement = 'S.923'>
   <UML:TaggedValue.dataValue>
    	DC_SampleFullDataPool
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3287'
        name = 'version'
        modelElement = 'S.923'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3288'
        name = 'documentation'
        modelElement = 'S.1092'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_PUSDATAREPORTINGPACKET*10+1 and &quot;TestCasePUSDataReportingPacket_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3289'
        name = 'documentation'
        modelElement = 'S.1093'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3291'
        name = 'documentation'
        modelElement = 'S.846'>
   <UML:TaggedValue.dataValue>
    	Check the functionality of the &lt;code&gt;DC_PUSDataReportingPacket&lt;/code&gt;
class for the case of a packet that contains one single fixed-length
array of oversampled parameters. The test starts with the creation
of one data pool to serve as the source of the data to be collected.
This data pool is loaded into &lt;code&gt;CC_RootObject&lt;/code&gt; as &lt;i&gt;system
data pool&lt;/i&gt;.
Then, a data reporting packet instance is created and configured to
have a collection interval equal to 6 and one fixed-length array with
two parameters and repetition count equal to 2 (ie. two samples per
collection interval). The data reporting packet is configured and
enabled and the following
specific checks are performed upon it:&lt;ol&gt;
&lt;li&gt;Three consecutive update requests are sent to the packet each followed by a data
acquisition request. It is checked that in both cases the data acquisition service
reports: &quot;no telemetry data&quot;.&lt;/li&gt;
&lt;li&gt;The values of the data items in the data pool are updated and then two more update
requests are sent to the packet followed by a data
acquisition request. It is checked that the data acqusition service
reports: &quot;no telemetry data&quot;.&lt;/li&gt;
&lt;li&gt;A sixth update request is sent to the packet followed by a data acquisition
request. The correctness of the data returned by the data acqusition service
is checked.&lt;/li&gt;
&lt;li&gt;The values of the data pool items are updated and six update-acquisition cycles
are executed. The correctness of the data returned by the data acqusition service
is then checked.&lt;/li&gt;
&lt;li&gt;Non-nominal behaviour check: it is attempted to load a packet definition whose
number of fixed-length arrays exceeds the allowed maximum and it is checked
that the correct event is generated.&lt;/li&gt;
&lt;/ol&gt;
This test case uses the &lt;code&gt;DC_SampleFullDataPool&lt;/code&gt; as system data pool. The
implementation of the test case assumes the following about this data pool:&lt;ul&gt;
&lt;li&gt;The data pool contains at least two data pool items with identifiers 1 and 2.&lt;/li&gt;
&lt;li&gt;The data pool item with identifier equal to 1 is of type &lt;code&gt;TD_Integer&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The data pool item with identifier equal to 2 is of type &lt;code&gt;TD_Float&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3292'
        name = 'author'
        modelElement = 'S.846'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3293'
        name = 'see'
        modelElement = 'S.846'>
   <UML:TaggedValue.dataValue>
    	DC_PUSDataReportingPacket
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3294'
        name = 'see'
        modelElement = 'S.846'>
   <UML:TaggedValue.dataValue>
    	DC_SampleFullDataPool
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3295'
        name = 'version'
        modelElement = 'S.846'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3296'
        name = 'documentation'
        modelElement = 'S.1094'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_PUSDATAREPORTINGPACKET*10+2 and &quot;TestCasePUSDataReportingPacket_2&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3297'
        name = 'documentation'
        modelElement = 'S.1095'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3299'
        name = 'documentation'
        modelElement = 'S.874'>
   <UML:TaggedValue.dataValue>
    	Check the functionality of the &lt;code&gt;DC_PUSDataReportingPacket&lt;/code&gt;
class for the case of a packet that contains one set of parameters
sampled once per collection interval and two fixed-length
arrays of oversampled parameters. The test starts with the creation
of one data pool to serve as the source of the data to be collected.
This data pool is loaded into &lt;code&gt;CC_RootObject&lt;/code&gt; as &lt;i&gt;system
data pool&lt;/i&gt;.
Then, a data reporting packet instance is created and configured to
have a collection interval equal to 6, one parameter to be sampled once
per collection interval, one fixed-length array with
two parameters and repetition count equal to 2 (ie. two samples per
collection interval), and one fixed-length array with one parameter
and repetition count equal to 3.The data reporting packet is configured and
enabled and the following
specific checks are performed upon it:&lt;ol&gt;
&lt;li&gt;Five consecutive update requests are sent to the packet. Each is followed
by a data acquisition request. It is checked that in all cases, the data acquisition
service reports: &quot;no telemetry data&quot;. &lt;/li&gt;
&lt;li&gt;A sixth update request is executed followed by a data acquisition request.
The correctness of the data returned by the data acqusition service
is checked.&lt;/li&gt;
&lt;li&gt;A new set of six update-acquisition requests is performed. The correctness
of the data returned by the data acqusition service
is then checked.&lt;/li&gt;
&lt;li&gt;Non-nominal behaviour check: it is attempted to load a packet definition that will
cause the packet value buffer to overflow and it is checked
that the correct event is generated.&lt;/li&gt;
&lt;/ol&gt;
This test case uses the &lt;code&gt;DC_SampleFullDataPool&lt;/code&gt; as system data pool. The
implementation of the test case assumes the following about this data pool:&lt;ul&gt;
&lt;li&gt;The data pool contains at least four data pool items with identifiers 1 and 2.&lt;/li&gt;
&lt;li&gt;The data pool item with identifier equal to 1 is of type &lt;code&gt;TD_Integer&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The data pool item with identifier equal to 2 is of type &lt;code&gt;TD_Float&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The data pool item with identifier equal to 4 is of type &lt;code&gt;TD_Integer&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The data pool item with identifier equal to 5 is of type &lt;code&gt;TD_Float&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3300'
        name = 'author'
        modelElement = 'S.874'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3301'
        name = 'see'
        modelElement = 'S.874'>
   <UML:TaggedValue.dataValue>
    	DC_PUSDataReportingPacket
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3302'
        name = 'see'
        modelElement = 'S.874'>
   <UML:TaggedValue.dataValue>
    	DC_SampleFullDataPool
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3303'
        name = 'version'
        modelElement = 'S.874'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3304'
        name = 'documentation'
        modelElement = 'S.1096'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_PUSDATAREPORTINGPACKET*10+3 and &quot;TestCasePUSDataReportingPacket_3&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3305'
        name = 'documentation'
        modelElement = 'S.1097'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3307'
        name = 'documentation'
        modelElement = 'S.912'>
   <UML:TaggedValue.dataValue>
    	Check the functionality of the &lt;code&gt;DC_PUSEventRepository&lt;/code&gt;
class. The test case retrieves the following items from its super class
&lt;code&gt;TestCasePUSFull&lt;/code&gt; or from the telecommand factory:&lt;ul&gt;
&lt;li&gt;The PUS event repository&lt;/li&gt;
&lt;li&gt;One instance of &lt;code&gt;DC_TestPUSTelecommand&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;One instance of &lt;code&gt;DC_DummyConfigurableManoeuvre&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
The following specific checks are then performed:&lt;ol&gt;
&lt;li&gt;The correctness of the class identifier of the event repository is checked.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;create&lt;/code&gt; method for telecommands is called repeatedly with 
the test telecommand as argument 
and with all possible event identifiers that this method can handle (see class
comment of class &lt;code&gt;DC_PUSEventRepositor&lt;/code&gt; for the full list). It is
then checked that the correct telemetry package has been loaded in the immediate
dispatch queue of the telemetry manager.&lt;/li&gt;
&lt;li&gt;For one of the repeated calls described at the previous bullet, it is also checked 
that the event counter is correctly updated and that an event of the correct type is
stored in the event repository.&lt;/li&gt;
&lt;li&gt;Calls with &quot;success events&quot; (events that denote the successful acceptance, start, 
progress, or completion of a telecommand), the test is repeated twice, first with the
associated acknowledge flag in the telecommand set to false and then to true and it is
checked that telemetry packet dispatching is only performed in the latter case.&lt;/li&gt;
&lt;li&gt;A call to the create method for telecommands is performed when there are no more
free &lt;code&gt;DC_PUSTcVerificationPackets&lt;/code&gt; available in the telemetry factory and it is
checked that the correct event is generated.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;create&lt;/code&gt; method for manoeuvres is called repeatedly with 
the test telecommand as argument 
and with all possible event identifiers that this method can handle (see class
comment of class &lt;code&gt;DC_PUSEventRepositor&lt;/code&gt; for the full list). It is
then checked that the correct telemetry package has been loaded in the immediate
dispatch queue of the telemetry manager.&lt;/li&gt;
&lt;li&gt;For one of the repeated calls described at the previous bullet, it is also checked 
that the event counter is correctly updated and that an event of the correct type is
stored in the event repository.&lt;/li&gt;
&lt;li&gt;Calls with &quot;success events&quot; (events that denote the successful acceptance, start, 
progress, or completion of a telecommand manoeuvre), the test is repeated twice, first with the
associated acknowledge flag in the manoeuvre set to false and then to true and it is
checked that telemetry packet dispatching is only performed in the latter case.&lt;/li&gt;
&lt;li&gt;A call to the create method for manoeuvre is performed when there are no more
free &lt;code&gt;DC_PUSTcVerificationPackets&lt;/code&gt; available in the telemetry factory and it is
checked that the correct event is generated.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3308'
        name = 'author'
        modelElement = 'S.912'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3309'
        name = 'see'
        modelElement = 'S.912'>
   <UML:TaggedValue.dataValue>
    	DC_PUSEventRepository
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3310'
        name = 'version'
        modelElement = 'S.912'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3311'
        name = 'documentation'
        modelElement = 'S.1098'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_PUSEVENTREPOSITORY*10+1 and &quot;TestCasePUSEventRepository_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3312'
        name = 'documentation'
        modelElement = 'S.1099'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3314'
        name = 'documentation'
        modelElement = 'S.1100'>
   <UML:TaggedValue.dataValue>
    	Check that the telemetry packet loaded by the argument PUS event repository in the
telemetry manager is correctly configured.
The method retrieves the telemetry manager from the PUS event repository and then
retrieves the telemetry packet from the telemetry manager.
In addition to checking the parameters explicitly passed to the method, the type of
the telemetry packet is also checked.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3315'
        name = 'param'
        modelElement = 'S.1100'>
   <UML:TaggedValue.dataValue>
    	pEvtRep the PUS event repository
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3316'
        name = 'param'
        modelElement = 'S.1100'>
   <UML:TaggedValue.dataValue>
    	tmSubType the expected subtype of the telemetry packet
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3317'
        name = 'param'
        modelElement = 'S.1100'>
   <UML:TaggedValue.dataValue>
    	tcId the expected identified of the telecommand whose execution is being reported
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3318'
        name = 'param'
        modelElement = 'S.1100'>
   <UML:TaggedValue.dataValue>
    	tt the expected time tag of the telecommand whose execution is being reported
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3319'
        name = 'param'
        modelElement = 'S.1100'>
   <UML:TaggedValue.dataValue>
    	errCode the expected error code of the telecommand (only checked for correctness
if different from zero)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3320'
        name = 'return'
        modelElement = 'S.1100'>
   <UML:TaggedValue.dataValue>
    	true if the telemetry packet is configured as expected
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3327'
        name = 'documentation'
        modelElement = 'S.1101'>
   <UML:TaggedValue.dataValue>
    	Check that no telemetry packets were loaded by the argument PUS event repository in the
telemetry manager.
The method retrieves the telemetry manager from the PUS event repository and then
checks that it does not hold any items in the immediate dispatch queue.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3328'
        name = 'param'
        modelElement = 'S.1101'>
   <UML:TaggedValue.dataValue>
    	pEvtRep the PUS event repository
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3329'
        name = 'return'
        modelElement = 'S.1101'>
   <UML:TaggedValue.dataValue>
    	true if the no telemetry packet are found in the immediate dispatch queue of the
telemetry manager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3332'
        name = 'documentation'
        modelElement = 'S.880'>
   <UML:TaggedValue.dataValue>
    	Check the functionality of the &lt;code&gt;DC_PUSMemoryDumpOffset&lt;/code&gt;
class. 
One telecommand instance of type &lt;code&gt;DC_PUSMemoryDumpOffset&lt;/code&gt; is 
created and the following specific tests are then performed:&lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is checked.&lt;/li&gt;
&lt;li&gt;The correctness of the type and subtype is checked.&lt;/li&gt;
&lt;li&gt;It is checked that the telemetry packet component is initially not configured.&lt;/li&gt;
&lt;li&gt;The maximum number of blocks in the telemetry packet component is set and 
the correctness of the
set operation is checked.&lt;/li&gt;
&lt;li&gt;The size of the dump buffer is set and 
the correctness of the
set operation is checked.&lt;/li&gt;
&lt;li&gt;It is checked that the component is now configured.&lt;/li&gt;
&lt;li&gt;The base address is set and the correctness of the
set operation is checked.&lt;/li&gt;
&lt;li&gt;The memory block identifier is set and the correctness of the
set operation is checked.&lt;/li&gt;
&lt;li&gt;It is checked that the checksum flag is initially set to &quot;false&quot;.&lt;/li&gt;
&lt;li&gt;The memory dump blocks are defined and the correctness of the configuration operation
is checked.&lt;/li&gt;
&lt;li&gt;It is checked that the fast acquisition service is available.&lt;/li&gt;
&lt;li&gt;A data update operation is performed and is followed by a data acquisition operation.
The correctness of the acquired data is checked.&lt;/li&gt;
&lt;li&gt;The number of bytes in the telemetry packet is read out and the correctness of the
read-out value is checked.&lt;/li&gt;
&lt;li&gt;The checksum flag is changed to &quot;true&quot; (checksum field required) and the correctness of the
operation is checked.&lt;/li&gt;
&lt;li&gt;One memory dump block is defined, a data update and a data acquisition are performed, 
and the correctness of the memory dump data (including the checksum filed) is checked.&lt;/li&gt;
&lt;li&gt;Non-nominal behaviour check: an attempt is made to load too many memory blocks and
it is checked that the correct event is generated.&lt;/li&gt;
&lt;li&gt;Non-nominal behaviour check: an attempt is made to configure a non-existent block
and it is checked that the correct event is generated.&lt;/li&gt;
&lt;li&gt;Non-nominal behaviour check: an attempt is made to dump a set of blocks that overflow
the &lt;i&gt;dump buffer&lt;/i&gt;
and it is checked that the correct event is generated.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3333'
        name = 'author'
        modelElement = 'S.880'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3334'
        name = 'see'
        modelElement = 'S.880'>
   <UML:TaggedValue.dataValue>
    	DC_PUSMemoryLoadOffset
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3335'
        name = 'version'
        modelElement = 'S.880'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3336'
        name = 'documentation'
        modelElement = 'S.1102'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_PUSMEMORYDUMPOFFSET*10+1 and &quot;TestCasePUSMemoryDumpOffset_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3337'
        name = 'documentation'
        modelElement = 'S.1103'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3339'
        name = 'documentation'
        modelElement = 'S.873'>
   <UML:TaggedValue.dataValue>
    	Check the functionality of the &lt;code&gt;DC_PUSMemoryLoadAbsolute&lt;/code&gt;
class for the case where no checksum checks are performed. 
One telecommand instance of type &lt;code&gt;DC_PUSMemoryLoadAbsolute&lt;/code&gt; is 
created and the following specific tests are then performed:&lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is checked.&lt;/li&gt;
&lt;li&gt;It is checked that the telecommand component is initially not configured.&lt;/li&gt;
&lt;li&gt;The maximum number of blocks in the telecommand component is set to 3 and 
the correctness of the
set operation is checked.&lt;/li&gt;
&lt;li&gt;The maximum number of data in the telecommand component is set to 10 and 
the correctness of the
set operation is checked.&lt;/li&gt;
&lt;li&gt;It is checked that the component is now configured.&lt;/li&gt;
&lt;li&gt;The telecommand is loaded with raw data representing a memory load for one block
with two data. It is checked that the validity check of the
telecommand returns: &quot;telecommand is valid&quot;.&lt;/li&gt;
&lt;li&gt;The telecommand is executed and it is checked that the outcome code of 
the telecommand is ACTION_SUCCESS and that the memory load is correctly executed.&lt;/li&gt;
&lt;li&gt;The telecommand is loaded with raw data representing a memory load for three blocks
with three data each. It is checked that the validity check of the
telecommand returns: &quot;telecommand is valid&quot;.&lt;/li&gt;
&lt;li&gt;The telecommand is executed and it is checked that the outcome code of 
the telecommand is ACTION_SUCCESS and that the memory load is correctly executed.&lt;/li&gt;
&lt;li&gt;The telecommand is loaded with raw data representing a memory load for four blocks.
It is checked that the validity check of the
telecommand returns: &quot;telecommand is not valid&quot; and that the validity code is correct.&lt;/li&gt;
&lt;li&gt;The telecommand is loaded with raw data representing a memory load for two blocks
with two data (first block) and nine data (second block).
It is checked that the validity check of the
telecommand returns: &quot;telecommand is not valid&quot; and that the validity code is correct.&lt;/li&gt;
&lt;li&gt;The telecommand raw data service is called with an invalid number of bytes to 
be transfered.
It is checked that the validity check of the
telecommand returns: &quot;telecommand is not valid&quot; and that the validity code is correct.&lt;/li&gt;
&lt;li&gt;The telecommand raw data service is called with an inconsistent number of bytes to 
be transfered.
It is checked that the validity check of the
telecommand returns: &quot;telecommand is not valid&quot; and that the validity code is correct.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3340'
        name = 'author'
        modelElement = 'S.873'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3341'
        name = 'see'
        modelElement = 'S.873'>
   <UML:TaggedValue.dataValue>
    	DC_PUSMemoryLoadOffset
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3342'
        name = 'version'
        modelElement = 'S.873'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3343'
        name = 'documentation'
        modelElement = 'S.1104'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_PUSMEMORYLOADABSOLUTE*10+1 and &quot;TestCasePUSMemoryLoadAbsolute_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3344'
        name = 'documentation'
        modelElement = 'S.1105'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3346'
        name = 'documentation'
        modelElement = 'S.907'>
   <UML:TaggedValue.dataValue>
    	Check the functionality of the &lt;code&gt;DC_PUSMemoryLoadOffset&lt;/code&gt;
class for the case where no checksum checks are performed. 
One telecommand instance of type &lt;code&gt;DC_PUSMemoryLoadOffset&lt;/code&gt; is 
created and the following specific tests are then performed:&lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is checked.&lt;/li&gt;
&lt;li&gt;It is checked that the telecommand component is initially not configured.&lt;/li&gt;
&lt;li&gt;The maximum number of blocks in the telecommand component is set to 3 and 
the correctness of the
set operation is checked.&lt;/li&gt;
&lt;li&gt;The maximum number of data in the telecommand component is set to 10 and 
the correctness of the
set operation is checked.&lt;/li&gt;
&lt;li&gt;It is checked that the component is now configured.&lt;/li&gt;
&lt;li&gt;The telecommand is loaded with raw data representing a memory load for one block
with two data. It is checked that the validity check of the
telecommand returns: &quot;telecommand is valid&quot;.&lt;/li&gt;
&lt;li&gt;The telecommand is executed and it is checked that the outcome code of 
the telecommand is ACTION_SUCCESS and that the memory load is correctly executed.&lt;/li&gt;
&lt;li&gt;The telecommand is loaded with raw data representing a memory load for three blocks
with three data each. It is checked that the validity check of the
telecommand returns: &quot;telecommand is valid&quot;.&lt;/li&gt;
&lt;li&gt;The telecommand is executed and it is checked that the outcome code of 
the telecommand is ACTION_SUCCESS and that the memory load is correctly executed.&lt;/li&gt;
&lt;li&gt;The telecommand is loaded with raw data representing a memory load for four blocks.
It is checked that the validity check of the
telecommand returns: &quot;telecommand is not valid&quot; and that the validity code is correct.&lt;/li&gt;
&lt;li&gt;The telecommand is loaded with raw data representing a memory load for two blocks
with two data (first block) and nine data (second block).
It is checked that the validity check of the
telecommand returns: &quot;telecommand is not valid&quot; and that the validity code is correct.&lt;/li&gt;
&lt;li&gt;The telecommand raw data service is called with an invalid number of bytes to 
be transfered.
It is checked that the validity check of the
telecommand returns: &quot;telecommand is not valid&quot; and that the validity code is correct.&lt;/li&gt;
&lt;li&gt;The telecommand raw data service is called with an inconsistent number of bytes to 
be transfered.
It is checked that the validity check of the
telecommand returns: &quot;telecommand is not valid&quot; and that the validity code is correct.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3347'
        name = 'author'
        modelElement = 'S.907'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3348'
        name = 'see'
        modelElement = 'S.907'>
   <UML:TaggedValue.dataValue>
    	DC_PUSMemoryLoadOffset
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3349'
        name = 'version'
        modelElement = 'S.907'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3350'
        name = 'documentation'
        modelElement = 'S.1106'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_PUSMEMORYLOADOFFSET*10+1 and &quot;TestCasePUSMemoryLoadOffset_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3351'
        name = 'documentation'
        modelElement = 'S.1107'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3353'
        name = 'documentation'
        modelElement = 'S.902'>
   <UML:TaggedValue.dataValue>
    	Check the checksum-related functionalities of the &lt;code&gt;DC_PUSMemoryLoadOffset&lt;/code&gt;
class. 
One telecommand instance of type &lt;code&gt;DC_PUSMemoryLoadOffset&lt;/code&gt; is 
created. The image of a telecommand packet consisting of one block with four data 
is set up. The following specific tests are then performed:&lt;ol&gt;
&lt;li&gt;The telecommand is loaded with a valid checksum and it is then executed. It is 
checked that the outcome code of 
the telecommand is ACTION_SUCCESS and that the memory load is correctly executed.&lt;/li&gt;
&lt;li&gt;The telecommand is loaded with a invalid checksum and it is then executed. It is 
checked that the correctness of the outcome code and that the memory load is 
not performed.&lt;/li&gt;
&lt;/ol&gt;
This test case assumes the type &lt;code&gt;TD_PUSMemData&lt;/code&gt; to be defined as
&lt;code&gt;unsigned char&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3354'
        name = 'author'
        modelElement = 'S.902'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3355'
        name = 'see'
        modelElement = 'S.902'>
   <UML:TaggedValue.dataValue>
    	DC_PUSMemoryLoadOffset
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3356'
        name = 'version'
        modelElement = 'S.902'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3357'
        name = 'documentation'
        modelElement = 'S.1108'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_PUSMEMORYLOADOFFSET*10+2 and &quot;TestCasePUSMemoryLoadOffset_2&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3358'
        name = 'documentation'
        modelElement = 'S.1109'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3360'
        name = 'documentation'
        modelElement = 'S.918'>
   <UML:TaggedValue.dataValue>
    	Check the functionality of the &lt;code&gt;DC_PUSTelemetryModeManager&lt;/code&gt;
class. The test case is configured as follows:&lt;ul&gt;
&lt;li&gt;The telemetry packet factory is retrieved.&lt;/li&gt;
&lt;li&gt;An instance of class &lt;code&gt;DC_PUSTelemetryModeManager&lt;/code&gt; is created.&lt;/li&gt;
&lt;li&gt;Two data reporting packet instances (instances of class
&lt;code&gt;DC_PUSDataReportingPacket&lt;/code&gt;) are retrieved from the telemetry packet 
factory. The SIDs of the telemetry packets are SID_A and
SID_B. &lt;/li&gt;
&lt;/ul&gt;
The following specific tests are then performed:&lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is checked.&lt;/li&gt;
&lt;li&gt;It is checked that the mode manager component is initially not configured.&lt;/li&gt;
&lt;li&gt;The maximum number of packets N allowed by the mode manager is retrieved 
(recall that the telemetry mode manager is a 
singleton class whose single instance is configured in another test case)&lt;/li&gt;
&lt;li&gt;It is checked that the mode manager component is now configured.&lt;/li&gt;
&lt;li&gt;The two packets are loaded in the mode manager and it is checked that 
the number of loaded packets is correctly reported.&lt;/li&gt;
&lt;li&gt;The SID_B packet is loaded N-2 times (N being the capacity of the 
telemetry mode manager) and it is checked that the component reports: 
&quot;mode manager is full&quot;. &lt;/li&gt;
&lt;li&gt;An attempt is made to load a further packet and it is checked that this
results in the correct event report being generated.&lt;/li&gt;
&lt;li&gt;The iterator service is checked.&lt;/li&gt;
&lt;li&gt;The mode manager is asked to verify whether a packet with SID other
than SID_A or SID_B is loaded and it is verified that the return value is: &quot;false&quot;.&lt;/li&gt;
&lt;li&gt;Packet SID_A is unloaded and the success of the unload operation is checked.&lt;/li&gt;
&lt;li&gt;It is attempted to unload a non-existent packet and it is checked that 
the correct event is created.&lt;/li&gt;
&lt;li&gt;The iterator service is checked again.&lt;/li&gt;
&lt;li&gt;Packet SID_A loaded again and then packet SID_B is unloaded 
and the 
success of the load/unload operations is checked.&lt;/li&gt;
&lt;li&gt;The iterator service is checked again.&lt;/li&gt;
&lt;li&gt;Packet SID_B is unloaded (the mode manager should now be empty)
and the 
success of the unload operation is checked.&lt;/li&gt;
&lt;li&gt;The iterator service is checked again.&lt;/li&gt;
&lt;/ol&gt;
Note that this test case uses the telemetry packet factory. It assumes that the structure
of the factory is such as to allow two packets of type &lt;code&gt;DC_PUSDataReportingPacket&lt;/code&gt;
to be loaded in the factory.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3361'
        name = 'author'
        modelElement = 'S.918'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3362'
        name = 'see'
        modelElement = 'S.918'>
   <UML:TaggedValue.dataValue>
    	DC_PUSTelemetryModeManager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3363'
        name = 'see'
        modelElement = 'S.918'>
   <UML:TaggedValue.dataValue>
    	CC_TelemetryPacketFactory
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3364'
        name = 'version'
        modelElement = 'S.918'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3365'
        name = 'documentation'
        modelElement = 'S.1110'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_PUSTELEMETRYMODEMANAGER*10+1 and &quot;TestCasePUSTelemetryModeManager_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3366'
        name = 'documentation'
        modelElement = 'S.1111'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3368'
        name = 'documentation'
        modelElement = 'S.843'>
   <UML:TaggedValue.dataValue>
    	Check the setter and getter services for class &lt;code&gt;DC_RawDataItem&lt;/code&gt;.
An instance of class &lt;code&gt;DC_RawDataItem&lt;/code&gt; is created and the following
specific checks are performed:
&lt;ol&gt;
&lt;li&gt;The value of the variable encapsulated in the raw data item is set and then
read back through the data item accessor methods. It is checked that the read-back
value is correct. This operation is repeated for all types supported by the
&lt;code&gt;DC_RawDataItem&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The value of the variable encapsulated by the raw data item is modified
using the data item setter methods and the modified value is then read back from
the variable itself. This operation is repeated for all types supported by the
&lt;code&gt;DC_RawDataItem&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3369'
        name = 'author'
        modelElement = 'S.843'>
   <UML:TaggedValue.dataValue>
    	Roberto Totaro, Alessandro Pasetti
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3370'
        name = 'version'
        modelElement = 'S.843'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3371'
        name = 'documentation'
        modelElement = 'S.1112'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_RAWDATAITEM*10+1 and &quot;TestCaseRawDataItem_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3372'
        name = 'documentation'
        modelElement = 'S.1113'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3374'
        name = 'documentation'
        modelElement = 'S.892'>
   <UML:TaggedValue.dataValue>
    	Verify the services of recovery actions. One &lt;code&gt;DC_NullRecoveryAction&lt;/code&gt; object
(from now on referred to as &quot;pNRA&quot;) and one &lt;code&gt;DC_DummyRecoveryAction&lt;/code&gt;
object (from now on referred to as &quot;pDRA&quot;) are created and the following
tests are performed upon them:&lt;ol&gt;
&lt;li&gt;The correctness of both class ids is verified.&lt;/li&gt;
&lt;li&gt;It is verified that &lt;code&gt;pDRA-&gt;getNextRecoveryAction()&lt;/code&gt;
returns &lt;code&gt;NULL&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;It is verified that a call to &lt;code&gt;pDRA-&gt;execute()&lt;/code&gt; returns
&lt;code&gt;ACTION_SUCCESS&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pDRA&lt;/code&gt;&apos;s execution flag is set to &lt;code&gt;false&lt;/code&gt; and
&lt;code&gt;pDRA-&gt;execute()&lt;/code&gt; is invoked. It is verified that it returns
&lt;code&gt;ACTION_CANNOT_EXECUTE&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;It is verified that &lt;code&gt;pNRA-&gt;execute()&lt;/code&gt; returns
&lt;code&gt;ACTION_SUCCESS&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pDRA&lt;/code&gt; is set as &lt;code&gt;pNRA&lt;/code&gt;&apos;s &quot;next recovery action&quot;. It is
verified that &lt;code&gt;NRA-&gt;getNextRecoveryAction()&lt;/code&gt; returns the correct value.&lt;/li&gt;
&lt;li&gt;The action outcome of &lt;code&gt;pDRA&lt;/code&gt; is set to &lt;code&gt;ACTION_FAILURE&lt;/code&gt; and its
execution flag to &lt;code&gt;true&lt;/code&gt;. It is verified that &lt;code&gt;pNRA-&gt;execute()&lt;/code&gt;
returns &lt;code&gt;ACTION_FAILURE&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3375'
        name = 'author'
        modelElement = 'S.892'>
   <UML:TaggedValue.dataValue>
    	Roberto Totaro
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3376'
        name = 'see'
        modelElement = 'S.892'>
   <UML:TaggedValue.dataValue>
    	RecoveryAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3377'
        name = 'see'
        modelElement = 'S.892'>
   <UML:TaggedValue.dataValue>
    	DC_NullRecoveryAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3378'
        name = 'see'
        modelElement = 'S.892'>
   <UML:TaggedValue.dataValue>
    	DC_DummyRecoveryAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3379'
        name = 'version'
        modelElement = 'S.892'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3380'
        name = 'documentation'
        modelElement = 'S.1114'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_DUMMYRECOVERYACTION*10+1 and &quot;TestCaseRecoveryAction_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3381'
        name = 'documentation'
        modelElement = 'S.1115'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3383'
        name = 'documentation'
        modelElement = 'S.922'>
   <UML:TaggedValue.dataValue>
    	Verify setting of instance ID&apos;s in class &lt;code&gt;CC_RootObject&lt;/code&gt;.
The following specific tests are performed: &lt;ol&gt;
&lt;li&gt;It is checked that the value of the instance identifier is incremented
by 1 every time a new insance of class &lt;code&gt;CC_RootObject&lt;/code&gt;
is created.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3384'
        name = 'author'
        modelElement = 'S.922'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3385'
        name = 'version'
        modelElement = 'S.922'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3386'
        name = 'documentation'
        modelElement = 'S.1116'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_ROOTOBJECT*10+1 and &quot;TestCaseRootObject_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3387'
        name = 'documentation'
        modelElement = 'S.1117'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3389'
        name = 'documentation'
        modelElement = 'S.920'>
   <UML:TaggedValue.dataValue>
    	Verify setting of class ID&apos;s in class &lt;code&gt;CC_RootObject&lt;/code&gt;.
The following specific tests are performed: &lt;ol&gt;
&lt;li&gt;The class ID for class &lt;code&gt;CC_RootObject&lt;/code&gt; is read
out and its value is verified.&lt;/li&gt;
&lt;li&gt;The class ID of two different instances of classes &lt;code&gt;CC_RootObject&lt;/code&gt;
is read out and it is verified that the two values are identical.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3390'
        name = 'author'
        modelElement = 'S.920'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3391'
        name = 'version'
        modelElement = 'S.920'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3392'
        name = 'documentation'
        modelElement = 'S.1118'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_ROOTOBJECT*10+2 and &quot;TestCaseRootObject_2&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3393'
        name = 'documentation'
        modelElement = 'S.1119'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3395'
        name = 'documentation'
        modelElement = 'S.886'>
   <UML:TaggedValue.dataValue>
    	Check the object and system configuration check services.
The following specific checks are performed: &lt;ol&gt;
&lt;li&gt;Two &lt;code&gt;CC_RootObject&lt;/code&gt; instances are created and it is checked
that their object configuration services report &quot;object configured&quot;.&lt;/li&gt;
&lt;li&gt;It is checked
that the system configuration check service reports &quot;system configured&quot;.&lt;/li&gt;
&lt;li&gt;An event object is created but not fully configured and it is checked
that the system configuration check service reports &quot;system not configured&quot;.&lt;/li&gt;
&lt;/ol&gt;
Since it checks the system configuration service, this test case should be
the first test case to be executed in a test run.
If it is not, it might fail unpredictably.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3396'
        name = 'author'
        modelElement = 'S.886'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3397'
        name = 'version'
        modelElement = 'S.886'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3398'
        name = 'documentation'
        modelElement = 'S.1120'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_ROOTOBJECT*10+3 and &quot;TestCaseRootObject_3&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3399'
        name = 'documentation'
        modelElement = 'S.1121'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3401'
        name = 'documentation'
        modelElement = 'S.898'>
   <UML:TaggedValue.dataValue>
    	Check the functionality of the &lt;code&gt;MonitoringProfile&lt;/code&gt;
abstract class as they are implemented in the
&lt;code&gt;SimpleChangeProfile&lt;/code&gt; concrete class. Additionally, the
specific functionalities of the &lt;code&gt;SimpleChangeProfile&lt;/code&gt;
are also checked.
&lt;p&gt;
One instance of the &lt;code&gt;SimpleChangeProfile&lt;/code&gt; is created and
the following specific tests are performed: &lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is verified.&lt;/li&gt;
&lt;li&gt;It is verified that the monitoring check of the profile component
is initially enabled.&lt;/li&gt;
&lt;li&gt;A reference value is loaded in the simple change profile
and it is verified that the load operation is correctly performed.&lt;/li&gt;
&lt;li&gt;A test value identical to the reference value is passed through
the simple change profile and it is verified that the monitoring
check service reports &quot;no deviation from profile detected&quot;.&lt;/li&gt;
&lt;li&gt;A test value different from the reference value is passed through
the simple change profile and it is verified that the monitoring
check service reports &quot;deviation from profile detected&quot; and that
an event report has been created to record the profile violation.&lt;/li&gt;
&lt;li&gt;Non-nominal behaviour check: it is checked that the monitoring check with a real-valued argument
reports &quot;deviation from profile detected&quot;.&lt;/li&gt;
&lt;li&gt;The monitoring is disabled and it is verified that
the enable status is correctly reported.&lt;/li&gt;
&lt;li&gt;A test value different from the reference value is passed through
the disabled simple change profile and it is verified that the monitoring
check service reports &quot;no deviation from profile detected&quot; and that
no event reports are created.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3402'
        name = 'author'
        modelElement = 'S.898'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3403'
        name = 'see'
        modelElement = 'S.898'>
   <UML:TaggedValue.dataValue>
    	DC_SimpleChangeProfile
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3404'
        name = 'version'
        modelElement = 'S.898'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3405'
        name = 'documentation'
        modelElement = 'S.1122'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_SIMPLECHANGEPROFILE*10+1 and &quot;TestCaseSimpleChangeProfile_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3406'
        name = 'documentation'
        modelElement = 'S.1123'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3408'
        name = 'documentation'
        modelElement = 'S.867'>
   <UML:TaggedValue.dataValue>
    	Verify the services implemented
by class &lt;code&gt;DC_SimplePunctualActionModeManager&lt;/code&gt;. An instance of
the class is created and
the following specific tests are performed upon it:&lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is verified.&lt;/li&gt;
&lt;li&gt;The mode manager is configured and it is verified that it
has only one mode and that its default mode index is 0.&lt;/li&gt;
&lt;li&gt;It is verified that calls to its &lt;code&gt;update&lt;/code&gt;
method have no effect on the mode.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3409'
        name = 'author'
        modelElement = 'S.867'>
   <UML:TaggedValue.dataValue>
    	Roberto Totaro
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3410'
        name = 'see'
        modelElement = 'S.867'>
   <UML:TaggedValue.dataValue>
    	DC_SimplePunctualActionModeManager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3411'
        name = 'version'
        modelElement = 'S.867'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3412'
        name = 'documentation'
        modelElement = 'S.1124'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_SIMPLEPUNCTUALACTIONMODEMANAGER*10+1 and
&quot;TestCaseSimplePunctualActionModeManager_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3413'
        name = 'documentation'
        modelElement = 'S.1125'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3415'
        name = 'documentation'
        modelElement = 'S.917'>
   <UML:TaggedValue.dataValue>
    	Verify the services implemented
by class &lt;code&gt;DC_SimpleTelemetryModeManager&lt;/code&gt;. An instance of
the class is created and
the following specific tests are performed upon it:&lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is verified.&lt;/li&gt;
&lt;li&gt;The mode manager is configured and it is verified that it
has only one mode and that its default mode index is 0.&lt;/li&gt;
&lt;li&gt;It is verified that calls to its &lt;code&gt;update&lt;/code&gt;
method have no effect on the mode.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3416'
        name = 'author'
        modelElement = 'S.917'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3417'
        name = 'see'
        modelElement = 'S.917'>
   <UML:TaggedValue.dataValue>
    	DC_SimpleTelemetryModeManager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3418'
        name = 'version'
        modelElement = 'S.917'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3419'
        name = 'documentation'
        modelElement = 'S.1126'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_SIMPLETELEMETRYMODEMANAGER*10+1 and
&quot;TestCaseSimpleTelemetryModeManager_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3420'
        name = 'documentation'
        modelElement = 'S.1127'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3422'
        name = 'documentation'
        modelElement = 'S.924'>
   <UML:TaggedValue.dataValue>
    	Check the functionality of the &lt;code&gt;StuckDataProfile&lt;/code&gt; class.
One instance of the class is created and
the following specific tests are performed: &lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is verified.&lt;/li&gt;
&lt;li&gt;It is verified that the configuration check service of the
simple change profile initially reports &quot;not configured&quot;.&lt;/li&gt;
&lt;li&gt;A stuck threshold is loaded in the profile component
and it is verified that the load operation is correctly performed.&lt;/li&gt;
&lt;li&gt;It is verified that the configuration check service of the
profile component reports &quot;configured&quot;.&lt;/li&gt;
&lt;li&gt;A sequence of test values that should not trigger the profile are
passed through its monitoring check service it is verified that the
check service reports &quot;no deviation from profile detected&quot;.&lt;/li&gt;
&lt;li&gt;A sequence of test values that should trigger the monitoring
check are passed through the profile component and it is verified that
the check service reports &quot;deviation from profile detected&quot;.&lt;/li&gt;
&lt;li&gt;A reset operation is performed and it is verified that
this interrupts the execution of the monitoring check.&lt;/li&gt;
&lt;li&gt;Non-nominal behaviour check: it is checked that the monitoring check with a real-valued argument
reports &quot;deviation from profile detected&quot;.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3423'
        name = 'author'
        modelElement = 'S.924'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3424'
        name = 'see'
        modelElement = 'S.924'>
   <UML:TaggedValue.dataValue>
    	DC_StuckDataProfile
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3425'
        name = 'version'
        modelElement = 'S.924'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3426'
        name = 'documentation'
        modelElement = 'S.1128'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_STUCKDATAPROFILE*10+1 and &quot;TestCaseStuckDataProfile_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3427'
        name = 'documentation'
        modelElement = 'S.1129'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3429'
        name = 'documentation'
        modelElement = 'S.839'>
   <UML:TaggedValue.dataValue>
    	Check the configuration process of a telecommand manager.
A telecommand manager instance is created and the following specific
tests are performed: &lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is verified.&lt;/li&gt;
&lt;li&gt;It is verified that the configuration check service of the telecommand
manager initially reports &quot;object not configured&quot;.&lt;/li&gt;
&lt;li&gt;An OBS clock is loaded in the telecommand manager and it is verified
that it can be correctly read out.&lt;/li&gt;
&lt;li&gt;A telecommand loader is loaded in the telecommand manager and it is verified
that it can be correctly read out.&lt;/li&gt;
&lt;li&gt;The pending telecommand list size is set and it is verified
that it can be correctly read out.&lt;/li&gt;
&lt;li&gt;It is verified that the configuration check service of the telecommand
manager now reports &quot;object configured&quot;.&lt;/li&gt;
&lt;li&gt;It is verified that the number of pending telecommands is equal to
zero.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3430'
        name = 'author'
        modelElement = 'S.839'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3431'
        name = 'see'
        modelElement = 'S.839'>
   <UML:TaggedValue.dataValue>
    	CC_TelecommandManager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3432'
        name = 'version'
        modelElement = 'S.839'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3433'
        name = 'documentation'
        modelElement = 'S.1130'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_TELECOMMANDMANAGER*10+1 and &quot;TestCaseTelecommandManager_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3434'
        name = 'documentation'
        modelElement = 'S.1131'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3436'
        name = 'documentation'
        modelElement = 'S.863'>
   <UML:TaggedValue.dataValue>
    	Check the configuration the nominal telecommand execution process
implemented by the telecommand manager.
The test uses an instance of class &lt;code&gt;DC_DummyTelecommandLoader&lt;/code&gt;
as a telecommand loader and three instances of class
&lt;code&gt;DC_DummyTelecommand&lt;/code&gt; as dummy telecommands.
The third telecommand is configured to have a 0 time-tag (immediate
execution) and the first two are configured to have two consecutive
time tags.
The test begins by creating and configuring a telecommand manager
instance and by activating the telecommand loader to make it load
all three dummy telecommands. The following specific tests are
then executed: &lt;ol&gt;
&lt;li&gt;It is verified that the allocation counter in the dummy
telecommand loader is equal to 3.&lt;/li&gt;
&lt;li&gt;It is verified that the telecommand manager reports: &quot;three
pending telecommands&quot;.&lt;/li&gt;
&lt;li&gt;The telecommand manager is activated and it is verified that
the third telecommand (time tag equal to 0) is executed.&lt;/li&gt;
&lt;li&gt;It is verified that the telecommand manager reports: &quot;two
pending telecommands&quot;.&lt;/li&gt;
&lt;li&gt;It is verified that an event was created to record the
unloading of the telecommand.&lt;/li&gt;
&lt;li&gt;The telecommand manager is repeatedly activated until the time
tag of the first telecommand is reached and it is verified
that the telecommand is executed.&lt;/li&gt;
&lt;li&gt;It is verified that the telecommand manager reports: &quot;one
pending telecommand&quot;.&lt;/li&gt;
&lt;li&gt;The telecommand manager is repeatedly activated until the time
tag of the last remaining telecommand is reached and it is verified
that the telecommand is executed.&lt;/li&gt;
&lt;li&gt;It is verified that the telecommand manager reports: &quot;no
pending telecommands&quot;.&lt;/li&gt;
&lt;li&gt;It is verified that the allocation counter in the dummy
telecommand loader has gone back to 0.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3437'
        name = 'author'
        modelElement = 'S.863'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3438'
        name = 'see'
        modelElement = 'S.863'>
   <UML:TaggedValue.dataValue>
    	CC_TelecommandManager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3439'
        name = 'see'
        modelElement = 'S.863'>
   <UML:TaggedValue.dataValue>
    	DC_DummyTelecommand
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3440'
        name = 'see'
        modelElement = 'S.863'>
   <UML:TaggedValue.dataValue>
    	DC_DummyTelecommandLoader
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3441'
        name = 'version'
        modelElement = 'S.863'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3442'
        name = 'documentation'
        modelElement = 'S.1132'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_TELECOMMANDMANAGER*10+2 and &quot;TestCaseTelecommandManager_2&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3443'
        name = 'documentation'
        modelElement = 'S.1133'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3445'
        name = 'documentation'
        modelElement = 'S.858'>
   <UML:TaggedValue.dataValue>
    	Check the non-nominal telecommand execution implemented by the
telecommand manager.
The test uses an instance of class &lt;code&gt;DC_DummyTelecommandLoader&lt;/code&gt;
as a telecommand loader and three instances of class
&lt;code&gt;DC_DummyTelecommand&lt;/code&gt; as dummy telecommands.
All the telecommands have a time tag equal to zero (immediate execution).
The first telecommand is configured to have an execution check that
returns &quot;cannot be executed&quot;.
The second telecommand is configured to have a validity check that
returns &quot;telecommand not valid&quot;.
The telecommand manager is configured with a pending telecommand
list size of 2. The test begins by activating the telecommand loader
twice to force it to attempt to load the first two dummy telecommands
into the telecommand manager. The following specific tests are
then executed: &lt;ol&gt;
&lt;li&gt;It is verified that the telecommand manager rejects the second
telecommand because it fails its validity check.&lt;/li&gt;
&lt;li&gt;The telecommand loader is activated two more times and it is
verified that the telecommand manager rejects the last load attempt
because its pending telecommand list is full.&lt;/li&gt;
&lt;li&gt;The telecommand manager is activated and it is verified that
the first telecommand is unloaded without being executed because
its execution check fails.&lt;/li&gt;
&lt;li&gt;It is checked that the allocation counter in the dummy telecommand
loader is back to zero.&lt;/li&gt;
&lt;li&gt;It is verified that the second telecommand is executed.&lt;/li&gt;
&lt;li&gt;The telecommands loader is activated three times and it is verified
that two telecommands are loaded in the telecommand manager (the second
one is rejected because it fails its validity check).&lt;/li&gt;
&lt;li&gt;The telecommands manager is reset and it is verified that the number of
pending telecommands goes back to zero.&lt;/li&gt;
&lt;li&gt;It is verified that two events EVT_TC_ABORTED have been generated
as a result of the reset operation.&lt;/li&gt;
&lt;li&gt;It is checked that the allocation counter in the dummy telecommand
loader is back to zero.&lt;/li&gt;
&lt;li&gt;The telecommands loader is activated three times and it is verified
that two telecommands are loaded in the telecommand manager (the second
one is rejected because it fails its validity check).&lt;/li&gt;
&lt;li&gt;An abort request is sent to the first telecommand identified by its
identifier. It is verified that only one pending telecommand is left.&lt;/li&gt;
&lt;li&gt;It is checked that the allocation counter in the dummy telecommand
loader is equal to 1.&lt;/li&gt;
&lt;li&gt;It is checked that one event of type EVT_TC_ABORTED was generated.&lt;/li&gt;
&lt;li&gt;An abort request is sent to the third telecommand identified by its
pointer. It is verified that there are no pending telecommand left.&lt;/li&gt;
&lt;li&gt;It is checked that the allocation counter in the dummy telecommand
loader is back to zero.&lt;/li&gt;
&lt;li&gt;It is checked that one event of type EVT_TC_ABORTED was generated.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3446'
        name = 'author'
        modelElement = 'S.858'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3447'
        name = 'see'
        modelElement = 'S.858'>
   <UML:TaggedValue.dataValue>
    	CC_TelecommandManager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3448'
        name = 'see'
        modelElement = 'S.858'>
   <UML:TaggedValue.dataValue>
    	DC_DummyTelecommand
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3449'
        name = 'see'
        modelElement = 'S.858'>
   <UML:TaggedValue.dataValue>
    	DC_DummyTelecommandLoader
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3450'
        name = 'version'
        modelElement = 'S.858'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3451'
        name = 'documentation'
        modelElement = 'S.1134'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_TELECOMMANDMANAGER*10+3 and &quot;TestCaseTelecommandManager_3&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3452'
        name = 'documentation'
        modelElement = 'S.1135'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3454'
        name = 'documentation'
        modelElement = 'S.872'>
   <UML:TaggedValue.dataValue>
    	Check the configuration process of a telemetry manager.
A telemetry manager instance is created and the following specific
tests are performed: &lt;ol&gt;
&lt;li&gt;The correctness of the class identifier is verified.&lt;/li&gt;
&lt;li&gt;It is verified that the configuration check service of the telemetry
manager initially reports &quot;object not configured&quot;.&lt;/li&gt;
&lt;li&gt;A telemetry mode manager is loaded in the telemetry manager and
it is verified that it can be correctly read out.&lt;/li&gt;
&lt;li&gt;A telemetry stream is loaded in the telemetry manager and
it is verified that it can be correctly read out.&lt;/li&gt;
&lt;li&gt;The size of the immediate dispatch queue is set equal to zero and
it is verified that it can be correctly read out.&lt;/li&gt;
&lt;li&gt;It is verified that the status of immediate dispatch queue is &quot;queue full&quot;.&lt;/li&gt;
&lt;li&gt;It is verified that the configuration check service of the telemetry
manager now reports &quot;object configured&quot;.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3455'
        name = 'author'
        modelElement = 'S.872'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3456'
        name = 'see'
        modelElement = 'S.872'>
   <UML:TaggedValue.dataValue>
    	CC_TelemetryManager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3457'
        name = 'version'
        modelElement = 'S.872'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3458'
        name = 'documentation'
        modelElement = 'S.1136'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_TELEMETRYMANAGER*10+1 and &quot;TestCaseTelemetryManager_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3459'
        name = 'documentation'
        modelElement = 'S.1137'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3461'
        name = 'documentation'
        modelElement = 'S.856'>
   <UML:TaggedValue.dataValue>
    	Check the activation process of a telemetry manager.
A telemetry manager instance is created and configured as follows.
As source of telemetry data, two dummy telemetry packets d1 and d2
are used. The two telemetry packets are encapsulated in
two &lt;code&gt;DC_DummyTelemetryPacket&lt;/code&gt;
components and these are then loaded in a
&lt;code&gt;DC_SimpleTelemetryModeManager&lt;/code&gt; component. As telemetry
stream, a &lt;code&gt;DC_ByteArrayTelemetryStream&lt;/code&gt; component is
used. The telemetry stream and the telemetry mode manager are loaded
in the telemetry manager. The immediate dispatch queue of the telemetry
manager is configured with a size equal to 2. The following tests are
then performed: &lt;ol&gt;
&lt;li&gt;The two telemetry packets are loaded and unloaded from the immediate dispatch
queue and it is checked that the load and unload operations are correctly executed.&lt;/li&gt;
&lt;li&gt;The correctness of the &quot;full status&quot; of the immediate dispatch queue is checked.&lt;/li&gt;
&lt;li&gt;The telemetry manager is activated and it is checked that
the values of the two telemetry packets d1 and d2 are correctly written to
the telemetry stream.&lt;/li&gt;
&lt;li&gt;The two telemetry items are loaded for immediate dispatch. The telemetry
manager is activated again and it is checked that
the values of the two telemetry packets d1 and d2 are written twice to
the telemetry stream.&lt;/li&gt;
&lt;li&gt;It is checked that the status of the telemetry items submitted for immediate
dispatch has been changed to: &quot;not in use&quot;.&lt;/li&gt;
&lt;li&gt;The first telemetry packet is configured to return &quot;data not valid&quot;.
The telemetry manager is again activated and it is checked that
only the second telemetry packet is written to the telemetry stream
and that the correct event is generated to report the validity check
failure.&lt;/li&gt;
&lt;li&gt;The size of the telemetry stream is changed to accept only three bytes
of telemetry data.
The telemetry manager is again activated and it is checked that
an event is generated to report the insufficient capacity of the
telemetry stream.&lt;/li&gt;
&lt;li&gt;The first telemetry packet is configured to report &quot;data not valid&quot; and
it is submitted for immediate dispatch to the telemetry stream.
The telemetry manager is activated and it is checked that
the correct events are generated.&lt;/li&gt;
&lt;li&gt;It is checked that the status of the telemetry item submitted for immediate
dispatch has been changed to: &quot;not in use&quot;.&lt;/li&gt;
&lt;li&gt;The size of the telemetry stream is changed to be insufficient to
accept the first telemetry packet. The telemetry packet is again submitted
for direct dispatch to the telemetry stream and, after activation of the
telemetry manager, it is checked that
an event is generated to report the insufficient capacity of the
telemetry stream.&lt;/li&gt;
&lt;li&gt;It is checked that the status of the telemetry item submitted for immediate
dispatch has been changed to: &quot;not in use&quot;.&lt;/li&gt;
&lt;li&gt;An attempt is made to submit three packets for immediate dispatch (the capacity of the
immediate dispatch queue is 2) and it is checked that the correct event is generated.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3462'
        name = 'author'
        modelElement = 'S.856'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3463'
        name = 'see'
        modelElement = 'S.856'>
   <UML:TaggedValue.dataValue>
    	CC_TelemetryManager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3464'
        name = 'see'
        modelElement = 'S.856'>
   <UML:TaggedValue.dataValue>
    	DC_SimpleTelemetryModeManager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3465'
        name = 'see'
        modelElement = 'S.856'>
   <UML:TaggedValue.dataValue>
    	DC_DummyTelemetryPacket
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3466'
        name = 'see'
        modelElement = 'S.856'>
   <UML:TaggedValue.dataValue>
    	DC_ByteArrayTelemetryStream
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3467'
        name = 'version'
        modelElement = 'S.856'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3468'
        name = 'documentation'
        modelElement = 'S.1138'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_TELEMETRYMANAGER*10+1 and &quot;TestCaseTelemetryManager_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3469'
        name = 'documentation'
        modelElement = 'S.1139'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3471'
        name = 'documentation'
        modelElement = 'S.855'>
   <UML:TaggedValue.dataValue>
    	Verify the services implemented by the
&lt;code&gt;DC_TestPUSConfigurableManoeuvre&lt;/code&gt;. One instance
of this class is created and the following tests are performed
upon it: &lt;ol&gt;
&lt;li&gt;The correctness of the class identified is verified.&lt;/li&gt;
&lt;li&gt;It is verified that the action counters are equal to zero at
creation.&lt;/li&gt;
&lt;li&gt;The default values of the start, completion and progress acknowledge flags 
verified.&lt;/li&gt;
&lt;li&gt;The values of the start, completion and progress acknowledge flags 
are updated and it is verified that the update operation is successful.&lt;/li&gt;
&lt;li&gt;The value of the telecommand identifier is set and read back and it is
verified that the read-back value is correct.&lt;/li&gt;
&lt;li&gt;The manoeuvre is put in use it is verified that its
start check returns &quot;manoeuvre cannot start&quot;.&lt;/li&gt;
&lt;li&gt;The initialization action is performed and it is verified that
the initialization action counter is incremented by one and that the
correct event is generated.&lt;/li&gt;
&lt;li&gt;The continuation action is performed and it is verified that
the continuation action counter is incremented by one.&lt;/li&gt;
&lt;li&gt;It is verified that the continuation check returns &quot;manoeuvre
cannot continue&quot;.&lt;/li&gt;
&lt;li&gt;It is verified that the termination check returns &quot;manoeuvre
cannot terminate&quot;.&lt;/li&gt;
&lt;li&gt;The termination action is executed and it is verfied that the
termination action counter is incremented by one.&lt;/li&gt;
&lt;li&gt;The configurable return values of the manoeuvre checks are
inverted through method &lt;code&gt;setCheckStatus&lt;/code&gt;. A complete
execution cycle for the manoeuvre is executed again (initialization,
one continuation action, termination) and it is verified that the
return values of the manoeuvre checks reflect the new settings.&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3472'
        name = 'author'
        modelElement = 'S.855'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3473'
        name = 'see'
        modelElement = 'S.855'>
   <UML:TaggedValue.dataValue>
    	DC_TestPUSConfigurableManoeuvre
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3474'
        name = 'see'
        modelElement = 'S.855'>
   <UML:TaggedValue.dataValue>
    	Manoeuvre
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3475'
        name = 'version'
        modelElement = 'S.855'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3476'
        name = 'documentation'
        modelElement = 'S.1140'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_TESTPUSCONFIGURABLEMANOEUVRE*10+1 and &quot;TestCaseTestPUSConfigurableManoeuvre_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3477'
        name = 'documentation'
        modelElement = 'S.1141'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3479'
        name = 'documentation'
        modelElement = 'S.914'>
   <UML:TaggedValue.dataValue>
    	Verify the functionality of the
&lt;code&gt;DC_TestTracer&lt;/code&gt; component.
A &lt;code&gt;DC_TestTracer&lt;/code&gt; instance is created and the following specific
tests are performed upon it: &lt;ol&gt;
&lt;li&gt;It is verified that the test tracer component is enabled at creation.&lt;/li&gt;
&lt;li&gt;A synch trace signal is sent through the test tracer component and it
is verified that the trace item is correctly written to the log file.&lt;/li&gt;
&lt;li&gt;A packet trace signal is sent through the test tracer component and it
is verified that the trace items are correctly written to the log file.&lt;/li&gt;
&lt;li&gt;The test tracer is disabled and it is verified that this is correctly
reproted by the &lt;code&gt;isEnabled&lt;/code&gt; service.&lt;/li&gt;
&lt;li&gt;The test tracer is disabled and it is verified that attempts to send a
synch trace have no effect on the log file.&lt;/li&gt;
&lt;li&gt;The test tracer is disabled and it is verified that attempts to send a
packet trace have no effect on the log file.&lt;/li&gt;
&lt;/ol&gt;
The above tests are only performed if the test application is running in a
desktop environment. If the application is running in an embedded environment,
no tests are performed and the test case always returns &quot;test successful&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3480'
        name = 'author'
        modelElement = 'S.914'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3481'
        name = 'see'
        modelElement = 'S.914'>
   <UML:TaggedValue.dataValue>
    	TestTracer
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3482'
        name = 'version'
        modelElement = 'S.914'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3483'
        name = 'documentation'
        modelElement = 'S.1142'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_OBSTESTTRACER*10+1 and &quot;TestCaseTestTracer_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3484'
        name = 'documentation'
        modelElement = 'S.1143'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3486'
        name = 'documentation'
        modelElement = 'S.877'>
   <UML:TaggedValue.dataValue>
    	Verify the services of an unstable FSM state. One
&lt;code&gt;DC_UnstableFsmState&lt;/code&gt; object is created and the following
tests are performed upon it: &lt;ol&gt;
&lt;li&gt;It is verified that the object under test returns the correct class id.&lt;/li&gt;
&lt;li&gt;It is verified that &lt;code&gt;isFinished()&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A dummy call to &lt;code&gt;doContinue&lt;/code&gt; is performed (this is necessary for
test coverage reasons).&lt;/li&gt;
&lt;/ol&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3487'
        name = 'author'
        modelElement = 'S.877'>
   <UML:TaggedValue.dataValue>
    	Roberto Totaro
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3488'
        name = 'see'
        modelElement = 'S.877'>
   <UML:TaggedValue.dataValue>
    	DC_UnstableFsmState
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3489'
        name = 'see'
        modelElement = 'S.877'>
   <UML:TaggedValue.dataValue>
    	FsmState
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3490'
        name = 'version'
        modelElement = 'S.877'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3491'
        name = 'documentation'
        modelElement = 'S.1144'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case to, respectively,
ID_UNSTABLEFSMSTATE*10+1 and &quot;TestCaseUnstableFsmState_1&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3492'
        name = 'documentation'
        modelElement = 'S.1145'>
   <UML:TaggedValue.dataValue>
    	Execute the test case. See class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3499'
        name = 'documentation'
        modelElement = 'S.1157'>
   <UML:TaggedValue.dataValue>
    	Dummy OBS Clock component useful for testing purposes or for applications
where timing information is not available.
This component provides a dummy implementation of the OBS Clock abstract
class. It exposes a method &lt;code&gt;setTime&lt;/code&gt; through which an external
entity can set the on-board time and the on-board cycle. These values are
then returned by the standard timing services declared by the OBS Clock
abstract base class. No timing synchronization service is implemented.
&lt;p&gt;
A dummy clock can be useful because the correct configuration of the
&lt;code&gt;CC_RootObject&lt;/code&gt; class requires the class to be provided with an
OBS Clock plug-in component. This dummy component can be used when no &quot;real&quot;
OBS Clock component is available (for instance, during testing).
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3500'
        name = 'author'
        modelElement = 'S.1157'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3501'
        name = 'version'
        modelElement = 'S.1157'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3502'
        name = 'documentation'
        modelElement = 'S.1163'>
   <UML:TaggedValue.dataValue>
    	Reset the OBS Clock component and set the class identifier.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3503'
        name = 'see'
        modelElement = 'S.1163'>
   <UML:TaggedValue.dataValue>
    	#reset
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3504'
        name = 'documentation'
        modelElement = 'S.1164'>
   <UML:TaggedValue.dataValue>
    	Return the on-board time last set with &lt;code&gt;setTime&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3505'
        name = 'see'
        modelElement = 'S.1164'>
   <UML:TaggedValue.dataValue>
    	#setTime
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3506'
        name = 'return'
        modelElement = 'S.1164'>
   <UML:TaggedValue.dataValue>
    	the current on-board time
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3508'
        name = 'documentation'
        modelElement = 'S.1165'>
   <UML:TaggedValue.dataValue>
    	Return the on-board cycle last set with &lt;code&gt;setTime&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3509'
        name = 'see'
        modelElement = 'S.1165'>
   <UML:TaggedValue.dataValue>
    	#setTime
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3510'
        name = 'return'
        modelElement = 'S.1165'>
   <UML:TaggedValue.dataValue>
    	the current on-board cycle
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3512'
        name = 'documentation'
        modelElement = 'S.1166'>
   <UML:TaggedValue.dataValue>
    	No synchronization service is implemented: method returns without
taking any action.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3514'
        name = 'documentation'
        modelElement = 'S.1167'>
   <UML:TaggedValue.dataValue>
    	Reset the OBS clock by resetting the on-board time and cycle to zero.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3516'
        name = 'documentation'
        modelElement = 'S.1168'>
   <UML:TaggedValue.dataValue>
    	Set the value of the on-board time that will be returned
by method &lt;code&gt;getTime&lt;/code&gt; and &lt;code&gt;getCycle&lt;/code&gt;. The on-board time 
value must be zero or a positive number.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3517'
        name = 'see'
        modelElement = 'S.1168'>
   <UML:TaggedValue.dataValue>
    	#getTime
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3518'
        name = 'param'
        modelElement = 'S.1168'>
   <UML:TaggedValue.dataValue>
    	time the on-board time
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3521'
        name = 'documentation'
        modelElement = 'S.1169'>
   <UML:TaggedValue.dataValue>
    	Set the value of the cycle that will be returned
by method &lt;code&gt;getCycle&lt;/code&gt;. The cycle value 
must be zero or a positive numbers.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3522'
        name = 'see'
        modelElement = 'S.1169'>
   <UML:TaggedValue.dataValue>
    	#getCycle
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3523'
        name = 'param'
        modelElement = 'S.1169'>
   <UML:TaggedValue.dataValue>
    	time the on-board time
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3524'
        name = 'param'
        modelElement = 'S.1169'>
   <UML:TaggedValue.dataValue>
    	cycle the on-board cycle
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3527'
        name = 'documentation'
        modelElement = 'S.1156'>
   <UML:TaggedValue.dataValue>
    	Implementation of a dummy tracer that does not forward trace signals to
any external test set up. The dummy tracer can be useful either in a test
context or in an application where trace signals are not used. Note that
the &lt;code&gt;CC_RootObject&lt;/code&gt; class requires a tracer component as one
of its plug-in components. This dummy tracer can be used where no physical
tracer component is available.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3528'
        name = 'author'
        modelElement = 'S.1156'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3529'
        name = 'see'
        modelElement = 'S.1156'>
   <UML:TaggedValue.dataValue>
    	CC_RootObject
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3530'
        name = 'version'
        modelElement = 'S.1156'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3531'
        name = 'documentation'
        modelElement = 'S.1170'>
   <UML:TaggedValue.dataValue>
    	Instantiate a dummy tracer object.
The enabled status of the tracer is set to &quot;disabled&quot;. This minimizes the
overheads associated to the presence of the tracer in an application where
no trace signals need be generated.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3532'
        name = 'see'
        modelElement = 'S.1170'>
   <UML:TaggedValue.dataValue>
    	Tracer#setEnabled
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3533'
        name = 'documentation'
        modelElement = 'S.1171'>
   <UML:TaggedValue.dataValue>
    	This is a dummy method that returns without taking any action
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3534'
        name = 'see'
        modelElement = 'S.1171'>
   <UML:TaggedValue.dataValue>
    	Tracer#sendRawTrace
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3535'
        name = 'param'
        modelElement = 'S.1171'>
   <UML:TaggedValue.dataValue>
    	traceItem the trace item to be sent to the test set-up
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3538'
        name = 'documentation'
        modelElement = 'S.1158'>
   <UML:TaggedValue.dataValue>
    	Implementation of a test tracer that sends the trace signals to a &lt;i&gt;log file&lt;/i&gt;.
The dummy tracer can be useful during a test phase
when no external test set-up is available. The log file simulates the
external test set-up.
Depending on the value of a compiler switch, the log file is either a proper
file or the standard output. The latter case may allow use of this component
in an embedded environment where no file system is available.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3539'
        name = 'author'
        modelElement = 'S.1158'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3540'
        name = 'version'
        modelElement = 'S.1158'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3541'
        name = 'documentation'
        modelElement = 'S.1173'>
   <UML:TaggedValue.dataValue>
    	Instantiate a test tracer object.
The log file is opened and a header is written to it. If the MS_HOST compiler
switch is defined, the log file is a proper file. Otherwise, it is the
standard output. In the former case, the name of the
log file is hardcoded as a &lt;i&gt;test constant&lt;/i&gt;.
Note that responsibility for closing the log file rests with the user
(through method &lt;code&gt;closeLogFile&lt;/code&gt;).
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3542'
        name = 'see'
        modelElement = 'S.1173'>
   <UML:TaggedValue.dataValue>
    	#closeLogFile
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3543'
        name = 'see'
        modelElement = 'S.1173'>
   <UML:TaggedValue.dataValue>
    	MS_HOST
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3544'
        name = 'see'
        modelElement = 'S.1173'>
   <UML:TaggedValue.dataValue>
    	TEST_TRACER_LOG_FILE
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3545'
        name = 'see'
        modelElement = 'S.1173'>
   <UML:TaggedValue.dataValue>
    	Tracer#setEnabledStatus
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3546'
        name = 'documentation'
        modelElement = 'S.1174'>
   <UML:TaggedValue.dataValue>
    	In a desktop environment, flush and close the log file. In an embedded
environment, no action is taken. This method should not be called more
than once. There is no way to open the log file after it has been closed.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3547'
        name = 'see'
        modelElement = 'S.1174'>
   <UML:TaggedValue.dataValue>
    	#closeLogFile
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3548'
        name = 'see'
        modelElement = 'S.1174'>
   <UML:TaggedValue.dataValue>
    	TestCompilerSwitches#MS_HOST
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3549'
        name = 'see'
        modelElement = 'S.1174'>
   <UML:TaggedValue.dataValue>
    	TestConstants#TEST_TRACER_LOG_FILE
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3550'
        name = 'see'
        modelElement = 'S.1174'>
   <UML:TaggedValue.dataValue>
    	Tracer#setEnabled
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3552'
        name = 'documentation'
        modelElement = 'S.1175'>
   <UML:TaggedValue.dataValue>
    	In a desktop environment, return the name of the log file. In an embedded
environment, return pNULL.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3553'
        name = 'see'
        modelElement = 'S.1175'>
   <UML:TaggedValue.dataValue>
    	TEST_TRACER_LOG_FILE
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3554'
        name = 'return'
        modelElement = 'S.1175'>
   <UML:TaggedValue.dataValue>
    	the name of the log file or pNULL if the standard output is used as
log file
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3556'
        name = 'documentation'
        modelElement = 'S.1176'>
   <UML:TaggedValue.dataValue>
    	Wwrite the trace item to the log file. The trace item is written using the
&lt;code&gt;printf&lt;/code&gt; (embedded environment) or &lt;code&gt;fprintf&lt;/code&gt; (desktop
environment) library function with the
&lt;code&gt;%x&lt;/code&gt; format specifier. It is assumed that the &lt;code&gt;TD_TraceItem&lt;/code&gt;
is compatible with this this specifier.
This method should be called only when the log file is still open.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3557'
        name = 'see'
        modelElement = 'S.1176'>
   <UML:TaggedValue.dataValue>
    	#closeLogFile
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3558'
        name = 'see'
        modelElement = 'S.1176'>
   <UML:TaggedValue.dataValue>
    	Tracer#sendRawTrace
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3559'
        name = 'param'
        modelElement = 'S.1176'>
   <UML:TaggedValue.dataValue>
    	traceItem the trace item to be sent to the test set-up
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3562'
        name = 'documentation'
        modelElement = 'S.1160'>
   <UML:TaggedValue.dataValue>
    	Abstract class representing the interface to an &lt;i&gt;OBS Clock Component&lt;/i&gt; that can
provide timing-related information and services to the application.
OBS Clock Components can provide two types of timing information
and one service. The timing information are: the &lt;i&gt;on-board time&lt;/i&gt;
and the &lt;i&gt;on-board cycle&lt;/i&gt;. The service is the &lt;i&gt;timing synchronization
service&lt;/i&gt;.
&lt;p&gt;
The &lt;i&gt;on-board time&lt;/i&gt; is a time measurement provided by some external
source. The &lt;i&gt;on-board cycle&lt;/i&gt; assumes that the application is running
cyclically and it represents the number of cycle from some arbitrary point
(for instance, the time of creation of the OBS clock component, or the time
it was last reset).
&lt;p&gt;
The &lt;i&gt;timing synchronization service&lt;/i&gt; is an application-dependent service
to synchronize the on-board time maintained by the OBS clock component.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3563'
        name = 'author'
        modelElement = 'S.1160'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3564'
        name = 'todo'
        modelElement = 'S.1160'>
   <UML:TaggedValue.dataValue>
    	create a PUSObsClock class derived from this class to implement 
PUS-specific timing services
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3565'
        name = 'todo'
        modelElement = 'S.1160'>
   <UML:TaggedValue.dataValue>
    	spilt the setTime method into two setter methods
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3566'
        name = 'version'
        modelElement = 'S.1160'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3567'
        name = 'documentation'
        modelElement = 'S.1177'>
   <UML:TaggedValue.dataValue>
    	Return the current on-board time.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3568'
        name = 'return'
        modelElement = 'S.1177'>
   <UML:TaggedValue.dataValue>
    	the current on-board time
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3570'
        name = 'documentation'
        modelElement = 'S.1178'>
   <UML:TaggedValue.dataValue>
    	Return the current on-board cycle.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3571'
        name = 'return'
        modelElement = 'S.1178'>
   <UML:TaggedValue.dataValue>
    	the current on-board cycle
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3573'
        name = 'documentation'
        modelElement = 'S.1179'>
   <UML:TaggedValue.dataValue>
    	Implement the timing synchronization service.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3575'
        name = 'documentation'
        modelElement = 'S.1180'>
   <UML:TaggedValue.dataValue>
    	Reset the OBS clock.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3577'
        name = 'documentation'
        modelElement = 'S.1159'>
   <UML:TaggedValue.dataValue>
    	Base class from which all tracer classes are derived.
A tracer is a component that can send trace signals to an external test
set-up.
A trace signal is made up of one or more &lt;i&gt;trace items&lt;/i&gt;. A trace item
is an elementary item of trace information that is sent to the test set-up
in one single operation.
&lt;p&gt;
Two types of trace signals are recognized: a &lt;i&gt;Synch Trace&lt;/i&gt;, and a
&lt;i&gt;Packet Trace&lt;/i&gt;. A synch trace consists of one single trace item. A
packet trace consists of a sequence of trace items.
&lt;p&gt;
The tracer can be enabled or disabled.
Calls to the services to send trace signals in a tracer that is disabled
have no effect.
&lt;p&gt;
This class is abstract because the implementation of the services that
send the trace signals
must be specified in the derived classes that implement concrete tracers.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3578'
        name = 'author'
        modelElement = 'S.1159'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3579'
        name = 'version'
        modelElement = 'S.1159'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3580'
        name = 'documentation'
        modelElement = 'S.1182'>
   <UML:TaggedValue.dataValue>
    	Instantiate a tracer object.
The enabled status of the tracer must be initialized to &quot;enabled&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3581'
        name = 'documentation'
        modelElement = 'S.1183'>
   <UML:TaggedValue.dataValue>
    	Send a Synch trace signal if the tracer is enabled.
If the tracer is disabled, the method call has no effect.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
if ( isEnabled() )
{  sendRawTrace(traceId);
} &lt;/PRE&gt;
The &lt;CODE&gt;sendRawTrace()&lt;/CODE&gt; method is abstract and encapsulates
the implementation of the raw trace signal
sending.
Thus, this class enforces the management of the enabled status but
delegates implementation of
the sending mechanism to
derived classes implementing concrete tracers.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3582'
        name = 'param'
        modelElement = 'S.1183'>
   <UML:TaggedValue.dataValue>
    	traceId the trace identifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3585'
        name = 'documentation'
        modelElement = 'S.1184'>
   <UML:TaggedValue.dataValue>
    	Send a packet trace signal if the tracer is enabled.
If the tracer is disabled, the method call has no effect.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
if ( isEnabled() )
{  for (int i=0; i smaller than number of items in packet; i++)
{  TD_TraceItem b = . . .  // form i-th item of the packet trace
sendRawTrace(b);
}
} &lt;/PRE&gt;
The &lt;CODE&gt;sendRawTrace()&lt;/CODE&gt; method is abstract and encapsulates
the implementation of the raw trace signal
sending.
Thus, this class enforces the management of the enabled status and
transform the sequence of trace
data into elementary trace item to be sent to the test set-up in sequence
but delegates
implementation of the sending mechanism to
derived classes implementing concrete tracers.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3586'
        name = 'param'
        modelElement = 'S.1184'>
   <UML:TaggedValue.dataValue>
    	n number of trace data elements
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3587'
        name = 'param'
        modelElement = 'S.1184'>
   <UML:TaggedValue.dataValue>
    	traceData array of trace data
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3591'
        name = 'documentation'
        modelElement = 'S.1185'>
   <UML:TaggedValue.dataValue>
    	Set the enable status of the tracer.
When the tracer is disabled, a call to its trace sending methods has
no effect.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3592'
        name = 'param'
        modelElement = 'S.1185'>
   <UML:TaggedValue.dataValue>
    	isEnabled if true, then the tracer is enabled; if false, then
the profile is disabled
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3595'
        name = 'documentation'
        modelElement = 'S.1186'>
   <UML:TaggedValue.dataValue>
    	Check the enable status of the tracer.
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3596'
        name = 'return'
        modelElement = 'S.1186'>
   <UML:TaggedValue.dataValue>
    	true if the profile is enabled, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3598'
        name = 'documentation'
        modelElement = 'S.1187'>
   <UML:TaggedValue.dataValue>
    	Encapsulate the mechanism to send one single tracer item over the trace
channel to the external test
set-up.
This method is called by methods &lt;CODE&gt;sendLedTrace()&lt;/CODE&gt;,
&lt;CODE&gt;sendSynchTrace()&lt;/CODE&gt; and
&lt;CODE&gt;sendPacketTrace()&lt;/CODE&gt; in this same class.
User of a tracer object do not see method &lt;CODE&gt;sendRawTrace()&lt;/CODE&gt;,
they only see the &lt;CODE&gt;sendXxxTrace()&lt;/CODE&gt; methods.
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3599'
        name = 'see'
        modelElement = 'S.1187'>
   <UML:TaggedValue.dataValue>
    	#sendSynchTrace
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3600'
        name = 'see'
        modelElement = 'S.1187'>
   <UML:TaggedValue.dataValue>
    	#sendPacketTrace
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3601'
        name = 'param'
        modelElement = 'S.1187'>
   <UML:TaggedValue.dataValue>
    	rawItem the trace item to be sent to the test set-up
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3629'
        name = 'documentation'
        modelElement = 'G.288'>
   <UML:TaggedValue.dataValue>
    	The i-th item of this array holds the descriptor for the i-th memory block
to be loaded
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3639'
        name = 'documentation'
        modelElement = 'S.1202'>
   <UML:TaggedValue.dataValue>
    	Dynamic factory for components of type: &lt;code&gt;Telecommand&lt;/code&gt;.
A &lt;i&gt;dynamic factory&lt;/i&gt; is a component that manages a pool of instances of
components of a certain type. Clients of the factory can require one of these
instances at run-time. After the factory hands over a component instance to its
client, the instance is marked as &quot;in use&quot; and cannot be given to any other
clients. When the requesting client has finished using the instance, it should release
it by marking it as &quot;no longer in use&quot;. This will allow the factory to make it
available to other clients that request it. The &quot;in use&quot; status of the component
instances is controlled through method &lt;code&gt;setInUse&lt;/code&gt; declared on
the component instances.
&lt;p&gt;
A dynamic factory is configured in two steps. The first step is performed
by the factory constructor when the internal data structures to hold the component
instances are created. The second step is performed during application initialization
when the component instances are loaded in the factory. Reconfiguration at run time
during normal application operation is not allowed.
&lt;p&gt;
Dynamic factories are implemented as singletons. They can exist in one single instance
that can be accessed through the &lt;code&gt;getInstance&lt;/code&gt; method.
The one single instance of the class is created the first time that method
getInstance is called. In order to avoid possible disruptions of
real-time behaviour, applications should ensure that this method has been called
at least once before the application enters its operational phase.
&lt;p&gt;
This factory manages the following component instances:&lt;ul&gt;  
&lt;li&gt;Number of instances of type &lt;code&gt;DC_DummyPUSTelecommand&lt;/code&gt;: 1&lt;/li&gt;    
&lt;li&gt;Number of instances of type &lt;code&gt;DC_DummyTelecommand&lt;/code&gt;: 2&lt;/li&gt;    
&lt;li&gt;Number of instances of type &lt;code&gt;DC_PUSControlDataReporting&lt;/code&gt;: 1&lt;/li&gt;    
&lt;li&gt;Number of instances of type &lt;code&gt;DC_PUSDefineDataReporting&lt;/code&gt;: 1&lt;/li&gt;    
&lt;li&gt;Number of instances of type &lt;code&gt;DC_PUSDumpMemoryAbsolute&lt;/code&gt;: 1&lt;/li&gt;    
&lt;li&gt;Number of instances of type &lt;code&gt;DC_PUSDumpMemoryOffset&lt;/code&gt;: 1&lt;/li&gt;    
&lt;li&gt;Number of instances of type &lt;code&gt;DC_PUSMemoryLoadAbsolute&lt;/code&gt;: 2&lt;/li&gt;    
&lt;li&gt;Number of instances of type &lt;code&gt;DC_PUSMemoryLoadOffset&lt;/code&gt;: 1&lt;/li&gt;    
&lt;li&gt;Number of instances of type &lt;code&gt;DC_TestPUSTelecommand&lt;/code&gt;: 3&lt;/li&gt;    
&lt;/ul&gt;
The code for this class was automatically generated by an XSL program processing
the XML-based application model.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3640'
        name = 'author'
        modelElement = 'S.1202'>
   <UML:TaggedValue.dataValue>
    	Automatically Generated Class
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3641'
        name = 'ingroup'
        modelElement = 'S.1202'>
   <UML:TaggedValue.dataValue>
    	Telecommand
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3642'
        name = 'see'
        modelElement = 'S.1202'>
   <UML:TaggedValue.dataValue>
    	Telecommand
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3643'
        name = 'version'
        modelElement = 'S.1202'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3644'
        name = 'documentation'
        modelElement = 'S.1238'>
   <UML:TaggedValue.dataValue>
    	Instantiate the factory component. The class identifier is set and
the internal data structures to hold the component instances managed
by the factory are created.
This constructor is defined to be protected because this is a singleton
class.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3645'
        name = 'documentation'
        modelElement = 'S.1239'>
   <UML:TaggedValue.dataValue>
    	Get the single instance of this singleton class. If the instance does not
yet exist, it is created.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3647'
        name = 'documentation'
        modelElement = 'S.1240'>
   <UML:TaggedValue.dataValue>
    	Check that all component instances required by the factory have been loaded.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3648'
        name = 'return'
        modelElement = 'S.1240'>
   <UML:TaggedValue.dataValue>
    	true if the component is configured, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3650'
        name = 'documentation'
        modelElement = 'S.1241'>
   <UML:TaggedValue.dataValue>
    	Load one instance of type &lt;code&gt;DC_DummyPUSTelecommand&lt;/code&gt; in the
factory. The component instances managed by the factory are internally stored in an
array. This method loads the i-th element of the array. The argument i should lie
in the interval [0,N-1] where N is the number of component instances of type
&lt;code&gt;DC_DummyPUSTelecommand&lt;/code&gt;. The value of N is defined by
the class constructor.
&lt;p&gt;
The &quot;in use&quot; status of a newly loaded component is initialized
to: &quot;component is not in use&quot;.
&lt;p&gt;
This is an initialization method that should only be called during the application
configuration phase.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3651'
        name = 'param'
        modelElement = 'S.1241'>
   <UML:TaggedValue.dataValue>
    	i the index in the internal array
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3652'
        name = 'param'
        modelElement = 'S.1241'>
   <UML:TaggedValue.dataValue>
    	pItem the component instance
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3656'
        name = 'documentation'
        modelElement = 'S.1242'>
   <UML:TaggedValue.dataValue>
    	Return the number of component instances of type &lt;code&gt;DC_DummyPUSTelecommand&lt;/code&gt;
that are currently allocated. A component instance is allocated if its &quot;in use&quot; status is
equal to: &quot;component is in use&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3657'
        name = 'return'
        modelElement = 'S.1242'>
   <UML:TaggedValue.dataValue>
    	the number of allocated component instances
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3659'
        name = 'documentation'
        modelElement = 'S.1243'>
   <UML:TaggedValue.dataValue>
    	Return the number of component instances of type &lt;code&gt;DC_DummyPUSTelecommand&lt;/code&gt;
that are in the factory. The value returned is the maximum number of component instances of
type &lt;code&gt;DC_DummyPUSTelecommand&lt;/code&gt; that can be allocated.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3660'
        name = 'return'
        modelElement = 'S.1243'>
   <UML:TaggedValue.dataValue>
    	the total number of component instances in the factory of
type &lt;code&gt;DC_DummyPUSTelecommand&lt;/code&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3662'
        name = 'documentation'
        modelElement = 'S.1244'>
   <UML:TaggedValue.dataValue>
    	Allocate one instance of type &lt;code&gt;DC_DummyPUSTelecommand&lt;/code&gt;.
This method scans all the entries in the factory of type &lt;code&gt;DC_DummyPUSTelecommand&lt;/code&gt;
and returns the first one which is not in use. 
Before being returned to the caller,
the status of the component instance is changed to: &quot;in use&quot;. A client that receives
a component instance through a call to this method, should release the instance when it
no longer needs it. This can be done by calling
method &lt;code&gt;setInUse(false)&lt;/code&gt; on the component itself.
&lt;p&gt;
If no free component instances are found, then the method returns null. Note that no
event report is generated to record the failure to allocate a component instance. Event
reporting is the responsibility of the caller.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3663'
        name = 'return'
        modelElement = 'S.1244'>
   <UML:TaggedValue.dataValue>
    	the allocated component instance or null if no free instances were found
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3665'
        name = 'documentation'
        modelElement = 'S.1245'>
   <UML:TaggedValue.dataValue>
    	Check whether a non-allocated component instance of type &lt;code&gt;DC_DummyPUSTelecommand&lt;/code&gt;
is available within the factory. If this method return true, then the corresponding
&lt;code&gt;allocate&lt;/code&gt; method is guaranteed to return a non-null value.
The method parameters are used as in the corresponding &lt;code&gt;allocate&lt;/code&gt; method.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3666'
        name = 'see'
        modelElement = 'S.1245'>
   <UML:TaggedValue.dataValue>
    	#allocateDC_DummyPUSTelecommand
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3667'
        name = 'return'
        modelElement = 'S.1245'>
   <UML:TaggedValue.dataValue>
    	true if free instances of type DC_DummyPUSTelecommand are available,
false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3669'
        name = 'documentation'
        modelElement = 'S.1246'>
   <UML:TaggedValue.dataValue>
    	Load one instance of type &lt;code&gt;DC_DummyTelecommand&lt;/code&gt; in the
factory. The component instances managed by the factory are internally stored in an
array. This method loads the i-th element of the array. The argument i should lie
in the interval [0,N-1] where N is the number of component instances of type
&lt;code&gt;DC_DummyTelecommand&lt;/code&gt;. The value of N is defined by
the class constructor.
&lt;p&gt;
The &quot;in use&quot; status of a newly loaded component is initialized
to: &quot;component is not in use&quot;.
&lt;p&gt;
This is an initialization method that should only be called during the application
configuration phase.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3670'
        name = 'param'
        modelElement = 'S.1246'>
   <UML:TaggedValue.dataValue>
    	i the index in the internal array
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3671'
        name = 'param'
        modelElement = 'S.1246'>
   <UML:TaggedValue.dataValue>
    	pItem the component instance
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3675'
        name = 'documentation'
        modelElement = 'S.1247'>
   <UML:TaggedValue.dataValue>
    	Return the number of component instances of type &lt;code&gt;DC_DummyTelecommand&lt;/code&gt;
that are currently allocated. A component instance is allocated if its &quot;in use&quot; status is
equal to: &quot;component is in use&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3676'
        name = 'return'
        modelElement = 'S.1247'>
   <UML:TaggedValue.dataValue>
    	the number of allocated component instances
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3678'
        name = 'documentation'
        modelElement = 'S.1248'>
   <UML:TaggedValue.dataValue>
    	Return the number of component instances of type &lt;code&gt;DC_DummyTelecommand&lt;/code&gt;
that are in the factory. The value returned is the maximum number of component instances of
type &lt;code&gt;DC_DummyTelecommand&lt;/code&gt; that can be allocated.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3679'
        name = 'return'
        modelElement = 'S.1248'>
   <UML:TaggedValue.dataValue>
    	the total number of component instances in the factory of
type &lt;code&gt;DC_DummyTelecommand&lt;/code&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3681'
        name = 'documentation'
        modelElement = 'S.1249'>
   <UML:TaggedValue.dataValue>
    	Allocate one instance of type &lt;code&gt;DC_DummyTelecommand&lt;/code&gt;.
This method scans all the entries in the factory of type &lt;code&gt;DC_DummyTelecommand&lt;/code&gt;
and returns the first one which is not in use. 
Before being returned to the caller,
the status of the component instance is changed to: &quot;in use&quot;. A client that receives
a component instance through a call to this method, should release the instance when it
no longer needs it. This can be done by calling
method &lt;code&gt;setInUse(false)&lt;/code&gt; on the component itself.
&lt;p&gt;
If no free component instances are found, then the method returns null. Note that no
event report is generated to record the failure to allocate a component instance. Event
reporting is the responsibility of the caller.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3682'
        name = 'return'
        modelElement = 'S.1249'>
   <UML:TaggedValue.dataValue>
    	the allocated component instance or null if no free instances were found
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3684'
        name = 'documentation'
        modelElement = 'S.1250'>
   <UML:TaggedValue.dataValue>
    	Check whether a non-allocated component instance of type &lt;code&gt;DC_DummyTelecommand&lt;/code&gt;
is available within the factory. If this method return true, then the corresponding
&lt;code&gt;allocate&lt;/code&gt; method is guaranteed to return a non-null value.
The method parameters are used as in the corresponding &lt;code&gt;allocate&lt;/code&gt; method.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3685'
        name = 'see'
        modelElement = 'S.1250'>
   <UML:TaggedValue.dataValue>
    	#allocateDC_DummyTelecommand
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3686'
        name = 'return'
        modelElement = 'S.1250'>
   <UML:TaggedValue.dataValue>
    	true if free instances of type DC_DummyTelecommand are available,
false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3688'
        name = 'documentation'
        modelElement = 'S.1251'>
   <UML:TaggedValue.dataValue>
    	Load one instance of type &lt;code&gt;DC_PUSControlDataReporting&lt;/code&gt; in the
factory. The component instances managed by the factory are internally stored in an
array. This method loads the i-th element of the array. The argument i should lie
in the interval [0,N-1] where N is the number of component instances of type
&lt;code&gt;DC_PUSControlDataReporting&lt;/code&gt;. The value of N is defined by
the class constructor.
&lt;p&gt;
The &quot;in use&quot; status of a newly loaded component is initialized
to: &quot;component is not in use&quot;.
&lt;p&gt;
This is an initialization method that should only be called during the application
configuration phase.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3689'
        name = 'param'
        modelElement = 'S.1251'>
   <UML:TaggedValue.dataValue>
    	i the index in the internal array
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3690'
        name = 'param'
        modelElement = 'S.1251'>
   <UML:TaggedValue.dataValue>
    	pItem the component instance
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3694'
        name = 'documentation'
        modelElement = 'S.1252'>
   <UML:TaggedValue.dataValue>
    	Return the number of component instances of type &lt;code&gt;DC_PUSControlDataReporting&lt;/code&gt;
that are currently allocated. A component instance is allocated if its &quot;in use&quot; status is
equal to: &quot;component is in use&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3695'
        name = 'return'
        modelElement = 'S.1252'>
   <UML:TaggedValue.dataValue>
    	the number of allocated component instances
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3697'
        name = 'documentation'
        modelElement = 'S.1253'>
   <UML:TaggedValue.dataValue>
    	Return the number of component instances of type &lt;code&gt;DC_PUSControlDataReporting&lt;/code&gt;
that are in the factory. The value returned is the maximum number of component instances of
type &lt;code&gt;DC_PUSControlDataReporting&lt;/code&gt; that can be allocated.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3698'
        name = 'return'
        modelElement = 'S.1253'>
   <UML:TaggedValue.dataValue>
    	the total number of component instances in the factory of
type &lt;code&gt;DC_PUSControlDataReporting&lt;/code&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3700'
        name = 'documentation'
        modelElement = 'S.1254'>
   <UML:TaggedValue.dataValue>
    	Allocate one instance of type &lt;code&gt;DC_PUSControlDataReporting&lt;/code&gt;.
This method scans all the entries in the factory of type &lt;code&gt;DC_PUSControlDataReporting&lt;/code&gt;
and returns the first one which is not in use. 
In addition to verifyin that the returned component is not in use, this method also performs a check
on the value of the component configuration parameters. The folloging configuration parameters 
are checked: MaxNumberSID.
This method has a parameter matching each component configuration parameter. A component instance is
returned only if the value of the component configuration parameter is greater than or equal to the method
parameter. 
Before being returned to the caller,
the status of the component instance is changed to: &quot;in use&quot;. A client that receives
a component instance through a call to this method, should release the instance when it
no longer needs it. This can be done by calling
method &lt;code&gt;setInUse(false)&lt;/code&gt; on the component itself.
&lt;p&gt;
If no free component instances are found, then the method returns null. Note that no
event report is generated to record the failure to allocate a component instance. Event
reporting is the responsibility of the caller.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3701'
        name = 'param'
        modelElement = 'S.1254'>
   <UML:TaggedValue.dataValue>
    	MaxNumberSID minimum value for a component configuration parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3702'
        name = 'return'
        modelElement = 'S.1254'>
   <UML:TaggedValue.dataValue>
    	the allocated component instance or null if no free instances were found
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3705'
        name = 'documentation'
        modelElement = 'S.1255'>
   <UML:TaggedValue.dataValue>
    	Check whether a non-allocated component instance of type &lt;code&gt;DC_PUSControlDataReporting&lt;/code&gt;
is available within the factory. If this method return true, then the corresponding
&lt;code&gt;allocate&lt;/code&gt; method is guaranteed to return a non-null value.
The method parameters are used as in the corresponding &lt;code&gt;allocate&lt;/code&gt; method.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3706'
        name = 'see'
        modelElement = 'S.1255'>
   <UML:TaggedValue.dataValue>
    	#allocateDC_PUSControlDataReporting
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3707'
        name = 'param'
        modelElement = 'S.1255'>
   <UML:TaggedValue.dataValue>
    	MaxNumberSID minimum value for a component configuration parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3708'
        name = 'return'
        modelElement = 'S.1255'>
   <UML:TaggedValue.dataValue>
    	true if free instances of type DC_PUSControlDataReporting are available,
false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3711'
        name = 'documentation'
        modelElement = 'S.1256'>
   <UML:TaggedValue.dataValue>
    	Load one instance of type &lt;code&gt;DC_PUSDefineDataReporting&lt;/code&gt; in the
factory. The component instances managed by the factory are internally stored in an
array. This method loads the i-th element of the array. The argument i should lie
in the interval [0,N-1] where N is the number of component instances of type
&lt;code&gt;DC_PUSDefineDataReporting&lt;/code&gt;. The value of N is defined by
the class constructor.
&lt;p&gt;
The &quot;in use&quot; status of a newly loaded component is initialized
to: &quot;component is not in use&quot;.
&lt;p&gt;
This is an initialization method that should only be called during the application
configuration phase.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3712'
        name = 'param'
        modelElement = 'S.1256'>
   <UML:TaggedValue.dataValue>
    	i the index in the internal array
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3713'
        name = 'param'
        modelElement = 'S.1256'>
   <UML:TaggedValue.dataValue>
    	pItem the component instance
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3717'
        name = 'documentation'
        modelElement = 'S.1257'>
   <UML:TaggedValue.dataValue>
    	Return the number of component instances of type &lt;code&gt;DC_PUSDefineDataReporting&lt;/code&gt;
that are currently allocated. A component instance is allocated if its &quot;in use&quot; status is
equal to: &quot;component is in use&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3718'
        name = 'return'
        modelElement = 'S.1257'>
   <UML:TaggedValue.dataValue>
    	the number of allocated component instances
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3720'
        name = 'documentation'
        modelElement = 'S.1258'>
   <UML:TaggedValue.dataValue>
    	Return the number of component instances of type &lt;code&gt;DC_PUSDefineDataReporting&lt;/code&gt;
that are in the factory. The value returned is the maximum number of component instances of
type &lt;code&gt;DC_PUSDefineDataReporting&lt;/code&gt; that can be allocated.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3721'
        name = 'return'
        modelElement = 'S.1258'>
   <UML:TaggedValue.dataValue>
    	the total number of component instances in the factory of
type &lt;code&gt;DC_PUSDefineDataReporting&lt;/code&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3723'
        name = 'documentation'
        modelElement = 'S.1259'>
   <UML:TaggedValue.dataValue>
    	Allocate one instance of type &lt;code&gt;DC_PUSDefineDataReporting&lt;/code&gt;.
This method scans all the entries in the factory of type &lt;code&gt;DC_PUSDefineDataReporting&lt;/code&gt;
and returns the first one which is not in use. 
In addition to verifyin that the returned component is not in use, this method also performs a check
on the value of the component configuration parameters. The folloging configuration parameters 
are checked: NumberOfRawData.
This method has a parameter matching each component configuration parameter. A component instance is
returned only if the value of the component configuration parameter is greater than or equal to the method
parameter. 
Before being returned to the caller,
the status of the component instance is changed to: &quot;in use&quot;. A client that receives
a component instance through a call to this method, should release the instance when it
no longer needs it. This can be done by calling
method &lt;code&gt;setInUse(false)&lt;/code&gt; on the component itself.
&lt;p&gt;
If no free component instances are found, then the method returns null. Note that no
event report is generated to record the failure to allocate a component instance. Event
reporting is the responsibility of the caller.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3724'
        name = 'param'
        modelElement = 'S.1259'>
   <UML:TaggedValue.dataValue>
    	NumberOfRawData minimum value for a component configuration parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3725'
        name = 'return'
        modelElement = 'S.1259'>
   <UML:TaggedValue.dataValue>
    	the allocated component instance or null if no free instances were found
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3728'
        name = 'documentation'
        modelElement = 'S.1260'>
   <UML:TaggedValue.dataValue>
    	Check whether a non-allocated component instance of type &lt;code&gt;DC_PUSDefineDataReporting&lt;/code&gt;
is available within the factory. If this method return true, then the corresponding
&lt;code&gt;allocate&lt;/code&gt; method is guaranteed to return a non-null value.
The method parameters are used as in the corresponding &lt;code&gt;allocate&lt;/code&gt; method.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3729'
        name = 'see'
        modelElement = 'S.1260'>
   <UML:TaggedValue.dataValue>
    	#allocateDC_PUSDefineDataReporting
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3730'
        name = 'param'
        modelElement = 'S.1260'>
   <UML:TaggedValue.dataValue>
    	NumberOfRawData minimum value for a component configuration parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3731'
        name = 'return'
        modelElement = 'S.1260'>
   <UML:TaggedValue.dataValue>
    	true if free instances of type DC_PUSDefineDataReporting are available,
false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3734'
        name = 'documentation'
        modelElement = 'S.1261'>
   <UML:TaggedValue.dataValue>
    	Load one instance of type &lt;code&gt;DC_PUSDumpMemoryAbsolute&lt;/code&gt; in the
factory. The component instances managed by the factory are internally stored in an
array. This method loads the i-th element of the array. The argument i should lie
in the interval [0,N-1] where N is the number of component instances of type
&lt;code&gt;DC_PUSDumpMemoryAbsolute&lt;/code&gt;. The value of N is defined by
the class constructor.
&lt;p&gt;
The &quot;in use&quot; status of a newly loaded component is initialized
to: &quot;component is not in use&quot;.
&lt;p&gt;
This is an initialization method that should only be called during the application
configuration phase.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3735'
        name = 'param'
        modelElement = 'S.1261'>
   <UML:TaggedValue.dataValue>
    	i the index in the internal array
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3736'
        name = 'param'
        modelElement = 'S.1261'>
   <UML:TaggedValue.dataValue>
    	pItem the component instance
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3740'
        name = 'documentation'
        modelElement = 'S.1262'>
   <UML:TaggedValue.dataValue>
    	Return the number of component instances of type &lt;code&gt;DC_PUSDumpMemoryAbsolute&lt;/code&gt;
that are currently allocated. A component instance is allocated if its &quot;in use&quot; status is
equal to: &quot;component is in use&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3741'
        name = 'return'
        modelElement = 'S.1262'>
   <UML:TaggedValue.dataValue>
    	the number of allocated component instances
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3743'
        name = 'documentation'
        modelElement = 'S.1263'>
   <UML:TaggedValue.dataValue>
    	Return the number of component instances of type &lt;code&gt;DC_PUSDumpMemoryAbsolute&lt;/code&gt;
that are in the factory. The value returned is the maximum number of component instances of
type &lt;code&gt;DC_PUSDumpMemoryAbsolute&lt;/code&gt; that can be allocated.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3744'
        name = 'return'
        modelElement = 'S.1263'>
   <UML:TaggedValue.dataValue>
    	the total number of component instances in the factory of
type &lt;code&gt;DC_PUSDumpMemoryAbsolute&lt;/code&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3746'
        name = 'documentation'
        modelElement = 'S.1264'>
   <UML:TaggedValue.dataValue>
    	Allocate one instance of type &lt;code&gt;DC_PUSDumpMemoryAbsolute&lt;/code&gt;.
This method scans all the entries in the factory of type &lt;code&gt;DC_PUSDumpMemoryAbsolute&lt;/code&gt;
and returns the first one which is not in use. 
In addition to verifyin that the returned component is not in use, this method also performs a check
on the value of the component configuration parameters. The folloging configuration parameters 
are checked: NumberOfRawData.
This method has a parameter matching each component configuration parameter. A component instance is
returned only if the value of the component configuration parameter is greater than or equal to the method
parameter. 
Before being returned to the caller,
the status of the component instance is changed to: &quot;in use&quot;. A client that receives
a component instance through a call to this method, should release the instance when it
no longer needs it. This can be done by calling
method &lt;code&gt;setInUse(false)&lt;/code&gt; on the component itself.
&lt;p&gt;
If no free component instances are found, then the method returns null. Note that no
event report is generated to record the failure to allocate a component instance. Event
reporting is the responsibility of the caller.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3747'
        name = 'param'
        modelElement = 'S.1264'>
   <UML:TaggedValue.dataValue>
    	NumberOfRawData minimum value for a component configuration parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3748'
        name = 'return'
        modelElement = 'S.1264'>
   <UML:TaggedValue.dataValue>
    	the allocated component instance or null if no free instances were found
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3751'
        name = 'documentation'
        modelElement = 'S.1265'>
   <UML:TaggedValue.dataValue>
    	Check whether a non-allocated component instance of type &lt;code&gt;DC_PUSDumpMemoryAbsolute&lt;/code&gt;
is available within the factory. If this method return true, then the corresponding
&lt;code&gt;allocate&lt;/code&gt; method is guaranteed to return a non-null value.
The method parameters are used as in the corresponding &lt;code&gt;allocate&lt;/code&gt; method.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3752'
        name = 'see'
        modelElement = 'S.1265'>
   <UML:TaggedValue.dataValue>
    	#allocateDC_PUSDumpMemoryAbsolute
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3753'
        name = 'param'
        modelElement = 'S.1265'>
   <UML:TaggedValue.dataValue>
    	NumberOfRawData minimum value for a component configuration parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3754'
        name = 'return'
        modelElement = 'S.1265'>
   <UML:TaggedValue.dataValue>
    	true if free instances of type DC_PUSDumpMemoryAbsolute are available,
false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3757'
        name = 'documentation'
        modelElement = 'S.1266'>
   <UML:TaggedValue.dataValue>
    	Load one instance of type &lt;code&gt;DC_PUSDumpMemoryOffset&lt;/code&gt; in the
factory. The component instances managed by the factory are internally stored in an
array. This method loads the i-th element of the array. The argument i should lie
in the interval [0,N-1] where N is the number of component instances of type
&lt;code&gt;DC_PUSDumpMemoryOffset&lt;/code&gt;. The value of N is defined by
the class constructor.
&lt;p&gt;
The &quot;in use&quot; status of a newly loaded component is initialized
to: &quot;component is not in use&quot;.
&lt;p&gt;
This is an initialization method that should only be called during the application
configuration phase.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3758'
        name = 'param'
        modelElement = 'S.1266'>
   <UML:TaggedValue.dataValue>
    	i the index in the internal array
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3759'
        name = 'param'
        modelElement = 'S.1266'>
   <UML:TaggedValue.dataValue>
    	pItem the component instance
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3763'
        name = 'documentation'
        modelElement = 'S.1267'>
   <UML:TaggedValue.dataValue>
    	Return the number of component instances of type &lt;code&gt;DC_PUSDumpMemoryOffset&lt;/code&gt;
that are currently allocated. A component instance is allocated if its &quot;in use&quot; status is
equal to: &quot;component is in use&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3764'
        name = 'return'
        modelElement = 'S.1267'>
   <UML:TaggedValue.dataValue>
    	the number of allocated component instances
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3766'
        name = 'documentation'
        modelElement = 'S.1268'>
   <UML:TaggedValue.dataValue>
    	Return the number of component instances of type &lt;code&gt;DC_PUSDumpMemoryOffset&lt;/code&gt;
that are in the factory. The value returned is the maximum number of component instances of
type &lt;code&gt;DC_PUSDumpMemoryOffset&lt;/code&gt; that can be allocated.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3767'
        name = 'return'
        modelElement = 'S.1268'>
   <UML:TaggedValue.dataValue>
    	the total number of component instances in the factory of
type &lt;code&gt;DC_PUSDumpMemoryOffset&lt;/code&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3769'
        name = 'documentation'
        modelElement = 'S.1269'>
   <UML:TaggedValue.dataValue>
    	Allocate one instance of type &lt;code&gt;DC_PUSDumpMemoryOffset&lt;/code&gt;.
This method scans all the entries in the factory of type &lt;code&gt;DC_PUSDumpMemoryOffset&lt;/code&gt;
and returns the first one which is not in use. 
In addition to verifyin that the returned component is not in use, this method also performs a check
on the value of the component configuration parameters. The folloging configuration parameters 
are checked: NumberOfRawData.
This method has a parameter matching each component configuration parameter. A component instance is
returned only if the value of the component configuration parameter is greater than or equal to the method
parameter. 
Before being returned to the caller,
the status of the component instance is changed to: &quot;in use&quot;. A client that receives
a component instance through a call to this method, should release the instance when it
no longer needs it. This can be done by calling
method &lt;code&gt;setInUse(false)&lt;/code&gt; on the component itself.
&lt;p&gt;
If no free component instances are found, then the method returns null. Note that no
event report is generated to record the failure to allocate a component instance. Event
reporting is the responsibility of the caller.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3770'
        name = 'param'
        modelElement = 'S.1269'>
   <UML:TaggedValue.dataValue>
    	NumberOfRawData minimum value for a component configuration parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3771'
        name = 'return'
        modelElement = 'S.1269'>
   <UML:TaggedValue.dataValue>
    	the allocated component instance or null if no free instances were found
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3774'
        name = 'documentation'
        modelElement = 'S.1270'>
   <UML:TaggedValue.dataValue>
    	Check whether a non-allocated component instance of type &lt;code&gt;DC_PUSDumpMemoryOffset&lt;/code&gt;
is available within the factory. If this method return true, then the corresponding
&lt;code&gt;allocate&lt;/code&gt; method is guaranteed to return a non-null value.
The method parameters are used as in the corresponding &lt;code&gt;allocate&lt;/code&gt; method.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3775'
        name = 'see'
        modelElement = 'S.1270'>
   <UML:TaggedValue.dataValue>
    	#allocateDC_PUSDumpMemoryOffset
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3776'
        name = 'param'
        modelElement = 'S.1270'>
   <UML:TaggedValue.dataValue>
    	NumberOfRawData minimum value for a component configuration parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3777'
        name = 'return'
        modelElement = 'S.1270'>
   <UML:TaggedValue.dataValue>
    	true if free instances of type DC_PUSDumpMemoryOffset are available,
false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3780'
        name = 'documentation'
        modelElement = 'S.1271'>
   <UML:TaggedValue.dataValue>
    	Load one instance of type &lt;code&gt;DC_PUSMemoryLoadAbsolute&lt;/code&gt; in the
factory. The component instances managed by the factory are internally stored in an
array. This method loads the i-th element of the array. The argument i should lie
in the interval [0,N-1] where N is the number of component instances of type
&lt;code&gt;DC_PUSMemoryLoadAbsolute&lt;/code&gt;. The value of N is defined by
the class constructor.
&lt;p&gt;
The &quot;in use&quot; status of a newly loaded component is initialized
to: &quot;component is not in use&quot;.
&lt;p&gt;
This is an initialization method that should only be called during the application
configuration phase.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3781'
        name = 'param'
        modelElement = 'S.1271'>
   <UML:TaggedValue.dataValue>
    	i the index in the internal array
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3782'
        name = 'param'
        modelElement = 'S.1271'>
   <UML:TaggedValue.dataValue>
    	pItem the component instance
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3786'
        name = 'documentation'
        modelElement = 'S.1272'>
   <UML:TaggedValue.dataValue>
    	Return the number of component instances of type &lt;code&gt;DC_PUSMemoryLoadAbsolute&lt;/code&gt;
that are currently allocated. A component instance is allocated if its &quot;in use&quot; status is
equal to: &quot;component is in use&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3787'
        name = 'return'
        modelElement = 'S.1272'>
   <UML:TaggedValue.dataValue>
    	the number of allocated component instances
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3789'
        name = 'documentation'
        modelElement = 'S.1273'>
   <UML:TaggedValue.dataValue>
    	Return the number of component instances of type &lt;code&gt;DC_PUSMemoryLoadAbsolute&lt;/code&gt;
that are in the factory. The value returned is the maximum number of component instances of
type &lt;code&gt;DC_PUSMemoryLoadAbsolute&lt;/code&gt; that can be allocated.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3790'
        name = 'return'
        modelElement = 'S.1273'>
   <UML:TaggedValue.dataValue>
    	the total number of component instances in the factory of
type &lt;code&gt;DC_PUSMemoryLoadAbsolute&lt;/code&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3792'
        name = 'documentation'
        modelElement = 'S.1274'>
   <UML:TaggedValue.dataValue>
    	Allocate one instance of type &lt;code&gt;DC_PUSMemoryLoadAbsolute&lt;/code&gt;.
This method scans all the entries in the factory of type &lt;code&gt;DC_PUSMemoryLoadAbsolute&lt;/code&gt;
and returns the first one which is not in use. 
In addition to verifyin that the returned component is not in use, this method also performs a check
on the value of the component configuration parameters. The folloging configuration parameters 
are checked: MaxNumberData, MaxNumberBlocks.
This method has a parameter matching each component configuration parameter. A component instance is
returned only if the value of the component configuration parameter is greater than or equal to the method
parameter. 
Before being returned to the caller,
the status of the component instance is changed to: &quot;in use&quot;. A client that receives
a component instance through a call to this method, should release the instance when it
no longer needs it. This can be done by calling
method &lt;code&gt;setInUse(false)&lt;/code&gt; on the component itself.
&lt;p&gt;
If no free component instances are found, then the method returns null. Note that no
event report is generated to record the failure to allocate a component instance. Event
reporting is the responsibility of the caller.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3793'
        name = 'param'
        modelElement = 'S.1274'>
   <UML:TaggedValue.dataValue>
    	MaxNumberData minimum value for a component configuration parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3794'
        name = 'param'
        modelElement = 'S.1274'>
   <UML:TaggedValue.dataValue>
    	MaxNumberBlocks minimum value for a component configuration parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3795'
        name = 'return'
        modelElement = 'S.1274'>
   <UML:TaggedValue.dataValue>
    	the allocated component instance or null if no free instances were found
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3799'
        name = 'documentation'
        modelElement = 'S.1275'>
   <UML:TaggedValue.dataValue>
    	Check whether a non-allocated component instance of type &lt;code&gt;DC_PUSMemoryLoadAbsolute&lt;/code&gt;
is available within the factory. If this method return true, then the corresponding
&lt;code&gt;allocate&lt;/code&gt; method is guaranteed to return a non-null value.
The method parameters are used as in the corresponding &lt;code&gt;allocate&lt;/code&gt; method.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3800'
        name = 'see'
        modelElement = 'S.1275'>
   <UML:TaggedValue.dataValue>
    	#allocateDC_PUSMemoryLoadAbsolute
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3801'
        name = 'param'
        modelElement = 'S.1275'>
   <UML:TaggedValue.dataValue>
    	MaxNumberData minimum value for a component configuration parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3802'
        name = 'param'
        modelElement = 'S.1275'>
   <UML:TaggedValue.dataValue>
    	MaxNumberBlocks minimum value for a component configuration parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3803'
        name = 'return'
        modelElement = 'S.1275'>
   <UML:TaggedValue.dataValue>
    	true if free instances of type DC_PUSMemoryLoadAbsolute are available,
false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3807'
        name = 'documentation'
        modelElement = 'S.1276'>
   <UML:TaggedValue.dataValue>
    	Load one instance of type &lt;code&gt;DC_PUSMemoryLoadOffset&lt;/code&gt; in the
factory. The component instances managed by the factory are internally stored in an
array. This method loads the i-th element of the array. The argument i should lie
in the interval [0,N-1] where N is the number of component instances of type
&lt;code&gt;DC_PUSMemoryLoadOffset&lt;/code&gt;. The value of N is defined by
the class constructor.
&lt;p&gt;
The &quot;in use&quot; status of a newly loaded component is initialized
to: &quot;component is not in use&quot;.
&lt;p&gt;
This is an initialization method that should only be called during the application
configuration phase.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3808'
        name = 'param'
        modelElement = 'S.1276'>
   <UML:TaggedValue.dataValue>
    	i the index in the internal array
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3809'
        name = 'param'
        modelElement = 'S.1276'>
   <UML:TaggedValue.dataValue>
    	pItem the component instance
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3813'
        name = 'documentation'
        modelElement = 'S.1277'>
   <UML:TaggedValue.dataValue>
    	Return the number of component instances of type &lt;code&gt;DC_PUSMemoryLoadOffset&lt;/code&gt;
that are currently allocated. A component instance is allocated if its &quot;in use&quot; status is
equal to: &quot;component is in use&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3814'
        name = 'return'
        modelElement = 'S.1277'>
   <UML:TaggedValue.dataValue>
    	the number of allocated component instances
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3816'
        name = 'documentation'
        modelElement = 'S.1278'>
   <UML:TaggedValue.dataValue>
    	Return the number of component instances of type &lt;code&gt;DC_PUSMemoryLoadOffset&lt;/code&gt;
that are in the factory. The value returned is the maximum number of component instances of
type &lt;code&gt;DC_PUSMemoryLoadOffset&lt;/code&gt; that can be allocated.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3817'
        name = 'return'
        modelElement = 'S.1278'>
   <UML:TaggedValue.dataValue>
    	the total number of component instances in the factory of
type &lt;code&gt;DC_PUSMemoryLoadOffset&lt;/code&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3819'
        name = 'documentation'
        modelElement = 'S.1279'>
   <UML:TaggedValue.dataValue>
    	Allocate one instance of type &lt;code&gt;DC_PUSMemoryLoadOffset&lt;/code&gt;.
This method scans all the entries in the factory of type &lt;code&gt;DC_PUSMemoryLoadOffset&lt;/code&gt;
and returns the first one which is not in use. 
In addition to verifyin that the returned component is not in use, this method also performs a check
on the value of the component configuration parameters. The folloging configuration parameters 
are checked: MaxNumberData, MaxNumberBlocks.
This method has a parameter matching each component configuration parameter. A component instance is
returned only if the value of the component configuration parameter is greater than or equal to the method
parameter. 
Before being returned to the caller,
the status of the component instance is changed to: &quot;in use&quot;. A client that receives
a component instance through a call to this method, should release the instance when it
no longer needs it. This can be done by calling
method &lt;code&gt;setInUse(false)&lt;/code&gt; on the component itself.
&lt;p&gt;
If no free component instances are found, then the method returns null. Note that no
event report is generated to record the failure to allocate a component instance. Event
reporting is the responsibility of the caller.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3820'
        name = 'param'
        modelElement = 'S.1279'>
   <UML:TaggedValue.dataValue>
    	MaxNumberData minimum value for a component configuration parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3821'
        name = 'param'
        modelElement = 'S.1279'>
   <UML:TaggedValue.dataValue>
    	MaxNumberBlocks minimum value for a component configuration parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3822'
        name = 'return'
        modelElement = 'S.1279'>
   <UML:TaggedValue.dataValue>
    	the allocated component instance or null if no free instances were found
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3826'
        name = 'documentation'
        modelElement = 'S.1280'>
   <UML:TaggedValue.dataValue>
    	Check whether a non-allocated component instance of type &lt;code&gt;DC_PUSMemoryLoadOffset&lt;/code&gt;
is available within the factory. If this method return true, then the corresponding
&lt;code&gt;allocate&lt;/code&gt; method is guaranteed to return a non-null value.
The method parameters are used as in the corresponding &lt;code&gt;allocate&lt;/code&gt; method.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3827'
        name = 'see'
        modelElement = 'S.1280'>
   <UML:TaggedValue.dataValue>
    	#allocateDC_PUSMemoryLoadOffset
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3828'
        name = 'param'
        modelElement = 'S.1280'>
   <UML:TaggedValue.dataValue>
    	MaxNumberData minimum value for a component configuration parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3829'
        name = 'param'
        modelElement = 'S.1280'>
   <UML:TaggedValue.dataValue>
    	MaxNumberBlocks minimum value for a component configuration parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3830'
        name = 'return'
        modelElement = 'S.1280'>
   <UML:TaggedValue.dataValue>
    	true if free instances of type DC_PUSMemoryLoadOffset are available,
false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3834'
        name = 'documentation'
        modelElement = 'S.1281'>
   <UML:TaggedValue.dataValue>
    	Load one instance of type &lt;code&gt;DC_TestPUSTelecommand&lt;/code&gt; in the
factory. The component instances managed by the factory are internally stored in an
array. This method loads the i-th element of the array. The argument i should lie
in the interval [0,N-1] where N is the number of component instances of type
&lt;code&gt;DC_TestPUSTelecommand&lt;/code&gt;. The value of N is defined by
the class constructor.
&lt;p&gt;
The &quot;in use&quot; status of a newly loaded component is initialized
to: &quot;component is not in use&quot;.
&lt;p&gt;
This is an initialization method that should only be called during the application
configuration phase.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3835'
        name = 'param'
        modelElement = 'S.1281'>
   <UML:TaggedValue.dataValue>
    	i the index in the internal array
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3836'
        name = 'param'
        modelElement = 'S.1281'>
   <UML:TaggedValue.dataValue>
    	pItem the component instance
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3840'
        name = 'documentation'
        modelElement = 'S.1282'>
   <UML:TaggedValue.dataValue>
    	Return the number of component instances of type &lt;code&gt;DC_TestPUSTelecommand&lt;/code&gt;
that are currently allocated. A component instance is allocated if its &quot;in use&quot; status is
equal to: &quot;component is in use&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3841'
        name = 'return'
        modelElement = 'S.1282'>
   <UML:TaggedValue.dataValue>
    	the number of allocated component instances
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3843'
        name = 'documentation'
        modelElement = 'S.1283'>
   <UML:TaggedValue.dataValue>
    	Return the number of component instances of type &lt;code&gt;DC_TestPUSTelecommand&lt;/code&gt;
that are in the factory. The value returned is the maximum number of component instances of
type &lt;code&gt;DC_TestPUSTelecommand&lt;/code&gt; that can be allocated.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3844'
        name = 'return'
        modelElement = 'S.1283'>
   <UML:TaggedValue.dataValue>
    	the total number of component instances in the factory of
type &lt;code&gt;DC_TestPUSTelecommand&lt;/code&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3846'
        name = 'documentation'
        modelElement = 'S.1284'>
   <UML:TaggedValue.dataValue>
    	Allocate one instance of type &lt;code&gt;DC_TestPUSTelecommand&lt;/code&gt;.
This method scans all the entries in the factory of type &lt;code&gt;DC_TestPUSTelecommand&lt;/code&gt;
and returns the first one which is not in use. 
Before being returned to the caller,
the status of the component instance is changed to: &quot;in use&quot;. A client that receives
a component instance through a call to this method, should release the instance when it
no longer needs it. This can be done by calling
method &lt;code&gt;setInUse(false)&lt;/code&gt; on the component itself.
&lt;p&gt;
If no free component instances are found, then the method returns null. Note that no
event report is generated to record the failure to allocate a component instance. Event
reporting is the responsibility of the caller.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3847'
        name = 'return'
        modelElement = 'S.1284'>
   <UML:TaggedValue.dataValue>
    	the allocated component instance or null if no free instances were found
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3849'
        name = 'documentation'
        modelElement = 'S.1285'>
   <UML:TaggedValue.dataValue>
    	Check whether a non-allocated component instance of type &lt;code&gt;DC_TestPUSTelecommand&lt;/code&gt;
is available within the factory. If this method return true, then the corresponding
&lt;code&gt;allocate&lt;/code&gt; method is guaranteed to return a non-null value.
The method parameters are used as in the corresponding &lt;code&gt;allocate&lt;/code&gt; method.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3850'
        name = 'see'
        modelElement = 'S.1285'>
   <UML:TaggedValue.dataValue>
    	#allocateDC_TestPUSTelecommand
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3851'
        name = 'return'
        modelElement = 'S.1285'>
   <UML:TaggedValue.dataValue>
    	true if free instances of type DC_TestPUSTelecommand are available,
false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3853'
        name = 'documentation'
        modelElement = 'S.1200'>
   <UML:TaggedValue.dataValue>
    	This class encapsulates a telecommand manager.
The telecommand manager is the component that is responsible for controlling
execution of telecommands.
Telecommands are loaded into the telecommand manager (normally by the
telecommand loader) and from that
moment onward their execution remains under the control of the telecommand
manager.
The telecomand manager sees telecommands as objects of type
&lt;CODE&gt;Telecommand&lt;/CODE&gt;.
&lt;p&gt;
The telecommand manager maintains a list of pending telecommand objects.
This is called the &lt;i&gt;pending telecommand list&lt;/i&gt;.
The &lt;i&gt;pending telecommands&lt;/i&gt; are the telecommand objects that are
currently loaded into the telecommand manager and that
are due for execution.
Execution can be immediate or it can be deferred to a certain time
(time-tagged telecommands).
Before a telecommand is executed, the &lt;i&gt;execution check&lt;/i&gt; is performed
upon it.
In this way, the telecommand has a way of checking whether the conditions
for its execution are fulfilled.
If the execution check fails, the telecommand is aborted.
&lt;p&gt;
When a telecommand is loaded into the telecommand manager, the telecommand
manager performs a &lt;i&gt;validity check&lt;/i&gt;
upon it.
If the validity check fails, the telecommand is immediately aborted.
&lt;p&gt;
After being executed, or after being aborted, a telecommand is &lt;i&gt;unloaded&lt;/i&gt;.
This means that the telecommand is removed from the list of pending
telecommands and that the telecommand loader is notified that the
telecommand is no longer in use.
This allows the telecommand loader to release any resources that it had
allocated to the telecommand and to perform any other clean-up actions.
&lt;p&gt;
Telecommands can be &lt;i&gt;aborted&lt;/i&gt;.
An abort operation consists in the unloading of a telecommand that has not
yet been executed.
&lt;p&gt;
The telecommand manager creates event reports to record the following
occurrences: a telecommand has been loaded; a telecommand has been
unloaded; a telecommand has been aborted; a telecommand could not be
loaded because it failed its validity check; a telecommand could
not be loaded because the list of telecommands was full; a
telecommand could not be executed because its execution check failed.
Note that execution of the telecommand is not recorded because
telecommands are punctual actions and
therefore their execution is automatically recorded as an event
by the services provided by the &lt;code&gt;PunctualAction&lt;/code&gt; class.
&lt;p&gt;
The configuration procedure for a newly instantiated telecommand
manager is as follows: &lt;ol&gt;
&lt;li&gt;Load an OBS clock in the telecommand manager (method
&lt;code&gt;setObsClock&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Load a telecommand loader in the telecommand manager (method
&lt;code&gt;setTelecommandLoader&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Set the size of the pending telecommand list (method
&lt;code&gt;setPendingTelecommandListSize&lt;/code&gt;).&lt;/li&gt;
&lt;/ol&gt;
The above operations can be execute in any order.
&lt;p&gt;
The telecommand manager is intended to be used &quot;as is&quot; and without
changes. However, the &lt;code&gt;load&lt;/code&gt;, &lt;code&gt;abort&lt;/code&gt; and
&lt;code&gt;activate&lt;/code&gt; methods are marked virtual to
allow users to customize their logic.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3854'
        name = 'author'
        modelElement = 'S.1200'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3855'
        name = 'todo'
        modelElement = 'S.1200'>
   <UML:TaggedValue.dataValue>
    	extend the test case for the telecommand manager to check the
generation of an event in case the telecommand execution is not successful
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3856'
        name = 'todo'
        modelElement = 'S.1200'>
   <UML:TaggedValue.dataValue>
    	the name of method setPendingTelecommandListSize is not consistent with
the name of the equivalent method in class ManoeuvreManager (which is simply
called setPendingListSize. The two names should perhaps be harmonized.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3857'
        name = 'see'
        modelElement = 'S.1200'>
   <UML:TaggedValue.dataValue>
    	Telecommand
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3858'
        name = 'see'
        modelElement = 'S.1200'>
   <UML:TaggedValue.dataValue>
    	TelecommandLoader
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3859'
        name = 'see'
        modelElement = 'S.1200'>
   <UML:TaggedValue.dataValue>
    	PunctualAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3860'
        name = 'version'
        modelElement = 'S.1200'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3861'
        name = 'ingroup'
        modelElement = 'S.1200'>
   <UML:TaggedValue.dataValue>
    	FunctionalityManagers
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3862'
        name = 'ingroup'
        modelElement = 'S.1200'>
   <UML:TaggedValue.dataValue>
    	Telecommand
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3863'
        name = 'documentation'
        modelElement = 'S.1290'>
   <UML:TaggedValue.dataValue>
    	Instantiate a telecommand manager.
The size of the pending telecommand list is initialized to an illegal
value to signify that the telecommand manager is not yet configured.
The class identifier is set.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3864'
        name = 'documentation'
        modelElement = 'S.1291'>
   <UML:TaggedValue.dataValue>
    	Abort all pending telecommands. A reset bring the telecommand manager
to the state where it was immediately after having being configured.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3866'
        name = 'documentation'
        modelElement = 'S.1292'>
   <UML:TaggedValue.dataValue>
    	Set the size of the pending telecommand list representing the maximum
number of pending telecommands that can be managed by the telecommand
manager.
This method causes memory for the pending telecommand list data
structure to be allocated and the data structure to be
initialized. Only positive telecommand list sizes are legal.
&lt;p&gt;
This is an initialization method. It should be called before the
telecommand manager is used the first time and it should not be called more
than once.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3867'
        name = 'param'
        modelElement = 'S.1292'>
   <UML:TaggedValue.dataValue>
    	listSize the maximum number of pending telecommands that can be
managed by the Telecommand Manager. This should be a positive number.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3870'
        name = 'documentation'
        modelElement = 'S.1293'>
   <UML:TaggedValue.dataValue>
    	Get the size of the pending telecommand list.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3871'
        name = 'see'
        modelElement = 'S.1293'>
   <UML:TaggedValue.dataValue>
    	#setPendingTelecommandListSize
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3872'
        name = 'return'
        modelElement = 'S.1293'>
   <UML:TaggedValue.dataValue>
    	the maximum number of pending telecommands that can be
managed by the Telecommand Manager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3874'
        name = 'documentation'
        modelElement = 'S.1294'>
   <UML:TaggedValue.dataValue>
    	Get the number of currently pending telecommands.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3875'
        name = 'see'
        modelElement = 'S.1294'>
   <UML:TaggedValue.dataValue>
    	#setPendingTelecommandListSize
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3876'
        name = 'return'
        modelElement = 'S.1294'>
   <UML:TaggedValue.dataValue>
    	the number of currently pending telecommands
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3878'
        name = 'documentation'
        modelElement = 'S.1295'>
   <UML:TaggedValue.dataValue>
    	Get the i-th pending telecommand (only provided for testing purposes). 
This method returns the i-th entry in the list of pending telecommands.
The index i should be in the range [0,N-1] where N is the size of the telecommand
lending list. A null
pointer is returned if no telecommand is currently loaded at the i-th
position of the list. This method is only intended to be used for
testing purposes. It should not be used during normal operation.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3879'
        name = 'see'
        modelElement = 'S.1295'>
   <UML:TaggedValue.dataValue>
    	#setPendingTelecommandListSize
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3880'
        name = 'return'
        modelElement = 'S.1295'>
   <UML:TaggedValue.dataValue>
    	the i-th pending telecommand or null if the i-the entry in the list is empty
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3883'
        name = 'documentation'
        modelElement = 'S.1296'>
   <UML:TaggedValue.dataValue>
    	Load a telecommand. When a telecommand is loaded, it is inserted in
the list of pending telecommands and will then be considered for execution.
Immediately after being loaded, a validity check is performed on the
telecommand.
If the validity check fails, an event is created to record the fact and
the telecommand is aborted.
The telecommand remains loaded until it has terminated execution or is
aborted.
The telecommand manager creates an event whenever a new telecommand is
loaded.
If the list of pending telecommands is already full, an event report
is created to record the attempted telecommand load and the telecommand
is aborted.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
if (telecommand is not valid)
{   createEventReport(EVT_TC_NOT_VALID);
pTcLoader-&gt;release(telecommand);  // notify telecommand loader
return;
}
if (list of pending telecommand is full)
{   createEventReport(EVT_TC_LIST_FULL);
pTcLoader-&gt;release(telecommand);  // notify telecommand loader
return;
}
createEventReport(EVT_TC_LOADED);
. . .       // insert telecommand in list of pending telecommands
return; &lt;/PRE&gt;
The telecommand that is being loaded is passed as the
&lt;i&gt;event originator&lt;/i&gt; to the event reporting method.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3884'
        name = 'param'
        modelElement = 'S.1296'>
   <UML:TaggedValue.dataValue>
    	pTelecommand the telecommand that is loaded
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3887'
        name = 'documentation'
        modelElement = 'S.1297'>
   <UML:TaggedValue.dataValue>
    	Abort a telecommand.
The telecomand is unloaded without being executed.
The telecommand loader is notified that the telecommand has been unloaded.
If the argument telecommand is not currently loaded, no action is
taken.
An event report is created whenever a telecommand is aborted.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
for (all telecommands tc in pending telecommand list)
if (tc eq pTelecommand)
{   . . .   // delete tc from list of pending TC
pTcLoader-&gt;release(tc);
createEventReport(EVT_TC_ABORTED);
}
return; &lt;/PRE&gt;
The telecommand that is being aborted is passed as the
&lt;i&gt;event originator&lt;/i&gt; to the event reporting method.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3888'
        name = 'see'
        modelElement = 'S.1297'>
   <UML:TaggedValue.dataValue>
    	TelecommandLoader#release
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3889'
        name = 'param'
        modelElement = 'S.1297'>
   <UML:TaggedValue.dataValue>
    	pTelecommand the telecommand to be aborted
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3892'
        name = 'documentation'
        modelElement = 'S.1298'>
   <UML:TaggedValue.dataValue>
    	Abort a telecommand.
This method has the same semantics as the abort method that takes a
telecommand pointer as argument but it designates the telecommand to
be aborted by its identifier rather than through a pointer to the
object that encapsulates it. See the documentation of that method
for more information.
&lt;p&gt;
However, note that in this case, if a telecommand with a given id
appears more than once in the pending telecommand list (e.g. with two
different time tags), then all its instances will be aborted.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3893'
        name = 'see'
        modelElement = 'S.1298'>
   <UML:TaggedValue.dataValue>
    	abort
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3894'
        name = 'see'
        modelElement = 'S.1298'>
   <UML:TaggedValue.dataValue>
    	TelecommandLoader#release
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3895'
        name = 'param'
        modelElement = 'S.1298'>
   <UML:TaggedValue.dataValue>
    	telecommandId the telecommand to be aborted
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3898'
        name = 'documentation'
        modelElement = 'S.1299'>
   <UML:TaggedValue.dataValue>
    	Load the telecommand loader as a plug-in component.
The telecommand manager needs access to the telecommand loader because
it must notify it when a telecommand is unloaded.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3899'
        name = 'see'
        modelElement = 'S.1299'>
   <UML:TaggedValue.dataValue>
    	#activate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3900'
        name = 'see'
        modelElement = 'S.1299'>
   <UML:TaggedValue.dataValue>
    	#abort
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3901'
        name = 'param'
        modelElement = 'S.1299'>
   <UML:TaggedValue.dataValue>
    	pTcLoader the telecommand loader
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3904'
        name = 'documentation'
        modelElement = 'S.1300'>
   <UML:TaggedValue.dataValue>
    	Getter method for the telecommand loader plug-in component.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3905'
        name = 'see'
        modelElement = 'S.1300'>
   <UML:TaggedValue.dataValue>
    	#setTelecommandLoader
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3906'
        name = 'return'
        modelElement = 'S.1300'>
   <UML:TaggedValue.dataValue>
    	the telecommand loader
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3908'
        name = 'documentation'
        modelElement = 'S.1301'>
   <UML:TaggedValue.dataValue>
    	Load the OBS clock as a plug-in component.
The telecommand manager needs access to the on-board time because it
needs to check the telecommand time tag with the current time.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3909'
        name = 'see'
        modelElement = 'S.1301'>
   <UML:TaggedValue.dataValue>
    	#activate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3910'
        name = 'param'
        modelElement = 'S.1301'>
   <UML:TaggedValue.dataValue>
    	pObsClock the on-board clock
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3913'
        name = 'documentation'
        modelElement = 'S.1302'>
   <UML:TaggedValue.dataValue>
    	Getter method for the OBS clock plug-in component.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3914'
        name = 'see'
        modelElement = 'S.1302'>
   <UML:TaggedValue.dataValue>
    	#setObsClock
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3915'
        name = 'return'
        modelElement = 'S.1302'>
   <UML:TaggedValue.dataValue>
    	the on-board clock
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3917'
        name = 'documentation'
        modelElement = 'S.1303'>
   <UML:TaggedValue.dataValue>
    	Go through the list of pending telecommands and execute those that are
due for execution.
This method would typically be called by an external scheduler.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
for (all telecommands tc in the list of pending telecommands)
if ( ( tc-&gt;getTimeTag() le currentTime ) OR ( tc-&gt;getTimeTag() eq 0 ) )
{   if ( tc-&gt;canExecute() ) {
tcOutcome = tc-&gt;execute();
if (tcOutcome!=ACTION_SUCCESS)
createEventReport(EVT_TC_EXEC_FAIL);
else
createEventReport(EVT_TC_EXEC_SUCC);
} else
createEventReport(EVT_TC_EXEC_CHECK_FAIL);

tcLoader-&gt;release(tc);
. . .    // delete tc from list of pending telecommands
}        &lt;/PRE&gt;
The telecommand that is being processed is passed as the
&lt;i&gt;event originator&lt;/i&gt; to the event reporting method.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3919'
        name = 'documentation'
        modelElement = 'S.1304'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on the telecommand
manager: verify that the pending telecommand list size has been set,
that the OBS clock has been loaded, and that the telecommand loader has
been loaded.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3920'
        name = 'return'
        modelElement = 'S.1304'>
   <UML:TaggedValue.dataValue>
    	true if the telecommand manager is configured, false otherwise.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3922'
        name = 'documentation'
        modelElement = 'S.1195'>
   <UML:TaggedValue.dataValue>
    	Base class for telecommands with a potentially high criticality
level.
This is an abstract class. Concrete telecommands are obtained by
deriving this class.
&lt;p&gt;
This class adds to the basic functionalities defined by its base
class the possibility of marking a telecommand as &lt;i&gt;critical&lt;/i&gt;.
Telecommands that are marked critical are executed according to an
&quot;arm-fire&quot; protocol. The basic idea is that the first time the
telecommand receives an execute request, it does not take any
action but it sets an internal status to &quot;armed&quot;. The actual
execution of the telecommand only occurs when the second execute
request is received. The two execution requests must not occur too
far from each other in time and they must be made with exactly the
same set of parameters. The precise implementation of the &quot;arm-fire&quot;
mechanism is described below.
&lt;p&gt;
The telecommand can be in one of two states: &lt;ul&gt;
&lt;li&gt;&lt;i&gt;NotArmed&lt;/i&gt;: the telecommand is not armed&lt;/li&gt;
&lt;li&gt;&lt;i&gt;Armed&lt;/i&gt;: the telecommand has been armed and is now ready
to execute&lt;/li&gt;
&lt;/ul&gt;
The arm status is maintained by the execution check (see comment
of method &lt;code&gt;canExecute&lt;/code&gt;).
&lt;p&gt;
The telecommand maintains a &lt;i&gt;maximum armed duration&lt;/i&gt;. Its
value represents the maximum time that can elapse between the
time when the &quot;arm&quot; command was received and the time when the
&quot;fire&quot; command is received. If the &quot;fire&quot; command is received after
this interval as elapsed, then an event report
is created to record the fact.
&lt;p&gt;
The telecommand defines an &lt;i&gt;image store&lt;/i&gt; service and an
&lt;i&gt;image validity&lt;/i&gt; check. Their purpose is to allow to verify that
telecommand parameters at the time the &quot;arm&quot; command is received
are the same as when the &quot;fire&quot; command is received. The image
store service allows the current values of the telecommand parameters
to be stored in some internal data structure. The image validity check
allows the current values of the telecomand parameters to be compared
with the values that were stored in the last call to the image store
service.
&lt;p&gt;
The criticality level of the telecommand can be set by the user.
The criticality level can have two values: &lt;i&gt;not critical&lt;/i&gt; and
&lt;i&gt;critical&lt;/i&gt;. If the telecommand is marked not critical, then
it behaves exactly as an instance of its super class.
&lt;p&gt;
This implementation of the &quot;arm-fire&quot; mechanism stores the information
about the arm status and about the telecommand parameters into the
telecommand component itself. Note in particular that the standard
telecommand manager provided by the OBS Framework (&lt;code&gt;CC_TelecommandManager&lt;/code&gt;),
is not aware of whether a given telecommand is critical or not.
It is therefore the responsibility of the user to ensure that the
same component is loaded into the telecommand manager when the telecommand
is received the first time (&quot;arm command&quot;) and when it is received the
second time (&quot;fire command&quot;).
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3923'
        name = 'author'
        modelElement = 'S.1195'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3924'
        name = 'see'
        modelElement = 'S.1195'>
   <UML:TaggedValue.dataValue>
    	CC_TelecommandManager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3925'
        name = 'version'
        modelElement = 'S.1195'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3926'
        name = 'ingroup'
        modelElement = 'S.1195'>
   <UML:TaggedValue.dataValue>
    	Telecommand
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3927'
        name = 'documentation'
        modelElement = 'S.1310'>
   <UML:TaggedValue.dataValue>
    	Encapsulate the implementation of the action associated with this critical
telecommand. This method verifies if the telecommand is armed and, if so,
calls &lt;code&gt;doCriticalAction&lt;/code&gt;, which implements the actual telecommand
functionality. A non-critical telecommand is executed immediately (i.e. the
arm-fire mechanism is disabled). A pseudo-code implementation of this method
is as follows:
&lt;pre&gt;
if (TC is armed or it is not critical) {
Disarm the TC
Set the &quot;time when armed&quot; to an invalid value
return doCriticalAction();
}
else {
Arm the TC
Save the current OBS time as &quot;time when armed&quot;
Add an EVT_CRIT_TC_ARMED event to the log
return ACTION_SUCCESS;
}
&lt;/pre&gt;
&lt;p&gt;
This method is called by &lt;code&gt;PunctualAction::execute()&lt;/code&gt;.
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3928'
        name = 'see'
        modelElement = 'S.1310'>
   <UML:TaggedValue.dataValue>
    	PunctualAction#execute
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3929'
        name = 'see'
        modelElement = 'S.1310'>
   <UML:TaggedValue.dataValue>
    	#doCriticalAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3930'
        name = 'return'
        modelElement = 'S.1310'>
   <UML:TaggedValue.dataValue>
    	the outcome code of the telecommand action
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3932'
        name = 'documentation'
        modelElement = 'S.1311'>
   <UML:TaggedValue.dataValue>
    	A derived class shall provide a concrete implementation of this
method, which performs the actual critical telecommand action.
&lt;code&gt;doCriticalAction()&lt;/code&gt; is invoked only the second time a
specific critical telecommand is received (the first time, the telecommand
is armed).
&lt;p&gt;
This method is called by &lt;code&gt;doAction()&lt;/code&gt;.
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3933'
        name = 'see'
        modelElement = 'S.1311'>
   <UML:TaggedValue.dataValue>
    	#doAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3934'
        name = 'return'
        modelElement = 'S.1311'>
   <UML:TaggedValue.dataValue>
    	the outcome code of the telecommand action
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3936'
        name = 'documentation'
        modelElement = 'S.1312'>
   <UML:TaggedValue.dataValue>
    	Instantiate a critical telecommand.
The arm status is set to &quot;not armed&quot;. The maximum armed duration is set
to an illegal value to signify that the component is
not yet configured. The criticality level is set to &quot;not critical&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3937'
        name = 'documentation'
        modelElement = 'S.1313'>
   <UML:TaggedValue.dataValue>
    	Reverts the telecommand to its original state (i.e. isTcCritical=CRITICAL,
isTcArmed=NOT_ARMED, timeWhenArmed=-1, maxArmedDuration=-1, pObsClock=pNULL).
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3939'
        name = 'documentation'
        modelElement = 'S.1314'>
   <UML:TaggedValue.dataValue>
    	Return the criticality level of the telecommand.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3940'
        name = 'return'
        modelElement = 'S.1314'>
   <UML:TaggedValue.dataValue>
    	true if the telecommand is critical, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3942'
        name = 'documentation'
        modelElement = 'S.1315'>
   <UML:TaggedValue.dataValue>
    	Set the criticality level. This method would normally be called during
the component initialization phase (probably by the constructor of
the concrete telecommand class).
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3943'
        name = 'param'
        modelElement = 'S.1315'>
   <UML:TaggedValue.dataValue>
    	isCritical if true, the telecommand is marked &quot;critical&quot;,
otherwise it is marked &quot;not critical&quot;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3946'
        name = 'documentation'
        modelElement = 'S.1316'>
   <UML:TaggedValue.dataValue>
    	Return the arm status of the telecommand. If the criticality level
of the telecommand is &quot;not critical&quot;, this method always returns
&quot;not armed&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3947'
        name = 'return'
        modelElement = 'S.1316'>
   <UML:TaggedValue.dataValue>
    	true if the telecommand is armed, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3949'
        name = 'documentation'
        modelElement = 'S.1317'>
   <UML:TaggedValue.dataValue>
    	Execute the image validity check.
This class provides a default implementation that returns &quot;image
is valid&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3950'
        name = 'see'
        modelElement = 'S.1317'>
   <UML:TaggedValue.dataValue>
    	#canExecute
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3951'
        name = 'return'
        modelElement = 'S.1317'>
   <UML:TaggedValue.dataValue>
    	true if the telecommand is valid, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3953'
        name = 'documentation'
        modelElement = 'S.1318'>
   <UML:TaggedValue.dataValue>
    	Implement the image store service.
This class provides a default implementation that returns without
doing anything.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3954'
        name = 'see'
        modelElement = 'S.1318'>
   <UML:TaggedValue.dataValue>
    	#canExecute
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3956'
        name = 'documentation'
        modelElement = 'S.1319'>
   <UML:TaggedValue.dataValue>
    	Set the maximum armed duration.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3957'
        name = 'param'
        modelElement = 'S.1319'>
   <UML:TaggedValue.dataValue>
    	t the maximum armed duration
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3958'
        name = 'see'
        modelElement = 'S.1319'>
   <UML:TaggedValue.dataValue>
    	#canExecute
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3961'
        name = 'documentation'
        modelElement = 'S.1320'>
   <UML:TaggedValue.dataValue>
    	Get the maximum armed duration.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3962'
        name = 'return'
        modelElement = 'S.1320'>
   <UML:TaggedValue.dataValue>
    	the maximum armed duration
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3964'
        name = 'documentation'
        modelElement = 'S.1321'>
   <UML:TaggedValue.dataValue>
    	Get the value of the on-board time when the telecommand was last armed.
If the telecommand was never armed, a value of zero is returned.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3965'
        name = 'return'
        modelElement = 'S.1321'>
   <UML:TaggedValue.dataValue>
    	the on-board time when the telecommand was last armed
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3967'
        name = 'documentation'
        modelElement = 'S.1322'>
   <UML:TaggedValue.dataValue>
    	Load the OBS Clock component. Critical telecommands need access to the
on-board clock to time-stamp the reception of an &quot;arm&quot; command.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3968'
        name = 'param'
        modelElement = 'S.1322'>
   <UML:TaggedValue.dataValue>
    	pObsClock the OBS Clock component.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3971'
        name = 'documentation'
        modelElement = 'S.1323'>
   <UML:TaggedValue.dataValue>
    	Return the OBS Clock component.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3972'
        name = 'see'
        modelElement = 'S.1323'>
   <UML:TaggedValue.dataValue>
    	#setObsClock
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3973'
        name = 'return'
        modelElement = 'S.1323'>
   <UML:TaggedValue.dataValue>
    	the OBS Clock component.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3975'
        name = 'documentation'
        modelElement = 'S.1324'>
   <UML:TaggedValue.dataValue>
    	Perform the execution check on the telecommand.
A pseudo-code implementation of this method is as follows:
&lt;pre&gt;
if (TC is critical and armed) {
if (TC has timed-out) {
Add an EVT_CRIT_TC_TIMEOUT event to the log
return false;
}

if (TC image is not valid) {
Add an EVT_CRIT_TC_IMG_INV event to the log
return false;
}
}

return true;
&lt;/pre&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3976'
        name = 'see'
        modelElement = 'S.1324'>
   <UML:TaggedValue.dataValue>
    	CC_TelecommandManager#activate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3977'
        name = 'return'
        modelElement = 'S.1324'>
   <UML:TaggedValue.dataValue>
    	true if the telecommand can execute, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3979'
        name = 'documentation'
        modelElement = 'S.1325'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on the telecommand:
verify that the maximum armed duration has a legal value and that
the on-board clock component has been loaded.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3980'
        name = 'return'
        modelElement = 'S.1325'>
   <UML:TaggedValue.dataValue>
    	true if the component is configured, false otherwise.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3982'
        name = 'documentation'
        modelElement = 'S.1197'>
   <UML:TaggedValue.dataValue>
    	Telecommand loader for PUS telecommands that implements only basic
functionalities and checks.
This telecommand loader can handle one or more raw telecommand packets.
At the time it is activated, it assumes the packets to be placed in a
dedicated memory area (the &lt;i&gt;telecommand load area&lt;/i&gt;) and assumes 
their layout to comply with the layout for telecommand packets stipulated
by the PUS. The packets are assumed to be placed in the telecommand area
in sequence, one after the other. The layout of the telecommand load area
is therefore assumed to be as follows. The first byte represents the
number of telecommand packets. Successive bytes represent the telecommand
packets stored in sequence and without gaps in between successive packets.
&lt;p&gt;
When the telecommand loader is 
activated, it accesses the telecommand load area and processes the 
telecommand packets one by one. For each packet, it retrieves the
telecommand type and subtype. It then asks the &lt;i&gt;telecommand 
factory&lt;/i&gt; for a telecommand component of matching type, it configures 
it with the data in the telecommand load area, and finally loads the
newly configured component in the
telecommand manager. 
&lt;p&gt;
In a typical usage scenario, this component would be activated periodically
to process any telecommand packets that have been received in the previous
period. In an alternative scenario, the component is activated by an 
interrupt handler when reception of a new telecommand packet has been 
detected. Note however that the processing of a telecommand packet by
this component can be time-consuming and hence this alternative scenario
only is feasible if the time between successive telecommand interrupts
is sufficiently long.
&lt;p&gt;
This telecommand loader is configured with the starting address of
the telecommand load area (method &lt;code&gt;setTcLoadAreaStart&lt;/code&gt;),
with the maximum length of a telecommand packet (method
&lt;code&gt;setMaxTcLength&lt;/code&gt;), and with the maximum number of telecommand
packets that can be placed in the telecommand load area (method
&lt;code&gt;setMaxNumberOfTc&lt;/code&gt;).
All configuration parameters can be changed dynamically. 
&lt;p&gt;
This telecommand loader does not perform any consistency or validity
checks on the raw telecommand data other than verifying that the length
of the telecommand packet is less than the maximum value set with method
&lt;code&gt;setMaxTcLength&lt;/code&gt; and that the number of telecommands is less than
the maximum set with method &lt;code&gt;setMaxNumberOfTc&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3983'
        name = 'author'
        modelElement = 'S.1197'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3984'
        name = 'todo'
        modelElement = 'S.1197'>
   <UML:TaggedValue.dataValue>
    	The implementation of method &quot;activate&quot; must be updated every time a new
PUS telecommand class is added to the framework
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3985'
        name = 'see'
        modelElement = 'S.1197'>
   <UML:TaggedValue.dataValue>
    	PUSTelecommand
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3986'
        name = 'see'
        modelElement = 'S.1197'>
   <UML:TaggedValue.dataValue>
    	CC_TelecommandManager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3987'
        name = 'version'
        modelElement = 'S.1197'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3988'
        name = 'documentation'
        modelElement = 'S.1329'>
   <UML:TaggedValue.dataValue>
    	Instantiate a basic PUS telecommand loader. The class identifier
is set. The start address of the telecommand area, the maximum
length of the telecommand packets, and the maximum number of telecommand
packets are initialized
to illegal values to signify that the component is not yet configured.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3989'
        name = 'documentation'
        modelElement = 'S.1330'>
   <UML:TaggedValue.dataValue>
    	Retrieve the raw telecommand packet data, create and configure a telecommand 
component for each telecommand packet,
and load them in the telecommand manager.
The raw telecommand packet data are assumed to consist of an array of
bytes stored in the telecommand load area. Their layout is assumed to 
conform with the PUS telecommand packet layout.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
pTcFct = ...    // retrieve telecommand factory
for each tc packet in the tc load area {
if (APID of TC telecommand does not match APID of this application)
continue;
tcType = ...    // read telecommand type from data in telecommand area
tcSubType = ... // read telecommand subtype from data in telecommand area
if (tcType=TYPE_1 and tcSubType=SUBTYPE_a) {
... // retrieve TC component of matching type and subtype from pTcFct
... // configure the TC component
... // load TC packet data into TC component
getTelecommandManager()-&gt;load(...);  // load telecommand component
}
if (tcType=TYPE_2 and tcSubType=SUBTYPE_b) {
... // retrieve TC component of matching type and subtype from pTcFct
... // configure the TC component
... // load TC packet data into TC component
getTelecommandManager()-&gt;load(...);  // load telecommand component
}
...
}    &lt;/PRE&gt;
The loading of telecommand packet data into the TC component is done using
the &lt;i&gt;raw data load service&lt;/i&gt;. Depending on the telecommand type, either the
fast or the safe version of the service is used.
The check on APID is performed by comparing the packet ID field in the telecommand packet
with the packet ID of the telecommand components as returned by method &lt;code&gt;getPacketId&lt;/code&gt;.
If the two values do not match, it is assumed that the telecommand packet is intended for
some other application and it is simply ignored.
&lt;p&gt;
For simplicity, the pseudo-code above does not consider error cases.
Error cases result in the generation of an error report and in the
immediate return of the method.
The following error cases are handled: &lt;ul&gt;
&lt;li&gt; The number of telecommand packets in the telecommand load area is greater
than the maximum value set when the telecommand loader is configured
(event report EVT_TOO_MANY_TC_PCKT)&lt;/li&gt;
&lt;li&gt; The telecommand factory does not return any telecommand component
(event report EVT_NO_TC_AVAIL)&lt;/li&gt;
&lt;li&gt; The telecommand type has an unexpected type 
(event report EVT_UNKNOWN_TC_TYPE)&lt;/li&gt;
&lt;li&gt; The telecommand length exceeds the maximum value set when the telecommand
loader is configured
(event report EVT_TC_TOO_LONG)&lt;/li&gt;
&lt;/ul&gt;
The current implementation can handle the following telecommands: &lt;ul&gt;
&lt;li&gt;PUS Test Telecommand (instance of class
&lt;code&gt;DC_TestPUSTelecommand&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;PUS Control Data Reporting Telecommand (instance of class
&lt;code&gt;DC_PUSControlDataReporting&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;PUS Define Data Reporting Telecommand (instance of class
&lt;code&gt;DC_PUSDefineDataReporting&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
In accordance with the PUS, this method assumes what follows:&lt;ul&gt;
&lt;li&gt;the packet ID is located at offset: (startAddress+0)&lt;/li&gt;
&lt;li&gt;the packet sequence control is located at offset: (startAddress+2)&lt;/li&gt;
&lt;li&gt;the telecommand type field is located in a telecommand packet at offset: (startAddress+7)&lt;/li&gt;
&lt;li&gt;the acknowledge bits are located in the least significant four bits of the
byte at offset: (startAddress+6)&lt;/li&gt;
&lt;li&gt;the telecommand subtype is located at offset: (startAddress+8)&lt;/li&gt;
&lt;li&gt;the packet length field is assumed to be located at offset: (startAddress+4)&lt;/li&gt;
&lt;li&gt;the packet source ID has a length of &lt;code&gt;sizeof(TD_TelecommandSource)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;the packet error control field is assumed to be 2-byte wide but is ignored. Error checking
is assumed to have already been performed upstream&lt;/li&gt;
&lt;/ul&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3991'
        name = 'documentation'
        modelElement = 'S.1331'>
   <UML:TaggedValue.dataValue>
    	Change the status of the telecommand to &quot;not in use&quot;.
A pseudo-code implementation for this method is as follows: &lt;pre&gt;
pTelecommand-&gt;setInUse(NOT_IN_USE); &lt;/pre&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3992'
        name = 'param'
        modelElement = 'S.1331'>
   <UML:TaggedValue.dataValue>
    	pTelecommand the telecommand whose resources must be released
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3995'
        name = 'documentation'
        modelElement = 'S.1332'>
   <UML:TaggedValue.dataValue>
    	Set the start address of the telecommand load area.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3996'
        name = 'param'
        modelElement = 'S.1332'>
   <UML:TaggedValue.dataValue>
    	startAddress the start address
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.3999'
        name = 'documentation'
        modelElement = 'S.1333'>
   <UML:TaggedValue.dataValue>
    	Set the maximum length of a telecommand packet in number of bytes.
The value set here is the total length of the packet including its
header. Only values greater than 6 are legal (a PUS header is 6 bytes
long).
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4000'
        name = 'param'
        modelElement = 'S.1333'>
   <UML:TaggedValue.dataValue>
    	maxTcLength the maximum length of a telecommand packet
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4003'
        name = 'documentation'
        modelElement = 'S.1334'>
   <UML:TaggedValue.dataValue>
    	Getter method for the maximum length of the a telecommand packet.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4004'
        name = 'return'
        modelElement = 'S.1334'>
   <UML:TaggedValue.dataValue>
    	the maximum length of a telecommand packet
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4006'
        name = 'documentation'
        modelElement = 'S.1335'>
   <UML:TaggedValue.dataValue>
    	Set the maximum number of telecommand packets that can be handled by this
component in an activation cycle.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4007'
        name = 'param'
        modelElement = 'S.1335'>
   <UML:TaggedValue.dataValue>
    	max the maximum number of telecommands
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4010'
        name = 'documentation'
        modelElement = 'S.1336'>
   <UML:TaggedValue.dataValue>
    	Getter method for the maximum number of telecommand packets that can be handled by this
component in an activation cycle.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4011'
        name = 'return'
        modelElement = 'S.1336'>
   <UML:TaggedValue.dataValue>
    	the maximum number of telecommands
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4013'
        name = 'documentation'
        modelElement = 'S.1337'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on the telecommand
loader: verify that the start address of the telecommand load area, 
the maximum length of the telecommand packet have been set, and
the maximum number of telecommand packets have been set.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4014'
        name = 'return'
        modelElement = 'S.1337'>
   <UML:TaggedValue.dataValue>
    	true if the telecommand loader is configured, false otherwise.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4016'
        name = 'documentation'
        modelElement = 'S.1208'>
   <UML:TaggedValue.dataValue>
    	Dummy telecommand that increments a counter every time it is 
executed. This telecommand is useful for testing purposes.
The telecommand maintains an &lt;i&gt;execution counter&lt;/i&gt; that is initialized 
to zero when the telecommand object is first instantiated and is 
incremented by one every time the telecommand receives an &lt;code&gt;execute&lt;/code&gt;
request. There is no way to reset the execution counter.
&lt;p&gt;
The telecommand offers a method to change the return value of its
execution check and of its validity check. These are useful to 
simulate telecommands whose
execution check returns &quot;telecommand cannot executed&quot; or whose
validity check returns &quot;telecommand not valid&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4017'
        name = 'author'
        modelElement = 'S.1208'>
   <UML:TaggedValue.dataValue>
    	Roberto Totaro
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4018'
        name = 'version'
        modelElement = 'S.1208'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4019'
        name = 'documentation'
        modelElement = 'S.1340'>
   <UML:TaggedValue.dataValue>
    	Increments &lt;code&gt;numberOfExecutions&lt;/code&gt; and returns a code
of &quot;action successful&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4020'
        name = 'see'
        modelElement = 'S.1340'>
   <UML:TaggedValue.dataValue>
    	#getNumberOfExecutions
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4021'
        name = 'see'
        modelElement = 'S.1340'>
   <UML:TaggedValue.dataValue>
    	CriticalTelecommand#doAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4022'
        name = 'return'
        modelElement = 'S.1340'>
   <UML:TaggedValue.dataValue>
    	always returns a &quot;telecommand successfully executed&quot; code
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4024'
        name = 'documentation'
        modelElement = 'S.1341'>
   <UML:TaggedValue.dataValue>
    	Instantiate a dummy telecommand.
The execution counter is set to zero.
The telecommand is configured to have an execution check that returns:
&quot;telecommand can executed&quot; and a validity check that returns:
&quot;telecommand is valid&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4025'
        name = 'documentation'
        modelElement = 'S.1342'>
   <UML:TaggedValue.dataValue>
    	Getter method for &lt;code&gt;numberOfExecutions&lt;/code&gt;. Used only for
testing purposes.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4026'
        name = 'see'
        modelElement = 'S.1342'>
   <UML:TaggedValue.dataValue>
    	#doCriticalAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4027'
        name = 'return'
        modelElement = 'S.1342'>
   <UML:TaggedValue.dataValue>
    	the number of times doCriticalAction() has been called
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4029'
        name = 'documentation'
        modelElement = 'S.1343'>
   <UML:TaggedValue.dataValue>
    	The base class default implementation is overridden in order
to be able to thoroughly test &lt;code&gt;canExecute()&lt;/code&gt;. This method
returns the value of the &lt;code&gt;imageValid&lt;/code&gt; member variable.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4030'
        name = 'see'
        modelElement = 'S.1343'>
   <UML:TaggedValue.dataValue>
    	CriticalTelecommand#canExecute
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4031'
        name = 'see'
        modelElement = 'S.1343'>
   <UML:TaggedValue.dataValue>
    	#setImageValidity
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4032'
        name = 'return'
        modelElement = 'S.1343'>
   <UML:TaggedValue.dataValue>
    	the value of imageValid
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4034'
        name = 'documentation'
        modelElement = 'S.1344'>
   <UML:TaggedValue.dataValue>
    	Setter method for &lt;code&gt;imageValid&lt;/code&gt;. Used only for testing purposes.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4035'
        name = 'see'
        modelElement = 'S.1344'>
   <UML:TaggedValue.dataValue>
    	#isImageValid
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4036'
        name = 'param'
        modelElement = 'S.1344'>
   <UML:TaggedValue.dataValue>
    	isValid new value of imageValid
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4039'
        name = 'documentation'
        modelElement = 'S.1201'>
   <UML:TaggedValue.dataValue>
    	Dummy PUS telecommand that increments a counter every time it is 
executed. This telecommand is useful for testing purposes.
The values of the telecommand packet attributes are initialized 
to: &lt;ul&gt;
&lt;li&gt;The telecommand identifier is set to TEST_TC_ID&lt;/li&gt;
&lt;li&gt;The telecommand type is set to TEST_TC_TYPE&lt;/li&gt;
&lt;li&gt;The telecommand subtype is set to TEST_TC_SUBTYPE&lt;/li&gt;
&lt;li&gt;The telecommand source is set to TEST_TC_SOURCE&lt;/li&gt;
&lt;li&gt;The telecommand acknowledge level is set to indicate &quot;no acknoledge is required&quot;&lt;/li&gt;
&lt;/ul&gt;
The constants are defined in file &lt;code&gt;TestConstants.h&lt;/code&gt;.
Note that the APID of the process
receiving the telecommands does not need to be set because it is
a static field that should be set during the test set up process.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4040'
        name = 'author'
        modelElement = 'S.1201'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4041'
        name = 'version'
        modelElement = 'S.1201'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4042'
        name = 'documentation'
        modelElement = 'S.1346'>
   <UML:TaggedValue.dataValue>
    	Increment the execution counter by one and return a code of &quot;action successful&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4043'
        name = 'see'
        modelElement = 'S.1346'>
   <UML:TaggedValue.dataValue>
    	PunctualAction#execute
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4044'
        name = 'return'
        modelElement = 'S.1346'>
   <UML:TaggedValue.dataValue>
    	always returns a &quot;telecommand successfully executed&quot; code
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4046'
        name = 'documentation'
        modelElement = 'S.1347'>
   <UML:TaggedValue.dataValue>
    	Instantiate a dummy PUS telecommand.
The execution counter is set to zero. The class identifier is set.
The values of the telecommand packet attributes are initialized 
as described in the class comment.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4047'
        name = 'documentation'
        modelElement = 'S.1348'>
   <UML:TaggedValue.dataValue>
    	Getter method for the execution counter.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4048'
        name = 'return'
        modelElement = 'S.1348'>
   <UML:TaggedValue.dataValue>
    	the execution counter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4050'
        name = 'documentation'
        modelElement = 'S.1211'>
   <UML:TaggedValue.dataValue>
    	Dummy telecommand that increments a counter every time it is 
executed. This telecommand is useful for testing purposes.
The telecommand maintains an &lt;i&gt;execution counter&lt;/i&gt; that is initialized 
to zero when the telecommand object is first instantiated and is 
incremented by one every time the telecommand receives an &lt;code&gt;execute&lt;/code&gt;
request. There is no way to reset the execution counter.
&lt;p&gt;
The telecommand offer methods to change the return value of its
execution check and of its validity check and to set the values of
validity and execution check codes. These are useful to 
simulate telecommands whose
execution check returns &quot;telecommand cannot executed&quot; or whose
validity check returns &quot;telecommand not valid&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4051'
        name = 'author'
        modelElement = 'S.1211'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4052'
        name = 'version'
        modelElement = 'S.1211'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4053'
        name = 'documentation'
        modelElement = 'S.1354'>
   <UML:TaggedValue.dataValue>
    	Increment the execution counter by one and return a code of &quot;action successful&quot;.
Note that there is no protection against
an overflow in the value of the execution counter.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4054'
        name = 'see'
        modelElement = 'S.1354'>
   <UML:TaggedValue.dataValue>
    	PunctualAction#execute
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4055'
        name = 'return'
        modelElement = 'S.1354'>
   <UML:TaggedValue.dataValue>
    	always returns a &quot;telecommand successfully executed&quot; code
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4057'
        name = 'documentation'
        modelElement = 'S.1355'>
   <UML:TaggedValue.dataValue>
    	Instantiate a dummy telecommand.
The execution counter is set to zero.
The telecommand is configured to have an execution check that returns:
&quot;telecommand can be executed&quot; and a validity check that returns:
&quot;telecommand is valid&quot;. The validity and execution check codes are
initialized to zero.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4058'
        name = 'documentation'
        modelElement = 'S.1356'>
   <UML:TaggedValue.dataValue>
    	Getter method for the execution counter.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4059'
        name = 'return'
        modelElement = 'S.1356'>
   <UML:TaggedValue.dataValue>
    	the execution counter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4061'
        name = 'documentation'
        modelElement = 'S.1357'>
   <UML:TaggedValue.dataValue>
    	Execute the execution check on the telecommand.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
return executionCheckValue; &lt;/PRE&gt;
The internal variable &lt;code&gt;executionCheckValue&lt;/code&gt; is initialized
to &lt;code&gt;TC_CANNOT_EXECUTE&lt;/code&gt; by the constructor but its value
can be changed with method &lt;code&gt;setExecutionCheckValue&lt;/code&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4062'
        name = 'see'
        modelElement = 'S.1357'>
   <UML:TaggedValue.dataValue>
    	#setExecutionCheckValue
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4063'
        name = 'see'
        modelElement = 'S.1357'>
   <UML:TaggedValue.dataValue>
    	CC_TelecommandManager#activate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4064'
        name = 'return'
        modelElement = 'S.1357'>
   <UML:TaggedValue.dataValue>
    	the value of the internal variable &lt;code&gt;setExecutionCheckValue&lt;/code&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4066'
        name = 'documentation'
        modelElement = 'S.1358'>
   <UML:TaggedValue.dataValue>
    	Execute the validity check on the telecommand.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
return validityCheckValue; &lt;/PRE&gt;
The internal variable &lt;code&gt;validityCheckValue&lt;/code&gt; is initialized
to &lt;code&gt;VALID&lt;/code&gt; by the constructor but its value
can be changed with method &lt;code&gt;setValidityCheckValue&lt;/code&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4067'
        name = 'see'
        modelElement = 'S.1358'>
   <UML:TaggedValue.dataValue>
    	#setValidityCheckValue
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4068'
        name = 'see'
        modelElement = 'S.1358'>
   <UML:TaggedValue.dataValue>
    	CC_TelecommandManager#load
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4069'
        name = 'return'
        modelElement = 'S.1358'>
   <UML:TaggedValue.dataValue>
    	the value of the internal variable &lt;code&gt;setExecutionCheckValue&lt;/code&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4071'
        name = 'documentation'
        modelElement = 'S.1359'>
   <UML:TaggedValue.dataValue>
    	Return the validity check code for the telecommand.
This implementation returns a user-defined value that is set with method
&lt;code&gt;setValidityCheckCode&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4072'
        name = 'see'
        modelElement = 'S.1359'>
   <UML:TaggedValue.dataValue>
    	#setValidityCheckCode
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4073'
        name = 'return'
        modelElement = 'S.1359'>
   <UML:TaggedValue.dataValue>
    	the validity check code
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4075'
        name = 'documentation'
        modelElement = 'S.1360'>
   <UML:TaggedValue.dataValue>
    	Return the execution check code for the telecommand.
This implementation returns a user-defined value that is set with method
&lt;code&gt;setExecutionCheckCode&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4076'
        name = 'see'
        modelElement = 'S.1360'>
   <UML:TaggedValue.dataValue>
    	#setExecutionCheckCode
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4077'
        name = 'return'
        modelElement = 'S.1360'>
   <UML:TaggedValue.dataValue>
    	the validity check code
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4079'
        name = 'documentation'
        modelElement = 'S.1361'>
   <UML:TaggedValue.dataValue>
    	Set the return value of the execution check.
This is a setter method for the internal variable &lt;code&gt;executionCheckValue&lt;/code&gt;
which defines the return value of the execution check implemented by this
telecommand.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4080'
        name = 'see'
        modelElement = 'S.1361'>
   <UML:TaggedValue.dataValue>
    	#canExecute
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4081'
        name = 'param'
        modelElement = 'S.1361'>
   <UML:TaggedValue.dataValue>
    	executionCheckValue the value of the internal variable &lt;code&gt;setExecutionCheckValue&lt;/code&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4084'
        name = 'documentation'
        modelElement = 'S.1362'>
   <UML:TaggedValue.dataValue>
    	Set the return value of the validity check.
This is a setter method for the internal variable &lt;code&gt;validityCheckValue&lt;/code&gt;
which defines the return value of the validity check implemented by this
telecommand.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4085'
        name = 'see'
        modelElement = 'S.1362'>
   <UML:TaggedValue.dataValue>
    	#isValid
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4086'
        name = 'param'
        modelElement = 'S.1362'>
   <UML:TaggedValue.dataValue>
    	validityCheckValue the value of the internal variable &lt;code&gt;setExecutionCheckValue&lt;/code&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4089'
        name = 'documentation'
        modelElement = 'S.1363'>
   <UML:TaggedValue.dataValue>
    	Set the value of the validity check code.
This is a setter method for an internal variable 
which defines the return value of method &lt;code&gt;getValidityCheckCode&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4090'
        name = 'see'
        modelElement = 'S.1363'>
   <UML:TaggedValue.dataValue>
    	#getValidityCheckCode
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4091'
        name = 'param'
        modelElement = 'S.1363'>
   <UML:TaggedValue.dataValue>
    	validityCheckCode the value of the validity check code
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4094'
        name = 'documentation'
        modelElement = 'S.1364'>
   <UML:TaggedValue.dataValue>
    	Set the value of the execution check code.
This is a setter method for an internal variable 
which defines the return value of method &lt;code&gt;getExecutionCheckCode&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4095'
        name = 'see'
        modelElement = 'S.1364'>
   <UML:TaggedValue.dataValue>
    	#getExecutionCheckCode
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4096'
        name = 'param'
        modelElement = 'S.1364'>
   <UML:TaggedValue.dataValue>
    	executionCheckCode the value of the validity check code
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4099'
        name = 'documentation'
        modelElement = 'S.1206'>
   <UML:TaggedValue.dataValue>
    	Dummy telecommand loader that is useful for testing purposes.
This telecommand loader can be used to help test the functionalities
of the &lt;code&gt;TelecommandLoader&lt;/code&gt; class and of the telecommand
manager component.
The dummy telecommand loader manages three &lt;i&gt;sample telecommands&lt;/i&gt;.
These telecommands must be loaded when the dummy telecommand loader is
configured. When the telecommand loader is &lt;i&gt;activated&lt;/i&gt;, it loads
one sample telecommand. The telecommand loader maintains an
&lt;i&gt;allocation counter&lt;/i&gt; that records the number of telecommands that
are currently loaded in the telecommand manager associated to the
telecommand loader. The allocation counter is incremented by one
every time a telecommand is loaded into the telecommand manager and
it is decremented by one every time the telecommand manager sends a
&lt;i&gt;release&lt;/i&gt; request to the telecommand loader.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4100'
        name = 'author'
        modelElement = 'S.1206'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4101'
        name = 'see'
        modelElement = 'S.1206'>
   <UML:TaggedValue.dataValue>
    	DC_DummyTelecommand
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4102'
        name = 'see'
        modelElement = 'S.1206'>
   <UML:TaggedValue.dataValue>
    	CC_TelecommandManager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4103'
        name = 'version'
        modelElement = 'S.1206'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4104'
        name = 'documentation'
        modelElement = 'S.1368'>
   <UML:TaggedValue.dataValue>
    	Instantiate a dummy telecommand loader. This constructor initializes the
sample telecommands to pNULL and the allocation counter to zero.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4105'
        name = 'documentation'
        modelElement = 'S.1369'>
   <UML:TaggedValue.dataValue>
    	Load a sample telecommand in the telecommand manager.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
i = allocationCounter MOD 3;
load i-th sample telecommand in telecommand manager;
allocationCounter++;  &lt;/PRE&gt;
Thus, each activation causes one sample telecommand to be loaded. The
three sample telecommands are loaded in a cyclical sequence.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4107'
        name = 'documentation'
        modelElement = 'S.1370'>
   <UML:TaggedValue.dataValue>
    	Decrement the allocation counter by 1.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4108'
        name = 'param'
        modelElement = 'S.1370'>
   <UML:TaggedValue.dataValue>
    	pTelecommand the telecommand whose resources must be released
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4111'
        name = 'documentation'
        modelElement = 'S.1371'>
   <UML:TaggedValue.dataValue>
    	Load the i-th sample telecommand. The maximum number of sample
telecommands that can be loaded is 3. The index i must lie in the
interval [0,2]. No check is performed on the value of the index i
at run time.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4112'
        name = 'param'
        modelElement = 'S.1371'>
   <UML:TaggedValue.dataValue>
    	i the sample telecommand index
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4113'
        name = 'param'
        modelElement = 'S.1371'>
   <UML:TaggedValue.dataValue>
    	pSampleTc the sample telecommand to be loaded in the i-th position
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4117'
        name = 'documentation'
        modelElement = 'S.1372'>
   <UML:TaggedValue.dataValue>
    	Getter method for allocation counter.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4118'
        name = 'return'
        modelElement = 'S.1372'>
   <UML:TaggedValue.dataValue>
    	the allocation counter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4120'
        name = 'documentation'
        modelElement = 'S.1373'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on the dummy telecommand
loader: verify that the sample telecommands have been loaded.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4121'
        name = 'return'
        modelElement = 'S.1373'>
   <UML:TaggedValue.dataValue>
    	true if the telecommand loader is configured, false otherwise.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4123'
        name = 'documentation'
        modelElement = 'S.1204'>
   <UML:TaggedValue.dataValue>
    	PUS telecommand to clear one or more housekeeping and diagnostic 
data reporting telemetry packets.
This class encapsulates the following subtypes of PUS service number 3:&lt;ul&gt;
&lt;li&gt;Subtype 3: clear housekeeping parameter report definition&lt;/li&gt;
&lt;li&gt;Subtype 4: clear diagnostic parameter report definition&lt;/li&gt;
&lt;/ul&gt;
A parameter report definition is cleared by performing the following actions:&lt;ul&gt;
&lt;li&gt;The telemetry packet that encapsulates the parameter report is marked
&quot;not in use&quot;.&lt;/li&gt;
&lt;li&gt;The telemetry packet is unloaded from the PUS telemetry mode manager.&lt;/li&gt;
&lt;/ul&gt;
This class is configured at initialization time by performing the following
actions: &lt;ul&gt;
&lt;li&gt;The maximum 
number of SIDs that can be handled by a single instance of the telecommand
is set through method &lt;code&gt;setMaxNumberSID&lt;/code&gt;. A call to this
method initializes the internal data structures that are used to hold the
application data of the telecommand.&lt;/li&gt;
&lt;li&gt;The PUS telemetry mode manager is loaded as a plug-in component.&lt;/li&gt;
&lt;/ul&gt;
During normal operation, configuration is performed using the &lt;i&gt;raw
data load service&lt;/i&gt;.
&lt;p&gt;
This telecommand implements a &lt;i&gt;validity check&lt;/i&gt; that returns &quot;telecommand
not valid&quot; in case an attempt is made to load more application data than fit
into the telecommand component or in case the application data are internally
inconsistent.
&lt;p&gt;
Execution of this telecommand can have two outcomes. The telecommand
can either have a successful outcome (the return value of &lt;code&gt;doAction&lt;/code&gt;
is ACTION_SUCCESS) or it can fail (the return value of &lt;code&gt;doAction&lt;/code&gt;
is ACTION_FAILURE). A failure is declared if any of the SIDs provided to 
the telecommand do not correspond to a data reporting packet that is
currently in use.
&lt;p&gt;
The PUS specifies that the first item in the application data of this
telecommand is the NSID field. The type of this field is not mandated by the 
standard. This class assumes it to be of type &lt;code&gt;unsigned char&lt;/code&gt;.
The standard also allows this field to be omitted. This class however
requires this field to be always present.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4124'
        name = 'author'
        modelElement = 'S.1204'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4125'
        name = 'todo'
        modelElement = 'S.1204'>
   <UML:TaggedValue.dataValue>
    	This class can only take one telemetry mode manager
as configuration parameters. If we assume that the same applications can have several
telemetry managers (maybe to manage telemetry packets with different levels of RT
priority), then it would be necessary to modify this class to accept several
telemetry mode managers.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4126'
        name = 'version'
        modelElement = 'S.1204'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4127'
        name = 'documentation'
        modelElement = 'S.1380'>
   <UML:TaggedValue.dataValue>
    	Clear the data reporting packets. A data reporting packet is cleared
by setting its &quot;in use&quot; status to &quot;packet not in use&quot; and by unloading it
from the PUS telemetry mode manager (if it is loaded). This deactivates
the telemetry packet and allows the telemetry packet factory to reclaim it and make it
available to other clients.
A pseudo-code implementation for this method is as follows:&lt;pre&gt;
for (all SIDs stored in the telecommand) {
retrieve data reporting packet from telemetry packet factory;
if (no packet is returned by the factory )
outcome=FAIL;
set status of packet to &quot;not in use&quot;
if (packet is loaded in PUS telemetry mode manager)
unload packet from PUS telemetry mode manager
}
if (outcome==FAIL)
return ACTION_FAILURE;
else
return ACTION_SUCCESS; &lt;/pre&gt;
The telecommand is configured with a list of SIDs. The data reporting
packets are retrieved from the telemetry packet factory (instance of class
&lt;code&gt;CC_TelemetryPacketFactory&lt;/code&gt;) using their SID. 
The &quot;in use&quot; status of the packets is controlled through their
&lt;code&gt;setInUse&lt;/code&gt; method.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4128'
        name = 'see'
        modelElement = 'S.1380'>
   <UML:TaggedValue.dataValue>
    	TelemetryPacket#setInUse
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4129'
        name = 'see'
        modelElement = 'S.1380'>
   <UML:TaggedValue.dataValue>
    	CC_TelemetryPacketFactory
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4130'
        name = 'see'
        modelElement = 'S.1380'>
   <UML:TaggedValue.dataValue>
    	DC_PUSTelemetryModeManager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4131'
        name = 'see'
        modelElement = 'S.1380'>
   <UML:TaggedValue.dataValue>
    	PunctualAction#execute
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4132'
        name = 'return'
        modelElement = 'S.1380'>
   <UML:TaggedValue.dataValue>
    	always returns a &quot;telecommand successfully executed&quot; code
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4134'
        name = 'documentation'
        modelElement = 'S.1381'>
   <UML:TaggedValue.dataValue>
    	Instantiate a clear data reporting PUS telecommand.
The class identifier is set.
The values of the internal data structure that is used to hold the telecommand
application data is initialized to illegal values to signify that the telecommand
is not yet configured. The telecommand type is set to PUS_TYPE_DATA_REP.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4135'
        name = 'documentation'
        modelElement = 'S.1382'>
   <UML:TaggedValue.dataValue>
    	Set the maximum number of SIDs that can be processed by this telecommand.
This is an initialization method that should only be called once.
A call to this method causes the internal data structures where the SIDs are
held to be allocated and initialized. Only positive values of the method argument
are legal.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4136'
        name = 'param'
        modelElement = 'S.1382'>
   <UML:TaggedValue.dataValue>
    	max the maximum number of SIDs
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4139'
        name = 'documentation'
        modelElement = 'S.1383'>
   <UML:TaggedValue.dataValue>
    	Implementation of the raw data load service. This method would normally
be called by a telecommand loader to load the application data into the
the telecommand component. This method interprets the raw data as they are
loaded and uses them to construct the sequence of SIDs of the data reporting
packets that have to be cleared. This method assumes that the
raw data are loaded in sequence starting from the first one (i.e. the value 
of i in the first call is zero and succesive calls use values of i that 
are incremented by one at each call). The value of i is also constrained to 
lie in the range [0,N] where N is computed as follows: &lt;pre&gt;
N = M*sizeof(TD_SID)  &lt;/pre&gt;
where M is the maximum number of SIDs defined by method &lt;code&gt;setMaxNumberSID&lt;/code&gt;.
If the number of SIDs in the telecommand packet exceeds the maximum defined
with method &lt;code&gt;setMaxNumberSID&lt;/code&gt;, the telecommand
is declared to be invalid with validity check code equal to VC_TOO_MANY_SIDS. 
If an attempt is made to load a greater number of raw data, the telecommand
is declared to be invalid with validity check code equal to VC_TOO_MANY_RAW_DATA. 
Finally, the total number of loaded raw data T
must be consistent with the number of SIDs (the first byte in the telecommand
packet). If this
is not the case, then the telecommand is declared invalid with validity check code
equal to VC_INCONSISTENT_RAW_DATA.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4140'
        name = 'see'
        modelElement = 'S.1383'>
   <UML:TaggedValue.dataValue>
    	#getNumberOfRawData
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4141'
        name = 'param'
        modelElement = 'S.1383'>
   <UML:TaggedValue.dataValue>
    	i the index of the raw telecommand data
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4142'
        name = 'param'
        modelElement = 'S.1383'>
   <UML:TaggedValue.dataValue>
    	d the raw data
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4146'
        name = 'documentation'
        modelElement = 'S.1384'>
   <UML:TaggedValue.dataValue>
    	Return the number of raw data bytes that can be loaded with the
raw telecommand data load service.
The value returned by this class is equal to: &lt;code&gt;M*sizeof(TD_SID)+1&lt;/code&gt;
where M is the maximum number of SIDs defined by method &lt;code&gt;setMaxNumberSID&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4147'
        name = 'see'
        modelElement = 'S.1384'>
   <UML:TaggedValue.dataValue>
    	#setRawData
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4148'
        name = 'return'
        modelElement = 'S.1384'>
   <UML:TaggedValue.dataValue>
    	the number of raw data bytes to be loaded with the raw
data load service
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4150'
        name = 'documentation'
        modelElement = 'S.1385'>
   <UML:TaggedValue.dataValue>
    	Load the PUS telemetry mode manager.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4151'
        name = 'see'
        modelElement = 'S.1385'>
   <UML:TaggedValue.dataValue>
    	#doAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4152'
        name = 'param'
        modelElement = 'S.1385'>
   <UML:TaggedValue.dataValue>
    	pTmModeManager the PUS telemetry mode manager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4155'
        name = 'documentation'
        modelElement = 'S.1386'>
   <UML:TaggedValue.dataValue>
    	Getter method for the PUS telemetry mode manager.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4156'
        name = 'see'
        modelElement = 'S.1386'>
   <UML:TaggedValue.dataValue>
    	#setPUSTelemetryModeManager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4157'
        name = 'return'
        modelElement = 'S.1386'>
   <UML:TaggedValue.dataValue>
    	the PUS telemetry mode manager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4159'
        name = 'documentation'
        modelElement = 'S.1387'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on the telecommand:
check that the maximum number of SIDs that can be processed by the telecommand 
has been set and that the telemetry manager and telemetry mode manager
have been loaded.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4160'
        name = 'return'
        modelElement = 'S.1387'>
   <UML:TaggedValue.dataValue>
    	true if the telecommand is configured, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4162'
        name = 'documentation'
        modelElement = 'S.1205'>
   <UML:TaggedValue.dataValue>
    	PUS telecommand to enable and disable the housekeeping and diagnostic 
data reporting telemetry packets.
This class encapsulates the following subtypes of PUS service number 3:&lt;ul&gt;
&lt;li&gt;Subtype 5: enable housekeeping parameter report generation&lt;/li&gt;
&lt;li&gt;Subtype 6: disable housekeeping parameter report generation&lt;/li&gt;
&lt;li&gt;Subtype 7: enable diagnostic parameter report generation&lt;/li&gt;
&lt;li&gt;Subtype 8: disable diagnostic parameter report generation&lt;/li&gt;
&lt;/ul&gt;
This class is configured at initialization time by setting the maximum 
number of SIDs that can be handled by a single instance of the telecommand.
This is done through method &lt;code&gt;setMaxNumberSID&lt;/code&gt;. A call to this
method initializes the internal data structures that are used to hold the
application data of the telecommand.
&lt;p&gt;
During normal operation, configuration is performed using the &lt;i&gt;raw
data load service&lt;/i&gt;.
&lt;p&gt;
This telecommand implements a &lt;i&gt;validity check&lt;/i&gt; that returns &quot;telecommand
not valid&quot; in case an attempt is made to load more application data than fit
into the telecommand component or in case the application data are internally
inconsistent.
&lt;p&gt;
Execution of this telecommand can have two outcomes. The telecommand
can either have a successful outcome (the return value of &lt;code&gt;doAction&lt;/code&gt;
is ACTION_SUCCESS) or it can fail (the return value of &lt;code&gt;doAction&lt;/code&gt;
is ACTION_FAILURE). A failure is declared if any of the SIDs provided to 
the telecommand do not correspond to a data reporting packet that is
currently in use.
&lt;p&gt;
The PUS specifies that the first item in the application data of this
telecommand is the NSID field. The type of this field is not mandated by the 
standard. This class assumes it to be of type &lt;code&gt;unsigned char&lt;/code&gt;.
The standard also allows this field to be omitted. This class however
requires this field to be always present.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4163'
        name = 'author'
        modelElement = 'S.1205'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4164'
        name = 'version'
        modelElement = 'S.1205'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4165'
        name = 'documentation'
        modelElement = 'S.1393'>
   <UML:TaggedValue.dataValue>
    	Depending on the subtype of the telecommand, enable or disable the data
reporting packets.
A pseudo-code implementation for this method is as follows:&lt;pre&gt;
outcome = ACTION_SUCCESS;
for (all SIDs stored in the telecommand) {
retrieve data reporting packet from telemetry packet factory;
if (no packet is returned by the factory )
outcome = ACTION_FAILURE:
if ( (telecommand subtype==PUS_ST_DATA_REP_ENB_HK) ||
(telecommand subtype==PUS_ST_DATA_REP_ENB_DG) )
enable the data reporting packet returned by the factory;
else
disable the data reporting packet returned by the factory;
}
return outcome;&lt;/pre&gt;
The telecommand is configured with a list of SIDs and with a telecommand
subtype. Depending on the subtype, the telecommand will either enable or
disable the data reporting packets identified by the SIDs. The data reporting
packets are retrieved from the telemetry packet factory (instance of class
&lt;code&gt;CC_TelemetryPacketFactory&lt;/code&gt;). Enabling and disabling of the 
data reporting packets is done through method &lt;code&gt;setEnabled&lt;/code&gt;
declared by class &lt;code&gt;DC_PUSDataReportingPacket&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4166'
        name = 'see'
        modelElement = 'S.1393'>
   <UML:TaggedValue.dataValue>
    	DC_PUSDataReportingPacket#setEnabled
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4167'
        name = 'see'
        modelElement = 'S.1393'>
   <UML:TaggedValue.dataValue>
    	CC_TelemetryPacketFactory
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4168'
        name = 'see'
        modelElement = 'S.1393'>
   <UML:TaggedValue.dataValue>
    	PunctualAction#execute
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4169'
        name = 'return'
        modelElement = 'S.1393'>
   <UML:TaggedValue.dataValue>
    	the execution outcome of the telecommand
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4171'
        name = 'documentation'
        modelElement = 'S.1394'>
   <UML:TaggedValue.dataValue>
    	Instantiate a control data reporting PUS telecommand.
The class identifier is set.
The values of the internal data structure that is used to hold the telecommand
application data is initialized to illegal values to signify that the telecommand
is not yet configured. The telecommand type is set to PUS_TYPE_DATA_REP.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4172'
        name = 'documentation'
        modelElement = 'S.1395'>
   <UML:TaggedValue.dataValue>
    	Set the maximum number of SIDs that can be processed by this telecommand.
This is an initialization method that should only be called once.
A call to this method causes the internal data structures where the SIDs are
held to be allocated and initialized. Only positive values of the method argument
are legal.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4173'
        name = 'param'
        modelElement = 'S.1395'>
   <UML:TaggedValue.dataValue>
    	max the maximum number of SIDs
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4176'
        name = 'documentation'
        modelElement = 'S.1396'>
   <UML:TaggedValue.dataValue>
    	Get the maximum number of SIDs that can be processed by this telecommand.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4177'
        name = 'see'
        modelElement = 'S.1396'>
   <UML:TaggedValue.dataValue>
    	#setMaxNumberSID
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4178'
        name = 'return'
        modelElement = 'S.1396'>
   <UML:TaggedValue.dataValue>
    	the maximum number of SIDs
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4180'
        name = 'documentation'
        modelElement = 'S.1397'>
   <UML:TaggedValue.dataValue>
    	Implementation of the raw data load service. This method would normally
be called by a telecommand loader to load the application data into the
the telecommand component. This method interprets the raw data as they are
loaded and uses them to construct the sequence of SIDs of the data reporting
packets that have to be enabled or disabled. This method assumes that the
raw data are loaded in sequence starting from the first one (i.e. the value 
of i in the first call is zero and succesive calls use values of i that 
are incremented by one at each call). The value of i is also constrained to 
lie in the range [0,N] where N is computed as follows: &lt;pre&gt;
N = M*sizeof(TD_SID)  &lt;/pre&gt;
where M is the maximum number of SIDs defined by method &lt;code&gt;setMaxNumberSID&lt;/code&gt;.
If the number of SIDs in the telecommand packet exceeds the maximum defined
with method &lt;code&gt;setMaxNumberSID&lt;/code&gt;, the telecommand
is declared to be invalid with validity check code equal to VC_TOO_MANY_SIDS. 
If an attempt is made to load a greater number of raw data, the telecommand
is declared to be invalid with validity check code equal to VC_TOO_MANY_RAW_DATA. 
Finally, the total number of loaded raw data T
must be consistent with the number of SIDs (the first byte in the telecommand
packet). If this
is not the case, then the telecommand is declared invalid with validity check code
equal to VC_INCONSISTENT_RAW_DATA.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4181'
        name = 'see'
        modelElement = 'S.1397'>
   <UML:TaggedValue.dataValue>
    	#getNumberOfRawData
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4182'
        name = 'param'
        modelElement = 'S.1397'>
   <UML:TaggedValue.dataValue>
    	i the index of the raw telecommand data
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4183'
        name = 'param'
        modelElement = 'S.1397'>
   <UML:TaggedValue.dataValue>
    	d the raw data
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4187'
        name = 'documentation'
        modelElement = 'S.1398'>
   <UML:TaggedValue.dataValue>
    	Return the number of raw data bytes that can be loaded with the
raw telecommand data load service.
The value returned by this class is equal to: &lt;code&gt;M*sizeof(TD_SID)+1&lt;/code&gt;
where M is the maximum number of SIDs defined by method &lt;code&gt;setMaxNumberSID&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4188'
        name = 'see'
        modelElement = 'S.1398'>
   <UML:TaggedValue.dataValue>
    	#setRawData
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4189'
        name = 'return'
        modelElement = 'S.1398'>
   <UML:TaggedValue.dataValue>
    	the number of raw data bytes to be loaded with the raw
data load service
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4191'
        name = 'documentation'
        modelElement = 'S.1399'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on the telecommand:
check that the maximum number of SIDs that can be processed by the telecommand 
has been set.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4192'
        name = 'return'
        modelElement = 'S.1399'>
   <UML:TaggedValue.dataValue>
    	true if the telecommand is configured, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4194'
        name = 'documentation'
        modelElement = 'S.1212'>
   <UML:TaggedValue.dataValue>
    	PUS telecommand to define the housekeeping and diagnostic 
data reporting telemetry packets.
This class encapsulates the following subtypes of PUS service number 3:&lt;ul&gt;
&lt;li&gt;Subtype 1: define new housekeeping parameter report &lt;/li&gt;
&lt;li&gt;Subtype 2: define new diagnostic parameter report &lt;/li&gt;
&lt;/ul&gt;
This class defines an internal buffer to store the application data 
that define the telemetry packet. The maximum size of this buffer is
a configuration parameter that must be set at application initialization 
time (method &lt;code&gt;setNumberOfRawData&lt;/code&gt;). 
&lt;p&gt;
During normal operation, configuration is performed using the &lt;i&gt;raw
data load service&lt;/i&gt;. Since in most cases the amount of data to be loaded
can be large, the more efficient (but less safe) implementation of this service
is used.
&lt;p&gt;
This telecommand implements a &lt;i&gt;validity check&lt;/i&gt; that returns &quot;telecommand
not valid&quot; in case an attempt is made to load more application data than fit
into the telecommand component.
&lt;p&gt;
Execution of this telecommand consists in retrieving a free data reporting telemetry packet
from the telemetry packet factory, configuring it with the application
data and loading it in the PUS telemetry mode manager. The PUS telemetry mode
manager is loaded as a plug-in component at configuration time. Execution can have 
two outcomes. 
The telecommand
can have a successful outcome (the return value of &lt;code&gt;doAction&lt;/code&gt;
is ACTION_SUCCESS) or it can fail for the following reasons:
&lt;ul&gt;
&lt;li&gt;No free packet could be found in the
telemetry packet factory (the return value of &lt;code&gt;doAction&lt;/code&gt;
is PACKET_NOT_FOUND)   &lt;/li&gt;
&lt;li&gt;The packet could not be loaded in the
telemetry mode manager (the return value of &lt;code&gt;doAction&lt;/code&gt;
is PUS_MODE_MAN_FULL)   &lt;/li&gt;
&lt;li&gt;The internal structure of the application data was found to be 
inconsistent (the return value of &lt;code&gt;doAction&lt;/code&gt;
is APP_DATA_INCONSISTENT)   &lt;/li&gt;
&lt;/ul&gt; . 
No event reports are generated in case of failure as it is assumed that
this is done by the calling client.
&lt;p&gt;
Note that this class does not try to interpret its application data. It simply passes
them on as unformatted raw data to the data reporting telemetry packet.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4195'
        name = 'author'
        modelElement = 'S.1212'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4196'
        name = 'version'
        modelElement = 'S.1212'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4197'
        name = 'documentation'
        modelElement = 'S.1404'>
   <UML:TaggedValue.dataValue>
    	Use the application data to configure and load a data reporting telemetry packet.
This method queries the dynamic telemetry packet factory for a new
data reporting packet. If it obtains it, it loads it with the application
data and then loads it in the PUS telemetry mode manager.
If either of these two operations fails, the method returns with a
failure code (see class comment).
&lt;p&gt;
In order to retrieve a free packet from the telemetry packet factory 
with the appropriate characteristics, this method has to extract the
following data from the application data: &lt;ul&gt;
&lt;li&gt;The number of fixed-length arrays&lt;/li&gt;
&lt;li&gt;The size of the packet value buffer&lt;/li&gt;
&lt;/ul&gt;
The above figures are computed by processing the content of the application
data. The computation makes certain assumptions about the structure of the
application data. The assumptions are the same as are made in class
&lt;code&gt;DC_PUSDataReportingPacket&lt;/code&gt;.
Some consistency checks are performed during the processing of the
application data. If these fail, then the method returns with a failure
code (see class comment). The consistency check will catch situations where
the number of fixed-length arrays or the number of parameters defined by
the application data is not consistent with the length of the application
data as defined when calling method &lt;code&gt;setRawData&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4198'
        name = 'see'
        modelElement = 'S.1404'>
   <UML:TaggedValue.dataValue>
    	PunctualAction#execute
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4199'
        name = 'return'
        modelElement = 'S.1404'>
   <UML:TaggedValue.dataValue>
    	action outcome code (see class comment)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4201'
        name = 'documentation'
        modelElement = 'S.1405'>
   <UML:TaggedValue.dataValue>
    	Instantiate a define data reporting PUS telecommand.
The class identifier is set.
The values of the internal data structure that is used to hold the telecommand
application data is initialized to illegal values to signify that the telecommand
is not yet configured. The telecommand type is set to PUS_TYPE_DATA_REP.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4202'
        name = 'documentation'
        modelElement = 'S.1406'>
   <UML:TaggedValue.dataValue>
    	Set the maximum size of the application data array. The maximum size is specified as the
maximum number of bytes of the application data. 
This is an initialization method that should only be called once.
A call to this method causes the internal data structures of the
telecommand to be allocated and initialized. Only positive values of the method argument
are legal.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4203'
        name = 'param'
        modelElement = 'S.1406'>
   <UML:TaggedValue.dataValue>
    	max the maximum size of the application data in number of bytes
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4206'
        name = 'documentation'
        modelElement = 'S.1407'>
   <UML:TaggedValue.dataValue>
    	Get the maximum size (in number of bytes) of the application data array.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4207'
        name = 'see'
        modelElement = 'S.1407'>
   <UML:TaggedValue.dataValue>
    	#setNumberOfRawData
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4208'
        name = 'return'
        modelElement = 'S.1407'>
   <UML:TaggedValue.dataValue>
    	the maximum size of the application data in number of bytes
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4210'
        name = 'documentation'
        modelElement = 'S.1408'>
   <UML:TaggedValue.dataValue>
    	Implementation of the raw data load service. 
This method copies the argument array into an internal array. The number of
bytes n in the argument array must be less than the maximum value set
with method &lt;code&gt;setNumberOfRawData&lt;/code&gt;. 
If an attempt is made to load a greater number of raw data, then the telecommand
is declared to be invalid with validity check code equal to VC_TOO_MANY_RAW_DATA.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4211'
        name = 'param'
        modelElement = 'S.1408'>
   <UML:TaggedValue.dataValue>
    	d the array holding the raw data
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4212'
        name = 'param'
        modelElement = 'S.1408'>
   <UML:TaggedValue.dataValue>
    	n the number of items in array d
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4216'
        name = 'documentation'
        modelElement = 'S.1409'>
   <UML:TaggedValue.dataValue>
    	Return the number of application data bytes that were loaded with the
last call to method &lt;code&gt;setRawData&lt;/code&gt;. The number returned by this
method is the same as the value of the argument n in the call to method
&lt;code&gt;setRawData&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4217'
        name = 'see'
        modelElement = 'S.1409'>
   <UML:TaggedValue.dataValue>
    	#setRawData
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4218'
        name = 'return'
        modelElement = 'S.1409'>
   <UML:TaggedValue.dataValue>
    	the number of application data bytes in the currently loaded packet
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4220'
        name = 'documentation'
        modelElement = 'S.1410'>
   <UML:TaggedValue.dataValue>
    	Load the PUS telemetry mode manager.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4221'
        name = 'see'
        modelElement = 'S.1410'>
   <UML:TaggedValue.dataValue>
    	#doAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4222'
        name = 'param'
        modelElement = 'S.1410'>
   <UML:TaggedValue.dataValue>
    	pTmModeManager the PUS telemetry mode manager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4225'
        name = 'documentation'
        modelElement = 'S.1411'>
   <UML:TaggedValue.dataValue>
    	Getter method for the PUS telemetry mode manager.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4226'
        name = 'see'
        modelElement = 'S.1411'>
   <UML:TaggedValue.dataValue>
    	#setPUSTelemetryModeManager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4227'
        name = 'return'
        modelElement = 'S.1411'>
   <UML:TaggedValue.dataValue>
    	the PUS telemetry mode manager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4229'
        name = 'documentation'
        modelElement = 'S.1412'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on the telecommand:
check that the maximum number of raw data has been set and that the
PUS telemetry mode manager has been loaded.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4230'
        name = 'return'
        modelElement = 'S.1412'>
   <UML:TaggedValue.dataValue>
    	true if the telecommand is configured, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4232'
        name = 'documentation'
        modelElement = 'S.1210'>
   <UML:TaggedValue.dataValue>
    	PUS telecommand to set up a memory dump with absolute addresses.
This class encapsulates the PUS service type 6, subtype 5.
This class adds to its base class the implementation of the execution
action. Execution of this telecommand consists in retrieving a free telemetry packet
of type &lt;code&gt;DC_PUSMemoryDumpAbsolute&lt;/code&gt; from the telemetry packet factory, 
configuring it with the application
data and sending it to the telemetry manager for immediate dispatch. The telemetry 
manager is loaded as a plug-in component at configuration time. Execution can have 
two outcomes. 
The telecommand
can have a successful outcome (the return value of &lt;code&gt;doAction&lt;/code&gt;
is ACTION_SUCCESS) or it can fail for the following reasons:
&lt;ul&gt;
&lt;li&gt;No free packet could be found in the
telemetry packet factory (the return value of &lt;code&gt;doAction&lt;/code&gt;
is PACKET_NOT_FOUND)   &lt;/li&gt;
&lt;li&gt;The packet could not be loaded in the
telemetry manager (the return value of &lt;code&gt;doAction&lt;/code&gt;
is TM_MAN_QUEUE_FULL)   &lt;/li&gt;
&lt;li&gt;The internal structure of the application data was found to be 
inconsistent (the return value of &lt;code&gt;doAction&lt;/code&gt;
is APP_DATA_INCONSISTENT)   &lt;/li&gt;
&lt;/ul&gt; . 
No event reports are generated in case of failure as it is assumed that
this is done by the calling client.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4233'
        name = 'author'
        modelElement = 'S.1210'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4234'
        name = 'see'
        modelElement = 'S.1210'>
   <UML:TaggedValue.dataValue>
    	DC_PUSMemoryDumpOffset
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4235'
        name = 'version'
        modelElement = 'S.1210'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4236'
        name = 'documentation'
        modelElement = 'S.1413'>
   <UML:TaggedValue.dataValue>
    	Use the application data to configure and load a memory dump telemetry packet
with base plus offset.
This method queries the dynamic telemetry packet factory for a new
memory dump packet. If it obtains it, it interprets the application data and 
configures the memory dump packet. The following operations are performed on
the memory dump packet:&lt;ul&gt;
&lt;li&gt;The number of blocks is defined &lt;/li&gt;
&lt;li&gt;If a memory dump with base plus offset is required, the base address is
set&lt;/li&gt;
&lt;li&gt;Each memory block is configured with its start address and length&lt;/li&gt;
&lt;/ul&gt;
After being configured, the telemetry packet is loaded in the immediate
dispatch queue of the telemetry manager.
This method can return a failure code. See the class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4237'
        name = 'see'
        modelElement = 'S.1413'>
   <UML:TaggedValue.dataValue>
    	PunctualAction#execute
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4238'
        name = 'return'
        modelElement = 'S.1413'>
   <UML:TaggedValue.dataValue>
    	action outcome code (see class comment)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4240'
        name = 'documentation'
        modelElement = 'S.1414'>
   <UML:TaggedValue.dataValue>
    	Instantiate a PUS memory dump with absolute addresses telecommand.
The class identifier is set. The telecommand subtype attribute
is set to PUS_ST_TC_DMP_ABS.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4241'
        name = 'documentation'
        modelElement = 'S.1214'>
   <UML:TaggedValue.dataValue>
    	PUS telecommand to set up a memory dump with base plus offset.
This class encapsulates the PUS service type 6, subtype 3.
This class adds to its base class the implementation of the execution
action. Execution of this telecommand consists in retrieving a free telemetry packet
of type &lt;code&gt;DC_PUSMemoryDumpOffset&lt;/code&gt; from the telemetry packet factory, 
configuring it with the application
data and sending it to the telemetry manager for immediate dispatch. The telemetry 
manager is loaded as a plug-in component at configuration time. Execution can have 
two outcomes. 
The telecommand
can have a successful outcome (the return value of &lt;code&gt;doAction&lt;/code&gt;
is ACTION_SUCCESS) or it can fail for the following reasons:
&lt;ul&gt;
&lt;li&gt;No free packet could be found in the
telemetry packet factory (the return value of &lt;code&gt;doAction&lt;/code&gt;
is PACKET_NOT_FOUND)   &lt;/li&gt;
&lt;li&gt;The packet could not be loaded in the
telemetry manager (the return value of &lt;code&gt;doAction&lt;/code&gt;
is TM_MAN_QUEUE_FULL)   &lt;/li&gt;
&lt;li&gt;The internal structure of the application data was found to be 
inconsistent (the return value of &lt;code&gt;doAction&lt;/code&gt;
is APP_DATA_INCONSISTENT)   &lt;/li&gt;
&lt;/ul&gt; . 
No event reports are generated in case of failure as it is assumed that
this is done by the calling client.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4242'
        name = 'author'
        modelElement = 'S.1214'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4243'
        name = 'see'
        modelElement = 'S.1214'>
   <UML:TaggedValue.dataValue>
    	DC_PUSMemoryDumpOffset
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4244'
        name = 'version'
        modelElement = 'S.1214'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4245'
        name = 'documentation'
        modelElement = 'S.1415'>
   <UML:TaggedValue.dataValue>
    	Use the application data to configure and load a memory dump telemetry packet
with base plus offset.
This method queries the dynamic telemetry packet factory for a new
memory dump packet. If it obtains it, it interprets the application data and 
configures the memory dump packet. The following operations are performed on
the memory dump packet:&lt;ul&gt;
&lt;li&gt;The number of blocks is defined &lt;/li&gt;
&lt;li&gt;If a memory dump with base plus offset is required, the base address is
set&lt;/li&gt;
&lt;li&gt;Each memory block is configured with its start address and length&lt;/li&gt;
&lt;/ul&gt;
After being configured, the telemetry packet is loaded in the immediate
dispatch queue of the telemetry manager.
This method can return a failure code. See the class comment for details.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4246'
        name = 'see'
        modelElement = 'S.1415'>
   <UML:TaggedValue.dataValue>
    	PunctualAction#execute
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4247'
        name = 'return'
        modelElement = 'S.1415'>
   <UML:TaggedValue.dataValue>
    	action outcome code (see class comment)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4249'
        name = 'documentation'
        modelElement = 'S.1416'>
   <UML:TaggedValue.dataValue>
    	Instantiate a PUS memory dump with base plus offset telecommand.
The class identifier is set. The telecommand subtype attribute
is set to PUS_ST_TC_DMP_OFF.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4250'
        name = 'documentation'
        modelElement = 'S.1196'>
   <UML:TaggedValue.dataValue>
    	Class implementing the PUS service to load memory using absolute addresses (PUS 
service type 6, subtype 2).
This class adds to its superclass the implementation of the 
&lt;i&gt;raw data load mechanism&lt;/i&gt;. Since the amount of data to be loaded will often
be large, the fast version of this service is implemented. 
The data load mechanism interprets the application data in the telecommand
packet and uses them to configure the internal data structure defined by the
super class. The interpretation of the application data can result in the
detection of inconsistencies or invalid data. These are reported by setting the
&lt;i&gt;validity check code&lt;/i&gt;.
&lt;p&gt;
The PUS leaves some leeway in the definition of the structure of the application
data for memory load telecommands. This implementation makes the following 
assumptions: &lt;ul&gt;
&lt;li&gt;The memory ID field is always present and its type is &lt;code&gt;TD_PUSMemId&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The number of blocks field is an integer of type &lt;code&gt;TD_PUSNumberMemBlocks&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
The implementation of this class assumes type &lt;code&gt;TD_PUSMemId&lt;/code&gt; to have size 1
(i.e. to be a &lt;code&gt;char&lt;/code&gt; or an &lt;code&gt;unsigned char&lt;/code&gt;).
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4251'
        name = 'author'
        modelElement = 'S.1196'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4252'
        name = 'version'
        modelElement = 'S.1196'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4253'
        name = 'documentation'
        modelElement = 'S.1418'>
   <UML:TaggedValue.dataValue>
    	Instantiate a PUS memory load using base offset telecommand.
The class identifier and the telecommand subtype are set.
The memory block ID is initialized to zero.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4254'
        name = 'documentation'
        modelElement = 'S.1419'>
   <UML:TaggedValue.dataValue>
    	Implementation of the raw data load service. This method would normally
be called by a telecommand loader to load the application data into the
the telecommand component. This method interprets the raw data as they are
loaded and uses them to configure the data structure (defined by the
super class) that holds the start address, the length, the checksum, 
and the memory load data for each block. The application data are constrained
to fit within the data structures configured at the level of the superclass.
Two such constraints apply:&lt;ul&gt;
&lt;li&gt;The number of bytes to be transferred (the value of argument n) must
be greater than: 
&lt;code&gt;sizeof(TD_PUSMemId)+sizeof(TD_PUSNumberMemBlocks)&lt;/code&gt;.
If this is not the case, the validity check
code is set to VC_INCONSISTENT_RAW_DATA.&lt;/li&gt;
&lt;li&gt;The number of blocks must be less or equal than the maximum number of
blocks defined in the super class. If this is not the case, the validity check
code is set to VC_TOO_MANY_MEM_BLOCK.&lt;/li&gt;
&lt;li&gt;The total number of memory data to be loaded must not exceed the maximum
value defined in the super class. If this is not the case, the validity check
code is set to VC_TOO_MANY_MEM_DATA.&lt;/li&gt;
&lt;li&gt;The number of bytes to be transferred (the value of argument n) must 
be consistent with the number of blocks and of data inferred from the application
data. If this is not the case, the validity check
code is set to VC_INCONSISTENT_RAW_DATA.&lt;/li&gt;
&lt;/ul&gt;
When a constraint is violated, the method returns immediately after setting the
value of the validity check code.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4255'
        name = 'param'
        modelElement = 'S.1419'>
   <UML:TaggedValue.dataValue>
    	n the number of bytes in the raw data
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4256'
        name = 'param'
        modelElement = 'S.1419'>
   <UML:TaggedValue.dataValue>
    	d the starting address of the raw data
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4260'
        name = 'documentation'
        modelElement = 'S.1420'>
   <UML:TaggedValue.dataValue>
    	Get the memory block ID.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4261'
        name = 'return'
        modelElement = 'S.1420'>
   <UML:TaggedValue.dataValue>
    	the maximum number of blocks
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4263'
        name = 'documentation'
        modelElement = 'S.1203'>
   <UML:TaggedValue.dataValue>
    	Class implementing the PUS service to load memory using base plus offset (PUS 
service type 6, subtype 1).
This class adds to its superclass the implementation of the 
&lt;i&gt;raw data load mechanism&lt;/i&gt;. Since the amount of data to be loaded will often
be large, the fast version of this service is implemented. 
The data load mechanism interprets the application data in the telecommand
packet and uses them to configure the internal data structure defined by the
super class. The interpretation of the application data can result in the
detection of inconsistencies or invalid data. These are reported by setting the
&lt;i&gt;validity check code&lt;/i&gt;. 
&lt;p&gt;
The PUS leaves some leeway in the definition of the structure of the application
data for memory load telecommands. This implementation makes the following 
assumptions: &lt;ul&gt;
&lt;li&gt;The memory ID field is always present and its type is &lt;code&gt;TD_PUSMemId&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The base field is a pointer and is four bytes long.&lt;/li&gt;
&lt;li&gt;The offset field is an integer of type &lt;code&gt;TD_PUSMemOffset&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The number of blocks field is an integer of type &lt;code&gt;TD_PUSNumberMemBlocks&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
The implementation of this class assumes type &lt;code&gt;TD_PUSMemId&lt;/code&gt; to have size 1
(i.e. to be a &lt;code&gt;char&lt;/code&gt; or an &lt;code&gt;unsigned char&lt;/code&gt;).
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4264'
        name = 'author'
        modelElement = 'S.1203'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4265'
        name = 'version'
        modelElement = 'S.1203'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4266'
        name = 'documentation'
        modelElement = 'S.1422'>
   <UML:TaggedValue.dataValue>
    	Instantiate a PUS memory load using base offset telecommand.
The class identifier and the telecommand subtype are set.
The memory block ID is initialized to zero.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4267'
        name = 'documentation'
        modelElement = 'S.1423'>
   <UML:TaggedValue.dataValue>
    	Implementation of the raw data load service. This method would normally
be called by a telecommand loader to load the application data into the
the telecommand component. This method interprets the raw data as they are
loaded and uses them to configure the data structure (defined by the
super class) that holds the start address, the length, the checksum, 
and the memory load data for each block. The application data are constrained
to fit within the data structures configured at the level of the superclass.
Two such constraints apply:&lt;ul&gt;
&lt;li&gt;The number of bytes to be transferred (the value of argument n) must
be greater than: 
&lt;code&gt;sizeof(TD_PUSMemId)+sizeof(TD_PUSMemData*)+sizeof(TD_PUSNumberMemBlocks)&lt;/code&gt;.
If this is not the case, the validity check
code is set to VC_INCONSISTENT_RAW_DATA.&lt;/li&gt;
&lt;li&gt;The number of blocks must be less or equal than the maximum number of
blocks defined in the super class. If this is not the case, the validity check
code is set to VC_TOO_MANY_MEM_BLOCK.&lt;/li&gt;
&lt;li&gt;The total number of memory data to be loaded must not exceed the maximum
value defined in the super class. If this is not the case, the validity check
code is set to VC_TOO_MANY_MEM_DATA.&lt;/li&gt;
&lt;li&gt;The number of bytes to be transferred (the value of argument n) must 
be consistent with the number of blocks and of data inferred from the application
data. If this is not the case, the validity check
code is set to VC_INCONSISTENT_RAW_DATA.&lt;/li&gt;
&lt;/ul&gt;
When a constraint is violated, the method returns immediately after setting the
value of the validity check code.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4268'
        name = 'param'
        modelElement = 'S.1423'>
   <UML:TaggedValue.dataValue>
    	n the number of bytes in the raw data
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4269'
        name = 'param'
        modelElement = 'S.1423'>
   <UML:TaggedValue.dataValue>
    	d the starting address of the raw data
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4273'
        name = 'documentation'
        modelElement = 'S.1424'>
   <UML:TaggedValue.dataValue>
    	Get the memory block ID.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4274'
        name = 'return'
        modelElement = 'S.1424'>
   <UML:TaggedValue.dataValue>
    	the maximum number of blocks
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4276'
        name = 'documentation'
        modelElement = 'S.1209'>
   <UML:TaggedValue.dataValue>
    	Telecommand that can be used as part of an end-to-end PUS test scenario to 
simulate a PUS telecommand.
This telecommand consists of an &lt;i&gt;execution counter&lt;/i&gt; that is incremented 
by one every time the telecommand is executed. 
The telecommand additionally offers methods to change the return value of its
execution check and of its validity check and to set the values of
validity and execution check codes. These are useful to 
simulate telecommands whose
execution check returns &quot;telecommand cannot executed&quot; or whose
validity check returns &quot;telecommand not valid&quot;. 
Similarly, it is possible to set the return value of the execution method to
either ACTION_SUCCESS or ACTION_FAILURE.
&lt;p&gt;
The initial values of the execution counter, of the
validity and execution check return values, of the execution return value, 
and of the validity and
execution check codes are defined in the telecommand application data that
are loaded when the telecommand is configured through the &lt;i&gt;raw data load service&lt;/i&gt;.
&lt;p&gt;
The type and subtype of the telecommand are set to PUS_TYPE_TEST and
PUS_ST_TC_TEST, respectively.
&lt;p&gt;
The application data associated to this telecommand are assumed to consist
of 6 bytes which are interpreted as follows:&lt;ul&gt;
&lt;li&gt;Byte 0: the initial value of the execution counter&lt;/li&gt;
&lt;li&gt;Byte 1: the initial value of the execution check value&lt;/li&gt;
&lt;li&gt;Byte 2: the initial value of the validity check value&lt;/li&gt;
&lt;li&gt;Byte 3: the initial value of the execution check code&lt;/li&gt;
&lt;li&gt;Byte 4: the initial value of the validity check code&lt;/li&gt;
&lt;li&gt;Byte 5: the value of the execution outcome return value (ACTION_FAILURE if 1,
ACTION_SUCCESS otherwise)&lt;/li&gt;
&lt;/ul&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4277'
        name = 'author'
        modelElement = 'S.1209'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4278'
        name = 'version'
        modelElement = 'S.1209'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4279'
        name = 'documentation'
        modelElement = 'S.1432'>
   <UML:TaggedValue.dataValue>
    	Increment the execution counter by one and return the execution outcome code 
set in the application data.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
if (exectionCounter&lt;255)
executionCounter++;
else
executionCounter=0;
if (executionSuccess)
return ACTION_SUCCESS;
else
return ACTION_FAILURE;&lt;/PRE&gt;
The vlaue of the internal flag &lt;code&gt;executionSuccess&lt;/code&gt; is read from
the telecommand application data.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4280'
        name = 'see'
        modelElement = 'S.1432'>
   <UML:TaggedValue.dataValue>
    	PunctualAction#execute
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4281'
        name = 'return'
        modelElement = 'S.1432'>
   <UML:TaggedValue.dataValue>
    	the execution outcome code (either ACTION_SUCCESS or ACTION_FAILURE
depending on the value byte 6 of the application data)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4283'
        name = 'documentation'
        modelElement = 'S.1433'>
   <UML:TaggedValue.dataValue>
    	Instantiate a test telecommand.
The class identifier is set. The telecommand type and subtype are set
the values indicated in the class comment. All other internal variables 
are set to dummy values.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4284'
        name = 'documentation'
        modelElement = 'S.1434'>
   <UML:TaggedValue.dataValue>
    	Getter method for the execution counter.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4285'
        name = 'return'
        modelElement = 'S.1434'>
   <UML:TaggedValue.dataValue>
    	the execution counter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4287'
        name = 'documentation'
        modelElement = 'S.1435'>
   <UML:TaggedValue.dataValue>
    	Execute the execution check on the telecommand.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
return executionCheckValue; &lt;/PRE&gt;
The internal variable &lt;code&gt;executionCheckValue&lt;/code&gt; is initialized
when the telecommand application data are loaded. Its value
can additionally be changed with method &lt;code&gt;setExecutionCheckValue&lt;/code&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4288'
        name = 'see'
        modelElement = 'S.1435'>
   <UML:TaggedValue.dataValue>
    	#setExecutionCheckValue
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4289'
        name = 'see'
        modelElement = 'S.1435'>
   <UML:TaggedValue.dataValue>
    	CC_TelecommandManager#activate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4290'
        name = 'return'
        modelElement = 'S.1435'>
   <UML:TaggedValue.dataValue>
    	the value of the internal variable &lt;code&gt;setExecutionCheckValue&lt;/code&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4292'
        name = 'documentation'
        modelElement = 'S.1436'>
   <UML:TaggedValue.dataValue>
    	Execute the validity check on the telecommand.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
return validityCheckValue; &lt;/PRE&gt;
The internal variable &lt;code&gt;validityCheckValue&lt;/code&gt; is initialized
when the telecommand application data are loaded. Its value
can be changed with method &lt;code&gt;setValidityCheckValue&lt;/code&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4293'
        name = 'see'
        modelElement = 'S.1436'>
   <UML:TaggedValue.dataValue>
    	#setValidityCheckValue
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4294'
        name = 'see'
        modelElement = 'S.1436'>
   <UML:TaggedValue.dataValue>
    	CC_TelecommandManager#load
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4295'
        name = 'return'
        modelElement = 'S.1436'>
   <UML:TaggedValue.dataValue>
    	the value of the internal variable &lt;code&gt;setExecutionCheckValue&lt;/code&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4297'
        name = 'documentation'
        modelElement = 'S.1437'>
   <UML:TaggedValue.dataValue>
    	Return the validity check code for the telecommand.
This implementation returns a user-defined value that is initialized
when the telecommand application data are loaded and that can be 
set with method
&lt;code&gt;setValidityCheckCode&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4298'
        name = 'see'
        modelElement = 'S.1437'>
   <UML:TaggedValue.dataValue>
    	#setValidityCheckCode
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4299'
        name = 'return'
        modelElement = 'S.1437'>
   <UML:TaggedValue.dataValue>
    	the validity check code
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4301'
        name = 'documentation'
        modelElement = 'S.1438'>
   <UML:TaggedValue.dataValue>
    	Return the execution check code for the telecommand.
This implementation returns a user-defined value that is initialized
when the telecommand application data are loaded and that can be set with method
&lt;code&gt;setExecutionCheckCode&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4302'
        name = 'see'
        modelElement = 'S.1438'>
   <UML:TaggedValue.dataValue>
    	#setExecutionCheckCode
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4303'
        name = 'return'
        modelElement = 'S.1438'>
   <UML:TaggedValue.dataValue>
    	the validity check code
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4305'
        name = 'documentation'
        modelElement = 'S.1439'>
   <UML:TaggedValue.dataValue>
    	Set the return value of the execution check.
This is a setter method for the internal variable &lt;code&gt;executionCheckValue&lt;/code&gt;
which defines the return value of the execution check implemented by this
telecommand.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4306'
        name = 'see'
        modelElement = 'S.1439'>
   <UML:TaggedValue.dataValue>
    	#canExecute
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4307'
        name = 'param'
        modelElement = 'S.1439'>
   <UML:TaggedValue.dataValue>
    	executionCheckValue the value of the internal variable &lt;code&gt;setExecutionCheckValue&lt;/code&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4310'
        name = 'documentation'
        modelElement = 'S.1440'>
   <UML:TaggedValue.dataValue>
    	Set the return value of the validity check.
This is a setter method for the internal variable &lt;code&gt;validityCheckValue&lt;/code&gt;
which defines the return value of the validity check implemented by this
telecommand.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4311'
        name = 'see'
        modelElement = 'S.1440'>
   <UML:TaggedValue.dataValue>
    	#isValid
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4312'
        name = 'param'
        modelElement = 'S.1440'>
   <UML:TaggedValue.dataValue>
    	validityCheckValue the value of the internal variable &lt;code&gt;setExecutionCheckValue&lt;/code&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4315'
        name = 'documentation'
        modelElement = 'S.1441'>
   <UML:TaggedValue.dataValue>
    	Set the value of the validity check code.
This is a setter method for an internal variable 
which defines the return value of method &lt;code&gt;getValidityCheckCode&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4316'
        name = 'see'
        modelElement = 'S.1441'>
   <UML:TaggedValue.dataValue>
    	#getValidityCheckCode
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4317'
        name = 'param'
        modelElement = 'S.1441'>
   <UML:TaggedValue.dataValue>
    	validityCheckCode the value of the validity check code
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4320'
        name = 'documentation'
        modelElement = 'S.1442'>
   <UML:TaggedValue.dataValue>
    	Set the value of the execution check code.
This is a setter method for an internal variable 
which defines the return value of method &lt;code&gt;getExecutionCheckCode&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4321'
        name = 'see'
        modelElement = 'S.1442'>
   <UML:TaggedValue.dataValue>
    	#getExecutionCheckCode
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4322'
        name = 'param'
        modelElement = 'S.1442'>
   <UML:TaggedValue.dataValue>
    	executionCheckCode the value of the validity check code
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4325'
        name = 'documentation'
        modelElement = 'S.1443'>
   <UML:TaggedValue.dataValue>
    	Set the action outcome returned by method &lt;code&gt;doAction&lt;/code&gt;.
The possible values are foreseen ACTION_SUCCESS or ACTION_FAILURE.
The former is used if the value set with this method is true. Otherwise
the latter is used.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4326'
        name = 'see'
        modelElement = 'S.1443'>
   <UML:TaggedValue.dataValue>
    	#doAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4327'
        name = 'param'
        modelElement = 'S.1443'>
   <UML:TaggedValue.dataValue>
    	executionSuccess if true, then the action outcome is forced to
ACTION_SUCCESS, otherwise  it is forced to ACTION_FAILURE
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4330'
        name = 'documentation'
        modelElement = 'S.1444'>
   <UML:TaggedValue.dataValue>
    	Get the action outcome returned by method &lt;code&gt;doAction&lt;/code&gt;.
If the return value is true, then action outcome is ACTION_SUCCESS.
Otherwise it ACTION_FAILURE.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4331'
        name = 'see'
        modelElement = 'S.1444'>
   <UML:TaggedValue.dataValue>
    	#setActionOutcome
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4332'
        name = 'return'
        modelElement = 'S.1444'>
   <UML:TaggedValue.dataValue>
    	a flag indicating which value of action outcome is returned by
method &lt;code&gt;doAction&lt;/code&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4334'
        name = 'documentation'
        modelElement = 'S.1445'>
   <UML:TaggedValue.dataValue>
    	Implementation of the raw data load service. This method would normally
be called by a telecommand loader to load the application data into the
the telecommand component. This method interprets the raw data as they are
loaded and uses them to initialize the internal variables of the telecommand
component. The expected layout of the application data is specified
in the class comment.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4335'
        name = 'see'
        modelElement = 'S.1445'>
   <UML:TaggedValue.dataValue>
    	#getNumberOfRawData
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4336'
        name = 'param'
        modelElement = 'S.1445'>
   <UML:TaggedValue.dataValue>
    	i the index of the raw telecommand data
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4337'
        name = 'param'
        modelElement = 'S.1445'>
   <UML:TaggedValue.dataValue>
    	d the raw data
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4341'
        name = 'documentation'
        modelElement = 'S.1446'>
   <UML:TaggedValue.dataValue>
    	Return the number of raw data bytes that can be loaded with the
raw telecommand data load service.
Since the size of the application data for this telecommand is fixed and equal
to six,
this method always returns the value of six.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4342'
        name = 'see'
        modelElement = 'S.1446'>
   <UML:TaggedValue.dataValue>
    	#setRawData
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4343'
        name = 'return'
        modelElement = 'S.1446'>
   <UML:TaggedValue.dataValue>
    	alwys returns the value 6
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4345'
        name = 'documentation'
        modelElement = 'S.1194'>
   <UML:TaggedValue.dataValue>
    	Base class for PUS telecommands to set up a memory dump either with base plus offset or absolute address.
This class encapsulates the commonalities for the following subtypes of PUS service number 6:&lt;ul&gt;
&lt;li&gt;Subtype 3: dump memory using base plus offset&lt;/li&gt;
&lt;li&gt;Subtype 5: dump memory using absolute addresses&lt;/li&gt;
&lt;/ul&gt;
This class defines an internal buffer to store the application data 
that define the telemetry packet. The maximum size of this buffer is
a configuration parameter that must be set at application initialization 
time (method &lt;code&gt;setNumberOfRawData&lt;/code&gt;). This and other internal data structured
are declared &lt;code&gt;protected&lt;/code&gt; in order to facilitate the implementation of
concrete subclasses.
&lt;p&gt;
During normal operation, configuration is performed using the &lt;i&gt;raw
data load service&lt;/i&gt;. Since in most cases the amount of data to be loaded
can be large, the more efficient (but less safe) implementation of this service
is used.
&lt;p&gt;
This telecommand implements a &lt;i&gt;validity check&lt;/i&gt; that returns &quot;telecommand
not valid&quot; in case an attempt is made to load more application data than fit
into the telecommand component.
&lt;p&gt;
No implementation for the execution action of this telecommand is provided. This
depends on whether the memory dump is of the &quot;absolute address&quot; or the &quot;base address
plus offset&quot; type and must therefore be provided by the concrete subclasses.
&lt;p&gt;
The PUS leaves some leeway in the definition of the structure of the application
data for memory dump telecommands. This implementation makes the same
assumptions as defined in the class comment of class &lt;code&gt;PUS_MemoryDump&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4346'
        name = 'author'
        modelElement = 'S.1194'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4347'
        name = 'version'
        modelElement = 'S.1194'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4348'
        name = 'documentation'
        modelElement = 'S.1447'>
   <UML:TaggedValue.dataValue>
    	The buffer where the application data are stored
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4349'
        name = 'documentation'
        modelElement = 'S.1448'>
   <UML:TaggedValue.dataValue>
    	The size in number of bytes of the &lt;code&gt;data&lt;/code&gt; buffer
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4350'
        name = 'documentation'
        modelElement = 'S.1449'>
   <UML:TaggedValue.dataValue>
    	The size in the number of bytes of the currently loaded application data
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4351'
        name = 'documentation'
        modelElement = 'S.1450'>
   <UML:TaggedValue.dataValue>
    	The telemetry manager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4352'
        name = 'documentation'
        modelElement = 'S.1451'>
   <UML:TaggedValue.dataValue>
    	Instantiate a memory dump PUS telecommand.
The values of the internal data structure that is used to hold the telecommand
application data is initialized to illegal values to signify that the telecommand
is not yet configured. The telecommand type is set to PUS_TYPE_MEM.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4353'
        name = 'documentation'
        modelElement = 'S.1452'>
   <UML:TaggedValue.dataValue>
    	Set the maximum size of the application data array. The maximum size is specified as the
maximum number of bytes of the application data. 
This is an initialization method that should only be called once.
A call to this method causes the internal data structures of the
telecommand to be allocated and initialized. Only positive values of the method argument
are legal.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4354'
        name = 'param'
        modelElement = 'S.1452'>
   <UML:TaggedValue.dataValue>
    	max the maximum size of the application data in number of bytes
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4357'
        name = 'documentation'
        modelElement = 'S.1453'>
   <UML:TaggedValue.dataValue>
    	Get the maximum size of the application data array.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4358'
        name = 'see'
        modelElement = 'S.1453'>
   <UML:TaggedValue.dataValue>
    	#setNumberOfRawData
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4359'
        name = 'return'
        modelElement = 'S.1453'>
   <UML:TaggedValue.dataValue>
    	the maximum size of the application data in number of bytes
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4361'
        name = 'documentation'
        modelElement = 'S.1454'>
   <UML:TaggedValue.dataValue>
    	Implementation of the raw data load service. 
This method copies the argument array into an internal array. The number of
bytes n in the argument array must be less than the maximum value set
with method &lt;code&gt;setNumberOfRawData&lt;/code&gt;. 
If an attempt is made to load a greater number of raw data, then the telecommand
is declared to be invalid with validity check code equal to VC_TOO_MANY_RAW_DATA.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4362'
        name = 'param'
        modelElement = 'S.1454'>
   <UML:TaggedValue.dataValue>
    	d the array holding the raw data
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4363'
        name = 'param'
        modelElement = 'S.1454'>
   <UML:TaggedValue.dataValue>
    	n the number of items in array d
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4367'
        name = 'documentation'
        modelElement = 'S.1455'>
   <UML:TaggedValue.dataValue>
    	Return the number of application data bytes that were loaded with the
last call to method &lt;code&gt;setRawData&lt;/code&gt;. The number returned by this
method is the same as the value of the argument n in the call to method
&lt;code&gt;setRawData&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4368'
        name = 'see'
        modelElement = 'S.1455'>
   <UML:TaggedValue.dataValue>
    	#setRawData
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4369'
        name = 'return'
        modelElement = 'S.1455'>
   <UML:TaggedValue.dataValue>
    	the number of application data bytes in the currently loaded packet
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4371'
        name = 'documentation'
        modelElement = 'S.1456'>
   <UML:TaggedValue.dataValue>
    	Load the telemetry manager.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4372'
        name = 'see'
        modelElement = 'S.1456'>
   <UML:TaggedValue.dataValue>
    	#doAction
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4373'
        name = 'param'
        modelElement = 'S.1456'>
   <UML:TaggedValue.dataValue>
    	pTmManager the PUS telemetry mode manager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4376'
        name = 'documentation'
        modelElement = 'S.1457'>
   <UML:TaggedValue.dataValue>
    	Getter method for the telemetry manager.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4377'
        name = 'see'
        modelElement = 'S.1457'>
   <UML:TaggedValue.dataValue>
    	#setTelemetryManager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4378'
        name = 'return'
        modelElement = 'S.1457'>
   <UML:TaggedValue.dataValue>
    	the telemetry manager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4380'
        name = 'documentation'
        modelElement = 'S.1458'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on the telecommand:
check that the maximum number of raw data has been set and that the
telemetry manager has been loaded.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4381'
        name = 'return'
        modelElement = 'S.1458'>
   <UML:TaggedValue.dataValue>
    	true if the telecommand is configured, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4383'
        name = 'documentation'
        modelElement = 'S.1198'>
   <UML:TaggedValue.dataValue>
    	PUS telecommand to implementing the PUS function management service (PUS service
number 8). This is an abstract class since the function implementation service
is application specific. This class defines a PUS telecommand with type equal to
8 and subtype equal to 1. No other attributes or services are added to those provided
by the &lt;code&gt;PUSTelecommand&lt;/code&gt; superclass. 
&lt;p&gt;
The function management service defines a mechanism for passing parameters to the
function that the telecommand manages. This mechanism is already covered by the
&lt;i&gt;raw data load&lt;/i&gt; mechanism defined by the &lt;code&gt;PUSTelecommand&lt;/code&gt; superclass.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4384'
        name = 'author'
        modelElement = 'S.1198'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4385'
        name = 'todo'
        modelElement = 'S.1198'>
   <UML:TaggedValue.dataValue>
    	Can a generic way be found to handle the execution of some action as a function
of the &quot;function ID field&quot; in the telecommand packet?
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4386'
        name = 'version'
        modelElement = 'S.1198'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4387'
        name = 'documentation'
        modelElement = 'S.1459'>
   <UML:TaggedValue.dataValue>
    	Instantiate a function management telecommand.
The telecommand type is set to PUS_TYPE_TC_FNC and the telecommand subtype is set 
to PUS_ST_TC_FNC_PER.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4388'
        name = 'see'
        modelElement = 'S.1459'>
   <UML:TaggedValue.dataValue>
    	PUS_TYPE_TC_FNC
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4389'
        name = 'see'
        modelElement = 'S.1459'>
   <UML:TaggedValue.dataValue>
    	PUS_ST_TC_FNC_PER
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4390'
        name = 'documentation'
        modelElement = 'S.1193'>
   <UML:TaggedValue.dataValue>
    	Base class for telecommands implementing the PUS memory load service requests
(PUS service type 6).
This class is intended as a base for telecommand classes implementing 
the following subtypes of PUS service number 6:&lt;ul&gt;
&lt;li&gt;Subtype 1: load memory using base plus offsets&lt;/li&gt;
&lt;li&gt;Subtype 2: load memory using absolute addresses&lt;/li&gt;
&lt;/ul&gt;
This class defines internal data structures where the data to be
loaded in memory can be stored and provides implementations for the operations 
to load the data in memory. 
The maximum size of the internal data structures is defined during the
application initialization phase. The following operations must be performed:&lt;ul&gt;
&lt;li&gt;Method &lt;code&gt;setMaxNumberOfBlocks&lt;/code&gt; must be called to set the maximum
number of memory blocks that can be managed by this telecommand&lt;/li&gt;
&lt;li&gt;Method &lt;code&gt;setMaxNumberData&lt;/code&gt; must be called to set the maximum size of
the internal buffer where the memory data are stored.&lt;/li&gt;
&lt;/ul&gt;
The data to be loaded in memory are defined dynamically (normally by the 
&lt;i&gt;telecommand loader&lt;/i&gt; component). The operations to define them are however left
undefined by this class as they differ for the case of a memory load that uses the base plus 
offset mechanism (service subtype 1) and for the case of a memory load that uses
absolute addresses (service subtype 2). In general, the definition of the memory
load data can be done using the &lt;i&gt;raw data load mechanism&lt;/i&gt;. 
&lt;p&gt;
Execution of this telecommand can have two outcomes. The telecommand
can either have a successful outcome (the return value of &lt;code&gt;doAction&lt;/code&gt;
is ACTION_SUCCESS) or it can fail (the return value of &lt;code&gt;doAction&lt;/code&gt;
is MEM_LOAD_PRE_CHECKSUM_FAILED or MEM_LOAD_POST_CHECKSUM_FAILED). A failure 
is declared if a checksum check has failed.
&lt;p&gt;
The PUS leaves some leeway in the definition of the structure of the application
data for memory load telecommands. This implementation makes the following 
assumptions: &lt;ul&gt;
&lt;li&gt;The number of blocks is always present.&lt;/li&gt;
&lt;li&gt;The checksum field is always present. If no checksum is required, the checksum
field should be set to zero.&lt;/li&gt;
&lt;li&gt;The memory data are treated as integers of syntactical type 
&lt;code&gt;TD_PUSMemData&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
The implementation of this class assumes type &lt;code&gt;TD_PUSMemData&lt;/code&gt; to have
size 1 (i.e. to be a &lt;code&gt;char&lt;/code&gt; or an &lt;code&gt;unsigned char&lt;/code&gt;). If this
were not the case, then run time exceptions will arise on some processors (notably
on the ERC32) due to alignment problems.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4391'
        name = 'author'
        modelElement = 'S.1193'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4392'
        name = 'version'
        modelElement = 'S.1193'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4393'
        name = 'documentation'
        modelElement = 'S.1216'>
   <UML:TaggedValue.dataValue>
    	This structure describes one memory load block. This structure is
declared &lt;code&gt;protected&lt;/code&gt; to allow the concrete implementations
of the PUS memory load service to have direct access to it.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4394'
        name = 'documentation'
        modelElement = 'S.1215'>
   <UML:TaggedValue.dataValue>
    	The i-th item of this array holds the descriptor for the i-th memory block
to be loaded
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4395'
        name = 'documentation'
        modelElement = 'S.1460'>
   <UML:TaggedValue.dataValue>
    	The maximum number of memory load blocks
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4396'
        name = 'documentation'
        modelElement = 'S.1461'>
   <UML:TaggedValue.dataValue>
    	The number of memory load blocks that have actually been loaded into the telecommand.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4397'
        name = 'documentation'
        modelElement = 'S.1462'>
   <UML:TaggedValue.dataValue>
    	This array holds all the memory load data for the currently defined blocks.
If the length of the first block is N, then the first N locations of this array
hold the memory load data for the first block. If the length of the second block is M,
then the locations between N and N+M-1, hold the data memory load data for the second
block. And so forth for the other blocks.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4398'
        name = 'documentation'
        modelElement = 'S.1463'>
   <UML:TaggedValue.dataValue>
    	The maximum number of memory load data (this is the size of the array &lt;code&gt;data&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4399'
        name = 'documentation'
        modelElement = 'S.1464'>
   <UML:TaggedValue.dataValue>
    	Load the memory load data in memory.
If the checksum is defined, then for each block the checksum of the data are computed
and compared with the value in the checksum field of the block. If the checksum check
fails, then the method returns immediately with an outcome of MEM_LOAD_PRE_CHECKSUM_FAILED.
A checksum is considered to be defined for a certain block if the checksum field
for the block has a non-zero value.
&lt;p/&gt;
If an acknowledgement of completion of execution is required (this is ascertained
by calling method &lt;code&gt;isCompletionAckRequired&lt;/code&gt;, then after the memory data
have been written, they are read back and the correctness of their checksum is verified.
If this is found to be wrong, then the method returns with an outcome of 
MEM_LOAD_POST_CHECKSUM_FAILED. Otherwise, an outcome of ACTION_SUCCESS is returned.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4400'
        name = 'return'
        modelElement = 'S.1464'>
   <UML:TaggedValue.dataValue>
    	the outcome of the telecommand (see method description)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4402'
        name = 'documentation'
        modelElement = 'S.1465'>
   <UML:TaggedValue.dataValue>
    	Instantiate a PUS memory load telecommand.
The values of the internal data structures that are used to hold the telecommand
application data are initialized to illegal values to signify that the telecommand
is not yet configured. The telecommand type is set to PUS_TYPE_MEM.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4403'
        name = 'documentation'
        modelElement = 'S.1466'>
   <UML:TaggedValue.dataValue>
    	Set the maximum number of memory blocks that can be managed by this telecommand.
This is an initialization method that should only be called once.
A call to this method causes the internal data structures where the blocks are
held to be allocated and initialized. Only positive values of the method argument
are legal.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4404'
        name = 'param'
        modelElement = 'S.1466'>
   <UML:TaggedValue.dataValue>
    	max the maximum number of blocks
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4407'
        name = 'documentation'
        modelElement = 'S.1467'>
   <UML:TaggedValue.dataValue>
    	Get the maximum number of memory blocks that can be managed by this telecommand.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4408'
        name = 'see'
        modelElement = 'S.1467'>
   <UML:TaggedValue.dataValue>
    	#setMaxNumberBlocks
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4409'
        name = 'return'
        modelElement = 'S.1467'>
   <UML:TaggedValue.dataValue>
    	the maximum number of blocks
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4411'
        name = 'documentation'
        modelElement = 'S.1468'>
   <UML:TaggedValue.dataValue>
    	Get the number of memory blocks that are managed by this telecommand.
This number is read from the application data loaded into the telecommand.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4412'
        name = 'return'
        modelElement = 'S.1468'>
   <UML:TaggedValue.dataValue>
    	the number of blocks
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4414'
        name = 'documentation'
        modelElement = 'S.1469'>
   <UML:TaggedValue.dataValue>
    	Set the maximum number of memory load data that can be managed by this telecommand.
This is an initialization method that should only be called once.
A call to this method causes the internal data structures where the blocks are
held to be allocated and initialized. Only positive values of the method argument
are legal.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4415'
        name = 'param'
        modelElement = 'S.1469'>
   <UML:TaggedValue.dataValue>
    	max the maximum number of memory data
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4418'
        name = 'documentation'
        modelElement = 'S.1470'>
   <UML:TaggedValue.dataValue>
    	Get the maximum number of memory data that can be managed by this telecommand.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4419'
        name = 'see'
        modelElement = 'S.1470'>
   <UML:TaggedValue.dataValue>
    	#setMaxNumberData
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4420'
        name = 'return'
        modelElement = 'S.1470'>
   <UML:TaggedValue.dataValue>
    	the maximum number of memory data
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4422'
        name = 'documentation'
        modelElement = 'S.1471'>
   <UML:TaggedValue.dataValue>
    	Get the start address of the i-th currently loaded block.
The block index i must lie in the interval [0,N-1] where N is the number
of currently loaded blocks (the value returned by method 
&lt;code&gt;getNumberBlocks&lt;/code&gt;). If this condition is not satisfied,
the return value is unpredictable.
This is an unsafe method because it returns a pointer. It should only
be used during testing. It should never be called by an application.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4423'
        name = 'param'
        modelElement = 'S.1471'>
   <UML:TaggedValue.dataValue>
    	i the block index
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4424'
        name = 'return'
        modelElement = 'S.1471'>
   <UML:TaggedValue.dataValue>
    	the start address of the i-th currently loaded block
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4427'
        name = 'documentation'
        modelElement = 'S.1472'>
   <UML:TaggedValue.dataValue>
    	Get the length of the i-th currently loaded block.
The block index i must lie in the interval [0,N-1] where N is the number
of currently loaded blocks (the value returned by method 
&lt;code&gt;getNumberBlocks&lt;/code&gt;). If this condition is not satisfied,
the return value is unpredictable.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4428'
        name = 'param'
        modelElement = 'S.1472'>
   <UML:TaggedValue.dataValue>
    	i the block index
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4429'
        name = 'return'
        modelElement = 'S.1472'>
   <UML:TaggedValue.dataValue>
    	the length of the i-th currently loaded block
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4432'
        name = 'documentation'
        modelElement = 'S.1473'>
   <UML:TaggedValue.dataValue>
    	Get the checksum of the i-th currently loaded block.
The block index i must lie in the interval [0,N-1] where N is the number
of currently loaded blocks (the value returned by method 
&lt;code&gt;getNumberBlocks&lt;/code&gt;). If this condition is not satisfied,
the return value is unpredictable.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4433'
        name = 'param'
        modelElement = 'S.1473'>
   <UML:TaggedValue.dataValue>
    	i the block index
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4434'
        name = 'return'
        modelElement = 'S.1473'>
   <UML:TaggedValue.dataValue>
    	the length of the i-th currently loaded block
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4437'
        name = 'documentation'
        modelElement = 'S.1474'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on the telecommand:
check that the maximum number of blocks and the maximum number of data have been
defind.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4438'
        name = 'return'
        modelElement = 'S.1474'>
   <UML:TaggedValue.dataValue>
    	true if the telecommand is configured, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4441'
        name = 'documentation'
        modelElement = 'S.1475'>
   <UML:TaggedValue.dataValue>
    	Start address of a memory load block
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4442'
        name = 'documentation'
        modelElement = 'S.1476'>
   <UML:TaggedValue.dataValue>
    	The number of SAUs to be loaded
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4443'
        name = 'documentation'
        modelElement = 'S.1477'>
   <UML:TaggedValue.dataValue>
    	The checksum of the block
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4444'
        name = 'documentation'
        modelElement = 'S.1207'>
   <UML:TaggedValue.dataValue>
    	Base class from which all PUS telecommand classes are derived.
This class implements the attributes defined by the more
generic &lt;code&gt;Telecommand&lt;/code&gt; superclass in a manner that ensures compatibility with the
Packet Utilization Standard (PUS). Only the PUS attributes that are relevant to an
application process are modelled by this class.
&lt;p&gt;
The mapping between the attributes defined by the &lt;code&gt;Telecommand&lt;/code&gt; superclass
and the attributes mandated by the PUS is as follows:&lt;ul&gt;
&lt;li&gt;The &lt;i&gt;packet ID&lt;/i&gt; PUS attribute has a fixed value for all telecommands in the same
application process and it is therefore implemented as a static attribute.&lt;/li&gt;
&lt;li&gt;The &lt;i&gt;packet sequence control&lt;/i&gt; PUS attribute is mapped to the
&lt;i&gt;telecommand identifier&lt;/i&gt; attribute of the &lt;code&gt;Telecommand&lt;/code&gt; superclass.&lt;/li&gt;
&lt;li&gt;The &lt;i&gt;acknowledge field&lt;/i&gt; PUS attribute is mapped to the
&lt;i&gt;acknowledge level&lt;/i&gt; attribute of the &lt;code&gt;Telecommand&lt;/code&gt; superclass.&lt;/li&gt;
&lt;li&gt;The &lt;i&gt;service type&lt;/i&gt; PUS attributes is mapped to the
&lt;i&gt;telecommand type&lt;/i&gt; attribute of the &lt;code&gt;Telecommand&lt;/code&gt; superclass.&lt;/li&gt;
&lt;li&gt;The &lt;i&gt;service subtype&lt;/i&gt; PUS attributes is mapped to the
&lt;i&gt;telecommand subtype&lt;/i&gt; attribute of the &lt;code&gt;Telecommand&lt;/code&gt; superclass.&lt;/li&gt;
&lt;li&gt;The &lt;i&gt;source&lt;/i&gt; PUS attribute is mapped to the
&lt;i&gt;telecommand source&lt;/i&gt; attribute of the &lt;code&gt;Telecommand&lt;/code&gt; superclass.&lt;/li&gt;
&lt;/ul&gt;
The mapping of the PUS acknowledge flags onto the acknowledge level attribute is done in
a manner that is completely transparent to the clients of this class.
&lt;p&gt;
This class defines a default structure of the &lt;i&gt;telecommand validity check&lt;/i&gt;. 
The class defines an internal variable to hold the value of the validity check 
code and initializes it to zero. A protected method is offered to set the value
of the validity check code. The vallidty check returns &quot;telecommand is valid&quot; if the
value of the validity check code is equal to zero. The idea is that validity checking 
in a PUS telecommand is done when its application data are loaded (using the
&lt;i&gt;raw data load service&lt;/i&gt;). During the load operation, the telecommand interprets 
the data and checks their validity. If the data are found to be invalid, then
the validity check code is set to a non-zero value.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4445'
        name = 'author'
        modelElement = 'S.1207'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4446'
        name = 'version'
        modelElement = 'S.1207'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4447'
        name = 'ingroup'
        modelElement = 'S.1207'>
   <UML:TaggedValue.dataValue>
    	PUS
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4448'
        name = 'ingroup'
        modelElement = 'S.1207'>
   <UML:TaggedValue.dataValue>
    	Telecommand
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4449'
        name = 'documentation'
        modelElement = 'S.1485'>
   <UML:TaggedValue.dataValue>
    	Setter method for the validity check code. This method would normally be called
by the data load service (method &lt;code&gt;setRawData&lt;/code&gt;) when it 
detects an inconsistency or some other
problem in the data being loaded. The value of the code indicates the
type of problem.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4450'
        name = 'param'
        modelElement = 'S.1485'>
   <UML:TaggedValue.dataValue>
    	valCheckCode the validity check code
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4453'
        name = 'documentation'
        modelElement = 'S.1486'>
   <UML:TaggedValue.dataValue>
    	Instantiate a PUS telecommand.
The telecommand attributes are set as follows: &lt;ul&gt;
&lt;li&gt;The telecommand identifier is set to a non-legal value to indicate
that the telecommand component is not yet configured&lt;/li&gt;
&lt;li&gt;The telecommand type is set to a non-legal value to indicate
that the telecommand component is not yet configured&lt;/li&gt;
&lt;li&gt;The telecommand subtype is set to a non-legal value to indicate
that the telecommand component is not yet configured&lt;/li&gt;
&lt;li&gt;The telecommand source is set to a non-legal value to indicate
that the telecommand component is not yet configured&lt;/li&gt;
&lt;li&gt;The acknowledge flags are set to &quot;false&quot; (no acknowledge is required)&lt;/li&gt;
&lt;li&gt;The validity check code is initialized to zero (telecommand is valid)&lt;/li&gt;
&lt;/ul&gt;
Note that the packet identifier (a static attribute) is initialized to an illegal value
to indicate that the component is not yet initialized.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4454'
        name = 'documentation'
        modelElement = 'S.1487'>
   <UML:TaggedValue.dataValue>
    	Execute the validity check on the telecommand.
This method returns &quot;telecommand valid&quot; if the validity check code
is equal to zero. The validity check code is computed in method 
&lt;code&gt;setRawData&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4455'
        name = 'see'
        modelElement = 'S.1487'>
   <UML:TaggedValue.dataValue>
    	#setValidityCheckCode
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4456'
        name = 'return'
        modelElement = 'S.1487'>
   <UML:TaggedValue.dataValue>
    	true if the telecommand is valid, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4458'
        name = 'documentation'
        modelElement = 'S.1488'>
   <UML:TaggedValue.dataValue>
    	Return the validity check code for the telecommand.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4459'
        name = 'see'
        modelElement = 'S.1488'>
   <UML:TaggedValue.dataValue>
    	#setValidityCheckCode
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4460'
        name = 'return'
        modelElement = 'S.1488'>
   <UML:TaggedValue.dataValue>
    	the validity check code
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4462'
        name = 'documentation'
        modelElement = 'S.1489'>
   <UML:TaggedValue.dataValue>
    	Getter method for the telecommand packet identifier. The telecommand packet
identifier is assumed to be fixed for all telecommands in the same
application process. According to the PUS, the packet identifier consists
of the following four fields: &lt;ul&gt;
&lt;li&gt;The version number: this field is fixed and equal to 0&lt;/li&gt;
&lt;li&gt;The type: this field is fixed and equal to 1&lt;/li&gt;
&lt;li&gt;The data field header: this field is fixed and equal to 1 (indicating
that a telecommand packet always has a secondary header)&lt;/li&gt;
&lt;li&gt;The application ID: this field is fixed within the application process and
it is equal to the application identifier&lt;/li&gt;
&lt;/ul&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4463'
        name = 'see'
        modelElement = 'S.1489'>
   <UML:TaggedValue.dataValue>
    	#setApplicationId
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4464'
        name = 'return'
        modelElement = 'S.1489'>
   <UML:TaggedValue.dataValue>
    	the packet identifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4466'
        name = 'documentation'
        modelElement = 'S.1490'>
   <UML:TaggedValue.dataValue>
    	Setter method for the application identifier (APID). The APID is used to construct
the telecommand packet identifier. The APID is placed in the 11 least-significant bits
of the PUS packet identifier. A pseudo-code implementation for this method is as
follows: &lt;pre&gt;
packetId = 2**12+2**11;     // set the fixed part of the packet ID
packetId = packetId + apid; // set the APID part of the packet ID &lt;/pre&gt;
The APID should be smaller than 2**11.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4467'
        name = 'see'
        modelElement = 'S.1490'>
   <UML:TaggedValue.dataValue>
    	getPacketId
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4468'
        name = 'param'
        modelElement = 'S.1490'>
   <UML:TaggedValue.dataValue>
    	apid the identifier of the application for which the telecommand is intended
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4471'
        name = 'documentation'
        modelElement = 'S.1491'>
   <UML:TaggedValue.dataValue>
    	Getter method for the telecommand identifier. In this class, the
telecommand identifier is identified with the &lt;i&gt;packet sequence
control&lt;/i&gt; PUS attribute.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4472'
        name = 'return'
        modelElement = 'S.1491'>
   <UML:TaggedValue.dataValue>
    	the telecommand identifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4474'
        name = 'documentation'
        modelElement = 'S.1492'>
   <UML:TaggedValue.dataValue>
    	Setter method for the telecommand identifier.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4475'
        name = 'see'
        modelElement = 'S.1492'>
   <UML:TaggedValue.dataValue>
    	#getTelecommandId
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4476'
        name = 'param'
        modelElement = 'S.1492'>
   <UML:TaggedValue.dataValue>
    	tcIdentifier the telecommand identifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4479'
        name = 'documentation'
        modelElement = 'S.1493'>
   <UML:TaggedValue.dataValue>
    	Getter method for the telecommand type. In this class, the
telecommand type is identifed with the &lt;i&gt;telecommand service
type&lt;/i&gt; PUS attribute.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4480'
        name = 'return'
        modelElement = 'S.1493'>
   <UML:TaggedValue.dataValue>
    	the telecommand type
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4482'
        name = 'documentation'
        modelElement = 'S.1494'>
   <UML:TaggedValue.dataValue>
    	Setter method for the telecommand type.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4483'
        name = 'see'
        modelElement = 'S.1494'>
   <UML:TaggedValue.dataValue>
    	#getType
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4484'
        name = 'param'
        modelElement = 'S.1494'>
   <UML:TaggedValue.dataValue>
    	tcType the telecommand type
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4487'
        name = 'documentation'
        modelElement = 'S.1495'>
   <UML:TaggedValue.dataValue>
    	Getter method for the telecommand type. In this class, the
telecommand subtype is identifed with the &lt;i&gt;telecommand service
subtype&lt;/i&gt; PUS attribute.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4488'
        name = 'return'
        modelElement = 'S.1495'>
   <UML:TaggedValue.dataValue>
    	the telecommand subtype
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4490'
        name = 'documentation'
        modelElement = 'S.1496'>
   <UML:TaggedValue.dataValue>
    	Setter method for the telecommand subtype.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4491'
        name = 'see'
        modelElement = 'S.1496'>
   <UML:TaggedValue.dataValue>
    	#getSubType
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4492'
        name = 'param'
        modelElement = 'S.1496'>
   <UML:TaggedValue.dataValue>
    	tcSubType the telecommand subtype
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4495'
        name = 'documentation'
        modelElement = 'S.1497'>
   <UML:TaggedValue.dataValue>
    	Getter method for the telecommand source.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4496'
        name = 'return'
        modelElement = 'S.1497'>
   <UML:TaggedValue.dataValue>
    	the telecommand source
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4498'
        name = 'documentation'
        modelElement = 'S.1498'>
   <UML:TaggedValue.dataValue>
    	Setter method for the telecommand source.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4499'
        name = 'see'
        modelElement = 'S.1498'>
   <UML:TaggedValue.dataValue>
    	#getSource
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4500'
        name = 'param'
        modelElement = 'S.1498'>
   <UML:TaggedValue.dataValue>
    	tcSource the telecommand source
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4503'
        name = 'documentation'
        modelElement = 'S.1499'>
   <UML:TaggedValue.dataValue>
    	Set the value of the acknowledge level for this telecommand.
The acknowledge level implements the PUS acknowledge field as
follows: &lt;ul&gt;
&lt;li&gt;Bit 0 represents the acceptance acknowledge flag&lt;/li&gt;
&lt;li&gt;Bit 1 represents the start acknowledge flag&lt;/li&gt;
&lt;li&gt;Bit 2 represents the progress acknowledge flag&lt;/li&gt;
&lt;li&gt;Bit 3 represents the completion acknowledge flag&lt;/li&gt;
&lt;/ul&gt;
Bit 0 is the least-significant bit.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4504'
        name = 'see'
        modelElement = 'S.1499'>
   <UML:TaggedValue.dataValue>
    	#getAcknowledgeLevel
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4505'
        name = 'param'
        modelElement = 'S.1499'>
   <UML:TaggedValue.dataValue>
    	ackLevel the new value of the acknowledge level attribute
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4508'
        name = 'documentation'
        modelElement = 'S.1500'>
   <UML:TaggedValue.dataValue>
    	Return the value of the acknowledge level attribute.
Note that methods are also provided to return the values of the
individual PUS acknowledge flags.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4509'
        name = 'see'
        modelElement = 'S.1500'>
   <UML:TaggedValue.dataValue>
    	#setAcknowledgeLevel
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4510'
        name = 'return'
        modelElement = 'S.1500'>
   <UML:TaggedValue.dataValue>
    	the value of the acknowledge level attribute
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4512'
        name = 'documentation'
        modelElement = 'S.1501'>
   <UML:TaggedValue.dataValue>
    	Return the true if acknowledgement of telecommand acceptance is
required. The return value is read from the acknowledge level attribute.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4513'
        name = 'see'
        modelElement = 'S.1501'>
   <UML:TaggedValue.dataValue>
    	#setAcknowledgeLevel
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4514'
        name = 'return'
        modelElement = 'S.1501'>
   <UML:TaggedValue.dataValue>
    	the value of the acceptance acknowledge flag
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4516'
        name = 'documentation'
        modelElement = 'S.1502'>
   <UML:TaggedValue.dataValue>
    	Return the true if acknowledgement of telecommand execution start is
required. The return value is read from the acknowledge level attribute.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4517'
        name = 'see'
        modelElement = 'S.1502'>
   <UML:TaggedValue.dataValue>
    	#setAcknowledgeLevel
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4518'
        name = 'return'
        modelElement = 'S.1502'>
   <UML:TaggedValue.dataValue>
    	the value of the start acknowledge flag
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4520'
        name = 'documentation'
        modelElement = 'S.1503'>
   <UML:TaggedValue.dataValue>
    	Return the true if acknowledgement of telecommand execution progress is
required. The return value is read from the acknowledge level attribute.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4521'
        name = 'see'
        modelElement = 'S.1503'>
   <UML:TaggedValue.dataValue>
    	#setAcknowledgeLevel
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4522'
        name = 'return'
        modelElement = 'S.1503'>
   <UML:TaggedValue.dataValue>
    	the value of the progress acknowledge flag
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4524'
        name = 'documentation'
        modelElement = 'S.1504'>
   <UML:TaggedValue.dataValue>
    	Return the true if acknowledgement of telecommand execution completion is
required. The return value is read from the acknowledge level attribute.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4525'
        name = 'see'
        modelElement = 'S.1504'>
   <UML:TaggedValue.dataValue>
    	#setAcknowledgeLevel
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4526'
        name = 'return'
        modelElement = 'S.1504'>
   <UML:TaggedValue.dataValue>
    	the value of the completion acknowledge flag
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4528'
        name = 'documentation'
        modelElement = 'S.1505'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on the telecommand:
verify that the telecommand identifier, telecommand type, the
telecommand subtype, the telecommand source, and the packet identifier have a legal value.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4529'
        name = 'return'
        modelElement = 'S.1505'>
   <UML:TaggedValue.dataValue>
    	true if the component is configured, false otherwise.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4531'
        name = 'documentation'
        modelElement = 'S.1199'>
   <UML:TaggedValue.dataValue>
    	Base class from which all telecommand classes are derived.
This is an abstract class. Concrete telecommands are obtained by deriving
this class.
&lt;p&gt;
A telecommand is a form of &lt;i&gt;punctual action&lt;/i&gt;.
Telecommands add to the following attributes to those they inherit
from their superclass:&lt;ul&gt;
&lt;li&gt;A &lt;i&gt;time tag&lt;/i&gt;: the time when the telecommand should be executed.
If the time tag is equal to zero, then the telecommand should be executed
immediately. Negative values of the time tag indicate a non-configured or
or otherwise invalid telecommand.&lt;/li&gt;
&lt;li&gt;A &lt;i&gt;telecommand identifier&lt;/i&gt;: an integer that uniquely identifies the
telecommand. &lt;/li&gt;
&lt;li&gt;A &lt;i&gt;telecommand source&lt;/i&gt;: an integer that uniquely identifies the
sender of the telecommand. &lt;/li&gt;
&lt;li&gt;A &lt;i&gt;telecommand type&lt;/i&gt;: an integer that identifies the type of
telecommand. &lt;/li&gt;
&lt;li&gt;A &lt;i&gt;telecommand subtype&lt;/i&gt;: an integer that identifies the subtype of
telecommand. This attribute is useful when the type attribute does not provide
sufficient granularity to represent the various categories of telecommands.&lt;/li&gt;
&lt;li&gt;A &lt;i&gt;validity check code&lt;/i&gt;: a read-only integer that conveys information about
the failure of the validity check (see below). &lt;/li&gt;
&lt;li&gt;An &lt;i&gt;execution check code&lt;/i&gt;: a read-only integer that conveys information about
the failure of the execution check (see below). &lt;/li&gt;
&lt;li&gt;An &lt;i&gt;acknowledge level&lt;/i&gt;: an integer that defines the level of acknowledgement
that the telecommand sender requires for the telecommand (e.g. acknowledgement upon
acceptance of the telecommand, acknowledgement upon execution start, acknowledgement
upon execution termination, etc).&lt;/li&gt;
&lt;li&gt;An &lt;i&gt;in use flag&lt;/i&gt;: a toggle attribute that can have two values:
&quot;telecommand is in use&quot; and &quot;telecommand is not in use&quot;. This attribute
can be useful because telecommand components
are normally created dynamically and therefore their resources must be
managed dynamically. The &quot;in use&quot; attribute can then be used to discriminate
between telecommands that are being used (and whose resources are therefore
to be considered allocated) and telecommands that are not being used (and
whose resources can therefore be reclaimed and used to construct other
telecommand components). In the OBS Framework, the &quot;in use&quot; attribute
would typically be used by the &lt;i&gt;telecommand loader&lt;/i&gt;.&lt;/li&gt;
&lt;/ul&gt;
With the exception of the &quot;in use flag&quot;, all telecommand attributes are
conceptually read-only
attributes. However, since telecommand objects may have to be dynamically
configured by the &lt;i&gt;telecommand loader&lt;/i&gt;, setter methods are provided
to dynamically set their values.
&lt;p&gt;
Telecommands implement the &lt;i&gt;raw data load service&lt;/i&gt;. This is
intended to facilitate the configuration
of a telecommand by the &lt;i&gt;telecommand loader&lt;/i&gt;. The usage scenario
for this service is a situation where the telecommand loader receives
the raw telecommand as a list of bytes. The list of bytes contain
the configuration data for the telecommand component. The raw data
load service allows the telecommand loader to load these bytes into the
telecommand loader in an &quot;anonymous manner&quot; without having to know
anything about their meaning for the telecommand component.
The raw data load service is an optional service that only some
concrete telecommand components will choose to implement. The choice to
implement it depends on the mutual relationship between the concrete
telecommand loader and the concrete telecommand components.
Two alternative implementations for the raw data load service are
defined. The first one is efficient but potentially unsafe (it does
not comply with project-specific coding rule PR3.3). The second one is
safe (it complies with all coding rules) but less efficient (it requires
a virtual method call for each byte that is loaded in the telecommand
component).
&lt;p&gt;
Telecommands can perform two checks: a &lt;i&gt;validity check&lt;/i&gt; and an
&lt;i&gt;execution check&lt;/i&gt;.
The validity check checks the internal validity of the telecommand
attributes.
It should normally be executed immediately after the telecommand is loaded to
verify its formal correctness.
The execution check should be performed just before the telecommand is
executed and should
verify whether conditions for the safe execution of the telecommand are
satisfied.
&lt;p&gt;
This class provides a general interface that can model telecommand concepts
of varying complexity but it only provides a minimal implementation.
Thus, of the attributes it defines, only the time tag and the &quot;in use&quot; flag
are implemented as true read/write attributes. The other attributes are
implemented as fixed constants. Applications are free to provide
subclasses that implement a larger subset of the attributes
defined in this class.
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4532'
        name = 'author'
        modelElement = 'S.1199'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4533'
        name = 'todo'
        modelElement = 'S.1199'>
   <UML:TaggedValue.dataValue>
    	The possibility should be considered of making Telecommand a subclass
of ConditionalPunctualAction. This would make sense because the Telecommand
class contains a conditional execution check. However, this change would
require delicate changes to the CC_TelecommandManager and CriticalTelecommand
classes (at the least). For the time being, it seems wiser to leave things
as they are. The advantage of the current solution is that it gives greater
control to the telecommand manager over the execution of the telecommand
and it makes it easier to implement &quot;special&quot; types of telecommands (such
as, for instance, critical telecommands).
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4534'
        name = 'todo'
        modelElement = 'S.1199'>
   <UML:TaggedValue.dataValue>
    	should new versions of method setRawData that take as argument unsigned short
and unsigned int be added? This would speed up execution when a large number of data have
to be loaded but it might make implementation of the methods in concrete subclasses
more complex.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4535'
        name = 'see'
        modelElement = 'S.1199'>
   <UML:TaggedValue.dataValue>
    	TelecommandLoader
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4536'
        name = 'see'
        modelElement = 'S.1199'>
   <UML:TaggedValue.dataValue>
    	CC_TelecommandManager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4537'
        name = 'version'
        modelElement = 'S.1199'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4538'
        name = 'ingroup'
        modelElement = 'S.1199'>
   <UML:TaggedValue.dataValue>
    	Telecommand
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4539'
        name = 'documentation'
        modelElement = 'S.1508'>
   <UML:TaggedValue.dataValue>
    	Instantiate a telecommand.
The telecommand attributes are set. The &quot;in use&quot; flag is set to
&quot;telecommand is not in use&quot; and the time tag is initialized to an
illegal value to signify that the component is not yet configured.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4540'
        name = 'documentation'
        modelElement = 'S.1509'>
   <UML:TaggedValue.dataValue>
    	Execute the validity check on the telecommand.
This class provides a default implementation that returns &quot;telecommand is
valid&quot;.
Subclasses may introduce more complex validity checks (e.g. checksum checks).
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4541'
        name = 'see'
        modelElement = 'S.1509'>
   <UML:TaggedValue.dataValue>
    	CC_TelecommandManager#activate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4542'
        name = 'return'
        modelElement = 'S.1509'>
   <UML:TaggedValue.dataValue>
    	true if the telecommand is valid, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4544'
        name = 'documentation'
        modelElement = 'S.1510'>
   <UML:TaggedValue.dataValue>
    	Return the validity check code for the telecommand.
The validity check code allows a telecommand to make information available about
the reasons for the failure of the validity check. The return value of this
method is only valid if the validity check has returned &quot;telecommand not
valid&quot; (ie. if method &lt;code&gt;isValid&lt;/code&gt; has returned false). This class
provides a default implementation that returns zero.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4545'
        name = 'see'
        modelElement = 'S.1510'>
   <UML:TaggedValue.dataValue>
    	#isValid
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4546'
        name = 'return'
        modelElement = 'S.1510'>
   <UML:TaggedValue.dataValue>
    	the validity check code
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4548'
        name = 'documentation'
        modelElement = 'S.1511'>
   <UML:TaggedValue.dataValue>
    	Perform the execution check on the telecommand.
This class provides a default implementation that always return &quot;telecommand
can execute&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4549'
        name = 'see'
        modelElement = 'S.1511'>
   <UML:TaggedValue.dataValue>
    	CC_TelecommandManager#activate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4550'
        name = 'return'
        modelElement = 'S.1511'>
   <UML:TaggedValue.dataValue>
    	true if the telecommand can safely execute, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4552'
        name = 'documentation'
        modelElement = 'S.1512'>
   <UML:TaggedValue.dataValue>
    	Return the execution check code for the telecommand.
The execution check code allows a telecommand to make information available about
the reasons for the failure of the execution check. The return value of this
method is only valid if the execution check has returned &quot;telecommand cannot
execute&quot; (ie. if method &lt;code&gt;canExecute&lt;/code&gt; has returned false). This class
provides a default implementation that returns zero.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4553'
        name = 'see'
        modelElement = 'S.1512'>
   <UML:TaggedValue.dataValue>
    	#isValid
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4554'
        name = 'return'
        modelElement = 'S.1512'>
   <UML:TaggedValue.dataValue>
    	the validity check code
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4556'
        name = 'documentation'
        modelElement = 'S.1513'>
   <UML:TaggedValue.dataValue>
    	Getter method for the telecommand identifier. This class implements the
the telecommand identifier to coincide with the instance identifier.
Note that this assumes that the type of the instance identifier
(TD_InstanceId) is assignment-compatible with the type of the 
telecommand identifier (TD_TelecommandId).
A pseudo-code implementation of this method therefore is:&lt;pre&gt;
return getInstanceId();&lt;/pre&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4557'
        name = 'return'
        modelElement = 'S.1513'>
   <UML:TaggedValue.dataValue>
    	the telecommand identifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4559'
        name = 'documentation'
        modelElement = 'S.1514'>
   <UML:TaggedValue.dataValue>
    	Setter method for the telecommand identifier. Since this class
identifies the telecommand identifier with the instance identifier
(see &lt;code&gt;CC_RootObject&lt;/code&gt;), this method is implemented as
a dummy method that returns without taking any action.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4560'
        name = 'see'
        modelElement = 'S.1514'>
   <UML:TaggedValue.dataValue>
    	#getTelecommandId
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4561'
        name = 'param'
        modelElement = 'S.1514'>
   <UML:TaggedValue.dataValue>
    	tcIdentifier the telecommand identifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4564'
        name = 'documentation'
        modelElement = 'S.1515'>
   <UML:TaggedValue.dataValue>
    	Getter method for the telecommand type. This class implements 
the telecommand type to coincide with the least significant
byte of the class identifier.
A pseudo-code implementation of this method therefore is:&lt;pre&gt;
return (TD_TelecommandType)(getClassId() mod 256);&lt;/pre&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4565'
        name = 'return'
        modelElement = 'S.1515'>
   <UML:TaggedValue.dataValue>
    	the telecommand type
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4567'
        name = 'documentation'
        modelElement = 'S.1516'>
   <UML:TaggedValue.dataValue>
    	Setter method for the telecommand type. Since this class
identifies the telecommand type with the class identifier
(see &lt;code&gt;CC_RootObject&lt;/code&gt;), this method is implemented as
a dummy method that returns without taking any action.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4568'
        name = 'see'
        modelElement = 'S.1516'>
   <UML:TaggedValue.dataValue>
    	#getType
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4569'
        name = 'param'
        modelElement = 'S.1516'>
   <UML:TaggedValue.dataValue>
    	tcType the telecommand type
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4572'
        name = 'documentation'
        modelElement = 'S.1517'>
   <UML:TaggedValue.dataValue>
    	Getter method for the telecommand sub-type. This class does not model
the telecommand sub-type. This method always returns zero.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4573'
        name = 'return'
        modelElement = 'S.1517'>
   <UML:TaggedValue.dataValue>
    	the telecommand sub-type
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4575'
        name = 'documentation'
        modelElement = 'S.1518'>
   <UML:TaggedValue.dataValue>
    	Setter method for the telecommand sub-type. Since this class
does not model the telecommand sub-type, this method is implemented as
a dummy method that returns without taking any action.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4576'
        name = 'see'
        modelElement = 'S.1518'>
   <UML:TaggedValue.dataValue>
    	#getTelecommandsubType
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4577'
        name = 'param'
        modelElement = 'S.1518'>
   <UML:TaggedValue.dataValue>
    	tcSubType the telecommand sub-type
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4580'
        name = 'documentation'
        modelElement = 'S.1519'>
   <UML:TaggedValue.dataValue>
    	Getter method for the telecommand source. This class does not model
the telecommand source. This method always returns zero.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4581'
        name = 'return'
        modelElement = 'S.1519'>
   <UML:TaggedValue.dataValue>
    	the telecommand source
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4583'
        name = 'documentation'
        modelElement = 'S.1520'>
   <UML:TaggedValue.dataValue>
    	Setter method for the telecommand source. Since this class
does not model the telecommand source, this method is implemented as
a dummy method that returns without taking any action.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4584'
        name = 'see'
        modelElement = 'S.1520'>
   <UML:TaggedValue.dataValue>
    	#getSource
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4585'
        name = 'param'
        modelElement = 'S.1520'>
   <UML:TaggedValue.dataValue>
    	tcSource the telecommand source
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4588'
        name = 'documentation'
        modelElement = 'S.1521'>
   <UML:TaggedValue.dataValue>
    	Getter method for the telecommand time tag.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4589'
        name = 'return'
        modelElement = 'S.1521'>
   <UML:TaggedValue.dataValue>
    	the telecommand time tag
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4591'
        name = 'documentation'
        modelElement = 'S.1522'>
   <UML:TaggedValue.dataValue>
    	Setter method for the telecommand time tag.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4592'
        name = 'see'
        modelElement = 'S.1522'>
   <UML:TaggedValue.dataValue>
    	TelecommandLoader
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4593'
        name = 'param'
        modelElement = 'S.1522'>
   <UML:TaggedValue.dataValue>
    	timeTag the telecommand time tag
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4596'
        name = 'documentation'
        modelElement = 'S.1523'>
   <UML:TaggedValue.dataValue>
    	Implementation of the raw data load service. This method would normally
be called by a telecommand loader to load the i-th byte into the
telecommand component. The telecommand component uses the data that it
receives from the telecommand loader to configure its internal data
structures. The index i should lie in an interval [0,N-1] where N is
the return value of method &lt;code&gt;getNumberOfRawData&lt;/code&gt;.
This implementation of the raw data load service is safe (unlike
its alternative &lt;code&gt;setRawData(unsigned char*, unsigned int)&lt;/code&gt;,
it does not give access to the internal data of the
caller) but can be inefficient because it requires the caller to pass
the telecommand configuration bytes one by one through dedicated calls
to a virtual method.
&lt;p&gt;
This class provides a default implementation that does nothing and
should never be called.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4597'
        name = 'see'
        modelElement = 'S.1523'>
   <UML:TaggedValue.dataValue>
    	getNumberOfRawData
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4598'
        name = 'param'
        modelElement = 'S.1523'>
   <UML:TaggedValue.dataValue>
    	i the index of the raw telecommand data
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4599'
        name = 'param'
        modelElement = 'S.1523'>
   <UML:TaggedValue.dataValue>
    	d the raw data
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4603'
        name = 'documentation'
        modelElement = 'S.1524'>
   <UML:TaggedValue.dataValue>
    	Return the number of raw data bytes that can be loaded with the
raw telecommand data load service &lt;code&gt;setRawData(unsigned int, 
unsigned char)&lt;/code&gt;.
This class provides a default implementation that returns zero.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4604'
        name = 'see'
        modelElement = 'S.1524'>
   <UML:TaggedValue.dataValue>
    	#setRawData
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4605'
        name = 'return'
        modelElement = 'S.1524'>
   <UML:TaggedValue.dataValue>
    	the number of raw data bytes to be loaded with the raw
data load service
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4607'
        name = 'documentation'
        modelElement = 'S.1525'>
   <UML:TaggedValue.dataValue>
    	Implementation of the raw data load service. This method would normally
be called by a telecommand loader to load the configuration data for the
telecommand as s single array of bytes. The telecommand component uses the 
data in the array to configure its internal data
structures. 
This implementation of the raw data load service is efficient (unlike
its alternative &lt;code&gt;setRawData(unsigned int, unsigned char)&lt;/code&gt;)
but is unsafe because it forces the caller to give access to its interal
data structures to the telecommand component.
&lt;p&gt;
This class provides a default implementation that does nothing and
should never be called.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4608'
        name = 'param'
        modelElement = 'S.1525'>
   <UML:TaggedValue.dataValue>
    	i the number data in the d array
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4609'
        name = 'param'
        modelElement = 'S.1525'>
   <UML:TaggedValue.dataValue>
    	d the array holding the raw data
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4613'
        name = 'documentation'
        modelElement = 'S.1526'>
   <UML:TaggedValue.dataValue>
    	Set the value of the &quot;in use&quot; attribute.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4614'
        name = 'see'
        modelElement = 'S.1526'>
   <UML:TaggedValue.dataValue>
    	#isInUse
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4615'
        name = 'param'
        modelElement = 'S.1526'>
   <UML:TaggedValue.dataValue>
    	newInUse the new value of the in use attribute
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4618'
        name = 'documentation'
        modelElement = 'S.1527'>
   <UML:TaggedValue.dataValue>
    	Return the value of the &quot;in use&quot; attribute. If the method returns true, then
the telecommand is in use, otherwise it is not in use.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4619'
        name = 'see'
        modelElement = 'S.1527'>
   <UML:TaggedValue.dataValue>
    	#setInUse
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4620'
        name = 'return'
        modelElement = 'S.1527'>
   <UML:TaggedValue.dataValue>
    	the value of the &quot;in use&quot; attribute.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4622'
        name = 'documentation'
        modelElement = 'S.1528'>
   <UML:TaggedValue.dataValue>
    	Set the value of the acknowledge level for this telecommand.
This class does not implement the acknowledge level and
this method therefore returns without taking any action.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4623'
        name = 'see'
        modelElement = 'S.1528'>
   <UML:TaggedValue.dataValue>
    	#getAcknowledgeLevel
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4624'
        name = 'param'
        modelElement = 'S.1528'>
   <UML:TaggedValue.dataValue>
    	ackLevel the new value of the acknowledge level attribute
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4627'
        name = 'documentation'
        modelElement = 'S.1529'>
   <UML:TaggedValue.dataValue>
    	Return the value of the acknowledge level.
This class does not implement the acknowledge level and
this method always returns a default and fixed value of zero.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4628'
        name = 'see'
        modelElement = 'S.1529'>
   <UML:TaggedValue.dataValue>
    	#setAcknowledgeLevel
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4629'
        name = 'return'
        modelElement = 'S.1529'>
   <UML:TaggedValue.dataValue>
    	the value of the acknowledge level attribute
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4631'
        name = 'documentation'
        modelElement = 'S.1530'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on the telecommand:
verify that the time tag has a legal value.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4632'
        name = 'return'
        modelElement = 'S.1530'>
   <UML:TaggedValue.dataValue>
    	true if the component is configured, false otherwise.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4634'
        name = 'documentation'
        modelElement = 'S.1213'>
   <UML:TaggedValue.dataValue>
    	Base class from which all telecommand loaders are derived.
A telecommand loader is an object that is responsible for receiving
telecommands, decoding them and for
constructing the objects of type &lt;CODE&gt;Telecommand&lt;/CODE&gt; that represent
the telecommand inside the application software.
&lt;p&gt;
Telecommand loaders must load a telecommand object in the telecommand
manager after having constructed it.
For this reason, they have the telecommand manager as a plug-in component
and this class declares the corresponding method to load the telecommand
manager.
&lt;p&gt;
During the process of constructing a telecommand object, the telecommand
loader may need to allocate
resources (typically memory to hold the telecommand object).
These resources must be released after the telecommand has been executed.
For this reason, this class declares a &lt;CODE&gt;release&lt;/CODE&gt; method
that must be called by the
telecommand manager after it has executed a telecommand and that triggers
the release of the resources associated to the telecommand object.
&lt;p&gt;
Telecommand loaders are &lt;i&gt;activated&lt;/i&gt; when a new telecommand has
(potentially) been received.
Depending on the implementation, this activation could be in response to
the arrival of an interrupt
signaling the actual reception of a new telecommand or it could be done
periodically to direct the
telecommand loader to check whether a new telecommand has arrived.
&lt;p&gt;
This is an abstract class. Concrete telecommand loaders are obtained by
deriving this class.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4635'
        name = 'author'
        modelElement = 'S.1213'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4636'
        name = 'version'
        modelElement = 'S.1213'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4637'
        name = 'ingroup'
        modelElement = 'S.1213'>
   <UML:TaggedValue.dataValue>
    	Telecommand
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4638'
        name = 'documentation'
        modelElement = 'S.1531'>
   <UML:TaggedValue.dataValue>
    	Instantiate a telecommand loader. This constructor initializes the
telecommand manager plug-in component to point to pNULL to signify that
the component has not yet been configured.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4639'
        name = 'documentation'
        modelElement = 'S.1532'>
   <UML:TaggedValue.dataValue>
    	Check whether a telecommand has been received and, if so, construct
the &lt;CODE&gt;Telecommand&lt;/CODE&gt; object to represent
it and load it in the telecommand manager.
This is an abstract method because the way in which telecommands are
received and the way in which the
corresponding objects are constructed is application-specific.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4641'
        name = 'documentation'
        modelElement = 'S.1533'>
   <UML:TaggedValue.dataValue>
    	Release the resources that the telecommand loader had allocated to the
argument telecommand.
This method should be called after the argument telecommand object has
been executed to allow the
telecommand loader to release any resources that it had allocated to
the telecommand object when it created it.
This method would normally be called by the telecommand manager.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4642'
        name = 'see'
        modelElement = 'S.1533'>
   <UML:TaggedValue.dataValue>
    	CC_TelecommandManager#activate
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4643'
        name = 'param'
        modelElement = 'S.1533'>
   <UML:TaggedValue.dataValue>
    	pTelecommand the telecommand whose resources must be released
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4646'
        name = 'documentation'
        modelElement = 'S.1534'>
   <UML:TaggedValue.dataValue>
    	Load the telecommand manager as a plug-in component.
A telecommand loader needs access to the telecommand manager because
it must load newly created
telecommand objects in the telecommand manager.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4647'
        name = 'param'
        modelElement = 'S.1534'>
   <UML:TaggedValue.dataValue>
    	pTcManager the telecommand manager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4650'
        name = 'documentation'
        modelElement = 'S.1535'>
   <UML:TaggedValue.dataValue>
    	Getter method for the telecommand manager plug-in component.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4651'
        name = 'see'
        modelElement = 'S.1535'>
   <UML:TaggedValue.dataValue>
    	#setTelecommandManager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4652'
        name = 'return'
        modelElement = 'S.1535'>
   <UML:TaggedValue.dataValue>
    	the telecommand manager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4654'
        name = 'documentation'
        modelElement = 'S.1536'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on the telecommand
loader: verify that the telecommand manager has been loaded.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4655'
        name = 'return'
        modelElement = 'S.1536'>
   <UML:TaggedValue.dataValue>
    	true if the telecommand loader is configured, false otherwise.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4685'
        name = 'documentation'
        modelElement = 'G.346'>
   <UML:TaggedValue.dataValue>
    	The i-th item of this array holds the descriptor for the i-th memory block
to be dumped
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4701'
        name = 'documentation'
        modelElement = 'S.1548'>
   <UML:TaggedValue.dataValue>
    	This class encapsulates a telemetry manager.
The telemetry manager is responsible for controlling the dispatch
of telemetry packets to the telemetry stream.
The telemetry packets can be dispatched to the telemetry stream in two
modes: &lt;ul&gt;
&lt;li&gt;&lt;i&gt;Repetitive Mode&lt;/i&gt;: the packets are provided by a &lt;i&gt;telemetry mode
manager&lt;/i&gt;.
This dispatch mode is typically used for packets that must be written to the
telemetry stream on a regular basis.&lt;/li&gt;
&lt;li&gt;&lt;i&gt;Immediate Mode&lt;/i&gt;: the packets are direclty loaded by an external
client and are dispatched to the telemetry stream at the next activation of
the telemetry manager. They are only dispatched once. This dispatch mode
is typically used for packets that must be dispatched on an occasional basis.&lt;/li&gt;
&lt;/ul&gt;
The telemetry mode manager is a plug-in component that must be configured
with the telemetry packets by an external client. The packets for immediate
dispatch are instead loaded in an internal queue (the &lt;i&gt;immediate
dispatch queue&lt;/i&gt;) whose size must be defined as part of the configuration
procedure of the telemetry manager.
&lt;p&gt;
The telemetry packets are written to the telemetry stream when the telemetry
stream is &lt;i&gt;activated&lt;/i&gt; (invocation of method &lt;code&gt;activate&lt;/code&gt;). At this
time, the telemetry packets that were directly loaded since the last activation
and the telemetry packets that are provided by the telemetry mode manager are
first updated and then their written to the telemetry stream.
&lt;p&gt;
The telemetry manager contributes to the management of the &quot;in use&quot; status of
telemetry packets. More precisely, packets that are submitted for immediate
dispatch are marked as &quot;no longer in use&quot; after being processed.
&lt;p&gt;
The telemetry stream component
is a plug-in component of the telemetry manager.
&lt;p&gt;
The configuration procedure for a newly instantiated telemetry
manager is as follows: &lt;ol&gt;
&lt;li&gt;Load a telemetry stream component (method
&lt;code&gt;setTelemetryStream&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Load a telemetry mode manager component (method
&lt;code&gt;setTelemetryModeManager&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Set the size of the immediate dispatch queue (method
&lt;code&gt;setImmediateQueueSize&lt;/code&gt;).&lt;/li&gt;
&lt;/ol&gt;
The above operations can be executed in any order.
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4702'
        name = 'author'
        modelElement = 'S.1548'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4703'
        name = 'see'
        modelElement = 'S.1548'>
   <UML:TaggedValue.dataValue>
    	TelemetryPacket
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4704'
        name = 'version'
        modelElement = 'S.1548'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4705'
        name = 'ingroup'
        modelElement = 'S.1548'>
   <UML:TaggedValue.dataValue>
    	FunctionalityManagers
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4706'
        name = 'ingroup'
        modelElement = 'S.1548'>
   <UML:TaggedValue.dataValue>
    	Telemetry
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4707'
        name = 'documentation'
        modelElement = 'S.1578'>
   <UML:TaggedValue.dataValue>
    	Instantiate a telemetry manager.
The class identifier is set and all internal data structures are initialized
to illegal values to signify that the component is not yet configured.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4708'
        name = 'documentation'
        modelElement = 'S.1579'>
   <UML:TaggedValue.dataValue>
    	Load the telemetry mode manager.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4709'
        name = 'param'
        modelElement = 'S.1579'>
   <UML:TaggedValue.dataValue>
    	pTmModeManager the telemetry mode manager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4712'
        name = 'documentation'
        modelElement = 'S.1580'>
   <UML:TaggedValue.dataValue>
    	Get the telemetry mode manager.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4713'
        name = 'return'
        modelElement = 'S.1580'>
   <UML:TaggedValue.dataValue>
    	the telemetry mode manager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4715'
        name = 'documentation'
        modelElement = 'S.1581'>
   <UML:TaggedValue.dataValue>
    	Load the telemetry stream component. The telemetry stream is reset
immediately after being loaded.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4716'
        name = 'param'
        modelElement = 'S.1581'>
   <UML:TaggedValue.dataValue>
    	pTmStream the telemetry stream component
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4719'
        name = 'documentation'
        modelElement = 'S.1582'>
   <UML:TaggedValue.dataValue>
    	Get the telemetry stream component.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4720'
        name = 'return'
        modelElement = 'S.1582'>
   <UML:TaggedValue.dataValue>
    	the telemetry stream component
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4722'
        name = 'documentation'
        modelElement = 'S.1583'>
   <UML:TaggedValue.dataValue>
    	Set the size of the immediate dispatch queue.
This is an initialization method. It should only be called once.
The size of the immediate dispatch queue can be zero for the
case of applications where the immediate load service is disabled.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4723'
        name = 'param'
        modelElement = 'S.1583'>
   <UML:TaggedValue.dataValue>
    	size the size of the immediate load packet queue
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4726'
        name = 'documentation'
        modelElement = 'S.1584'>
   <UML:TaggedValue.dataValue>
    	Return the size of the immediate dispatch queue.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4727'
        name = 'return'
        modelElement = 'S.1584'>
   <UML:TaggedValue.dataValue>
    	the size of the immediate dispatch queue
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4729'
        name = 'documentation'
        modelElement = 'S.1585'>
   <UML:TaggedValue.dataValue>
    	Return the i-th entry in the immediate dispatch queue.
The index i should lie in the range [0,N-1] where N is the size of the queue.
If the value of i is out of range, a null pointer is returned. A null
pointer will also be returned if the i-the entry in the queue is empty.
This method is only intended for testing purposes. It should not be used
in an operational context. This method may return null
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4730'
        name = 'return'
        modelElement = 'S.1585'>
   <UML:TaggedValue.dataValue>
    	the size of the immediate dispatch queue
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4733'
        name = 'documentation'
        modelElement = 'S.1586'>
   <UML:TaggedValue.dataValue>
    	Return true if the size of the immediate dispatch queue is 
zero or if the immediate dispatch queue is full.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4734'
        name = 'return'
        modelElement = 'S.1586'>
   <UML:TaggedValue.dataValue>
    	true if the immediate dispatch queue is full
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4736'
        name = 'documentation'
        modelElement = 'S.1587'>
   <UML:TaggedValue.dataValue>
    	Dispatch the telemetry packets to the telemetry stream.
Both the telemetry packets provided by the telemetry mode manager and those
loaded for immediate dispatch since the last activation are written to the
telemetry stream.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
for (all pTmPacket items in the immediate dispatch queue) {
pTmPacket-&gt;update();
if ( !pTmPacket-&gt;isValid() ) {
createEventReport(EVT_TM_WORD_NOT_VALID);
pTmPacket-&gt;setInUse(false);
}
if ( !pTmPacket fits in telemetry stream )
createEventReport(EVT_TOO_MANY_TM_BYTES);
pTmPacket-&gt;setInUse(false);
}
pTmStream-&gt;write(pTmPacket)
pTmPacket-&gt;setInUse(false);
}
. . .   // clear immediate dispatch queue
for (all pTmPacket items provided by the telemetry mode manager) {
pTmPacket-&gt;update();
if ( !pTmPacket-&gt;isValid() ) {
createEventReport(EVT_TM_WORD_NOT_VALID);
}
if ( !pTmPacket fits in telemetry stream )
createEventReport(EVT_TOO_MANY_TM_BYTES);
}
pTmStream-&gt;write(pTmPacket)
}
pTmStream-&gt;flush(); &lt;/PRE&gt;
In the above pseudo-code, &lt;code&gt;pTmStream&lt;/code&gt; is the telemetry stream where
the telemetry packets are written and &lt;code&gt;pTmFactory&lt;/code&gt; is the telemetry
packet factory.
&lt;p&gt;
Each telemetry packet is first &lt;i&gt;updated&lt;/i&gt; and its &lt;i&gt;validity&lt;/i&gt; is then
checked. If validity is confirmed, it is checked that the packet fits in the telemetry stream.
If it does, it is written to the telemetry stream. In the case of telemetry packets
from the immediate dispatch queue, the packets are marked as &quot;no longer in use&quot;
after being processed.
If the telemetry packet is not valid or if it does not
fit in the telemetry channel, event reports are generated.
After all telemetry packets have been processed, the telemetry stream is flushed.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4737'
        name = 'see'
        modelElement = 'S.1587'>
   <UML:TaggedValue.dataValue>
    	TD_EventType
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4739'
        name = 'documentation'
        modelElement = 'S.1588'>
   <UML:TaggedValue.dataValue>
    	Add the argument telemetry packet to the immediate dispatch queue.
The telemetry packet will be dispatched to the telemetry stream at the
next activation of the telemetry manager.
If the queue is already full, then an event report of type EVT_TM_QUEUE_FULL
is generated.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4740'
        name = 'param'
        modelElement = 'S.1588'>
   <UML:TaggedValue.dataValue>
    	pTmPacket the telemetry packet component
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4743'
        name = 'documentation'
        modelElement = 'S.1589'>
   <UML:TaggedValue.dataValue>
    	Check if the argument telemetry packet is currently in the immediate dispatch queue and,
if it is, remove it.
Failure to find the argument packet is treated as a nominal situation and is therefore
not recorded through an event report.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4744'
        name = 'param'
        modelElement = 'S.1589'>
   <UML:TaggedValue.dataValue>
    	pTmPacket the telemetry packet component
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4747'
        name = 'documentation'
        modelElement = 'S.1590'>
   <UML:TaggedValue.dataValue>
    	Return the number of telemetry packets currently loaded in the immediate dispatch queue.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4748'
        name = 'return'
        modelElement = 'S.1590'>
   <UML:TaggedValue.dataValue>
    	the number of telemetry packets currently loaded in the immediate dispatch queue
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4750'
        name = 'documentation'
        modelElement = 'S.1591'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on the telemetry
manager: verify that the telemetry stream and telemetry mode manager
have been loaded and that the size of the immediate load packet queue
has been set.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4751'
        name = 'return'
        modelElement = 'S.1591'>
   <UML:TaggedValue.dataValue>
    	true if the telemetry manager is configured, false otherwise.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4753'
        name = 'documentation'
        modelElement = 'S.1554'>
   <UML:TaggedValue.dataValue>
    	Dynamic factory for components of type: &lt;code&gt;TelemetryPacket&lt;/code&gt;.
A &lt;i&gt;dynamic factory&lt;/i&gt; is a component that manages a pool of instances of
components of a certain type. Clients of the factory can require one of these
instances at run-time. After the factory hands over a component instance to its
client, the instance is marked as &quot;in use&quot; and cannot be given to any other
clients. When the requesting client has finished using the instance, it should release
it by marking it as &quot;no longer in use&quot;. This will allow the factory to make it
available to other clients that request it. The &quot;in use&quot; status of the component
instances is controlled through method &lt;code&gt;setInUse&lt;/code&gt; declared on
the component instances.
&lt;p&gt;
A dynamic factory is configured in two steps. The first step is performed
by the factory constructor when the internal data structures to hold the component
instances are created. The second step is performed during application initialization
when the component instances are loaded in the factory. Reconfiguration at run time
during normal application operation is not allowed.
&lt;p&gt;
Dynamic factories are implemented as singletons. They can exist in one single instance
that can be accessed through the &lt;code&gt;getInstance&lt;/code&gt; method.
The one single instance of the class is created the first time that method
getInstance is called. In order to avoid possible disruptions of
real-time behaviour, applications should ensure that this method has been called
at least once before the application enters its operational phase.
&lt;p&gt;
This factory manages the following component instances:&lt;ul&gt;  
&lt;li&gt;Number of instances of type &lt;code&gt;DC_DummyPUSTelemetryPacket&lt;/code&gt;: 2&lt;/li&gt;    
&lt;li&gt;Number of instances of type &lt;code&gt;DC_PUSDataReportingPacket&lt;/code&gt;: 2&lt;/li&gt;    
&lt;li&gt;Number of instances of type &lt;code&gt;DC_PUSMemoryDumpAbsolute&lt;/code&gt;: 1&lt;/li&gt;    
&lt;li&gt;Number of instances of type &lt;code&gt;DC_PUSMemoryDumpOffset&lt;/code&gt;: 1&lt;/li&gt;    
&lt;li&gt;Number of instances of type &lt;code&gt;DC_PUSTcVerificationPacket&lt;/code&gt;: 1&lt;/li&gt;    
&lt;/ul&gt;
The code for this class was automatically generated by an XSL program processing
the XML-based application model.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4754'
        name = 'author'
        modelElement = 'S.1554'>
   <UML:TaggedValue.dataValue>
    	Automatically Generated Class
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4755'
        name = 'ingroup'
        modelElement = 'S.1554'>
   <UML:TaggedValue.dataValue>
    	TelemetryPacket
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4756'
        name = 'see'
        modelElement = 'S.1554'>
   <UML:TaggedValue.dataValue>
    	TelemetryPacket
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4757'
        name = 'version'
        modelElement = 'S.1554'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4758'
        name = 'documentation'
        modelElement = 'S.1602'>
   <UML:TaggedValue.dataValue>
    	Instantiate the factory component. The class identifier is set and
the internal data structures to hold the component instances managed
by the factory are created.
This constructor is defined to be protected because this is a singleton
class.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4759'
        name = 'documentation'
        modelElement = 'S.1603'>
   <UML:TaggedValue.dataValue>
    	Get the single instance of this singleton class. If the instance does not
yet exist, it is created.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4761'
        name = 'documentation'
        modelElement = 'S.1604'>
   <UML:TaggedValue.dataValue>
    	Check that all component instances required by the factory have been loaded.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4762'
        name = 'return'
        modelElement = 'S.1604'>
   <UML:TaggedValue.dataValue>
    	true if the component is configured, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4764'
        name = 'documentation'
        modelElement = 'S.1605'>
   <UML:TaggedValue.dataValue>
    	Load one instance of type &lt;code&gt;DC_DummyPUSTelemetryPacket&lt;/code&gt; in the
factory. The component instances managed by the factory are internally stored in an
array. This method loads the i-th element of the array. The argument i should lie
in the interval [0,N-1] where N is the number of component instances of type
&lt;code&gt;DC_DummyPUSTelemetryPacket&lt;/code&gt;. The value of N is defined by
the class constructor.
&lt;p&gt;
The &quot;in use&quot; status of a newly loaded component is initialized
to: &quot;component is not in use&quot;.
&lt;p&gt;
This is an initialization method that should only be called during the application
configuration phase.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4765'
        name = 'param'
        modelElement = 'S.1605'>
   <UML:TaggedValue.dataValue>
    	i the index in the internal array
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4766'
        name = 'param'
        modelElement = 'S.1605'>
   <UML:TaggedValue.dataValue>
    	pItem the component instance
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4770'
        name = 'documentation'
        modelElement = 'S.1606'>
   <UML:TaggedValue.dataValue>
    	Return the number of component instances of type &lt;code&gt;DC_DummyPUSTelemetryPacket&lt;/code&gt;
that are currently allocated. A component instance is allocated if its &quot;in use&quot; status is
equal to: &quot;component is in use&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4771'
        name = 'return'
        modelElement = 'S.1606'>
   <UML:TaggedValue.dataValue>
    	the number of allocated component instances
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4773'
        name = 'documentation'
        modelElement = 'S.1607'>
   <UML:TaggedValue.dataValue>
    	Return the number of component instances of type &lt;code&gt;DC_DummyPUSTelemetryPacket&lt;/code&gt;
that are in the factory. The value returned is the maximum number of component instances of
type &lt;code&gt;DC_DummyPUSTelemetryPacket&lt;/code&gt; that can be allocated.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4774'
        name = 'return'
        modelElement = 'S.1607'>
   <UML:TaggedValue.dataValue>
    	the total number of component instances in the factory of
type &lt;code&gt;DC_DummyPUSTelemetryPacket&lt;/code&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4776'
        name = 'documentation'
        modelElement = 'S.1608'>
   <UML:TaggedValue.dataValue>
    	Allocate one instance of type &lt;code&gt;DC_DummyPUSTelemetryPacket&lt;/code&gt;.
This method scans all the entries in the factory of type &lt;code&gt;DC_DummyPUSTelemetryPacket&lt;/code&gt;
and returns the first one which is not in use. 
Before being returned to the caller,
the status of the component instance is changed to: &quot;in use&quot;. A client that receives
a component instance through a call to this method, should release the instance when it
no longer needs it. This can be done by calling
method &lt;code&gt;setInUse(false)&lt;/code&gt; on the component itself.
&lt;p&gt;
If no free component instances are found, then the method returns null. Note that no
event report is generated to record the failure to allocate a component instance. Event
reporting is the responsibility of the caller.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4777'
        name = 'return'
        modelElement = 'S.1608'>
   <UML:TaggedValue.dataValue>
    	the allocated component instance or null if no free instances were found
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4779'
        name = 'documentation'
        modelElement = 'S.1609'>
   <UML:TaggedValue.dataValue>
    	Check whether a non-allocated component instance of type &lt;code&gt;DC_DummyPUSTelemetryPacket&lt;/code&gt;
is available within the factory. If this method return true, then the corresponding
&lt;code&gt;allocate&lt;/code&gt; method is guaranteed to return a non-null value.
The method parameters are used as in the corresponding &lt;code&gt;allocate&lt;/code&gt; method.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4780'
        name = 'see'
        modelElement = 'S.1609'>
   <UML:TaggedValue.dataValue>
    	#allocateDC_DummyPUSTelemetryPacket
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4781'
        name = 'return'
        modelElement = 'S.1609'>
   <UML:TaggedValue.dataValue>
    	true if free instances of type DC_DummyPUSTelemetryPacket are available,
false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4783'
        name = 'documentation'
        modelElement = 'S.1610'>
   <UML:TaggedValue.dataValue>
    	Load one instance of type &lt;code&gt;DC_PUSDataReportingPacket&lt;/code&gt; in the
factory. The component instances managed by the factory are internally stored in an
array. This method loads the i-th element of the array. The argument i should lie
in the interval [0,N-1] where N is the number of component instances of type
&lt;code&gt;DC_PUSDataReportingPacket&lt;/code&gt;. The value of N is defined by
the class constructor.
&lt;p&gt;
The &quot;in use&quot; status of a newly loaded component is initialized
to: &quot;component is not in use&quot;.
&lt;p&gt;
This is an initialization method that should only be called during the application
configuration phase.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4784'
        name = 'param'
        modelElement = 'S.1610'>
   <UML:TaggedValue.dataValue>
    	i the index in the internal array
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4785'
        name = 'param'
        modelElement = 'S.1610'>
   <UML:TaggedValue.dataValue>
    	pItem the component instance
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4789'
        name = 'documentation'
        modelElement = 'S.1611'>
   <UML:TaggedValue.dataValue>
    	Return the number of component instances of type &lt;code&gt;DC_PUSDataReportingPacket&lt;/code&gt;
that are currently allocated. A component instance is allocated if its &quot;in use&quot; status is
equal to: &quot;component is in use&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4790'
        name = 'return'
        modelElement = 'S.1611'>
   <UML:TaggedValue.dataValue>
    	the number of allocated component instances
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4792'
        name = 'documentation'
        modelElement = 'S.1612'>
   <UML:TaggedValue.dataValue>
    	Return the number of component instances of type &lt;code&gt;DC_PUSDataReportingPacket&lt;/code&gt;
that are in the factory. The value returned is the maximum number of component instances of
type &lt;code&gt;DC_PUSDataReportingPacket&lt;/code&gt; that can be allocated.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4793'
        name = 'return'
        modelElement = 'S.1612'>
   <UML:TaggedValue.dataValue>
    	the total number of component instances in the factory of
type &lt;code&gt;DC_PUSDataReportingPacket&lt;/code&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4795'
        name = 'documentation'
        modelElement = 'S.1613'>
   <UML:TaggedValue.dataValue>
    	Allocate one instance of type &lt;code&gt;DC_PUSDataReportingPacket&lt;/code&gt;.
This method scans all the entries in the factory of type &lt;code&gt;DC_PUSDataReportingPacket&lt;/code&gt;
and returns the first one which is not in use. 
In addition to verifyin that the returned component is not in use, this method also performs a check
on the value of the component configuration parameters. The folloging configuration parameters 
are checked: DefinitionBufferSize, ValueBufferSize, MaxNumberFA.
This method has a parameter matching each component configuration parameter. A component instance is
returned only if the value of the component configuration parameter is greater than or equal to the method
parameter. 
Before being returned to the caller,
the status of the component instance is changed to: &quot;in use&quot;. A client that receives
a component instance through a call to this method, should release the instance when it
no longer needs it. This can be done by calling
method &lt;code&gt;setInUse(false)&lt;/code&gt; on the component itself.
&lt;p&gt;
If no free component instances are found, then the method returns null. Note that no
event report is generated to record the failure to allocate a component instance. Event
reporting is the responsibility of the caller.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4796'
        name = 'param'
        modelElement = 'S.1613'>
   <UML:TaggedValue.dataValue>
    	DefinitionBufferSize minimum value for a component configuration parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4797'
        name = 'param'
        modelElement = 'S.1613'>
   <UML:TaggedValue.dataValue>
    	ValueBufferSize minimum value for a component configuration parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4798'
        name = 'param'
        modelElement = 'S.1613'>
   <UML:TaggedValue.dataValue>
    	MaxNumberFA minimum value for a component configuration parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4799'
        name = 'return'
        modelElement = 'S.1613'>
   <UML:TaggedValue.dataValue>
    	the allocated component instance or null if no free instances were found
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4804'
        name = 'documentation'
        modelElement = 'S.1614'>
   <UML:TaggedValue.dataValue>
    	Check whether a non-allocated component instance of type &lt;code&gt;DC_PUSDataReportingPacket&lt;/code&gt;
is available within the factory. If this method return true, then the corresponding
&lt;code&gt;allocate&lt;/code&gt; method is guaranteed to return a non-null value.
The method parameters are used as in the corresponding &lt;code&gt;allocate&lt;/code&gt; method.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4805'
        name = 'see'
        modelElement = 'S.1614'>
   <UML:TaggedValue.dataValue>
    	#allocateDC_PUSDataReportingPacket
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4806'
        name = 'param'
        modelElement = 'S.1614'>
   <UML:TaggedValue.dataValue>
    	DefinitionBufferSize minimum value for a component configuration parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4807'
        name = 'param'
        modelElement = 'S.1614'>
   <UML:TaggedValue.dataValue>
    	ValueBufferSize minimum value for a component configuration parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4808'
        name = 'param'
        modelElement = 'S.1614'>
   <UML:TaggedValue.dataValue>
    	MaxNumberFA minimum value for a component configuration parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4809'
        name = 'return'
        modelElement = 'S.1614'>
   <UML:TaggedValue.dataValue>
    	true if free instances of type DC_PUSDataReportingPacket are available,
false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4814'
        name = 'documentation'
        modelElement = 'S.1615'>
   <UML:TaggedValue.dataValue>
    	Return the PUS data reporting packet that is currently allocated and whose SID is
equal to the value of the argument &lt;code&gt;sid&lt;/code&gt;.
This method scans all the instances of type DC_PUSDataReportingPacket in the
factory and, if it finds one which is allocated (its status is &quot;in use&quot;) and with the SID
equal to &lt;code&gt;sid&lt;/code&gt;, it returns it. Otherwise, a null pointer is returned.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4815'
        name = 'param'
        modelElement = 'S.1615'>
   <UML:TaggedValue.dataValue>
    	sid the structure identifier (SID) of the PUS data reporting packet
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4816'
        name = 'return'
        modelElement = 'S.1615'>
   <UML:TaggedValue.dataValue>
    	the sought PUS data reporting packet or null if no allocated data reporting packet
with SID equal to &lt;code&gt;sid&lt;/code&gt; is found
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4819'
        name = 'documentation'
        modelElement = 'S.1616'>
   <UML:TaggedValue.dataValue>
    	Load one instance of type &lt;code&gt;DC_PUSMemoryDumpAbsolute&lt;/code&gt; in the
factory. The component instances managed by the factory are internally stored in an
array. This method loads the i-th element of the array. The argument i should lie
in the interval [0,N-1] where N is the number of component instances of type
&lt;code&gt;DC_PUSMemoryDumpAbsolute&lt;/code&gt;. The value of N is defined by
the class constructor.
&lt;p&gt;
The &quot;in use&quot; status of a newly loaded component is initialized
to: &quot;component is not in use&quot;.
&lt;p&gt;
This is an initialization method that should only be called during the application
configuration phase.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4820'
        name = 'param'
        modelElement = 'S.1616'>
   <UML:TaggedValue.dataValue>
    	i the index in the internal array
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4821'
        name = 'param'
        modelElement = 'S.1616'>
   <UML:TaggedValue.dataValue>
    	pItem the component instance
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4825'
        name = 'documentation'
        modelElement = 'S.1617'>
   <UML:TaggedValue.dataValue>
    	Return the number of component instances of type &lt;code&gt;DC_PUSMemoryDumpAbsolute&lt;/code&gt;
that are currently allocated. A component instance is allocated if its &quot;in use&quot; status is
equal to: &quot;component is in use&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4826'
        name = 'return'
        modelElement = 'S.1617'>
   <UML:TaggedValue.dataValue>
    	the number of allocated component instances
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4828'
        name = 'documentation'
        modelElement = 'S.1618'>
   <UML:TaggedValue.dataValue>
    	Return the number of component instances of type &lt;code&gt;DC_PUSMemoryDumpAbsolute&lt;/code&gt;
that are in the factory. The value returned is the maximum number of component instances of
type &lt;code&gt;DC_PUSMemoryDumpAbsolute&lt;/code&gt; that can be allocated.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4829'
        name = 'return'
        modelElement = 'S.1618'>
   <UML:TaggedValue.dataValue>
    	the total number of component instances in the factory of
type &lt;code&gt;DC_PUSMemoryDumpAbsolute&lt;/code&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4831'
        name = 'documentation'
        modelElement = 'S.1619'>
   <UML:TaggedValue.dataValue>
    	Allocate one instance of type &lt;code&gt;DC_PUSMemoryDumpAbsolute&lt;/code&gt;.
This method scans all the entries in the factory of type &lt;code&gt;DC_PUSMemoryDumpAbsolute&lt;/code&gt;
and returns the first one which is not in use. 
In addition to verifyin that the returned component is not in use, this method also performs a check
on the value of the component configuration parameters. The folloging configuration parameters 
are checked: MaxNumberBlocks, DumpBufferSize.
This method has a parameter matching each component configuration parameter. A component instance is
returned only if the value of the component configuration parameter is greater than or equal to the method
parameter. 
Before being returned to the caller,
the status of the component instance is changed to: &quot;in use&quot;. A client that receives
a component instance through a call to this method, should release the instance when it
no longer needs it. This can be done by calling
method &lt;code&gt;setInUse(false)&lt;/code&gt; on the component itself.
&lt;p&gt;
If no free component instances are found, then the method returns null. Note that no
event report is generated to record the failure to allocate a component instance. Event
reporting is the responsibility of the caller.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4832'
        name = 'param'
        modelElement = 'S.1619'>
   <UML:TaggedValue.dataValue>
    	MaxNumberBlocks minimum value for a component configuration parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4833'
        name = 'param'
        modelElement = 'S.1619'>
   <UML:TaggedValue.dataValue>
    	DumpBufferSize minimum value for a component configuration parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4834'
        name = 'return'
        modelElement = 'S.1619'>
   <UML:TaggedValue.dataValue>
    	the allocated component instance or null if no free instances were found
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4838'
        name = 'documentation'
        modelElement = 'S.1620'>
   <UML:TaggedValue.dataValue>
    	Check whether a non-allocated component instance of type &lt;code&gt;DC_PUSMemoryDumpAbsolute&lt;/code&gt;
is available within the factory. If this method return true, then the corresponding
&lt;code&gt;allocate&lt;/code&gt; method is guaranteed to return a non-null value.
The method parameters are used as in the corresponding &lt;code&gt;allocate&lt;/code&gt; method.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4839'
        name = 'see'
        modelElement = 'S.1620'>
   <UML:TaggedValue.dataValue>
    	#allocateDC_PUSMemoryDumpAbsolute
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4840'
        name = 'param'
        modelElement = 'S.1620'>
   <UML:TaggedValue.dataValue>
    	MaxNumberBlocks minimum value for a component configuration parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4841'
        name = 'param'
        modelElement = 'S.1620'>
   <UML:TaggedValue.dataValue>
    	DumpBufferSize minimum value for a component configuration parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4842'
        name = 'return'
        modelElement = 'S.1620'>
   <UML:TaggedValue.dataValue>
    	true if free instances of type DC_PUSMemoryDumpAbsolute are available,
false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4846'
        name = 'documentation'
        modelElement = 'S.1621'>
   <UML:TaggedValue.dataValue>
    	Load one instance of type &lt;code&gt;DC_PUSMemoryDumpOffset&lt;/code&gt; in the
factory. The component instances managed by the factory are internally stored in an
array. This method loads the i-th element of the array. The argument i should lie
in the interval [0,N-1] where N is the number of component instances of type
&lt;code&gt;DC_PUSMemoryDumpOffset&lt;/code&gt;. The value of N is defined by
the class constructor.
&lt;p&gt;
The &quot;in use&quot; status of a newly loaded component is initialized
to: &quot;component is not in use&quot;.
&lt;p&gt;
This is an initialization method that should only be called during the application
configuration phase.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4847'
        name = 'param'
        modelElement = 'S.1621'>
   <UML:TaggedValue.dataValue>
    	i the index in the internal array
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4848'
        name = 'param'
        modelElement = 'S.1621'>
   <UML:TaggedValue.dataValue>
    	pItem the component instance
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4852'
        name = 'documentation'
        modelElement = 'S.1622'>
   <UML:TaggedValue.dataValue>
    	Return the number of component instances of type &lt;code&gt;DC_PUSMemoryDumpOffset&lt;/code&gt;
that are currently allocated. A component instance is allocated if its &quot;in use&quot; status is
equal to: &quot;component is in use&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4853'
        name = 'return'
        modelElement = 'S.1622'>
   <UML:TaggedValue.dataValue>
    	the number of allocated component instances
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4855'
        name = 'documentation'
        modelElement = 'S.1623'>
   <UML:TaggedValue.dataValue>
    	Return the number of component instances of type &lt;code&gt;DC_PUSMemoryDumpOffset&lt;/code&gt;
that are in the factory. The value returned is the maximum number of component instances of
type &lt;code&gt;DC_PUSMemoryDumpOffset&lt;/code&gt; that can be allocated.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4856'
        name = 'return'
        modelElement = 'S.1623'>
   <UML:TaggedValue.dataValue>
    	the total number of component instances in the factory of
type &lt;code&gt;DC_PUSMemoryDumpOffset&lt;/code&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4858'
        name = 'documentation'
        modelElement = 'S.1624'>
   <UML:TaggedValue.dataValue>
    	Allocate one instance of type &lt;code&gt;DC_PUSMemoryDumpOffset&lt;/code&gt;.
This method scans all the entries in the factory of type &lt;code&gt;DC_PUSMemoryDumpOffset&lt;/code&gt;
and returns the first one which is not in use. 
In addition to verifyin that the returned component is not in use, this method also performs a check
on the value of the component configuration parameters. The folloging configuration parameters 
are checked: MaxNumberBlocks, DumpBufferSize.
This method has a parameter matching each component configuration parameter. A component instance is
returned only if the value of the component configuration parameter is greater than or equal to the method
parameter. 
Before being returned to the caller,
the status of the component instance is changed to: &quot;in use&quot;. A client that receives
a component instance through a call to this method, should release the instance when it
no longer needs it. This can be done by calling
method &lt;code&gt;setInUse(false)&lt;/code&gt; on the component itself.
&lt;p&gt;
If no free component instances are found, then the method returns null. Note that no
event report is generated to record the failure to allocate a component instance. Event
reporting is the responsibility of the caller.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4859'
        name = 'param'
        modelElement = 'S.1624'>
   <UML:TaggedValue.dataValue>
    	MaxNumberBlocks minimum value for a component configuration parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4860'
        name = 'param'
        modelElement = 'S.1624'>
   <UML:TaggedValue.dataValue>
    	DumpBufferSize minimum value for a component configuration parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4861'
        name = 'return'
        modelElement = 'S.1624'>
   <UML:TaggedValue.dataValue>
    	the allocated component instance or null if no free instances were found
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4865'
        name = 'documentation'
        modelElement = 'S.1625'>
   <UML:TaggedValue.dataValue>
    	Check whether a non-allocated component instance of type &lt;code&gt;DC_PUSMemoryDumpOffset&lt;/code&gt;
is available within the factory. If this method return true, then the corresponding
&lt;code&gt;allocate&lt;/code&gt; method is guaranteed to return a non-null value.
The method parameters are used as in the corresponding &lt;code&gt;allocate&lt;/code&gt; method.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4866'
        name = 'see'
        modelElement = 'S.1625'>
   <UML:TaggedValue.dataValue>
    	#allocateDC_PUSMemoryDumpOffset
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4867'
        name = 'param'
        modelElement = 'S.1625'>
   <UML:TaggedValue.dataValue>
    	MaxNumberBlocks minimum value for a component configuration parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4868'
        name = 'param'
        modelElement = 'S.1625'>
   <UML:TaggedValue.dataValue>
    	DumpBufferSize minimum value for a component configuration parameter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4869'
        name = 'return'
        modelElement = 'S.1625'>
   <UML:TaggedValue.dataValue>
    	true if free instances of type DC_PUSMemoryDumpOffset are available,
false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4873'
        name = 'documentation'
        modelElement = 'S.1626'>
   <UML:TaggedValue.dataValue>
    	Load one instance of type &lt;code&gt;DC_PUSTcVerificationPacket&lt;/code&gt; in the
factory. The component instances managed by the factory are internally stored in an
array. This method loads the i-th element of the array. The argument i should lie
in the interval [0,N-1] where N is the number of component instances of type
&lt;code&gt;DC_PUSTcVerificationPacket&lt;/code&gt;. The value of N is defined by
the class constructor.
&lt;p&gt;
The &quot;in use&quot; status of a newly loaded component is initialized
to: &quot;component is not in use&quot;.
&lt;p&gt;
This is an initialization method that should only be called during the application
configuration phase.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4874'
        name = 'param'
        modelElement = 'S.1626'>
   <UML:TaggedValue.dataValue>
    	i the index in the internal array
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4875'
        name = 'param'
        modelElement = 'S.1626'>
   <UML:TaggedValue.dataValue>
    	pItem the component instance
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4879'
        name = 'documentation'
        modelElement = 'S.1627'>
   <UML:TaggedValue.dataValue>
    	Return the number of component instances of type &lt;code&gt;DC_PUSTcVerificationPacket&lt;/code&gt;
that are currently allocated. A component instance is allocated if its &quot;in use&quot; status is
equal to: &quot;component is in use&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4880'
        name = 'return'
        modelElement = 'S.1627'>
   <UML:TaggedValue.dataValue>
    	the number of allocated component instances
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4882'
        name = 'documentation'
        modelElement = 'S.1628'>
   <UML:TaggedValue.dataValue>
    	Return the number of component instances of type &lt;code&gt;DC_PUSTcVerificationPacket&lt;/code&gt;
that are in the factory. The value returned is the maximum number of component instances of
type &lt;code&gt;DC_PUSTcVerificationPacket&lt;/code&gt; that can be allocated.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4883'
        name = 'return'
        modelElement = 'S.1628'>
   <UML:TaggedValue.dataValue>
    	the total number of component instances in the factory of
type &lt;code&gt;DC_PUSTcVerificationPacket&lt;/code&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4885'
        name = 'documentation'
        modelElement = 'S.1629'>
   <UML:TaggedValue.dataValue>
    	Allocate one instance of type &lt;code&gt;DC_PUSTcVerificationPacket&lt;/code&gt;.
This method scans all the entries in the factory of type &lt;code&gt;DC_PUSTcVerificationPacket&lt;/code&gt;
and returns the first one which is not in use. 
Before being returned to the caller,
the status of the component instance is changed to: &quot;in use&quot;. A client that receives
a component instance through a call to this method, should release the instance when it
no longer needs it. This can be done by calling
method &lt;code&gt;setInUse(false)&lt;/code&gt; on the component itself.
&lt;p&gt;
If no free component instances are found, then the method returns null. Note that no
event report is generated to record the failure to allocate a component instance. Event
reporting is the responsibility of the caller.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4886'
        name = 'return'
        modelElement = 'S.1629'>
   <UML:TaggedValue.dataValue>
    	the allocated component instance or null if no free instances were found
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4888'
        name = 'documentation'
        modelElement = 'S.1630'>
   <UML:TaggedValue.dataValue>
    	Check whether a non-allocated component instance of type &lt;code&gt;DC_PUSTcVerificationPacket&lt;/code&gt;
is available within the factory. If this method return true, then the corresponding
&lt;code&gt;allocate&lt;/code&gt; method is guaranteed to return a non-null value.
The method parameters are used as in the corresponding &lt;code&gt;allocate&lt;/code&gt; method.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4889'
        name = 'see'
        modelElement = 'S.1630'>
   <UML:TaggedValue.dataValue>
    	#allocateDC_PUSTcVerificationPacket
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4890'
        name = 'return'
        modelElement = 'S.1630'>
   <UML:TaggedValue.dataValue>
    	true if free instances of type DC_PUSTcVerificationPacket are available,
false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4892'
        name = 'documentation'
        modelElement = 'S.1563'>
   <UML:TaggedValue.dataValue>
    	Telemetry stream that packetizes the telemetry data according to the
PUS and writes them to a &lt;i&gt;telemetry write area&lt;/i&gt;.
This component can write several packets to the telemetry write area 
in sequence, up to the point where there is no space left in the
telemetry write area. 
The telemetry write area is characterized by
a &lt;i&gt;starting address&lt;/i&gt; and by a &lt;i&gt;size&lt;/i&gt;. The starting
address and the size are settable configuration parameters.
They can be changed dynamically. The first byte of the telemetry write
area holds the number of packets that have been written to it since the
last time the stream was reset. Following bytes hold the images of the
the telemetry packets in the order in which they are written.
&lt;p&gt;
This component maintains a &lt;i&gt;write counter&lt;/i&gt; and a &lt;i&gt;packet counter&lt;/i&gt;. 
Both counters are reset to 0 by
a call to operation &lt;code&gt;reset&lt;/code&gt; or &lt;code&gt;flush&lt;/code&gt;.
The write counter is incremented every
time a byte is written to the telemetry write array.
If its value is smaller than the size of the telemetry write area, then the
write counter points
to the location in the write area where the next telemetry data byte
will be written. The packet counter is equal to the number of packets
that have been written to the telemetry write area since the stream
was last reset. The value of the packet counter is the same as the
value of the first byte of the telemetry write area.
&lt;p&gt;
Write requests that cannot be processed because
there is not enough space in the telemetry write area have no effect
other than the generation of event EVT_TM_STREAM_END.
It is the responsibility of the user to perform reset or flush
operations when the byte array has been completely filled.
&lt;p&gt;
This telemetry stream adds the header data to the packet data that it
retrieves from the packet itself. The format of the packet header
is in accordance with the PUS with the following qualifications: &lt;ul&gt;
&lt;li&gt;The data field header flag is always set to 1&lt;/li&gt;
&lt;li&gt;The APID is read from the telemetry packet through method 
&lt;code&gt;getPacketId&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The grouping flags are always set to &quot;11&quot; (stand-alone packet)&lt;/li&gt;
&lt;li&gt;The packet sub-counter is omitted&lt;/li&gt;
&lt;li&gt;The packet destination ID field is omitted&lt;/li&gt;
&lt;li&gt;The time information is read from the telemetry packet. It is written
as a value of type &lt;code&gt;TD_ObsTime&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The packet error control is set to zero (it is assumed that it is computed
downstream when the packet is actually dispatched to its destination)&lt;/li&gt;
&lt;li&gt;The packet sequence count is initialized to zero when the telemetry stream
and is incremented by one (with wrap around) every time a packet is written.&lt;/li&gt;
&lt;/ul&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4893'
        name = 'author'
        modelElement = 'S.1563'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4894'
        name = 'version'
        modelElement = 'S.1563'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4895'
        name = 'documentation'
        modelElement = 'S.1636'>
   <UML:TaggedValue.dataValue>
    	Instantiate the component. The class identifier is set. The size and
starting address of the byte array are set to illegal values to signify
that the component is not yet configured. The write counter is set to zero.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4896'
        name = 'documentation'
        modelElement = 'S.1637'>
   <UML:TaggedValue.dataValue>
    	Reset the telemetry stream. The write counter is set to 1 and the packet 
counter is set to 0.
The next packet will be written at the beginning of the telemetry
write area (starting at location 1, location 0 is reserved for the 
packet counter).
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4898'
        name = 'documentation'
        modelElement = 'S.1638'>
   <UML:TaggedValue.dataValue>
    	The flush operation is equivalent to a reset operation.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4899'
        name = 'see'
        modelElement = 'S.1638'>
   <UML:TaggedValue.dataValue>
    	#reset
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4901'
        name = 'documentation'
        modelElement = 'S.1639'>
   <UML:TaggedValue.dataValue>
    	Return the capacity of the telemetry stream. The capacity of this
telemetry stream is equal to the size in bytes of the telemetry write
area.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4902'
        name = 'return'
        modelElement = 'S.1639'>
   <UML:TaggedValue.dataValue>
    	the size of the byte array in number of bytes
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4904'
        name = 'documentation'
        modelElement = 'S.1640'>
   <UML:TaggedValue.dataValue>
    	Set the capacity of the telemetry stream. The capacity of this
telemetry stream is equal to the size in bytes of the telemetry write
area.
If s is the staring address of the telemetry write area (loaded with method
&lt;code&gt;setStartingAddress&lt;/code&gt;) and if L is the value loaded with 
with this method, then the i-th location of the telemetry write area is
internally accessed as s[i] where i must be in the range [0,L-1].
It is the responsibility of the user to ensure that the locations thus
accessed are free for use by this telemetry stream component.
Only positive values for the argument of this method are legal.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4905'
        name = 'see'
        modelElement = 'S.1640'>
   <UML:TaggedValue.dataValue>
    	#setStartingAddress
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4906'
        name = 'param'
        modelElement = 'S.1640'>
   <UML:TaggedValue.dataValue>
    	n the size of the telemetry write area in number of bytes
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4909'
        name = 'documentation'
        modelElement = 'S.1641'>
   <UML:TaggedValue.dataValue>
    	Set the starting address of the telemetry write area. This component does not
perform any memory allocation operation. It assumes that the memory
for the telemetry write area has already been allocated by the caller.
The telemetry stream is reset when a new start address is
loaded.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4910'
        name = 'param'
        modelElement = 'S.1641'>
   <UML:TaggedValue.dataValue>
    	pAddress pointer to the first location of the byte array
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4913'
        name = 'documentation'
        modelElement = 'S.1642'>
   <UML:TaggedValue.dataValue>
    	Get the starting address of the telemetry write area.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4914'
        name = 'see'
        modelElement = 'S.1642'>
   <UML:TaggedValue.dataValue>
    	#setStartingAddress
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4915'
        name = 'return'
        modelElement = 'S.1642'>
   <UML:TaggedValue.dataValue>
    	the pointer to the first location of the telemetry write area
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4917'
        name = 'documentation'
        modelElement = 'S.1643'>
   <UML:TaggedValue.dataValue>
    	Get the current value of the packet counter.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4918'
        name = 'return'
        modelElement = 'S.1643'>
   <UML:TaggedValue.dataValue>
    	the packet counter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4920'
        name = 'documentation'
        modelElement = 'S.1644'>
   <UML:TaggedValue.dataValue>
    	Get the current value of the write counter.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4921'
        name = 'return'
        modelElement = 'S.1644'>
   <UML:TaggedValue.dataValue>
    	the write counter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4923'
        name = 'documentation'
        modelElement = 'S.1645'>
   <UML:TaggedValue.dataValue>
    	Get the value of the packet sequence count. This is equal to the number of packets 
for which write requests have been made since the telemetry stream component 
was instantiated.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4924'
        name = 'return'
        modelElement = 'S.1645'>
   <UML:TaggedValue.dataValue>
    	the packet sequence count
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4926'
        name = 'documentation'
        modelElement = 'S.1646'>
   <UML:TaggedValue.dataValue>
    	Return true if there is enough space in the telemetry write area to write
the argument telemetry packet.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
if ( pItem-&gt;getNumberOfBytes()==0 )
return true;
if ( (pItem-&gt;getNumberOfBytes()+headerSize) greater than (N-writeCounter) )
return false;
else
return true; &lt;/PRE&gt;
where N is the size of the telemetry write area,
&lt;code&gt;writeCounter&lt;/code&gt; is the value of the write counter, and
&lt;code&gt;headerSize&lt;/code&gt; is the size of the PUS header that method
&lt;code&gt;write&lt;/code&gt; adds to the application data returned by the packet.
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4927'
        name = 'param'
        modelElement = 'S.1646'>
   <UML:TaggedValue.dataValue>
    	pPacket the telemetry packet to be written to the telemetry stream
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4928'
        name = 'return'
        modelElement = 'S.1646'>
   <UML:TaggedValue.dataValue>
    	true if there is enough space in the telemetry stream to write
the telemetry packet, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4931'
        name = 'documentation'
        modelElement = 'S.1647'>
   <UML:TaggedValue.dataValue>
    	Write one telemetry packet to the telemetry write area.
First the PUS header is written to the telemetry write area. Then
the telemetry bytes read from the telemetry packet are written in
sequence. The write operation begins at
location wc in the telemetry write area 
where wc is the value of the write counter.
Before beginning to write the packet data, a check is made to verify that
there is enough space in the telemetry write area. If this is not the case,
then an event of type
EVT_TM_STREAM_END is generated and the method returns.
After successful completion of a write operation, the packet counter is
incremented by 1. The sequence count is incremented by one for each write
request regardless of whether or not it was successful
&lt;p&gt;
There is no check on an overflow of either the write or
packet counter.
&lt;p&gt;
The telemetry packet data are extracted from the telemetry packet 
component through its &lt;i&gt;data acquisition service&lt;/i&gt;. If the packet
provides it, then the &lt;i&gt;fast version&lt;/i&gt; of the service is used.
Otherwise the &lt;i&gt;safe version&lt;/i&gt; is used. Method 
&lt;code&gt;isFastAcquisitionImplemented&lt;/code&gt; is used to determine 
whether the fast version is provided.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4932'
        name = 'param'
        modelElement = 'S.1647'>
   <UML:TaggedValue.dataValue>
    	pItem the telemetry packet to be written to the telemetry stream
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4935'
        name = 'documentation'
        modelElement = 'S.1648'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on the telemetry stream:
verify that the size and starting address of the telemetry write area have
been loaded.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4936'
        name = 'return'
        modelElement = 'S.1648'>
   <UML:TaggedValue.dataValue>
    	true if the telemetry stream is configured, false otherwise.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4938'
        name = 'documentation'
        modelElement = 'S.1543'>
   <UML:TaggedValue.dataValue>
    	Telemetry stream that writes the telemetry data to an array of
bytes (the &lt;i&gt;byte array&lt;/i&gt;). Only the telemetry bytes in the telemetry
item are written to the stream. Header information (the telemetry packet
destination, time tag, type and subtype) are ignored. The byte array is characterized by
a &lt;i&gt;starting address&lt;/i&gt; and by a &lt;i&gt;size&lt;/i&gt;. The starting
address and the size are settable configuration parameters.
&lt;p&gt;
This class maintains a &lt;i&gt;write counter&lt;/i&gt;. The write counter
is reset to 0 by
a call to operation &lt;code&gt;reset&lt;/code&gt; or &lt;code&gt;flush&lt;/code&gt;.
It is incremented every
time a byte is written to the byte array.
If its value is smaller than the size of the byte array, then the
write counter points
to the location in the byte array where the next telemetry data
will be written. Write requests that cannot be processed because
there is not enough space in the byte array have no effect.
It is the responsibility of the user to perform reset or flush
operations when the byte array has been completely filled.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4939'
        name = 'author'
        modelElement = 'S.1543'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4940'
        name = 'version'
        modelElement = 'S.1543'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4941'
        name = 'documentation'
        modelElement = 'S.1652'>
   <UML:TaggedValue.dataValue>
    	Instantiate the component. The class identifier is set. The size and
starting address of the byte array are set to illegal values to signify
that the component is not yet configured. The write counter is set
to zero.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4942'
        name = 'documentation'
        modelElement = 'S.1653'>
   <UML:TaggedValue.dataValue>
    	Reset the telemetry stream. The write counter is reset to 0.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4944'
        name = 'documentation'
        modelElement = 'S.1654'>
   <UML:TaggedValue.dataValue>
    	The flush operation is equivalent to a reset operation.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4945'
        name = 'see'
        modelElement = 'S.1654'>
   <UML:TaggedValue.dataValue>
    	#reset
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4947'
        name = 'documentation'
        modelElement = 'S.1655'>
   <UML:TaggedValue.dataValue>
    	Return the capacity of the telemetry stream. The capacity of this
telemetry stream is equal to the size in bytes of the byte array.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4948'
        name = 'return'
        modelElement = 'S.1655'>
   <UML:TaggedValue.dataValue>
    	the size of the byte array in number of bytes
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4950'
        name = 'documentation'
        modelElement = 'S.1656'>
   <UML:TaggedValue.dataValue>
    	Set the capacity of the telemetry stream. The capacity of this
telemetry stream is equal to the size in bytes of the byte array.
If s is the staring address of the byte array (loaded with method
&lt;code&gt;setStartingAddress&lt;/code&gt;) and if L is the byte array size
defined with this method, then the i-th location of the byte array is
internally accessed as s[i] where i must be in the range [0,L-1].
It is the responsibility of the user to ensure that the locations thus
accessed are free for use by this telemetry stream component.
Note that the size of the byte array should be greater than 0.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4951'
        name = 'see'
        modelElement = 'S.1656'>
   <UML:TaggedValue.dataValue>
    	#setStartingAddress
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4952'
        name = 'param'
        modelElement = 'S.1656'>
   <UML:TaggedValue.dataValue>
    	n the size of the byte array in number of bytes
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4955'
        name = 'documentation'
        modelElement = 'S.1657'>
   <UML:TaggedValue.dataValue>
    	Set the starting address of the byte array. This component does not
perform any memory allocation operation. It assumes that the memory
for the byte array has already been allocated by the caller of this
method.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4956'
        name = 'param'
        modelElement = 'S.1657'>
   <UML:TaggedValue.dataValue>
    	pAddress pointer to the first location of the byte array
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4959'
        name = 'documentation'
        modelElement = 'S.1658'>
   <UML:TaggedValue.dataValue>
    	Get the starting address of the byte array.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4960'
        name = 'return'
        modelElement = 'S.1658'>
   <UML:TaggedValue.dataValue>
    	the pointer to the first location of the byte array
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4962'
        name = 'documentation'
        modelElement = 'S.1659'>
   <UML:TaggedValue.dataValue>
    	Return true if there is enough space in the byte array to write
the argument telemetry packet.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
if ( pItem-&gt;getNumberOFBytes() greater than (N-writeCounter) )
return false;
else
return true; &lt;/PRE&gt;
where N is the size of the byte array and
&lt;code&gt;writeCounter&lt;/code&gt; is the value of the write counter.
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4963'
        name = 'param'
        modelElement = 'S.1659'>
   <UML:TaggedValue.dataValue>
    	pPacket the telemetry packet to be written to the telemetry stream
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4964'
        name = 'return'
        modelElement = 'S.1659'>
   <UML:TaggedValue.dataValue>
    	true if there is enough space in the telemetry stream to write
the telemetry packet, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4967'
        name = 'documentation'
        modelElement = 'S.1660'>
   <UML:TaggedValue.dataValue>
    	Write one telemetry packet to the byte array.
The telemetry bytes read from the telemetry packet are written starting at
location wc in the byte array
where wc is the value of the write counter.
When the end of the byte array is reached, the method returns.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4968'
        name = 'param'
        modelElement = 'S.1660'>
   <UML:TaggedValue.dataValue>
    	pItem the telemetry packet to be written to the telemetry stream
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4971'
        name = 'documentation'
        modelElement = 'S.1661'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on the telemetry stream:
verify that the size and starting address of the byte array have
been loaded.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4972'
        name = 'return'
        modelElement = 'S.1661'>
   <UML:TaggedValue.dataValue>
    	true if the telemetry stream is configured, false otherwise.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4974'
        name = 'documentation'
        modelElement = 'S.1560'>
   <UML:TaggedValue.dataValue>
    	Telemetry stream that writes the content of a telemetry packet to
a set of 16-bit words encapsulated in data items.
The data items will normally encapsulate hardware
registers representing the telemetry interface. The data items
are implemented as instances of class &lt;code&gt;DC_RawDataItem&lt;/code&gt;.
&lt;p&gt;
This class maintains a &lt;i&gt;write counter&lt;/i&gt;. The write counter has
a value between 0 and N-1 where N is the number of data items
managed by the telemetry stream. The counter is reset to 0 by
a call to operation &lt;code&gt;reset&lt;/code&gt; or &lt;code&gt;flush&lt;/code&gt;.
It is incremented by 1 every time a new 16-bit word is written to
a data item. When the write counter reaches the value of N, no
further items can be written and write requests remain without
effect until a &lt;code&gt;reset&lt;/code&gt; or &lt;code&gt;flush&lt;/code&gt; is performed.
&lt;p&gt;
The number of data items is a user-defined parameter. It must be set
as part of the component configuration.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4975'
        name = 'author'
        modelElement = 'S.1560'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4976'
        name = 'see'
        modelElement = 'S.1560'>
   <UML:TaggedValue.dataValue>
    	DC_RawDataItem
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4977'
        name = 'version'
        modelElement = 'S.1560'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4978'
        name = 'documentation'
        modelElement = 'S.1665'>
   <UML:TaggedValue.dataValue>
    	Instantiate the component. The class identifier is set. The number of data
items is set to an illegal
value to signify that the component is not yet configured.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4979'
        name = 'documentation'
        modelElement = 'S.1666'>
   <UML:TaggedValue.dataValue>
    	Reset the telemetry stream. The write counter is reset to 0.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4981'
        name = 'documentation'
        modelElement = 'S.1667'>
   <UML:TaggedValue.dataValue>
    	The flush operation is equivalent to a reset operation.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4982'
        name = 'see'
        modelElement = 'S.1667'>
   <UML:TaggedValue.dataValue>
    	#reset
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4984'
        name = 'documentation'
        modelElement = 'S.1668'>
   <UML:TaggedValue.dataValue>
    	Return the number of data items managed by this telemetry stream.
The number of data items is set with method &lt;code&gt;setNumberOfDataItems&lt;/code&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4985'
        name = 'see'
        modelElement = 'S.1668'>
   <UML:TaggedValue.dataValue>
    	#setNumberOfDataItems
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4986'
        name = 'return'
        modelElement = 'S.1668'>
   <UML:TaggedValue.dataValue>
    	the size of the telemetry stream (the number of data items)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4988'
        name = 'documentation'
        modelElement = 'S.1669'>
   <UML:TaggedValue.dataValue>
    	Set the number of data items managed by this telemetry stream.
This method causes the memory for the data structure holding the
data items to be allocated. After the successful allocation of the
memory, the telemetry stream is reset.
&lt;p&gt;
This is an initialization method. It should be called before the
telemetry stream is used the first time and it should not be called more
than once.
The number of data items should be greater than 0.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4989'
        name = 'see'
        modelElement = 'S.1669'>
   <UML:TaggedValue.dataValue>
    	#getSize
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4990'
        name = 'param'
        modelElement = 'S.1669'>
   <UML:TaggedValue.dataValue>
    	n the number of data items
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4993'
        name = 'documentation'
        modelElement = 'S.1670'>
   <UML:TaggedValue.dataValue>
    	Set the n-th data item.
The data item are the locations to which the bytes written from the
telemetry packet are written.
The index n must lie in the interval [0,N-1] where N is the number of data
items managed by this telemetry stream (the return value of method
&lt;code&gt;getSize&lt;/code&gt;). Use of an out-of-range index has no effect.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4994'
        name = 'see'
        modelElement = 'S.1670'>
   <UML:TaggedValue.dataValue>
    	#setNumberOfDataItems
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4995'
        name = 'param'
        modelElement = 'S.1670'>
   <UML:TaggedValue.dataValue>
    	n the index of the data item to be set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.4996'
        name = 'param'
        modelElement = 'S.1670'>
   <UML:TaggedValue.dataValue>
    	pDataItem the data item to be associated to the index-th location
of the telemetry stream
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5000'
        name = 'documentation'
        modelElement = 'S.1671'>
   <UML:TaggedValue.dataValue>
    	Return true if it is possible to write the entire content of the argument
telemetry packet to the data item.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
if ( pItem-&gt;getNumberOfBytes() greater than 2*(N-writeCounter) )
return false;
else
return true; &lt;/PRE&gt;
where N is the number of data items in the telemetry stream and
&lt;code&gt;writeCounter&lt;/code&gt; is the value of the write counter.
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5001'
        name = 'param'
        modelElement = 'S.1671'>
   <UML:TaggedValue.dataValue>
    	pPacket the telemetry packet to be written to the telemetry stream.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5002'
        name = 'return'
        modelElement = 'S.1671'>
   <UML:TaggedValue.dataValue>
    	true if there is enough space in the telemetry stream to write
n bytes, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5005'
        name = 'documentation'
        modelElement = 'S.1672'>
   <UML:TaggedValue.dataValue>
    	Write the telemetry packet content to the data items.
Only the telemetry bytes in the telemetry packet are written (the header
information - the telemetry packet time tag, destination, type and subtype -
are not written).
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
for (i=0; i&lt;(pItem-&gt;getNumberOfBytes()-1); i=i+2)
collect the i-th and (i+1)-bytes from pItem
if ( writeCounter smaller than N-1 )
combine the i-th and (i+1)-bytes in one 16-bit word;
write the 16-bit word to writeCounter-th data item;
writeCounter++;
else
return; &lt;/PRE&gt;
where N is the number of data items in the telemetry stream.
The merge of two successive telemetry bytes from the telemetry packet
into one single 16-bit word is done by overlaying the i-th byte with the
least significant byte of the data item word and the (i+1)-th byte with
the most significant byte.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5006'
        name = 'param'
        modelElement = 'S.1672'>
   <UML:TaggedValue.dataValue>
    	pItem the telemetry packet to be written to the
telemetry stream.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5009'
        name = 'documentation'
        modelElement = 'S.1673'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on the telemetry stream:
verify that the number of data items has been set and that all
data items have been loaded.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5010'
        name = 'return'
        modelElement = 'S.1673'>
   <UML:TaggedValue.dataValue>
    	true if the telemetry stream is configured, false otherwise.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5012'
        name = 'documentation'
        modelElement = 'S.1557'>
   <UML:TaggedValue.dataValue>
    	Telemetry mode manager that cycles through the lists of telemetry packets.
This class extends the base class &lt;code&gt;TelemetryListModeManager&lt;/code&gt; 
by adding to it an implementation for the &lt;i&gt;update mechanism&lt;/i&gt; that
cycles through all the operational modes defined for the mode manager.
&lt;/p&gt;
An initialization sequence for this class consists of the following
steps (to be performed in the order given): &lt;ul&gt;
&lt;li&gt;Set the number of modes through method &lt;code&gt;setNumberOfModes&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set the default mode &lt;code&gt;setDefaultMode&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set the lengths of the lists through method
&lt;code&gt;setListLength&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Load the individual items through method &lt;code&gt;setListItem&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Reset the component by calling method &lt;code&gt;reset&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5013'
        name = 'author'
        modelElement = 'S.1557'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5014'
        name = 'version'
        modelElement = 'S.1557'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5015'
        name = 'documentation'
        modelElement = 'S.1674'>
   <UML:TaggedValue.dataValue>
    	Instantiate a cycling telemetry mode manager. This constructor sets the
class identifier and then returns.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5016'
        name = 'documentation'
        modelElement = 'S.1675'>
   <UML:TaggedValue.dataValue>
    	Cycle through the operational modes. Let N be the number of modes
and C be the current mode. If C is smaller than (N-1), then this
method updates the operationa mode to: (C+1). Otherwise it updates it
to 0.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5017'
        name = 'see'
        modelElement = 'S.1675'>
   <UML:TaggedValue.dataValue>
    	ModeManager#update
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5019'
        name = 'documentation'
        modelElement = 'S.1565'>
   <UML:TaggedValue.dataValue>
    	Telemetry item encapsulating a 16-bit integer accessed through a
raw data item. The raw data item is loaded as a configuration parameter.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5020'
        name = 'author'
        modelElement = 'S.1565'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5021'
        name = 'see'
        modelElement = 'S.1565'>
   <UML:TaggedValue.dataValue>
    	DC_RawDataItem
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5022'
        name = 'version'
        modelElement = 'S.1565'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5023'
        name = 'documentation'
        modelElement = 'S.1677'>
   <UML:TaggedValue.dataValue>
    	Instantiate the telemetry packet component. This constructor initializes the
size of the internal telemetry buffer of the superclass to 2 and sets
the initial value of the telemetry buffer to 0.
A pseudo-code implementation for this constructor is as follows: &lt;PRE&gt;
setNumberOfBytes(2);
setUnsignedShort(0,0);&lt;/PRE&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5024'
        name = 'documentation'
        modelElement = 'S.1678'>
   <UML:TaggedValue.dataValue>
    	Implement the &lt;i&gt;data update service&lt;/i&gt;. The internal telemetry buffer
is loaded with the value of the data item.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
tmWord = . . .;  // retrieve the 16-bit value of the data item
setUnsignedShort(0,tmWord);&lt;/PRE&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5026'
        name = 'documentation'
        modelElement = 'S.1679'>
   <UML:TaggedValue.dataValue>
    	Load the data item that is the source of the telemetry data for this
telemetry packet.
The data item is assumed to encapsulate a 16-bit value.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5027'
        name = 'param'
        modelElement = 'S.1679'>
   <UML:TaggedValue.dataValue>
    	pDataItem the data item acting as source of telemetry data
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5030'
        name = 'documentation'
        modelElement = 'S.1680'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on a
&lt;code&gt;DC_DataItem16TmWord&lt;/code&gt;: verify that the data item has been
loaded.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5031'
        name = 'return'
        modelElement = 'S.1680'>
   <UML:TaggedValue.dataValue>
    	true if the object is configured, false otherwise.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5033'
        name = 'documentation'
        modelElement = 'S.1549'>
   <UML:TaggedValue.dataValue>
    	Dummy implementation of the &lt;code&gt;PUSTelemetryPacket&lt;/code&gt; class
useful for testing purposes.
This telemetry packet encapsulates a single and settable byte. The
update service is implemented to increment the value of the byte
by one (with a wrap-around to zero when the value of 255 is reached).
The values of the telemetry packet attributes are initialized
to: &lt;ul&gt;
&lt;li&gt;The telemetry packet type is set to TEST_TM_TYPE&lt;/li&gt;
&lt;li&gt;The telemetry packet subtype is set to TEST_TM_SUBTYPE&lt;/li&gt;
&lt;li&gt;The telemetry packet time tag is set to TEST_TM_TIMETAG&lt;/li&gt;
&lt;/ul&gt;
The constants are defined in file &lt;code&gt;TestConstants.h&lt;/code&gt;.
Note that the telemetry destination does not need to be set because
it is already set to a default value by the constructor of
class &lt;code&gt;PUSTelemetryPacket&lt;/code&gt;. Similarly, the APID of the process
generating the telemetry data does not need to be set because it is
a static field that should be set during the test set up process.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5034'
        name = 'author'
        modelElement = 'S.1549'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5035'
        name = 'see'
        modelElement = 'S.1549'>
   <UML:TaggedValue.dataValue>
    	TestConstants
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5036'
        name = 'version'
        modelElement = 'S.1549'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5037'
        name = 'documentation'
        modelElement = 'S.1682'>
   <UML:TaggedValue.dataValue>
    	Instantiate a dummy PUS telemetry packet component. The class identifier is set,
and the encapsulated byte is initialized with a value of 0.
The telemetry packet attributes are set as indicated in the class comment.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5038'
        name = 'documentation'
        modelElement = 'S.1683'>
   <UML:TaggedValue.dataValue>
    	This method always returns 1. This telemetry packet only encapsulates
one single byte.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5039'
        name = 'return'
        modelElement = 'S.1683'>
   <UML:TaggedValue.dataValue>
    	always return 1
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5041'
        name = 'documentation'
        modelElement = 'S.1684'>
   <UML:TaggedValue.dataValue>
    	Return the encapsulated byte. The value of the argument is ignored.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5042'
        name = 'return'
        modelElement = 'S.1684'>
   <UML:TaggedValue.dataValue>
    	the value of the encapsulated byte
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5043'
        name = 'param'
        modelElement = 'S.1684'>
   <UML:TaggedValue.dataValue>
    	n this parameter is ignored
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5046'
        name = 'documentation'
        modelElement = 'S.1685'>
   <UML:TaggedValue.dataValue>
    	Increment the value of the encapsulated byte by one. Wrap around to 0
when the value of 255 is reached.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5048'
        name = 'documentation'
        modelElement = 'S.1686'>
   <UML:TaggedValue.dataValue>
    	Set the value of the encapsulated byte. This is the value returned by
method &lt;code&gt;getUnsignedByteUnchecked&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5049'
        name = 'see'
        modelElement = 'S.1686'>
   <UML:TaggedValue.dataValue>
    	#getUnsignedByteUnchecked
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5050'
        name = 'param'
        modelElement = 'S.1686'>
   <UML:TaggedValue.dataValue>
    	value the value of the encapsulated byte
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5053'
        name = 'documentation'
        modelElement = 'S.1556'>
   <UML:TaggedValue.dataValue>
    	Dummy implementation of the &lt;code&gt;TelemetryPacket&lt;/code&gt; interface
useful for testing purposes.
This telemetry packet encapsulates N settable bytes. The value of N
is a configuration parameter. The
update service is implemented to increment the value of each telemetry byte
by one (with a wrap-around to zero when the value of 255 is reached).
The &lt;i&gt;validity check&lt;/i&gt; can be dynamically set up to return
either &quot;data valid&quot; or &quot;data not valid&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5054'
        name = 'author'
        modelElement = 'S.1556'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5055'
        name = 'version'
        modelElement = 'S.1556'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5056'
        name = 'documentation'
        modelElement = 'S.1690'>
   <UML:TaggedValue.dataValue>
    	Instantiate a telemetry packet component. The class identifier is set,
and the return
value of the validity check is set to &quot;data valid&quot;. The number of
encapsulated bytes is set to an illegal value tosignify that the
component is not yet configured.
The constructor also calls the methods to set the telemetry packet time tag,
the type, the subtype, and the destination. These calls are unnecessary
from a functional point of view because none of these attributes is
implemented by the &lt;code&gt;TelemetryPacket&lt;/code&gt; class. However the calls
are useful during testing to achieve full statement coverage of the
the base class.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5057'
        name = 'documentation'
        modelElement = 'S.1691'>
   <UML:TaggedValue.dataValue>
    	This method always returns the number of telemetry bytes.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5058'
        name = 'return'
        modelElement = 'S.1691'>
   <UML:TaggedValue.dataValue>
    	the number of telemetry bytes
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5060'
        name = 'documentation'
        modelElement = 'S.1692'>
   <UML:TaggedValue.dataValue>
    	Return the n-th encapsulated byte.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5061'
        name = 'return'
        modelElement = 'S.1692'>
   <UML:TaggedValue.dataValue>
    	the value of the n-th encapsulated byte
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5062'
        name = 'param'
        modelElement = 'S.1692'>
   <UML:TaggedValue.dataValue>
    	n the byte index
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5065'
        name = 'documentation'
        modelElement = 'S.1693'>
   <UML:TaggedValue.dataValue>
    	Increment the value of each encapsulated byte by one. Wrap around to 0
when the value of 255 is reached.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5067'
        name = 'documentation'
        modelElement = 'S.1694'>
   <UML:TaggedValue.dataValue>
    	Set the validity status. This is the value returned by the validity check
(method &lt;code&gt;isValid&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5068'
        name = 'see'
        modelElement = 'S.1694'>
   <UML:TaggedValue.dataValue>
    	#isValid
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5069'
        name = 'param'
        modelElement = 'S.1694'>
   <UML:TaggedValue.dataValue>
    	validStatus the validity status
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5072'
        name = 'documentation'
        modelElement = 'S.1695'>
   <UML:TaggedValue.dataValue>
    	Set the value of the n-th encapsulated byte. This is the value returned by
method &lt;code&gt;getUnsignedByteUnchecked&lt;/code&gt;. The value of n must lie in
the range [0,N-1] where N is the total number of telemetry bytes
encapsulated in the telemetry packet. Calls with out-of-range values of n
have no effect.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5073'
        name = 'see'
        modelElement = 'S.1695'>
   <UML:TaggedValue.dataValue>
    	#getUnsignedByteUnchecked
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5074'
        name = 'param'
        modelElement = 'S.1695'>
   <UML:TaggedValue.dataValue>
    	value the value of the encapsulated byte
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5075'
        name = 'param'
        modelElement = 'S.1695'>
   <UML:TaggedValue.dataValue>
    	n the index of the encapsulated byte
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5079'
        name = 'documentation'
        modelElement = 'S.1696'>
   <UML:TaggedValue.dataValue>
    	Set the number of bytes encapsulated by this telemetry packet.
This is an initialization method. It should only be called once.
Only positive values of the argument n are legal.
The telemetry bytes are initialized to zero.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5080'
        name = 'see'
        modelElement = 'S.1696'>
   <UML:TaggedValue.dataValue>
    	#getUnsignedByteUnchecked
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5081'
        name = 'param'
        modelElement = 'S.1696'>
   <UML:TaggedValue.dataValue>
    	n the number of bytes encapsulated in this telemetry packet
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5084'
        name = 'documentation'
        modelElement = 'S.1697'>
   <UML:TaggedValue.dataValue>
    	Return the validity status set with method &lt;code&gt;setValidStatus&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5085'
        name = 'see'
        modelElement = 'S.1697'>
   <UML:TaggedValue.dataValue>
    	#setValidStatus
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5086'
        name = 'return'
        modelElement = 'S.1697'>
   <UML:TaggedValue.dataValue>
    	the validity status
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5088'
        name = 'documentation'
        modelElement = 'S.1698'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on the component:
verify that the number of encapsulated bytes has been set.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5089'
        name = 'return'
        modelElement = 'S.1698'>
   <UML:TaggedValue.dataValue>
    	true if the component is configured, false otherwise.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5091'
        name = 'documentation'
        modelElement = 'S.1551'>
   <UML:TaggedValue.dataValue>
    	Dummy implementation of the &lt;code&gt;TelemetryStream&lt;/code&gt; interface
useful for testing purposes.
This class uses the default implementations provided by the super class and provides
a dummy implementation of its only pure virtual method &lt;code&gt;write&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5092'
        name = 'author'
        modelElement = 'S.1551'>
   <UML:TaggedValue.dataValue>
    	Roberto Totaro
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5093'
        name = 'version'
        modelElement = 'S.1551'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5094'
        name = 'documentation'
        modelElement = 'S.1699'>
   <UML:TaggedValue.dataValue>
    	Instantiate a telemetry stream component. The class identifier is set.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5095'
        name = 'documentation'
        modelElement = 'S.1700'>
   <UML:TaggedValue.dataValue>
    	Write the content of the telemetry packet to the telemetry stream. This
implementation does nothing.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5096'
        name = 'param'
        modelElement = 'S.1700'>
   <UML:TaggedValue.dataValue>
    	tmItem the telemetry packet to be written to the telemetry stream
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5099'
        name = 'documentation'
        modelElement = 'S.1562'>
   <UML:TaggedValue.dataValue>
    	File-oriented telemetry stream. The data written to the telemetry
stream are written to an output file. The output file can be either
a named file or the standard output. This will allow usage both
in a desktop environment and in many embedded environments. This
type of telemetry stream is primarily intended for testing purposes.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5100'
        name = 'author'
        modelElement = 'S.1562'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5101'
        name = 'version'
        modelElement = 'S.1562'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5102'
        name = 'documentation'
        modelElement = 'S.1702'>
   <UML:TaggedValue.dataValue>
    	Instantiate a file telemetry stream component. This constructor sets the
the class identifier.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5103'
        name = 'documentation'
        modelElement = 'S.1703'>
   <UML:TaggedValue.dataValue>
    	Set the output stream to which the telemetry data are written and
write a header to the output stream. If the
argument is &lt;code&gt;pNULL&lt;/code&gt;, then the output stream is assumed to be the standard
ouptut.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5104'
        name = 'param'
        modelElement = 'S.1703'>
   <UML:TaggedValue.dataValue>
    	outputStream the ouptut file or &lt;code&gt;pNULL&lt;/code&gt; if the telemetry data must be
written to the standard output
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5107'
        name = 'documentation'
        modelElement = 'S.1704'>
   <UML:TaggedValue.dataValue>
    	Return the output stream to which the telemetry data are written.
The return value can be &lt;code&gt;pNULL&lt;/code&gt; to signify that the output stream is
the standard ouptut.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5108'
        name = 'return'
        modelElement = 'S.1704'>
   <UML:TaggedValue.dataValue>
    	the ouptut file or &lt;code&gt;pNULL&lt;/code&gt; if the telemetry data must be
written to the standard output
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5110'
        name = 'documentation'
        modelElement = 'S.1705'>
   <UML:TaggedValue.dataValue>
    	Write an &quot;end-of-TM-frame&quot; message to the output stream and flush it.
The &quot;end-of-TM-frame&quot; message consists of a single straight line. If the output
stream is the standard output, no action is taken.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5112'
        name = 'documentation'
        modelElement = 'S.1706'>
   <UML:TaggedValue.dataValue>
    	Write the full content of the telemetry packet to the output stream.
First, the value of all the attributes (the telemetry time tag, the
telemetry type and subtype, the telemetry destination) are written.
Then the telemetry packet data are written as a sequence of bytes.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5113'
        name = 'param'
        modelElement = 'S.1706'>
   <UML:TaggedValue.dataValue>
    	tmItem the telemetry packet to be written to the output
stream.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5116'
        name = 'documentation'
        modelElement = 'S.1564'>
   <UML:TaggedValue.dataValue>
    	PUS telemetry data reporting packet with no filtering.
A &lt;i&gt;PUS data reporting packet&lt;/i&gt; is used to hold the data associated
to a housekeeping and diagnostic data reporting definition (PUS service type 3).
This class assumes that no filtering is performed on the reported data.
The following types of service reports of the housekeeping
and diagnostic data reporting service are modelled:&lt;ul&gt;
&lt;li&gt;The housekeeping parameter report (PUS service subtype 25)&lt;/li&gt;
&lt;li&gt;The diagnostic parameter report (PUS service subtype 26)&lt;/li&gt;
&lt;/ul&gt;
A data reporting packet is characterized by the following attributes: &lt;ul&gt;
&lt;li&gt;A structure identification or SID&lt;/li&gt;
&lt;li&gt;A collection interval&lt;/li&gt;
&lt;li&gt;A set of parameter identifiers&lt;/li&gt;
&lt;li&gt;A set of fixed length arrays&lt;/li&gt;
&lt;li&gt;A mode flag&lt;/li&gt;
&lt;li&gt;An enabled flag&lt;/li&gt;
&lt;/ul&gt;
The &lt;i&gt;SID&lt;/i&gt; is an integer that uniquely identifies the data reporting packet.
&lt;p&gt;
The &lt;i&gt;collection interval&lt;/i&gt; defines the interval between successive
dispatches of the packet content to the telemetry stream. The collection interval
is expressed as a positive integer representing a number of activations
of the &lt;i&gt;data update service&lt;/i&gt; (see method &lt;code&gt;update&lt;/code&gt; in the base
class &lt;code&gt;TelemetryPacket&lt;/code&gt;). Thus, for instance, a collection interval of 3
indicates that the data in the reporting packets are made available for dispatch
to the telemetry stream every third activation of the &lt;i&gt;data update service&lt;/i&gt;.
&lt;p&gt;
The &lt;i&gt;parameter identifiers&lt;/i&gt; identify the parameters whose values have to
be included in the reporting packet. Only parameters in the &lt;i&gt;system data pool&lt;/i&gt;
can be included in a data reporting
packet. As parameter identifier, the &lt;i&gt;data pool item identifier&lt;/i&gt; must be used
(see class &lt;code&gt;DataPool&lt;/code&gt;).
&lt;p&gt;
A &lt;i&gt;fixed length array&lt;/i&gt; identifies a set of parameters that must be sampled with the
frequency. The fixed length array specifies the sampling frequency through the
the &lt;i&gt;repetition count&lt;/i&gt;, namely the number of times that the parameters must be sampled in a
collection interval. If C is the collection interval for the data reporting packet
and NREP is the repetition count, then C must be a multiple of NREP. The value of
the parameters is acquired every C/NREP activations of the &lt;i&gt;data update service&lt;/i&gt;.
&lt;p&gt;
The &lt;i&gt;mode flag&lt;/i&gt; determines whether the &quot;mode&quot; field should be included
in the generated packet. If it is to be included, its value is always zero.
The mode flag is a static attribute that is defined as a constant PUS_DATA_REP_MODE
in file &lt;code&gt;Constants.h&lt;/code&gt;.
&lt;p&gt;
The &lt;i&gt;enabled flag&lt;/i&gt; determines whether the data reporting packet is enabled
or disabled. If a data reporting
packet is disabled, then its &lt;i&gt;update service&lt;/i&gt; takes no action and its
&lt;i&gt;data acquisition service&lt;/i&gt; reports: &quot;no telemetry data to be acquired&quot;.
&lt;p&gt;
An instance of this class is first configured after being created by performing the
following operations: &lt;ul&gt;
&lt;li&gt;The maximum size of the packet definition buffer is set (method
&lt;code&gt;setDefinitionBufferSize&lt;/code&gt;). &lt;/li&gt;
&lt;li&gt;The maximum size of the packet value buffer is set (method
&lt;code&gt;setValueBufferSize&lt;/code&gt;). &lt;/li&gt;
&lt;li&gt;The maximum number of fixed-length array is set (method &lt;code&gt;setMaxNumberFA&lt;/code&gt;). &lt;/li&gt;
&lt;/ul&gt;
The &lt;i&gt;packet definition buffer&lt;/i&gt; is an internal buffer that holds a copy of the
application data of the PUS telecommand that defined the housekeeping or diagnostic packet
report.
The &lt;i&gt;packet value buffer&lt;/i&gt; is an internal buffer that holds an image of
telemetry data associated to this telemetry packet. In particular, it hols
the values of the
parameters as they are acquired in a collection interval.
&lt;p&gt;
Instances of this class will normally undergo a second configuration process
at run time when the housekeeping or diagnostic report definition is loaded.
This configuration procedure is performed by loading the packet definition buffer
byte by byte using method &lt;code&gt;setDefinitionBuffer&lt;/code&gt;.
&lt;p&gt;
The PUS specifies that the SID, the collection interval, the number of parameters, the number
of repetitions, and the number of fixed-length arrays, should be of &quot;unsigned integer&quot; type but it
does not specify the implementation of this type. This class uses &lt;code&gt;typedef&lt;/code&gt; type definitions
for the SID, the collection interval, and the number of parameters and it implements the number
of repetitions and the number of fixed length arrays as &quot;unsigned char&quot;.
Similarly, the PUS specifies that the mode of packet generation should be of &quot;enumerated&quot; type but
it does not elaborate on the exact nature of this type. This class implements the mode indicator
as an &quot;unsigned char&quot;.
&lt;p&gt;
This class retrieves the data to be stored in the PUS reporting packet from the system
data pool. In order to copy them to the packet, information about the type of the data
is required. This information is retrieved by using the &lt;i&gt;type checking&lt;/i&gt; service of
the data pool (see methods &lt;code&gt;isFloat&lt;/code&gt; and &lt;code&gt;isInteger&lt;/code&gt; in class
&lt;code&gt;DataPool&lt;/code&gt;). This class therefore assumes that the type checking service is fully
implemented by the system data pool.
&lt;p&gt;
This class implements the &lt;i&gt;fast version of the data acquisition service&lt;/i&gt;. This is 
useful when the amount of telemetry data is very large.
&lt;p&gt;
&lt;b&gt;Description of Internal Data Structures&lt;/b&gt;
The internal data structures of this class do not differentiate between the paramaters that
are sampled only once per collection interval and the fixed-length arrays that describe
oversampled paramaters. To the parameters that are sampled only once per collection interval,
a fictitious fixed-length array is associated with a repetition count of 1.
&lt;p&gt;
The internal array F holds the descriptors of the fixed length arrays. Element F[0] describes
the parameters that are to be sampled only once per collection interval. Element F[i] with i&gt;0
describes the i-th fixed length array.
&lt;p&gt;
The definition of the PUS packet is kept in the &lt;i&gt;packet definition buffer&lt;/i&gt; that is a byte-by-byte
copy of the application data in the PUS telecommand defining the housekeeping or diagnostic
parameter report. This buffer is loaded byte by byte and it is interpreted as it is loaded.
The objective of the interpretation is to set up a &quot;map&quot; of the buffer. This map consists
of variables that point to locations in the buffer where certain information is held. Thus,
for instance, internal variable &lt;code&gt;indNFA&lt;/code&gt; points to the location in the buffer where
the NFA field is stored. The most important mapping variable is the array &lt;code&gt;indFA&lt;/code&gt;.
Element &lt;code&gt;indFA[i]&lt;/code&gt; with i&gt;0 holds the location of the NREP value of the i-th fixed-length
array.
&lt;p&gt;
The &lt;i&gt;packet value buffer&lt;/i&gt; is organized as an array of unsigned char. Its first locations
hold the SID and, depending on the value of flag PUS_DATA_REP_MODE, the reporting mode.
Successive locations hold the collected parameter
values stored in consecutive locations.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5117'
        name = 'author'
        modelElement = 'S.1564'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5118'
        name = 'see'
        modelElement = 'S.1564'>
   <UML:TaggedValue.dataValue>
    	DataPool
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5119'
        name = 'version'
        modelElement = 'S.1564'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5120'
        name = 'documentation'
        modelElement = 'S.1719'>
   <UML:TaggedValue.dataValue>
    	Get the parameter id of the parPos-th parameter in the faIndex-th fixed length array.
The parameter id is read from the packet definition buffer. The value of &lt;code&gt;faIndex&lt;/code&gt;
should lie in the interval [0,N] where N is the number of fixed length arrays in the
packet. A value of &lt;code&gt;faIndex&lt;/code&gt; equal to zero is taken to refer to the
paramaters that are sampled only once per collection interval. The value of &lt;code&gt;parPos&lt;/code&gt;
should lie in the interval [0,M-1] where M is the total number of parameters in
the fixed-length array (or the total number of parameters to be sampled only once per
collection interval).
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5121'
        name = 'param'
        modelElement = 'S.1719'>
   <UML:TaggedValue.dataValue>
    	faIndex the fixed length array index
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5122'
        name = 'param'
        modelElement = 'S.1719'>
   <UML:TaggedValue.dataValue>
    	parPos the position of the parameter in the fixed length array
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5123'
        name = 'return'
        modelElement = 'S.1719'>
   <UML:TaggedValue.dataValue>
    	the paramater identifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5127'
        name = 'documentation'
        modelElement = 'S.1720'>
   <UML:TaggedValue.dataValue>
    	Instantiate a PUS data report packet.
The size of the internal buffers are set to illegal values to signify
that the data report packet is not yet configured. The class identifier is set.
The packet type is set to: PUS_TYPE_DATA_REP.
The enable status is set to &quot;disabled&quot;. The &quot;in use&quot; status is set to:
&quot;packet not in use&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5128'
        name = 'see'
        modelElement = 'S.1720'>
   <UML:TaggedValue.dataValue>
    	PUS_TYPE_DATA_REP
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5129'
        name = 'documentation'
        modelElement = 'S.1721'>
   <UML:TaggedValue.dataValue>
    	Set the enable status of the data reporting packet.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5130'
        name = 'param'
        modelElement = 'S.1721'>
   <UML:TaggedValue.dataValue>
    	enabledStatus the new enabled status
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5133'
        name = 'documentation'
        modelElement = 'S.1722'>
   <UML:TaggedValue.dataValue>
    	Return the enable status of the data reporting packet.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5134'
        name = 'return'
        modelElement = 'S.1722'>
   <UML:TaggedValue.dataValue>
    	true if the data reporting packet is enabled, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5136'
        name = 'documentation'
        modelElement = 'S.1723'>
   <UML:TaggedValue.dataValue>
    	Getter method for the collection interval.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5137'
        name = 'return'
        modelElement = 'S.1723'>
   <UML:TaggedValue.dataValue>
    	the collection interval
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5139'
        name = 'documentation'
        modelElement = 'S.1724'>
   <UML:TaggedValue.dataValue>
    	Getter method for the number of parameters to be sampled once per collection
interval.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5140'
        name = 'return'
        modelElement = 'S.1724'>
   <UML:TaggedValue.dataValue>
    	the number of parameters
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5142'
        name = 'documentation'
        modelElement = 'S.1725'>
   <UML:TaggedValue.dataValue>
    	Getter method for the number of fixed-length arrays.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5143'
        name = 'return'
        modelElement = 'S.1725'>
   <UML:TaggedValue.dataValue>
    	the number of fixed-length arrays
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5145'
        name = 'documentation'
        modelElement = 'S.1726'>
   <UML:TaggedValue.dataValue>
    	Getter method for the structure identifier (SID) of the data reporting packet.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5146'
        name = 'return'
        modelElement = 'S.1726'>
   <UML:TaggedValue.dataValue>
    	the SID of the packet
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5148'
        name = 'documentation'
        modelElement = 'S.1727'>
   <UML:TaggedValue.dataValue>
    	Load the i-the byte of the &lt;i&gt;packet definition buffer&lt;/i&gt;. As the packet bytes
are loaded, they are interpreted and the internal map of the packet is constructed.
This method assumes that the bytes are loaded in sequence starting from the most significant
byte of the SID and ending with the least significant byte of the last parameter identifier
in the last fixed-length array of the packet.
&lt;p&gt;
The index i must lie in the interval [0,N-1] where N is the size of the
packet definition buffer. If this is not the case, then the method generates an event
report EVT_ILLEGAL_PUS_REP_PACKET and returns without taking any further action.
&lt;p&gt;
This method, among other things, maintains a counter that keeps track of the number of fixed
length arrays that have been loaded. If the number of fixed length arrays exceeds the
maximum value set with method &lt;code&gt;setMaxNumberFA&lt;/code&gt;, then an event report
EVT_ILLEGAL_PUS_REP_PACKET is generated.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5149'
        name = 'see'
        modelElement = 'S.1727'>
   <UML:TaggedValue.dataValue>
    	#setDefinitionBufferSize
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5150'
        name = 'param'
        modelElement = 'S.1727'>
   <UML:TaggedValue.dataValue>
    	i the byte to be loaded
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5151'
        name = 'param'
        modelElement = 'S.1727'>
   <UML:TaggedValue.dataValue>
    	val the value of the byte
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5155'
        name = 'documentation'
        modelElement = 'S.1728'>
   <UML:TaggedValue.dataValue>
    	Return the i-th byte of the &lt;i&gt;packet definition buffer&lt;/i&gt;. The values that are
returned are those that were set with the last set of consecutive calls to
method &lt;code&gt;setDefinitionBuffer&lt;/code&gt;.
This method should be used in conjunction with method &lt;code&gt;getDefinitionBufferLength&lt;/code&gt;.
The legal range of the index i is [0,N-1] where N is the return value of
&lt;code&gt;getDefinitionBufferLength&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5156'
        name = 'see'
        modelElement = 'S.1728'>
   <UML:TaggedValue.dataValue>
    	#getDefinitionBufferLength
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5157'
        name = 'see'
        modelElement = 'S.1728'>
   <UML:TaggedValue.dataValue>
    	#setDefinitionBuffer
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5158'
        name = 'param'
        modelElement = 'S.1728'>
   <UML:TaggedValue.dataValue>
    	i the index of the byte in the packet definition buffer to be returned
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5159'
        name = 'return'
        modelElement = 'S.1728'>
   <UML:TaggedValue.dataValue>
    	the value of the byte
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5162'
        name = 'documentation'
        modelElement = 'S.1729'>
   <UML:TaggedValue.dataValue>
    	Return the number of bytes in the &lt;i&gt;packet definition buffer&lt;/i&gt; that were loaded with
the last set of consecutive calls to method &lt;code&gt;setDefinitionBuffer&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5163'
        name = 'return'
        modelElement = 'S.1729'>
   <UML:TaggedValue.dataValue>
    	the number of loaded bytes in the packet definition buffer
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5165'
        name = 'documentation'
        modelElement = 'S.1730'>
   <UML:TaggedValue.dataValue>
    	Implement the data update service. This class maintains a &lt;i&gt;main counter&lt;/i&gt; and a
a set of &lt;i&gt;FA counters&lt;/i&gt;, one for each fixed-length array. After a reset (call
to method &lt;code&gt;reset&lt;/code&gt;). The main counter is initialized to the value of the
collection interval. The FA counters are initialized to the value of the
repetition count of their fixed-length array.
If the component is enabled, then every time this method is called, the counters are
decremented by one. When an FA counter reaches the value of zero, the following
actions are performed: &lt;ul&gt;
&lt;li&gt;The values of the parameters in the fixed-length array are acquired from the
system database and are stored in the parameter buffer&lt;/li&gt;
&lt;li&gt;The FA counter is reset to its initial value&lt;/li&gt;
&lt;/ul&gt;
When the main counter reaches zero, then all the parameter values are acquired.
In all cases, the time attribute of the telemetry packet is set to the current
time.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5167'
        name = 'documentation'
        modelElement = 'S.1731'>
   <UML:TaggedValue.dataValue>
    	Reset the internal state of the data reporting packet. The main counter is
initialized to the value of the
collection interval. The FA counters are initialized to the value of the
repetition counter of their fixed-length array. The component is disabled.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5168'
        name = 'see'
        modelElement = 'S.1731'>
   <UML:TaggedValue.dataValue>
    	#update
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5170'
        name = 'documentation'
        modelElement = 'S.1732'>
   <UML:TaggedValue.dataValue>
    	Return the number of bytes that this data reporting packet will provide at
the next call of the data acquisition service.
If this method is called at a time other than the end of a collection interval,
then its return value is zero. The end of a collection interval is detected by
looking at the value of the main counter defined in method &lt;code&gt;update&lt;/code&gt;.
At the end of a collection interval, this counter has value zero. A return
value of zero for this method indicates that the data reporting packet is not
providing any data for the telemetry stream. A PUS data reporting packet
is only intended to provide telemetry data at the end of its collection interval.
&lt;p&gt;
If this method is called at the end of a collection interval (i.e. at a time
when the main counter defined in method &lt;code&gt;updatey&lt;/code&gt; is equal to zero), then
its return value is equal to the number of bytes in the data reporting packet. This
is computed as follows: &lt;pre&gt;
n1 = sizeof(TD_SID);
if (PUS_DATA_REP_MODE)
n2 = 1;
else
n2 = 0;
n3 = 0;
for (all parameters p in the packet)
if (p is of type TD_Float)
n3 += (repetition count of p) * sizeof(TD_Float);
else
n3 += (repetition count of p) * sizeof(TD_Integer);
return (n1+n2+n3); &lt;/pre&gt;
The &quot;repetition count&quot; of a parameter is 1 for parameters that are collected only
once per cycle and it is as specified by the relevant fixed-length array for over-sampled
parameters.
&lt;p&gt;
If the packet is disabled, then this method returns zero to signify that a disabled
packet should not provide any telemetry data.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5171'
        name = 'see'
        modelElement = 'S.1732'>
   <UML:TaggedValue.dataValue>
    	#update
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5172'
        name = 'return'
        modelElement = 'S.1732'>
   <UML:TaggedValue.dataValue>
    	the number of bytes in this data reporting packet at the end of
a collection interval or zero at other times
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5174'
        name = 'documentation'
        modelElement = 'S.1733'>
   <UML:TaggedValue.dataValue>
    	Return the n-th byte of this data reporting packet. The image of this packet is stored
in the packet value buffer. This method therefore simply returns the value of the n-th element 
of the packet value buffer. 
Note that this method is independent of whether or not the packet is enabled.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5175'
        name = 'param'
        modelElement = 'S.1733'>
   <UML:TaggedValue.dataValue>
    	n the byte to be returned
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5178'
        name = 'documentation'
        modelElement = 'S.1734'>
   <UML:TaggedValue.dataValue>
    	Return a pointer to start address of the packet value buffer. 
This method implements the fast version of the data acquisition service.
This may be useful (if potentially unsafe) in the case of large packets.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5179'
        name = 'return'
        modelElement = 'S.1734'>
   <UML:TaggedValue.dataValue>
    	the start address of the packet value buffer
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5181'
        name = 'documentation'
        modelElement = 'S.1735'>
   <UML:TaggedValue.dataValue>
    	Return &lt;code&gt;true&lt;/code&gt; to signify that the fast version of the data acquisition
service is implemented.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5182'
        name = 'see'
        modelElement = 'S.1735'>
   <UML:TaggedValue.dataValue>
    	#getStartAddress
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5183'
        name = 'return'
        modelElement = 'S.1735'>
   <UML:TaggedValue.dataValue>
    	this method always returns &lt;code&gt;true&lt;/code&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5185'
        name = 'documentation'
        modelElement = 'S.1736'>
   <UML:TaggedValue.dataValue>
    	Set the maximum size of the &lt;i&gt;packet definition buffer&lt;/i&gt;.
This is an initialization method. It should be called only once as part of the
component configuration during the application initialization phase.
The maximum size should be smaller than 0xFF.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5186'
        name = 'todo'
        modelElement = 'S.1736'>
   <UML:TaggedValue.dataValue>
    	Clarify the reason for the 0xFF limit on the buffer size. This seems to be
obsolete.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5187'
        name = 'param'
        modelElement = 'S.1736'>
   <UML:TaggedValue.dataValue>
    	size the size of the packet definition buffer
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5190'
        name = 'documentation'
        modelElement = 'S.1737'>
   <UML:TaggedValue.dataValue>
    	Get the maximum size of the &lt;i&gt;packet definition buffer&lt;/i&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5191'
        name = 'return'
        modelElement = 'S.1737'>
   <UML:TaggedValue.dataValue>
    	the size of the packet definition buffer
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5193'
        name = 'documentation'
        modelElement = 'S.1738'>
   <UML:TaggedValue.dataValue>
    	Set the maximum number of fixed-length arrays that are allowed in a
data reporting packet.
This is an initialization method. It should be called only once as part of the
component configuration during the application initialization phase.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5194'
        name = 'param'
        modelElement = 'S.1738'>
   <UML:TaggedValue.dataValue>
    	n the maximum number of fixed-length arrays
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5197'
        name = 'documentation'
        modelElement = 'S.1739'>
   <UML:TaggedValue.dataValue>
    	Return the maximum number of fixed-length arrays that are allowed in a
data reporting packet.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5198'
        name = 'return'
        modelElement = 'S.1739'>
   <UML:TaggedValue.dataValue>
    	the maximum number of Ffixed-length arrays
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5200'
        name = 'documentation'
        modelElement = 'S.1740'>
   <UML:TaggedValue.dataValue>
    	Set the maximum size of the &lt;i&gt;packet value buffer&lt;/i&gt;.
This is an initialization method. It should be called only once as part of the
component configuration during the application initialization phase.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5201'
        name = 'param'
        modelElement = 'S.1740'>
   <UML:TaggedValue.dataValue>
    	size the size of the packet definition buffer
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5204'
        name = 'documentation'
        modelElement = 'S.1741'>
   <UML:TaggedValue.dataValue>
    	Return the maximum size of the &lt;i&gt;packet value buffer&lt;/i&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5205'
        name = 'return'
        modelElement = 'S.1741'>
   <UML:TaggedValue.dataValue>
    	the size of the packet definition buffer
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5207'
        name = 'documentation'
        modelElement = 'S.1742'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on the telemetry packet:
verify that: &lt;ul&gt;
&lt;li&gt;The maximum size of the packet definition buffer has a legal value&lt;/li&gt;
&lt;li&gt;The maximum size of the packet value buffer has a legal value&lt;/li&gt;
&lt;li&gt;The maximum number of fixed-length arrays has a legal value&lt;/li&gt;
&lt;/ul&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5208'
        name = 'return'
        modelElement = 'S.1742'>
   <UML:TaggedValue.dataValue>
    	true if the component is configured, false otherwise.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5211'
        name = 'documentation'
        modelElement = 'S.1552'>
   <UML:TaggedValue.dataValue>
    	PUS telemetry packet implementing the memory dump service using absolute addresses 
(type 6, subtype 6).
This class adds to its superclass the 
implementation of the &lt;i&gt;data update service&lt;/i&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5212'
        name = 'author'
        modelElement = 'S.1552'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5213'
        name = 'todo'
        modelElement = 'S.1552'>
   <UML:TaggedValue.dataValue>
    	construct a test case for this class.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5214'
        name = 'version'
        modelElement = 'S.1552'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5215'
        name = 'documentation'
        modelElement = 'S.1750'>
   <UML:TaggedValue.dataValue>
    	Instantiate a PUS memory dump with absolute addresses telemetry packet.
The class identifier is set. The telemetry subtype attribute
is set to PUS_ST_TM_DMP_ABS.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5216'
        name = 'documentation'
        modelElement = 'S.1751'>
   <UML:TaggedValue.dataValue>
    	Implement the &lt;i&gt;data update service&lt;/i&gt; for the PUS memory dump with absolute addresses packet.
The memory locations to be dumped are stored in the &lt;code&gt;block&lt;/code&gt; data structure
defined in the superclass. The memory dump data are collected and stored in the
&lt;i&gt;dump buffer&lt;/i&gt; which is also defined in the superclass. Both the &lt;code&gt;block&lt;/code&gt;
and &lt;i&gt;dump buffer&lt;/i&gt; structures are declared &lt;code&gt;protected&lt;/code&gt; in the superclass
and can therefore be directly accessed here. This method uses the data in the 
&lt;code&gt;block&lt;/code&gt; structure and the value of the base address to construct and image of the
telemetry packet and store it in the &lt;i&gt;dump buffer&lt;/i&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5218'
        name = 'documentation'
        modelElement = 'S.1566'>
   <UML:TaggedValue.dataValue>
    	PUS telemetry packet implementing the memory dump service using base plus offset 
(type 6, subtype 4).
This class adds to its superclass the modelling of the base address and the 
implementation of the &lt;i&gt;data update service&lt;/i&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5219'
        name = 'author'
        modelElement = 'S.1566'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5220'
        name = 'todo'
        modelElement = 'S.1566'>
   <UML:TaggedValue.dataValue>
    	construct a test case for this class.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5221'
        name = 'version'
        modelElement = 'S.1566'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5222'
        name = 'documentation'
        modelElement = 'S.1753'>
   <UML:TaggedValue.dataValue>
    	Instantiate a PUS memory dump with offset telemetry packet.
The class identifier is set. The telemetry subtype attribute
is set to PUS_ST_TM_DMP_OFF. The base address is initialized to zero.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5223'
        name = 'documentation'
        modelElement = 'S.1754'>
   <UML:TaggedValue.dataValue>
    	Set the base address for the dump packet.
Only values greater than zero are legal.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5224'
        name = 'see'
        modelElement = 'S.1754'>
   <UML:TaggedValue.dataValue>
    	#update
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5225'
        name = 'param'
        modelElement = 'S.1754'>
   <UML:TaggedValue.dataValue>
    	base the base address
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5228'
        name = 'documentation'
        modelElement = 'S.1755'>
   <UML:TaggedValue.dataValue>
    	Get the base address for the dump packet.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5229'
        name = 'see'
        modelElement = 'S.1755'>
   <UML:TaggedValue.dataValue>
    	#setBaseAddress
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5230'
        name = 'return'
        modelElement = 'S.1755'>
   <UML:TaggedValue.dataValue>
    	the base address
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5232'
        name = 'documentation'
        modelElement = 'S.1756'>
   <UML:TaggedValue.dataValue>
    	Implement the &lt;i&gt;data update service&lt;/i&gt; for the PUS memory dump with offset telemetry packet.
The memory locations to be dumped are stored in the &lt;code&gt;block&lt;/code&gt; data structure
defined in the superclass. The memory dump data are collected and stored in the
&lt;i&gt;dump buffer&lt;/i&gt; which is also defined in the superclass. Both the &lt;code&gt;block&lt;/code&gt;
and &lt;i&gt;dump buffer&lt;/i&gt; structures are declared &lt;code&gt;protected&lt;/code&gt; in the superclass
and can therefore be directly accessed here. This method uses the data in the 
&lt;code&gt;block&lt;/code&gt; structure and the value of the base address to construct and image of the
telemetry packet and store it in the &lt;i&gt;dump buffer&lt;/i&gt;. 
&lt;p&gt;
This method relies on the data in the &lt;code&gt;block&lt;/code&gt; data structure to be consistent with
the value of the base address. In particular, the following must be ensured: &lt;ul&gt;
&lt;li&gt;The value of the base address must be smaller than all the &lt;code&gt;startAddress&lt;/code&gt;
fields of the &lt;code&gt;block&lt;/code&gt; data structure.&lt;/li&gt;
&lt;li&gt;The offset field is computed as the difference between the value of the &lt;code&gt;startAddress&lt;/code&gt;
field of the &lt;code&gt;block&lt;/code&gt; data structure and the value of the base address. The result
must be expressible as an integer of type &lt;code&gt;TD_PUSMemOffset&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
Compliance with the above conditions is not checked at run time (but violation may result in
in a run-time exception). As they are collected, the memory dump data are stored in the
&lt;i&gt;dump buffer&lt;/i&gt; defined by the superclass. A check is made that there is no overflow.
If this is found to be the case, then the method returns after generating event report
EVT_PUS_TOO_MANY_MEM_DATA. In this case, no memory dump data are collected.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5234'
        name = 'documentation'
        modelElement = 'S.1544'>
   <UML:TaggedValue.dataValue>
    	PUS telemetry packet implementing the telecommand verification service.
This class can model any of the telecommand verification service
packets. The value of the subtype attribute determines which packet is
being modeled.
&lt;p&gt;
This class is intended to be used by a component that monitors
the execution status of a telecommand. Upon detecting a change in
the execution status of a telecommand, this component configures an
instance of &lt;code&gt;PUSTcVerificationPacket&lt;/code&gt; in accordance with the
detected state of the telecommand execution. The &lt;code&gt;PUSTcVerificationPacket&lt;/code&gt;
instance should then be loaded into the &lt;i&gt;telementry manager&lt;/i&gt; for immediate
dispatch to the telemetry channel.
&lt;p&gt;
A telemetry packet of type &lt;code&gt;PUSTcVerificationPacket&lt;/code&gt; can contain two or
three fields. It contains two fields if it reports a telecommand success. It contains three fields
if it reports a telecommand failure. The two fields that are always present are
the packet identifier of the telecommand and the packet sequence control of the telecommand.
The third field is a single error code that conveys information about the reason of
the telecommand failure.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5235'
        name = 'author'
        modelElement = 'S.1544'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5236'
        name = 'todo'
        modelElement = 'S.1544'>
   <UML:TaggedValue.dataValue>
    	construct a test case for this class.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5237'
        name = 'version'
        modelElement = 'S.1544'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5238'
        name = 'documentation'
        modelElement = 'S.1760'>
   <UML:TaggedValue.dataValue>
    	Instantiate a PUS Telecommand Verification telemetry packet.
The class identifier is set. The telemetry type attributes
is set to PUS_TYPE_TC_VER. The error code is set to zero.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5239'
        name = 'documentation'
        modelElement = 'S.1761'>
   <UML:TaggedValue.dataValue>
    	Return the number of bytes managed by this telemetry packet.
The number of bytes is computed as follows. If the telemetry packet
is being used to report a successful telecommand execution, then its
number of bytes is given by: &lt;pre&gt;
sizeof(TD_PUSPacketId)+sizeof(TD_TelecommandId) &lt;/pre&gt;
If the telemetry packet
is being used to report a successful telecommand execution, then its
number of bytes is given by: &lt;pre&gt;
sizeof(TD_PUSPacketId)+sizeof(TD_TelecommandId)+sizeof(TD_CheckCode) &lt;/pre&gt;
Note that &lt;code&gt;TD_CheckCode&lt;/code&gt; is the type of the error code field.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5240'
        name = 'see'
        modelElement = 'S.1761'>
   <UML:TaggedValue.dataValue>
    	#setErrorCode
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5241'
        name = 'return'
        modelElement = 'S.1761'>
   <UML:TaggedValue.dataValue>
    	number of bytes in this telemetry packet
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5243'
        name = 'documentation'
        modelElement = 'S.1762'>
   <UML:TaggedValue.dataValue>
    	Implement the  &lt;i&gt;data acquisition service&lt;/i&gt; for the PUS telecommand verification
packet. The bytes associated to this telemetry packet are returned according to the
following algorithm: &lt;pre&gt;
if ( (subtype == PUS_ST_TC_VER_ACC_SC) ||
(subtype == PUS_ST_TC_EXE_STR_SC) ||
(subtype == PUS_ST_TC_EXE_PRO_SC) ||
(subtype == PUS_ST_TC_EXE_END_SC) ) {
return TC packet ID;
return TC packet sequence control;
} else {
return TC packet ID;
return TC packet sequence control;
return error code;
} &lt;/pre&gt;
The TC packet ID, TC packet sequence control, and the error code are transferred byte
by byte starting from the byte with the highest address.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5244'
        name = 'return'
        modelElement = 'S.1762'>
   <UML:TaggedValue.dataValue>
    	value of n-th telemetry byte
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5245'
        name = 'param'
        modelElement = 'S.1762'>
   <UML:TaggedValue.dataValue>
    	n the telemetry byte to be returned (starting with byte 0)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5248'
        name = 'documentation'
        modelElement = 'S.1763'>
   <UML:TaggedValue.dataValue>
    	Return the error code that describes the reason for the telecommand failure.
This field is only meaningful when the telemetry packet is being used to
describe a telecommand failure. The default value of the error code is zero.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5249'
        name = 'return'
        modelElement = 'S.1763'>
   <UML:TaggedValue.dataValue>
    	the error code
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5251'
        name = 'documentation'
        modelElement = 'S.1764'>
   <UML:TaggedValue.dataValue>
    	Set the error code that describes the reason for the telecommand failure.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5252'
        name = 'see'
        modelElement = 'S.1764'>
   <UML:TaggedValue.dataValue>
    	#getErrorCode
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5253'
        name = 'param'
        modelElement = 'S.1764'>
   <UML:TaggedValue.dataValue>
    	errCode the error code
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5256'
        name = 'documentation'
        modelElement = 'S.1765'>
   <UML:TaggedValue.dataValue>
    	Return the identifier of the telecommand for which the execution verification
report is constructed.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5257'
        name = 'return'
        modelElement = 'S.1765'>
   <UML:TaggedValue.dataValue>
    	the telecommand identifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5259'
        name = 'documentation'
        modelElement = 'S.1766'>
   <UML:TaggedValue.dataValue>
    	Set the identifier of the telecommand for which the execution verification
report is constructed.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5260'
        name = 'param'
        modelElement = 'S.1766'>
   <UML:TaggedValue.dataValue>
    	tcId the telecommand identifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5263'
        name = 'documentation'
        modelElement = 'S.1767'>
   <UML:TaggedValue.dataValue>
    	Implement the &lt;i&gt;data update service&lt;/i&gt; for the PUS telecommand verification packet.
This type of packet is configured dynamically by the component that monitors the
execution status of the telecommands. Its update service is therefore implemented
as a dummy method that returns without taking any action.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5265'
        name = 'documentation'
        modelElement = 'S.1546'>
   <UML:TaggedValue.dataValue>
    	PUS telemetry mode manager.
This telemetry mode manager has one single mode to which there 
corresponds a set of PUS data reporting telemetry packets 
(instances of class &lt;code&gt;PUSDataReportingPacket&lt;/code&gt;).
The telemetry packets can be loaded and unloaded dynamically. 
The iteration methods iterate through all the currently loaded 
telemetry packets (the order of the iteration is undefined).
The mode manager is configured with the maximum number of 
telemetry packets that it can hold (method &lt;code&gt;setMaxNumberOfPackets&lt;/code&gt;).
&lt;/p&gt;
An initialization sequence for this class consists of the following
steps (to be performed in the order given): &lt;ul&gt;
&lt;li&gt;Set the maximum number of loadable packets with method &lt;code&gt;setMaxNumberOfPackets&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Reset the component by calling method &lt;code&gt;reset&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5266'
        name = 'author'
        modelElement = 'S.1546'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5267'
        name = 'ingroup'
        modelElement = 'S.1546'>
   <UML:TaggedValue.dataValue>
    	PUS
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5268'
        name = 'version'
        modelElement = 'S.1546'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5269'
        name = 'documentation'
        modelElement = 'S.1772'>
   <UML:TaggedValue.dataValue>
    	This method returns without taking any action.
This method is unnecessary in this class because no mode-dependent
memory data structures need to be allocated.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5270'
        name = 'see'
        modelElement = 'S.1772'>
   <UML:TaggedValue.dataValue>
    	#setNumberOfModes
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5271'
        name = 'param'
        modelElement = 'S.1772'>
   <UML:TaggedValue.dataValue>
    	numberOfModes the number of modes
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5274'
        name = 'documentation'
        modelElement = 'S.1773'>
   <UML:TaggedValue.dataValue>
    	Instantiate a PUS telemetry mode manager. The class identifier is set.
The number of modes is initialized to 1. The single mode is declared to 
be the default mode.
The size of the set of telemetry packet is initialized with illegal values
to signify that the component is not yet configured.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5275'
        name = 'documentation'
        modelElement = 'S.1774'>
   <UML:TaggedValue.dataValue>
    	This method return without taking any action. This mode manager
has only one mode and therefore the &lt;i&gt;update&lt;/i&gt; operation is
implemented to return without taking any action.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5276'
        name = 'see'
        modelElement = 'S.1774'>
   <UML:TaggedValue.dataValue>
    	ModeManager#update
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5278'
        name = 'documentation'
        modelElement = 'S.1775'>
   <UML:TaggedValue.dataValue>
    	Retrieve the telemetry packet currently scanned by the iteration counter.
This method should only be used within an iteration cycle. This method
should only be used within an iteration cycle (i.e. while 
&lt;code&gt;isIterationFinished&lt;/code&gt; reports &lt;code&gt;false&lt;/code&gt;).
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5279'
        name = 'see'
        modelElement = 'S.1775'>
   <UML:TaggedValue.dataValue>
    	TelemetryModeManager#first
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5280'
        name = 'return'
        modelElement = 'S.1775'>
   <UML:TaggedValue.dataValue>
    	the item currently scanned by the iteration counter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5282'
        name = 'documentation'
        modelElement = 'S.1776'>
   <UML:TaggedValue.dataValue>
    	Load a telemetry packet in the set of packets managed by this
mode manager. If the set is already full, then an event of 
type EVT_ILLEGAL_MM is generated. Before calling this method, clients 
should call method
&lt;code&gt;isFull&lt;/code&gt; to check whether there is space available.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5283'
        name = 'param'
        modelElement = 'S.1776'>
   <UML:TaggedValue.dataValue>
    	pItem the item to be loaded
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5286'
        name = 'documentation'
        modelElement = 'S.1777'>
   <UML:TaggedValue.dataValue>
    	Unload the PUS telemetry packet identified by the argument SID.
If none of the currently loaded packets matches the given SID (or
if the set is currently empty),
no action is taken other than generating an event report of type
EVT_SID_NOT_FOUND. Method &lt;code&gt;isSIDLoaded&lt;/code&gt; can be used 
to check whether a packet with a certain SID is currently loaded.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5287'
        name = 'param'
        modelElement = 'S.1777'>
   <UML:TaggedValue.dataValue>
    	sid the SID of the packet to be unloaded
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5290'
        name = 'documentation'
        modelElement = 'S.1778'>
   <UML:TaggedValue.dataValue>
    	Check whether the mode manager is full.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5291'
        name = 'see'
        modelElement = 'S.1778'>
   <UML:TaggedValue.dataValue>
    	#loadPacket
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5292'
        name = 'return'
        modelElement = 'S.1778'>
   <UML:TaggedValue.dataValue>
    	true if no packets are currently loaded
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5294'
        name = 'documentation'
        modelElement = 'S.1779'>
   <UML:TaggedValue.dataValue>
    	Return the number of packets that are currently loaded.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5295'
        name = 'return'
        modelElement = 'S.1779'>
   <UML:TaggedValue.dataValue>
    	number of packets currently loaded
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5297'
        name = 'documentation'
        modelElement = 'S.1780'>
   <UML:TaggedValue.dataValue>
    	Check whether the packet with the argument SID is currently loaded.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5298'
        name = 'see'
        modelElement = 'S.1780'>
   <UML:TaggedValue.dataValue>
    	#unloadPacket
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5299'
        name = 'param'
        modelElement = 'S.1780'>
   <UML:TaggedValue.dataValue>
    	sid the SID
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5300'
        name = 'return'
        modelElement = 'S.1780'>
   <UML:TaggedValue.dataValue>
    	true if a packet with the argument SID is currently loaded
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5303'
        name = 'documentation'
        modelElement = 'S.1781'>
   <UML:TaggedValue.dataValue>
    	Set the maximum number of packets that can be loaded. 
This is an initialization method. It should only be called once.
Only positive values for the maximum number of packets are legal.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5304'
        name = 'param'
        modelElement = 'S.1781'>
   <UML:TaggedValue.dataValue>
    	n the maximum number of packets
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5307'
        name = 'documentation'
        modelElement = 'S.1782'>
   <UML:TaggedValue.dataValue>
    	Return the maximum number of packets that can be loaded.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5308'
        name = 'return'
        modelElement = 'S.1782'>
   <UML:TaggedValue.dataValue>
    	maximum number of packets that can be loaded
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5310'
        name = 'documentation'
        modelElement = 'S.1783'>
   <UML:TaggedValue.dataValue>
    	Iteration method to iterate through the currently loaded telemetry 
packets. This method should be used jointly with methods: &lt;code&gt;next&lt;/code&gt;,
&lt;code&gt;isIterationFinished&lt;/code&gt; and &lt;code&gt;getIterationTelemetryPacket&lt;/code&gt;. 
Taken together,
these methods allow all the currently loaded items to be scanned. 
The item currently scanned can be retrieved
through method &lt;code&gt;getIterationTelemetryPacket&lt;/code&gt;.
Thus, a typical iteration cycle might be organized as follows: &lt;PRE&gt;
for (first(); !isIterationFinished(); next()) {
pItem = getIterationTelemetryPacket();
. . .    // process pItem
}  &lt;/PRE&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5312'
        name = 'documentation'
        modelElement = 'S.1784'>
   <UML:TaggedValue.dataValue>
    	Iteration method to be used in conjunction with methods &lt;code&gt;first&lt;/code&gt;
and &lt;code&gt;isIterationFinished&lt;/code&gt;.
This method should only be called as part of an iteration cycle.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5313'
        name = 'see'
        modelElement = 'S.1784'>
   <UML:TaggedValue.dataValue>
    	#first
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5315'
        name = 'documentation'
        modelElement = 'S.1785'>
   <UML:TaggedValue.dataValue>
    	Iteration method to be used in conjunction with methods &lt;code&gt;first&lt;/code&gt;
and &lt;code&gt;next&lt;/code&gt;.
This method should only be used as part of an iteration cycle. The result
of calling it before ever calling &lt;code&gt;first&lt;/code&gt;
is undefined.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5316'
        name = 'see'
        modelElement = 'S.1785'>
   <UML:TaggedValue.dataValue>
    	#first
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5317'
        name = 'return'
        modelElement = 'S.1785'>
   <UML:TaggedValue.dataValue>
    	true if the end of the iteration has been reached, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5319'
        name = 'documentation'
        modelElement = 'S.1786'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on a telemetry mode
manager: verify that the maximum number of telemetry packets that can
be loaded has been set
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5320'
        name = 'return'
        modelElement = 'S.1786'>
   <UML:TaggedValue.dataValue>
    	true if the mode manager is configured, false
otherwise.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5322'
        name = 'documentation'
        modelElement = 'S.1550'>
   <UML:TaggedValue.dataValue>
    	&lt;i&gt;Telemetry logger stream&lt;/i&gt; that logs all telemetry packets in an internal
data structure and offers methods to inspect their content. 
This class defines a &lt;i&gt;telemetry buffer&lt;/i&gt; where telemetry
packets are stored as they are written to the telemetry stream.
The telemetry buffer is organized as a circular buffer.
When the end of the buffer is reached, its first entry is overwritten.
This class must be configured by specifying the capacity of the
buffer and the maximum length (in bytes) of the application data
of the telemetry packets to be stored in the buffer.
This class is intended to be used for testing purposes only.
&lt;p&gt;
This telemetry stream writes the following data to the telemery
buffer for each telemetry packet: &lt;ul&gt;
&lt;li&gt;The application data read from the telemetry packet.&lt;/li&gt;
&lt;li&gt;The number of bytes in the application data.&lt;/li&gt;
&lt;li&gt;The type of the telemetry packet.&lt;/li&gt;
&lt;li&gt;The subtype of the telemetry packet.&lt;/li&gt;
&lt;li&gt;The packet time tag as read from the telemetry packet. &lt;/li&gt;
&lt;/ul&gt;
Each of the above items can be separately accessed through dedicated
getter methods.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5323'
        name = 'author'
        modelElement = 'S.1550'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5324'
        name = 'version'
        modelElement = 'S.1550'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5325'
        name = 'documentation'
        modelElement = 'S.1790'>
   <UML:TaggedValue.dataValue>
    	Instantiate the component. The class identifier is set. The 
telemetry buffer is left uninitialized to signify that the component
is not yet configured.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5326'
        name = 'documentation'
        modelElement = 'S.1791'>
   <UML:TaggedValue.dataValue>
    	Set the capacity of the telemetry buffer. 
The capacity of the telemetry buffer is the maximum number of
telemetry packets that can be written to the buffer without
overwriting any existing packet. This is an initialization
method that should only be called once. 
Only positive values for the argument of this method are legal.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5327'
        name = 'param'
        modelElement = 'S.1791'>
   <UML:TaggedValue.dataValue>
    	n the capacity of the telemetry buffer
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5330'
        name = 'documentation'
        modelElement = 'S.1792'>
   <UML:TaggedValue.dataValue>
    	Return the capacity of the telemetry buffer.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5331'
        name = 'see'
        modelElement = 'S.1792'>
   <UML:TaggedValue.dataValue>
    	#setBufferCapacity
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5332'
        name = 'return'
        modelElement = 'S.1792'>
   <UML:TaggedValue.dataValue>
    	the capacity of the telemetry buffer
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5334'
        name = 'documentation'
        modelElement = 'S.1793'>
   <UML:TaggedValue.dataValue>
    	Set the maximum length (in number of bytes) of the application
of the telemetry packets. This is an initialization
method that should only be called once. 
Only positive values for the argument of this method are legal.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5335'
        name = 'param'
        modelElement = 'S.1793'>
   <UML:TaggedValue.dataValue>
    	n the maximum length of the telemetry packet application data
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5338'
        name = 'documentation'
        modelElement = 'S.1794'>
   <UML:TaggedValue.dataValue>
    	Return the capacity of the telemetry buffer.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5339'
        name = 'see'
        modelElement = 'S.1794'>
   <UML:TaggedValue.dataValue>
    	#setBufferCapacity
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5340'
        name = 'return'
        modelElement = 'S.1794'>
   <UML:TaggedValue.dataValue>
    	the capacity of the telemetry buffer
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5342'
        name = 'documentation'
        modelElement = 'S.1795'>
   <UML:TaggedValue.dataValue>
    	Get the number of packets that have been written to the telemetry
logger so far.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5343'
        name = 'return'
        modelElement = 'S.1795'>
   <UML:TaggedValue.dataValue>
    	the number of packets written so far
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5345'
        name = 'documentation'
        modelElement = 'S.1796'>
   <UML:TaggedValue.dataValue>
    	Get the type of the i-th packet before the last in the telemetry
buffer. If N is the number of packets to have been written so far 
to the telemetry logger stream, then this method returns the type
of the (N-i)-th packet to have been written to the logger.
The value of i should be smaller than the capacity of the telemetry 
buffer. If this is not the case, then a value of zero is returned.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5346'
        name = 'param'
        modelElement = 'S.1796'>
   <UML:TaggedValue.dataValue>
    	i the packet index
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5347'
        name = 'return'
        modelElement = 'S.1796'>
   <UML:TaggedValue.dataValue>
    	the packet type
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5350'
        name = 'documentation'
        modelElement = 'S.1797'>
   <UML:TaggedValue.dataValue>
    	Get the subtype of the i-th packet before the last in the telemetry
buffer. The way the argument i is interpreted is the same as for 
method &lt;code&gt;getType&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5351'
        name = 'see'
        modelElement = 'S.1797'>
   <UML:TaggedValue.dataValue>
    	#getType
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5352'
        name = 'param'
        modelElement = 'S.1797'>
   <UML:TaggedValue.dataValue>
    	i the packet index
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5353'
        name = 'return'
        modelElement = 'S.1797'>
   <UML:TaggedValue.dataValue>
    	the packet sub type
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5356'
        name = 'documentation'
        modelElement = 'S.1798'>
   <UML:TaggedValue.dataValue>
    	Get the time tag of the i-th packet before the last in the telemetry
buffer. The way the argument i is interpreted is the same as for 
method &lt;code&gt;getType&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5357'
        name = 'see'
        modelElement = 'S.1798'>
   <UML:TaggedValue.dataValue>
    	#getType
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5358'
        name = 'param'
        modelElement = 'S.1798'>
   <UML:TaggedValue.dataValue>
    	i the packet index
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5359'
        name = 'return'
        modelElement = 'S.1798'>
   <UML:TaggedValue.dataValue>
    	the packet time tag
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5362'
        name = 'documentation'
        modelElement = 'S.1799'>
   <UML:TaggedValue.dataValue>
    	Get the length (number of bytes in the application data) of the 
i-th packet before the last in the telemetry
buffer. The way the argument i is interpreted is the same as for 
method &lt;code&gt;getType&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5363'
        name = 'see'
        modelElement = 'S.1799'>
   <UML:TaggedValue.dataValue>
    	#getType
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5364'
        name = 'param'
        modelElement = 'S.1799'>
   <UML:TaggedValue.dataValue>
    	i the packet index
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5365'
        name = 'return'
        modelElement = 'S.1799'>
   <UML:TaggedValue.dataValue>
    	the packet length
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5368'
        name = 'documentation'
        modelElement = 'S.1800'>
   <UML:TaggedValue.dataValue>
    	Get the j-th application data byte of the 
i-th packet before the last in the telemetry
buffer. The way the argument i is interpreted is the same as for 
method &lt;code&gt;getType&lt;/code&gt;. The argument j must lie in the range
[0,L-1] where L is the length of the i-th packet (as returned 
by method &lt;code&gt;getLength&lt;/code&gt;).
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5369'
        name = 'see'
        modelElement = 'S.1800'>
   <UML:TaggedValue.dataValue>
    	#getType
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5370'
        name = 'param'
        modelElement = 'S.1800'>
   <UML:TaggedValue.dataValue>
    	i the packet index
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5371'
        name = 'param'
        modelElement = 'S.1800'>
   <UML:TaggedValue.dataValue>
    	j the byte index
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5372'
        name = 'return'
        modelElement = 'S.1800'>
   <UML:TaggedValue.dataValue>
    	the application data byte
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5376'
        name = 'documentation'
        modelElement = 'S.1801'>
   <UML:TaggedValue.dataValue>
    	Return true if the argument packet fits in the telemetry logger.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
if ( pItem-&gt;getNumberOfBytes()&lt;getMaxPacketLength() )
return true;
else
return false; &lt;/PRE&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5377'
        name = 'param'
        modelElement = 'S.1801'>
   <UML:TaggedValue.dataValue>
    	pPacket the telemetry packet to be written to the telemetry stream
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5378'
        name = 'return'
        modelElement = 'S.1801'>
   <UML:TaggedValue.dataValue>
    	true if the telemetry packet fits in the telemetry logger,
false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5381'
        name = 'documentation'
        modelElement = 'S.1802'>
   <UML:TaggedValue.dataValue>
    	Write one telemetry packet to the telemetry logger.
When the telemetry logger is full, its oldest entry is overwritten.
If the length of the packet exceeds M (the maximum length set with method
&lt;code&gt;setMaxPacketLength&lt;/code&gt;), then only the first M application
data bytes are written to the telemetry logger.
The telemetry packet data are extracted from the telemetry packet 
component through its &lt;i&gt;data acquisition service&lt;/i&gt;. If the packet
provides it, then the &lt;i&gt;fast version&lt;/i&gt; of the service is used.
Otherwise the &lt;i&gt;safe version&lt;/i&gt; is used. Method 
&lt;code&gt;isFastAcquisitionImplemented&lt;/code&gt; is used to determine 
whether the fast version is provided.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5382'
        name = 'param'
        modelElement = 'S.1802'>
   <UML:TaggedValue.dataValue>
    	pItem the telemetry packet to be written to the telemetry stream
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5385'
        name = 'documentation'
        modelElement = 'S.1803'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on the telemetry logger stream:
verify that the maximum length of the telemetry packets and the maximum
number of telemetry packets have been set.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5386'
        name = 'return'
        modelElement = 'S.1803'>
   <UML:TaggedValue.dataValue>
    	true if the telemetry logger stream is configured, false otherwise.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5389'
        name = 'documentation'
        modelElement = 'S.1547'>
   <UML:TaggedValue.dataValue>
    	Telemetry list mode manager with a single and fixed mode.
This mode manager has a trivial implementation of the update
service that returns without taking any action. It is typically
used when the telemetry format is fixed.
&lt;p&gt;
An initialization sequence for this class consists of the following
steps (to be performed in the order given here): &lt;ul&gt;
&lt;li&gt;Set the length of the single telemetry packet list through method
&lt;code&gt;setListLength&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Load the individual items through method &lt;code&gt;setListTelemetryPacket&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Reset the component by calling method &lt;code&gt;reset&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5390'
        name = 'author'
        modelElement = 'S.1547'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5391'
        name = 'see'
        modelElement = 'S.1547'>
   <UML:TaggedValue.dataValue>
    	TelemetryPacket
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5392'
        name = 'version'
        modelElement = 'S.1547'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5393'
        name = 'documentation'
        modelElement = 'S.1809'>
   <UML:TaggedValue.dataValue>
    	Instantiate a telemetry mode manager. This constructor sets the
class identifier and it configures its superclass to manage only
one single mode. A pseudo-code implementation is as follows: &lt;PRE&gt;
setClassId(ID_SIMPLETELEMETRYMODEMANAGER);
setNumberOfModes(1);
setDefaultMode(0);  &lt;/PRE&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5394'
        name = 'documentation'
        modelElement = 'S.1810'>
   <UML:TaggedValue.dataValue>
    	Since this is a fixed-mode mode manager, this method returns without
taking any action.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5396'
        name = 'documentation'
        modelElement = 'S.1542'>
   <UML:TaggedValue.dataValue>
    	Base class from which the classes implementing the memory dump telemetry packets 
(PUS service type 6, subtypes 4 and 6) can be derived.
This class defines an internal memory structure where the characteristics of the
memory blocks to be dumped (start address, length, and checksum) are stored.
Additionally, it defines &lt;i&gt;dump buffer&lt;/i&gt; to be used to store the telemetry packet
image. The &lt;i&gt;data acqusition service&lt;/i&gt;
(defined by the super class &lt;code&gt;TelemetryPacket&lt;/code&gt;) is implemented to flush
this buffer. Since the amount of data in a memory packet may be large, this class
implements both the safe and fast versions of the data acquisition service.
Finally, this class defines a &lt;i&gt;checksum flag&lt;/i&gt;) that can be set
to indicate whether checksum should be computed and included in the telemetry packet 
data. the checksum flag is defined as a static variable and is initialized to false.
The &lt;i&gt;data update service&lt;/i&gt; depends on the data subtype and must therefore
be defined by the subclasses. All the internal data structures defined by this class
are declared &lt;code&gt;protected&lt;/code&gt; to allow easy access to them by the subclasses
that implement the two forms of the memory dump service.
&lt;p&gt;
The initial configuration of this class is performed as follows:&lt;ul&gt;
&lt;li&gt;Method &lt;code&gt;setMaxNumberOfBlocks&lt;/code&gt; must be called to set the maximum
number of memory blocks that can be managed by this telemetry packet&lt;/li&gt;
&lt;li&gt;Method &lt;code&gt;setDumpBufferSize&lt;/code&gt; must be called to set the maximum size of
the dump buffer.&lt;/li&gt;
&lt;li&gt;The checksum flag is set with method &lt;code&gt;setChecksumFlag&lt;/code&gt;. Note that 
this is a static method and that the checksum flag applies globally to all
memory dump telemetry blocks.&lt;/li&gt;
&lt;/ul&gt;
The dynamic configuration of the telemetry packet is performed as follows:&lt;ul&gt;
&lt;li&gt;The number of blocks to be dumped is set with method &lt;code&gt;setNumberOfBlocks&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;The blocks are defined with a sequence of calls to method &lt;code&gt;defineBlock&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
The PUS leaves some leeway in the definition of the structure of the application
data for memory load telecommands. This implementation makes the following 
assumptions: &lt;ul&gt;
&lt;li&gt;The memory ID is always present and is an integer of syntactical type &lt;code&gt;TD_PUSMemId&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The number of memory blocks field is always present. The number of memory blocks is treated
as an integer of syntatical type &lt;code&gt;TD_PUSNumberMemBlocks&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The memory data are treated as integers of syntactical type 
&lt;code&gt;TD_PUSMemData&lt;/code&gt;. This type defines the single addressable unit (or SAU).&lt;/li&gt;
&lt;li&gt;The offset of a memory block with respect to a base address is treated as an integer
of syntactic type &lt;code&gt;TD_PUSMemOffset&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The length of a memory block is treated as an integer
of syntactic type &lt;code&gt;TD_PUSMemLength&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The checksum field is always included (it is set to zero when no checksum is required).&lt;/li&gt;
&lt;/ul&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5397'
        name = 'author'
        modelElement = 'S.1542'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5398'
        name = 'version'
        modelElement = 'S.1542'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5399'
        name = 'documentation'
        modelElement = 'S.1568'>
   <UML:TaggedValue.dataValue>
    	This structure describes one memory dump block.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5400'
        name = 'documentation'
        modelElement = 'S.1567'>
   <UML:TaggedValue.dataValue>
    	The i-th item of this array holds the descriptor for the i-th memory block
to be dumped
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5401'
        name = 'documentation'
        modelElement = 'S.1811'>
   <UML:TaggedValue.dataValue>
    	The maximum number of memory dump blocks
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5402'
        name = 'documentation'
        modelElement = 'S.1812'>
   <UML:TaggedValue.dataValue>
    	The number of memory dump blocks that must be dumped by this telemetry packet.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5403'
        name = 'documentation'
        modelElement = 'S.1813'>
   <UML:TaggedValue.dataValue>
    	Dump buffer.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5404'
        name = 'documentation'
        modelElement = 'S.1814'>
   <UML:TaggedValue.dataValue>
    	The size of the telemetry packet in number of bytes.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5405'
        name = 'documentation'
        modelElement = 'S.1815'>
   <UML:TaggedValue.dataValue>
    	The size of the dump buffer.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5406'
        name = 'documentation'
        modelElement = 'S.1816'>
   <UML:TaggedValue.dataValue>
    	Flag indicating whether checksum data are required.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5407'
        name = 'documentation'
        modelElement = 'S.1817'>
   <UML:TaggedValue.dataValue>
    	Identifier of the memory block.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5408'
        name = 'documentation'
        modelElement = 'S.1818'>
   <UML:TaggedValue.dataValue>
    	Instantiate a PUS memory dump telemetry packet.
The values of the internal data structures that are used to hold the telecommand
application data are initialized to illegal values to signify that the telecommand
is not yet configured. 
The checksum flag is set to &lt;code&gt;false&lt;/code&gt; (no checksum data required).
The memory identifier is initialized to zero.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5409'
        name = 'documentation'
        modelElement = 'S.1819'>
   <UML:TaggedValue.dataValue>
    	Set the maximum number of memory blocks that can be managed by this telemetry packet.
This is an initialization method that should only be called once.
A call to this method causes the internal data structures where the blocks are
held to be allocated and initialized. Only positive values of the method argument
are legal.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5410'
        name = 'param'
        modelElement = 'S.1819'>
   <UML:TaggedValue.dataValue>
    	max the maximum number of blocks
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5413'
        name = 'documentation'
        modelElement = 'S.1820'>
   <UML:TaggedValue.dataValue>
    	Get the maximum number of memory blocks that can be managed by this telemetry packet.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5414'
        name = 'see'
        modelElement = 'S.1820'>
   <UML:TaggedValue.dataValue>
    	#setMaxNumberBlocks
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5415'
        name = 'return'
        modelElement = 'S.1820'>
   <UML:TaggedValue.dataValue>
    	the maximum number of blocks
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5417'
        name = 'documentation'
        modelElement = 'S.1821'>
   <UML:TaggedValue.dataValue>
    	Set the number of memory blocks that must be managed by this telemetry packet.
This method is normally called when the telemetry packet is dynamically configured.
The value of the argument N must lie in the range [1,N] where N is the maximum number of
blocks set with method &lt;code&gt;setmaxNumberBlocks&lt;/code&gt;. If this is not the case, the number
of blocks is set to N and event report EVT_PUS_TOO_MANY_DUMP_BLOCKS. Only positive values are legal for the number
of blocks.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5418'
        name = 'param'
        modelElement = 'S.1821'>
   <UML:TaggedValue.dataValue>
    	max the maximum number of blocks
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5421'
        name = 'documentation'
        modelElement = 'S.1822'>
   <UML:TaggedValue.dataValue>
    	Get the number of memory blocks that are managed by this telemetry packet.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5422'
        name = 'see'
        modelElement = 'S.1822'>
   <UML:TaggedValue.dataValue>
    	#setNumberBlocks
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5423'
        name = 'return'
        modelElement = 'S.1822'>
   <UML:TaggedValue.dataValue>
    	the number of blocks
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5425'
        name = 'documentation'
        modelElement = 'S.1823'>
   <UML:TaggedValue.dataValue>
    	Set the size (in number of bytes) of the dump buffer. 
This is an initialization method that should only be called once.
A call to this method causes the memory for the dump buffer to be 
allocated and initialized. Only positive values of the method argument
are legal.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5426'
        name = 'param'
        modelElement = 'S.1823'>
   <UML:TaggedValue.dataValue>
    	max the size of the dump buffer
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5429'
        name = 'documentation'
        modelElement = 'S.1824'>
   <UML:TaggedValue.dataValue>
    	Get the size (in number of bytes) of the dump buffer.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5430'
        name = 'see'
        modelElement = 'S.1824'>
   <UML:TaggedValue.dataValue>
    	#setDumpBufferSize
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5431'
        name = 'return'
        modelElement = 'S.1824'>
   <UML:TaggedValue.dataValue>
    	the size (in number of bytes) of the dump buffer.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5433'
        name = 'documentation'
        modelElement = 'S.1825'>
   <UML:TaggedValue.dataValue>
    	Set the checksum flag. If this flag is set to true, then the checksum is computed
for each memory block to be dumped. Otherwise, the checksum field is set to zero.
Note that the checksum field is always included in the telemetry packet.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5434'
        name = 'param'
        modelElement = 'S.1825'>
   <UML:TaggedValue.dataValue>
    	checksumFlag the value of the checksum flag
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5437'
        name = 'documentation'
        modelElement = 'S.1826'>
   <UML:TaggedValue.dataValue>
    	Return the value of the checksum flag.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5438'
        name = 'return'
        modelElement = 'S.1826'>
   <UML:TaggedValue.dataValue>
    	the value of the checksum flag
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5440'
        name = 'documentation'
        modelElement = 'S.1827'>
   <UML:TaggedValue.dataValue>
    	Define the characteristics of the i-th memory block to be dumped. This method
would normally be called as part of the dynamic telemetry packet configuration.
The index i must lie in the range [0,N-1] where N is the number of blocks
set with method &lt;code&gt;setNumberBlocks&lt;/code&gt;). If this is not the case, 
the method generates event report EVT_PUS_ILLEGAL_BLOCK_INDEX and returns immediately.
The checksum value of the i-th block is initialized to zero.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5441'
        name = 'param'
        modelElement = 'S.1827'>
   <UML:TaggedValue.dataValue>
    	i the memory dump index
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5442'
        name = 'param'
        modelElement = 'S.1827'>
   <UML:TaggedValue.dataValue>
    	start the start address of the i-th memory dump block
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5443'
        name = 'param'
        modelElement = 'S.1827'>
   <UML:TaggedValue.dataValue>
    	length the length of the i-th memory dump block
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5448'
        name = 'documentation'
        modelElement = 'S.1828'>
   <UML:TaggedValue.dataValue>
    	Return the number of bytes in this telemetry packet.
This is the number of bytes of the application data part of the telemetry packet
holding the memory dump data. The number of bytes in the telemetry packet is computed
as part of the &lt;i&gt;data update service&lt;/i&gt;. This method will only return a valid value
after method &lt;code&gt;update&lt;/code&gt; has been called.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5449'
        name = 'return'
        modelElement = 'S.1828'>
   <UML:TaggedValue.dataValue>
    	number of bytes in this telemetry packet
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5451'
        name = 'documentation'
        modelElement = 'S.1829'>
   <UML:TaggedValue.dataValue>
    	Implement the  &lt;i&gt;data acquisition service&lt;/i&gt; for the PUS telemetry memory dump
packet. This method assumes the telemetry packet data to be already loaded in the
&lt;i&gt;dump buffer&lt;/i&gt;. A pseudo-code implementation for this method is as follows:&lt;pre&gt;
return data[n]; &lt;/pre&gt;
where &lt;code&gt;data&lt;/code&gt; is the dump buffer (recall that its first element holds the 
length of the telemetry packet).
The argument n must lie in the range [0,N-1] where N is the length of the 
telemetry packet (the return value of method &lt;code&gt;getNumberOfBytes&lt;/code&gt;)
If this is not the case, the return value of this method is undefined.
The dump buffer is loaded by method &lt;code&gt;update&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5452'
        name = 'return'
        modelElement = 'S.1829'>
   <UML:TaggedValue.dataValue>
    	value of n-th telemetry byte
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5453'
        name = 'param'
        modelElement = 'S.1829'>
   <UML:TaggedValue.dataValue>
    	n the telemetry byte to be returned (starting with byte 0)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5456'
        name = 'documentation'
        modelElement = 'S.1830'>
   <UML:TaggedValue.dataValue>
    	Implement the fast version of the &lt;i&gt;data acquisition service&lt;/i&gt;.
This method returns the address of the first location of the dump buffer.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5457'
        name = 'return'
        modelElement = 'S.1830'>
   <UML:TaggedValue.dataValue>
    	the address of the first location of the dump buffer
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5459'
        name = 'documentation'
        modelElement = 'S.1831'>
   <UML:TaggedValue.dataValue>
    	Return &lt;code&gt;true&lt;/code&gt; to signify that the the fast version of the data acquisition
service is implemented.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5460'
        name = 'see'
        modelElement = 'S.1831'>
   <UML:TaggedValue.dataValue>
    	#getStartAddress
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5461'
        name = 'return'
        modelElement = 'S.1831'>
   <UML:TaggedValue.dataValue>
    	always return &lt;code&gt;true&lt;/code&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5463'
        name = 'documentation'
        modelElement = 'S.1832'>
   <UML:TaggedValue.dataValue>
    	Get the start address of the i-th currently loaded block.
The block index i must lie in the interval [0,N-1] where N is the number
of currently loaded blocks (the value returned by method 
&lt;code&gt;getNumberBlocks&lt;/code&gt;). If this condition is not satisfied,
the return value is unpredictable. This method is unsafe because it
returns a pointer. It is intended to be used only for testing purposes.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5464'
        name = 'param'
        modelElement = 'S.1832'>
   <UML:TaggedValue.dataValue>
    	i the block index
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5465'
        name = 'return'
        modelElement = 'S.1832'>
   <UML:TaggedValue.dataValue>
    	the start address of the i-th currently loaded block
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5468'
        name = 'documentation'
        modelElement = 'S.1833'>
   <UML:TaggedValue.dataValue>
    	Get the length of the i-th currently loaded block.
The block index i must lie in the interval [0,N-1] where N is the number
of currently loaded blocks (the value returned by method 
&lt;code&gt;getNumberBlocks&lt;/code&gt;). If this condition is not satisfied,
the return value is unpredictable.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5469'
        name = 'param'
        modelElement = 'S.1833'>
   <UML:TaggedValue.dataValue>
    	i the block index
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5470'
        name = 'return'
        modelElement = 'S.1833'>
   <UML:TaggedValue.dataValue>
    	the length of the i-th currently loaded block
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5473'
        name = 'documentation'
        modelElement = 'S.1834'>
   <UML:TaggedValue.dataValue>
    	Get the value of the checksum field for the i-th currently loaded block.
The block index i must lie in the interval [0,N-1] where N is the number
of currently loaded blocks (the value returned by method 
&lt;code&gt;getNumberBlocks&lt;/code&gt;). If this condition is not satisfied,
the return value is unpredictable.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5474'
        name = 'param'
        modelElement = 'S.1834'>
   <UML:TaggedValue.dataValue>
    	i the block index
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5475'
        name = 'return'
        modelElement = 'S.1834'>
   <UML:TaggedValue.dataValue>
    	the length of the i-th currently loaded block
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5478'
        name = 'documentation'
        modelElement = 'S.1835'>
   <UML:TaggedValue.dataValue>
    	Set the memory block identifier for the dump packet.
Only values greater than zero are legal.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5479'
        name = 'see'
        modelElement = 'S.1835'>
   <UML:TaggedValue.dataValue>
    	#update
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5480'
        name = 'param'
        modelElement = 'S.1835'>
   <UML:TaggedValue.dataValue>
    	memId the memory block identifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5483'
        name = 'documentation'
        modelElement = 'S.1836'>
   <UML:TaggedValue.dataValue>
    	Get the memory block identifier for the dump packet.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5484'
        name = 'see'
        modelElement = 'S.1836'>
   <UML:TaggedValue.dataValue>
    	#setMemId
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5485'
        name = 'return'
        modelElement = 'S.1836'>
   <UML:TaggedValue.dataValue>
    	the memory block identifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5487'
        name = 'documentation'
        modelElement = 'S.1837'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on the telecommand:
check that the maximum number of blocks and the maximum number of data have been
defind.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5488'
        name = 'return'
        modelElement = 'S.1837'>
   <UML:TaggedValue.dataValue>
    	true if the telecommand is configured, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5491'
        name = 'documentation'
        modelElement = 'S.1838'>
   <UML:TaggedValue.dataValue>
    	Start address of a memory dump block
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5492'
        name = 'documentation'
        modelElement = 'S.1839'>
   <UML:TaggedValue.dataValue>
    	The number of SAUs to be loaded
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5493'
        name = 'documentation'
        modelElement = 'S.1840'>
   <UML:TaggedValue.dataValue>
    	The checksum of the block
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5494'
        name = 'documentation'
        modelElement = 'S.1561'>
   <UML:TaggedValue.dataValue>
    	Base class from which all PUS telemetry packet classes are derived.
A PUS telemetry packet class encapsulate a packet of telemetry data
that is compliant with the Packet Utilization Stadard (PUS). PUS
telemetry packet classes are organized as &lt;i&gt;telemetry packets&lt;/i&gt; in the
sense that this class extends class &lt;code&gt;TelemetryPacket&lt;/code&gt;. Class
&lt;code&gt;TelemetryPacket&lt;/code&gt; defines a &lt;i&gt;data acquisition service&lt;/i&gt; to
acquire a stream of telemetry bytes. From the point of view of the
&lt;code&gt;PUSTelemetryPacket&lt;/code&gt; class, this stream of bytes represent
the source data part of the PUS packet encapsulated by the class.
The mapping between the attributes defined by the &lt;code&gt;TelemetryPacket&lt;/code&gt; superclass
and the attributes mandated by the PUS is as follows:&lt;ul&gt;
&lt;li&gt;The &lt;i&gt;packet ID&lt;/i&gt; PUS attribute has a fixed value for all telemetry packet
originating from the same
application process and it is therefore implemented as a static attribute.&lt;/li&gt;
&lt;li&gt;The &lt;i&gt;service type&lt;/i&gt; PUS attribute is mapped to the &lt;i&gt;telemetry packet
type&lt;/i&gt; attribute of the &lt;code&gt;TelemetryPacket&lt;/code&gt; class.&lt;/li&gt;
&lt;li&gt;The &lt;i&gt;service subtype&lt;/i&gt; PUS attribute is mapped to the &lt;i&gt;telemetry packet
subtype&lt;/i&gt; attribute of the &lt;code&gt;TelemetryPacket&lt;/code&gt; class.&lt;/li&gt;
&lt;li&gt;The &lt;i&gt;destination&lt;/i&gt; PUS attribute is mapped to the &lt;i&gt;telemetry packet
destination&lt;/i&gt; attribute of the &lt;code&gt;TelemetryPacket&lt;/code&gt; class.&lt;/li&gt;
&lt;li&gt;The &lt;i&gt;time&lt;/i&gt; PUS attribute is mapped to the &lt;i&gt;telemetry packet
time tag&lt;/i&gt; attribute of the &lt;code&gt;TelemetryPacket&lt;/code&gt; class.&lt;/li&gt;
&lt;/ul&gt;
Since most telemetry packets in an application can be expected to have the
same destination, this class also defines a static &lt;i&gt;default destination&lt;/i&gt;
attribute.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5495'
        name = 'author'
        modelElement = 'S.1561'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5496'
        name = 'version'
        modelElement = 'S.1561'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5497'
        name = 'ingroup'
        modelElement = 'S.1561'>
   <UML:TaggedValue.dataValue>
    	PUS
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5498'
        name = 'ingroup'
        modelElement = 'S.1561'>
   <UML:TaggedValue.dataValue>
    	Telemetry
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5499'
        name = 'documentation'
        modelElement = 'S.1848'>
   <UML:TaggedValue.dataValue>
    	Instantiate a PUS telemetry packet component.
The telemetry attributes are set as follows: &lt;ul&gt;
&lt;li&gt;The telemetry time tag is set to a non-legal value to indicate
that the telemetry packet component is not yet configured&lt;/li&gt;
&lt;li&gt;The telemetry type is set to a non-legal value to indicate
that the telemetry component is not yet configured&lt;/li&gt;
&lt;li&gt;The telemetry subtype is set to a non-legal value to indicate
that the telemetry packet component is not yet configured&lt;/li&gt;
&lt;li&gt;The telemetry destination is set equal to the default destination&lt;/li&gt;
&lt;/ul&gt;
Note that the packet identifier (a static attribute) is initialized to an illegal value
to indicate that the component is not yet initialized.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5500'
        name = 'documentation'
        modelElement = 'S.1849'>
   <UML:TaggedValue.dataValue>
    	Setter method for the application identifier (APID). The APID is used to construct
the telemetry packet identifier. The APID is placed in the 11 least-significant bits
of the PUS packet identifier. A pseudo-code implementation for this method is as
follows: &lt;pre&gt;
packetId = 2**11;           // set the fixed part of the packet ID
packetId = packetId + apid; // set the APID part of the packet ID &lt;/pre&gt;
The APID should be smaller than 2**11.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5501'
        name = 'see'
        modelElement = 'S.1849'>
   <UML:TaggedValue.dataValue>
    	getPacketId
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5502'
        name = 'param'
        modelElement = 'S.1849'>
   <UML:TaggedValue.dataValue>
    	apid the identifier of the application generating the telemetry packet
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5505'
        name = 'documentation'
        modelElement = 'S.1850'>
   <UML:TaggedValue.dataValue>
    	Setter method for the telemetry packet type.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5506'
        name = 'param'
        modelElement = 'S.1850'>
   <UML:TaggedValue.dataValue>
    	tmType the telemetry packet type
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5509'
        name = 'documentation'
        modelElement = 'S.1851'>
   <UML:TaggedValue.dataValue>
    	Setter method for the telemetry packet sub-type.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5510'
        name = 'param'
        modelElement = 'S.1851'>
   <UML:TaggedValue.dataValue>
    	tmSubType the telemetry packet sub-type
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5513'
        name = 'documentation'
        modelElement = 'S.1852'>
   <UML:TaggedValue.dataValue>
    	Setter method for the telemetry packet destination.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5514'
        name = 'param'
        modelElement = 'S.1852'>
   <UML:TaggedValue.dataValue>
    	tmDest telemetry packet destination
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5517'
        name = 'documentation'
        modelElement = 'S.1853'>
   <UML:TaggedValue.dataValue>
    	Getter method for the telemetry packet identifier. The telemetry packet
identifier is assumed to be fixed for all telemetry packets in the same
application process. According to the PUS, the packet identifier consists
of the following four fields: &lt;ul&gt;
&lt;li&gt;The version number: this field is fixed and equal to 0&lt;/li&gt;
&lt;li&gt;The type: this field is fixed and equal to 0&lt;/li&gt;
&lt;li&gt;The data field header: this field is fixed and equal to 1 (indicating
that a telemetry packet always has a secondary header)&lt;/li&gt;
&lt;li&gt;The application ID: this field is fixed within the application process and
it is equal to the application identifier&lt;/li&gt;
&lt;/ul&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5518'
        name = 'see'
        modelElement = 'S.1853'>
   <UML:TaggedValue.dataValue>
    	#setApplicationId
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5519'
        name = 'return'
        modelElement = 'S.1853'>
   <UML:TaggedValue.dataValue>
    	the packet identifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5521'
        name = 'documentation'
        modelElement = 'S.1854'>
   <UML:TaggedValue.dataValue>
    	Getter method for the telemetry packet default destination.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5522'
        name = 'return'
        modelElement = 'S.1854'>
   <UML:TaggedValue.dataValue>
    	the telemetry packet default destination
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5524'
        name = 'documentation'
        modelElement = 'S.1855'>
   <UML:TaggedValue.dataValue>
    	Setter method for the telemetry packet default destination.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5525'
        name = 'param'
        modelElement = 'S.1855'>
   <UML:TaggedValue.dataValue>
    	defDest the telemetry packet default destination
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5528'
        name = 'documentation'
        modelElement = 'S.1856'>
   <UML:TaggedValue.dataValue>
    	Getter method for the telemetry type.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5529'
        name = 'return'
        modelElement = 'S.1856'>
   <UML:TaggedValue.dataValue>
    	the telemetry sub-type
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5531'
        name = 'documentation'
        modelElement = 'S.1857'>
   <UML:TaggedValue.dataValue>
    	Getter method for the telemetry sub-type.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5532'
        name = 'return'
        modelElement = 'S.1857'>
   <UML:TaggedValue.dataValue>
    	the telemetry sub-type
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5534'
        name = 'documentation'
        modelElement = 'S.1858'>
   <UML:TaggedValue.dataValue>
    	Getter method for the telemetry packet time tag.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5535'
        name = 'return'
        modelElement = 'S.1858'>
   <UML:TaggedValue.dataValue>
    	the telemetry packet time
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5537'
        name = 'documentation'
        modelElement = 'S.1859'>
   <UML:TaggedValue.dataValue>
    	Setter method for the telemetry packet time tag.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5538'
        name = 'param'
        modelElement = 'S.1859'>
   <UML:TaggedValue.dataValue>
    	timeTag the telemetry packet time tag
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5541'
        name = 'documentation'
        modelElement = 'S.1860'>
   <UML:TaggedValue.dataValue>
    	Getter method for the telemetry packet destination.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5542'
        name = 'return'
        modelElement = 'S.1860'>
   <UML:TaggedValue.dataValue>
    	the telemetry packet destination
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5544'
        name = 'documentation'
        modelElement = 'S.1861'>
   <UML:TaggedValue.dataValue>
    	Load the OBS Clock component. Telemetry packets may need access to
this component in order to time-stamp the telemetry data as they are collected.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5545'
        name = 'param'
        modelElement = 'S.1861'>
   <UML:TaggedValue.dataValue>
    	pObsClock the OBS Clock component.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5548'
        name = 'documentation'
        modelElement = 'S.1862'>
   <UML:TaggedValue.dataValue>
    	Return the OBS Clock component.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5549'
        name = 'see'
        modelElement = 'S.1862'>
   <UML:TaggedValue.dataValue>
    	#setObsClock
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5550'
        name = 'return'
        modelElement = 'S.1862'>
   <UML:TaggedValue.dataValue>
    	the OBS Clock component.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5552'
        name = 'documentation'
        modelElement = 'S.1863'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on the telemetry packet:
verify that the type, the
sub type, the destination, the time tag, and the packet identifier have a legal value.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5553'
        name = 'return'
        modelElement = 'S.1863'>
   <UML:TaggedValue.dataValue>
    	true if the component is configured, false otherwise.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5555'
        name = 'documentation'
        modelElement = 'S.1558'>
   <UML:TaggedValue.dataValue>
    	Specialization of the &lt;code&gt;TelemetryPacket&lt;/code&gt; abstract class that
defines a default data structure where the telemetry data can be
held.
This is still an abstract class because no implementation can be
given for the &lt;i&gt;data update service&lt;/i&gt; and the
&lt;i&gt;data acquisition service&lt;/i&gt;.
&lt;p&gt;
This class defines an array data structure to hold the telemetry bytes.
This data structure is called the &lt;i&gt;internal telemetry buffer&lt;/i&gt;.
This class is responsible for declaring and initializing this data
structure. Instances of this class can only be used after this data
structure has been initialized by calling method
&lt;code&gt;setNumberOfBytes&lt;/code&gt;. This class is especially well suited
to modelling telemetry packets with a fixed size.
&lt;p&gt;
By default, the telemetry data generated by a &lt;code&gt;TelemetryPacket&lt;/code&gt; are seen
as a sequence of bytes. This class allows them to be seen also as a
sequence of 2-bytes words, or as a sequence of 4-bytes longwords.
This is done by providing two additional implementations of the
data acquisition service. The default implementation &lt;code&gt;getUnsignedByte&lt;/code&gt;
declared by the &lt;code&gt;TelemetryPacket&lt;/code&gt; superclass is complemented
by two additional implementations &lt;code&gt;getUnsignedShort&lt;/code&gt; and
&lt;code&gt;getUnsignedInt&lt;/code&gt; that return, respectively, sequences of
2-byte words and of 4-byte longwords.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5556'
        name = 'author'
        modelElement = 'S.1558'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5557'
        name = 'version'
        modelElement = 'S.1558'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5558'
        name = 'ingroup'
        modelElement = 'S.1558'>
   <UML:TaggedValue.dataValue>
    	Telemetry
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5559'
        name = 'documentation'
        modelElement = 'S.1868'>
   <UML:TaggedValue.dataValue>
    	Method to load one byte item in the internal telemetry buffer.
This method is normally called by derived classes as part of their
implementation for method &lt;code&gt;update&lt;/code&gt;.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
pByteBuffer[index] = d; &lt;/PRE&gt;
Note that there is no check on the index being within bounds. This is
avoided for reasons of efficiency and because this is an &quot;internal
method&quot; that should be used by a trusted entity.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5560'
        name = 'see'
        modelElement = 'S.1868'>
   <UML:TaggedValue.dataValue>
    	TelemetryPacket#getUnsignedByte
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5561'
        name = 'see'
        modelElement = 'S.1868'>
   <UML:TaggedValue.dataValue>
    	#setNumberOfBytes
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5562'
        name = 'param'
        modelElement = 'S.1868'>
   <UML:TaggedValue.dataValue>
    	index the index of the telemetry array where the telemetry packet
is loaded
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5563'
        name = 'param'
        modelElement = 'S.1868'>
   <UML:TaggedValue.dataValue>
    	d the value of the telemetry packet
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5567'
        name = 'documentation'
        modelElement = 'S.1869'>
   <UML:TaggedValue.dataValue>
    	Method to load one 2-byte word item in the internal telemetry buffer.
This method is normally called by subclasses as part of their implementation
for method &lt;code&gt;update&lt;/code&gt;.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
pShortBuffer[index] = d; &lt;/PRE&gt;
Note that there is no check on the index being within bounds. This is
avoided for reasons of efficiency and because this is an &quot;internal
method&quot; that should be used by a trusted entity.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5568'
        name = 'see'
        modelElement = 'S.1869'>
   <UML:TaggedValue.dataValue>
    	#getUnsignedShort
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5569'
        name = 'see'
        modelElement = 'S.1869'>
   <UML:TaggedValue.dataValue>
    	#setNumberOfBytes
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5570'
        name = 'param'
        modelElement = 'S.1869'>
   <UML:TaggedValue.dataValue>
    	index the index of the telemetry array where the telemetry packet
is loaded
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5571'
        name = 'param'
        modelElement = 'S.1869'>
   <UML:TaggedValue.dataValue>
    	d the value of the telemetry packet
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5575'
        name = 'documentation'
        modelElement = 'S.1870'>
   <UML:TaggedValue.dataValue>
    	Method to load one 4-byte longword item in the internal telemetry buffer.
This method is normally called by subclasses as part of their implementation
for method &lt;code&gt;update&lt;/code&gt;.
A pseudo-code implementation for this method is as follows: &lt;PRE&gt;
pIntBuffer[index] = d; &lt;/PRE&gt;
Note that there is no check on the index being within bounds. This is
avoided for reasons of efficiency and because this is an &quot;internal
method&quot; that should be used by a trusted entity.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5576'
        name = 'see'
        modelElement = 'S.1870'>
   <UML:TaggedValue.dataValue>
    	#getUnsignedInt
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5577'
        name = 'see'
        modelElement = 'S.1870'>
   <UML:TaggedValue.dataValue>
    	#setNumberOfBytes
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5578'
        name = 'param'
        modelElement = 'S.1870'>
   <UML:TaggedValue.dataValue>
    	index the index of the telemetry array where the telemetry packet
is loaded
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5579'
        name = 'param'
        modelElement = 'S.1870'>
   <UML:TaggedValue.dataValue>
    	d the value of the telemetry packet
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5583'
        name = 'documentation'
        modelElement = 'S.1871'>
   <UML:TaggedValue.dataValue>
    	Instantiate a telemetry packet component. This constructor initializes the
size of the internal telemetry buffer size to 0.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5584'
        name = 'documentation'
        modelElement = 'S.1872'>
   <UML:TaggedValue.dataValue>
    	Set the size of the internal telemetry buffer and initialize the
corresponding internal data structures.
The buffer data structures are declared as: &lt;PRE&gt;
unsigned char* pByteBuffer;
unsigned short* pShortBuffer;
unsigned int* pIntBuffer; &lt;/PRE&gt;
A pseudo-code implementation for this method is as follows:&lt;PRE&gt;
pByteBuffer = new unsigned char[n];
pShortBuffer = (unsigned short*)pByteBuffer;
pIntBuffer = (unsigned int*)pByteBuffer; &lt;/PRE&gt;
The three buffers are thus overlaid. Precautions are taken to ensure
that the type casts will always succeed, even on platforms where
alignment constraints apply.
&lt;p&gt;
It is up to subclasses to decide whether they prefer to treat their
telemetry data as a sequence of bytes, as a sequence of 2-byte words,
or as a sequence of 4-bytes longwords.
Derived classes load the telemetry buffers by using methods
&lt;code&gt;setUnsignedByte&lt;/code&gt;, &lt;code&gt;setUnsignedShort&lt;/code&gt; and
&lt;code&gt;setUnsignedInt&lt;/code&gt;.
&lt;p&gt;
This is an initialization method. It should be called before the
structure telemetry packet is used the first time and it should not be called more
than once. Successive calls have no effect.
&lt;p&gt;
Note that the number of bytes should be greater than 0.
&lt;p&gt;
This method deviates from the project-specific coding rule PR3.1.
Use of pointers to variables of primitive type is necessary to allow
efficient implementation of the telemetry getter methods.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5585'
        name = 'param'
        modelElement = 'S.1872'>
   <UML:TaggedValue.dataValue>
    	n number of bytes in this telemetry packet (size of the internal
telemetry buffer)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5588'
        name = 'documentation'
        modelElement = 'S.1873'>
   <UML:TaggedValue.dataValue>
    	Return the size of the internal telemetry buffer.
This is the number that was set with the first call to method
&lt;code&gt;setNumberOfBytes&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5589'
        name = 'see'
        modelElement = 'S.1873'>
   <UML:TaggedValue.dataValue>
    	#setNumberOfBytes
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5590'
        name = 'return'
        modelElement = 'S.1873'>
   <UML:TaggedValue.dataValue>
    	number of bytes in this telemetry packet
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5592'
        name = 'documentation'
        modelElement = 'S.1874'>
   <UML:TaggedValue.dataValue>
    	Return the n-th element of the internal telemetry buffer.
A pseudo-code implementation for this method is as follows:&lt;PRE&gt;
return pByteBuffer[n]; &lt;/PRE&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5593'
        name = 'see'
        modelElement = 'S.1874'>
   <UML:TaggedValue.dataValue>
    	#setNumberOfBytes
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5594'
        name = 'return'
        modelElement = 'S.1874'>
   <UML:TaggedValue.dataValue>
    	value of n-th telemetry byte
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5595'
        name = 'param'
        modelElement = 'S.1874'>
   <UML:TaggedValue.dataValue>
    	n the telemetry byte to be returned (starting with byte 0)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5598'
        name = 'documentation'
        modelElement = 'S.1875'>
   <UML:TaggedValue.dataValue>
    	Implement the &lt;i&gt;data update service&lt;/i&gt;. This method should be
implemented to load the telemetry buffers using the setter methods
defined in this class.
A call to this method should normally be followed by a call to method
&lt;CODE&gt;isValid&lt;/CODE&gt; to verify the validity of the newly updated data.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5600'
        name = 'documentation'
        modelElement = 'S.1876'>
   <UML:TaggedValue.dataValue>
    	Implement the &lt;i&gt;data acquisition service&lt;/i&gt; for the word-oriented case.
The telemetry data provided by this class are treated as a sequence
of 2-byte words.
The method returns the n-th telemetry packet.
The parameter n must lie in the interval [0, N/2-1] where N is the
number of telemetry bytes (the return value
of method &lt;CODE&gt;getNumberOfBytes&lt;/CODE&gt;).
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5601'
        name = 'see'
        modelElement = 'S.1876'>
   <UML:TaggedValue.dataValue>
    	#setNumberOfBytes
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5602'
        name = 'return'
        modelElement = 'S.1876'>
   <UML:TaggedValue.dataValue>
    	value of n-th telemetry byte
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5603'
        name = 'param'
        modelElement = 'S.1876'>
   <UML:TaggedValue.dataValue>
    	n the telemetry byte to be returned (starting with byte 0)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5606'
        name = 'documentation'
        modelElement = 'S.1877'>
   <UML:TaggedValue.dataValue>
    	Implement the &lt;i&gt;data acquisition service&lt;/i&gt; for the longword-oriented
case.
The telemetry data provided by this class are treated as a sequence
of 4-byte longwords.
The method returns the n-th telemetry longword.
The parameter n must lie in the interval [0, N/4-1] where N is the
number of telemetry bytes (the return value
of method &lt;CODE&gt;getNumberOfBytes&lt;/CODE&gt;).
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5607'
        name = 'see'
        modelElement = 'S.1877'>
   <UML:TaggedValue.dataValue>
    	#setNumberOfBytes
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5608'
        name = 'return'
        modelElement = 'S.1877'>
   <UML:TaggedValue.dataValue>
    	value of n-th telemetry byte
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5609'
        name = 'param'
        modelElement = 'S.1877'>
   <UML:TaggedValue.dataValue>
    	n the telemetry byte to be returned (starting with byte 0)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5612'
        name = 'documentation'
        modelElement = 'S.1878'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on a structured
telemetry packet: verify that the telemetry buffers have been
initialized and allocated.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5613'
        name = 'return'
        modelElement = 'S.1878'>
   <UML:TaggedValue.dataValue>
    	true if the telemetry packet is configured, false otherwise.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5615'
        name = 'documentation'
        modelElement = 'S.1545'>
   <UML:TaggedValue.dataValue>
    	Base abstract class for list-based telemetry mode managers.
A list-based telemetry mode manager handles the set of telemetry
packets in a telemetry mode manager as a statically defined 
linear list. 
The mode manager maintains several such lists, one for each
operational mode.
&lt;p&gt;
At any given time, one list is the &lt;i&gt;current list&lt;/i&gt; (or
&lt;i&gt;active list&lt;/i&gt;).
The iteration methods specified in the super class are implemented
to iterate over the items in the list starting with the one with the 
lowest position and ending with the one with the highest position
in the list.
&lt;p&gt;
The lists are loaded, one item at a time, when the mode manager
is configured. The loading methods
are: &lt;code&gt;loadListLength&lt;/code&gt; (to load the number
items in each list) and &lt;code&gt;loadItem&lt;/code&gt;
(to load the individual items in each list).
&lt;p&gt;
This class is abstract because it does not define the update
mechanism for the mode manager. This must be defined by concrete
subclasses.
&lt;/p&gt;
An initialization sequence for this class consists of the following
steps (to be performed in the order given): &lt;ul&gt;
&lt;li&gt;Set the number of modes through method &lt;code&gt;setNumberOfModes&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set the default mode &lt;code&gt;setDefaultMode&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set the lengths of the lists through method
&lt;code&gt;setListLength&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Load the individual items through method &lt;code&gt;setListItem&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Reset the component by calling method &lt;code&gt;reset&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5616'
        name = 'author'
        modelElement = 'S.1545'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5617'
        name = 'version'
        modelElement = 'S.1545'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5618'
        name = 'ingroup'
        modelElement = 'S.1545'>
   <UML:TaggedValue.dataValue>
    	Base
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5619'
        name = 'ingroup'
        modelElement = 'S.1545'>
   <UML:TaggedValue.dataValue>
    	ModeManagement
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5620'
        name = 'documentation'
        modelElement = 'S.1883'>
   <UML:TaggedValue.dataValue>
    	Allocate the memory for the lists. The newly allocated memory
is initialized with pNULL. Note that this method
cannot allocate all the memory required by a list mode manager because
this also depends on the number of items in each list. This number is loaded
with method: &lt;code&gt;setLength&lt;/code&gt;.
&lt;p&gt;
This method is called by method &lt;code&gt;setNumberOfModes&lt;/code&gt; in the
superclass &lt;code&gt;ModeManager&lt;/code&gt;.
&lt;p&gt;
This is an initialization method. It should only be called once. The number
of modes should be greater than zero.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5621'
        name = 'see'
        modelElement = 'S.1883'>
   <UML:TaggedValue.dataValue>
    	ModeManager#setNumberOfModes
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5622'
        name = 'param'
        modelElement = 'S.1883'>
   <UML:TaggedValue.dataValue>
    	numberOfModes the number of modes
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5625'
        name = 'documentation'
        modelElement = 'S.1884'>
   <UML:TaggedValue.dataValue>
    	Retrieve the telemetry packet currently scanned by the iteration counter.
This method returns the counter-th item in the iteration list where
&quot;counter&quot; is the iteration counter.
This method should only be used within an iteration cycle. However, it is
guaranteed to return a reference to a list item at all times.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5626'
        name = 'see'
        modelElement = 'S.1884'>
   <UML:TaggedValue.dataValue>
    	#first
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5627'
        name = 'return'
        modelElement = 'S.1884'>
   <UML:TaggedValue.dataValue>
    	the item currently scanned by the iteration counter
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5629'
        name = 'documentation'
        modelElement = 'S.1885'>
   <UML:TaggedValue.dataValue>
    	Load an item in a list. The item &lt;code&gt;pItem&lt;/code&gt; is loaded in the pos-th
position of the n-th list. A check is performed on the legality of the
&lt;code&gt;n&lt;/code&gt; and &lt;code&gt;pos&lt;/code&gt; arguments. If they are found
to be out of range, the fact is reported as an event of type EVT_ILLEGAL_MM.
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5630'
        name = 'param'
        modelElement = 'S.1885'>
   <UML:TaggedValue.dataValue>
    	n the list index
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5631'
        name = 'param'
        modelElement = 'S.1885'>
   <UML:TaggedValue.dataValue>
    	pos the position within the list where the item is loaded
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5632'
        name = 'param'
        modelElement = 'S.1885'>
   <UML:TaggedValue.dataValue>
    	pItem the item to be loaded
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5637'
        name = 'documentation'
        modelElement = 'S.1886'>
   <UML:TaggedValue.dataValue>
    	Instantiate a telemetry list mode manager component. The internal data
variables are initialized to illegal values to signify that the component
is not yet configured.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5638'
        name = 'documentation'
        modelElement = 'S.1887'>
   <UML:TaggedValue.dataValue>
    	Set the size of the n-th list. The n-th list is the list that is active
in the n-th operational mode.
A call to this method causes memory to be allocated to store the items in
the n-th list. The newly allocated memory is initialized
to pNULL.
&lt;p&gt;
This is an initialization method. It should only be called once.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5639'
        name = 'param'
        modelElement = 'S.1887'>
   <UML:TaggedValue.dataValue>
    	n the list index (should be in the range [0,N-1] where N is the
number of modes)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5640'
        name = 'param'
        modelElement = 'S.1887'>
   <UML:TaggedValue.dataValue>
    	length the number of items in the list-th telemetry packet list (should
be greater than zero)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5644'
        name = 'documentation'
        modelElement = 'S.1888'>
   <UML:TaggedValue.dataValue>
    	Iteration method to iterate through the telemetry packets in the current
list. This method should be used jointly with methods: &lt;code&gt;next&lt;/code&gt;,
&lt;code&gt;isIterationFinished&lt;/code&gt; and &lt;code&gt;getIterationTelemetryPacket&lt;/code&gt;. 
Taken together,
these methods allow all the items in a list to be scanned. The list
that is thus iterated through is called the &lt;i&gt;iteration list&lt;/i&gt;.
The iteration list is the current list at the time method &lt;code&gt;first&lt;/code&gt;
is called. This list is
guaranteed to remain unchanged in between successive calls to
method &lt;code&gt;first&lt;/code&gt;. Thus, even if the current mode changes
during the iteration (for instance, following a call to method
&lt;code&gt;update&lt;/code&gt;), the iterators will continue processing the
list that was active when &lt;code&gt;first&lt;/code&gt; was called.
&lt;p&gt;
This class internally maintains an &lt;i&gt;iteration
counter&lt;/i&gt;. During an iteration cycle, the iteration counter is
incremented from zero to (N-1) where N is number of items in the
iteration list. Method &lt;code&gt;first&lt;/code&gt; resets the iteration counter
to 0. A call to method &lt;code&gt;next&lt;/code&gt; causes the iteration counter
to be incremented by 1 up to the value of (N-1). Method &lt;code&gt;isIterationFinished&lt;/code&gt;
returns true when the counter has reached the value (N-1).
The item currently pointed at by the iteration counter can be retrieved
through method &lt;code&gt;getIterationTelemetryPacket&lt;/code&gt;.
&lt;p&gt;
Thus, a typical iteration cycle might be organized as follows: &lt;PRE&gt;
for (first(); !isIterationFinished(); next()) {
pItem = getIterationTelemetryPacket();
. . .    // process pItem
}  &lt;/PRE&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5646'
        name = 'documentation'
        modelElement = 'S.1889'>
   <UML:TaggedValue.dataValue>
    	Iteration method to be used in conjunction with methods &lt;code&gt;first&lt;/code&gt;
and &lt;code&gt;isIterationFinished&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5647'
        name = 'see'
        modelElement = 'S.1889'>
   <UML:TaggedValue.dataValue>
    	#first
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5649'
        name = 'documentation'
        modelElement = 'S.1890'>
   <UML:TaggedValue.dataValue>
    	Iteration method to be used in conjunction with methods &lt;code&gt;first&lt;/code&gt;
and &lt;code&gt;next&lt;/code&gt;.
This method should only be used as part of an iteration cycle. The result
of calling it before ever calling &lt;code&gt;first&lt;/code&gt;
is undefined.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5650'
        name = 'see'
        modelElement = 'S.1890'>
   <UML:TaggedValue.dataValue>
    	#first
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5651'
        name = 'return'
        modelElement = 'S.1890'>
   <UML:TaggedValue.dataValue>
    	true if the end of the iteration has been reached, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5653'
        name = 'documentation'
        modelElement = 'S.1891'>
   <UML:TaggedValue.dataValue>
    	Perform a class-specific configuration check on a telemetry list mode
manager: verify that all the lists have been initialized
and that all the items have been loaded.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5654'
        name = 'return'
        modelElement = 'S.1891'>
   <UML:TaggedValue.dataValue>
    	true if the list mode manager is configured, false
otherwise.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5656'
        name = 'documentation'
        modelElement = 'S.1559'>
   <UML:TaggedValue.dataValue>
    	Base abstract class for mode manager components for the telemetry
manager.
A telemetry mode manager handles one single &lt;i&gt;strategy&lt;/i&gt;, which
is represented by a set of &lt;i&gt;telemetry packet&lt;/i&gt; components.
To every operational mode, the telemetry mode manager associates 
a set of telemetry packets. 
Client access the items in this set through four
&lt;i&gt;iteration methods&lt;/i&gt;: &lt;code&gt;first&lt;/code&gt;, &lt;code&gt;next&lt;/code&gt;,
&lt;code&gt;isIterationFinished&lt;/code&gt;, and &lt;code&gt;getIterationTelemetryPacket&lt;/code&gt;.
&lt;p&gt;
This is an abstract class because it specifies neither the implementation
mechanism for the set of telemetry packets nor the mode update mechanism.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5657'
        name = 'author'
        modelElement = 'S.1559'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5658'
        name = 'see'
        modelElement = 'S.1559'>
   <UML:TaggedValue.dataValue>
    	CC_TelemetryManager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5659'
        name = 'see'
        modelElement = 'S.1559'>
   <UML:TaggedValue.dataValue>
    	TelemetryPacket
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5660'
        name = 'version'
        modelElement = 'S.1559'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5661'
        name = 'ingroup'
        modelElement = 'S.1559'>
   <UML:TaggedValue.dataValue>
    	ModeManagement
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5662'
        name = 'ingroup'
        modelElement = 'S.1559'>
   <UML:TaggedValue.dataValue>
    	Telemetry
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5663'
        name = 'documentation'
        modelElement = 'S.1892'>
   <UML:TaggedValue.dataValue>
    	Instantiate a telemetry mode manager. This constructor returns
without taking any action.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5664'
        name = 'documentation'
        modelElement = 'S.1893'>
   <UML:TaggedValue.dataValue>
    	Iteration method to iterate through the items in the set of
telemetry packets applicable to the current operational mode. 
This method should be used jointly with methods: &lt;code&gt;next&lt;/code&gt;,
&lt;code&gt;isIterationFinished&lt;/code&gt; and &lt;code&gt;getTelemetryPacket&lt;/code&gt;. 
Taken together,
these methods allow all the items in the currently applicable set 
of telemetry packets to be scanned. 
During an iteration cycle, an internal pointer, the &lt;i&gt;iteration
pointer&lt;/i&gt;, is made to scan over all the items in the currently applicable
set of telemetry packets.
The item currently pointed at by the iteration counter can be retrieved
through method &lt;code&gt;getTelemetryPacket&lt;/code&gt;.
Thus, a typical iteration cycle might be organized as follows: &lt;PRE&gt;
for (first(); !isIterationFinished(); next()) {
pItem = getTelemetryPacket();
. . .    // process pItem
}  &lt;/PRE&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5665'
        name = 'see'
        modelElement = 'S.1893'>
   <UML:TaggedValue.dataValue>
    	#getIterationItem
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5667'
        name = 'documentation'
        modelElement = 'S.1894'>
   <UML:TaggedValue.dataValue>
    	Iteration method to be used in conjunction with methods &lt;code&gt;first&lt;/code&gt;
and &lt;code&gt;isIterationFinished&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5668'
        name = 'see'
        modelElement = 'S.1894'>
   <UML:TaggedValue.dataValue>
    	#first
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5670'
        name = 'documentation'
        modelElement = 'S.1895'>
   <UML:TaggedValue.dataValue>
    	Iteration method to be used in conjunction with methods &lt;code&gt;first&lt;/code&gt;
and &lt;code&gt;next&lt;/code&gt;.
This method should only be used as part of an iteration cycle. The result
of calling it before ever calling &lt;code&gt;first&lt;/code&gt;
is undefined.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5671'
        name = 'see'
        modelElement = 'S.1895'>
   <UML:TaggedValue.dataValue>
    	#first
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5672'
        name = 'return'
        modelElement = 'S.1895'>
   <UML:TaggedValue.dataValue>
    	true if the end of the iteration has been reached, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5674'
        name = 'documentation'
        modelElement = 'S.1896'>
   <UML:TaggedValue.dataValue>
    	Return the telemetry packet pointed at by the iterator.
This method is a type-safe wrapper for method &lt;code&gt;getIteratorItem&lt;/code&gt;
in the superclass.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5675'
        name = 'see'
        modelElement = 'S.1896'>
   <UML:TaggedValue.dataValue>
    	#first
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5676'
        name = 'return'
        modelElement = 'S.1896'>
   <UML:TaggedValue.dataValue>
    	the telemetry packet pointed at by the iterator
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5678'
        name = 'documentation'
        modelElement = 'S.1555'>
   <UML:TaggedValue.dataValue>
    	Base class from which all telemetry packet classes are derived.
The &lt;i&gt;Telemetry Item&lt;/i&gt; concept is implemented here to represent a group
of ordered bytes that
are intended to be sent to the telemetry stream and that constitute one
single logical unit in the sense that they are collected together.
This group of ordered bytes is referred to in what follows as the
&lt;i&gt;telemetry bytes&lt;/i&gt;.
&lt;p&gt;
This class defines five attributes, two services, and one check.
The attributes allow the telemetry bytes to be characterized. They are: &lt;ul&gt;
&lt;li&gt;The &lt;i&gt;telemetry packet type&lt;/i&gt;: this attribute defines the type of the telemetry
item. &lt;/li&gt;
&lt;li&gt;The &lt;i&gt;telemetry packet subtype&lt;/i&gt;: this attribute defines the subtype of the
telemetry packet. It is useful where the type attribute does not provide sufficient
granularity to characterize the telemetry packet type.&lt;/li&gt;
&lt;li&gt;The &lt;i&gt;destination&lt;/i&gt;: this attribute defines the destination of the telemetry bytes.&lt;/li&gt;
&lt;li&gt;The &lt;i&gt;time tag&lt;/i&gt;: this attribute represents a time stamp for the telemetry bytes.&lt;/li&gt;
&lt;li&gt;The &lt;i&gt;in use flag&lt;/i&gt;: this is a toggle attribute that can have two values:
&quot;packet is in use&quot; and &quot;packet is not in use&quot;. This attribute
is useful when telemetry packets need to be allocated dynamically. The &quot;in use&quot; attribute can then
be used to discriminate between packets that are already allocated and
packets that are still free. &lt;/li&gt;
&lt;/ul&gt;
The two services defined by this class are: &lt;ul&gt;
&lt;li&gt;The &lt;i&gt;data update service&lt;/i&gt; is used by a client to direct the telemetry
item component to update the
internal information that it uses to construct the telemetry bytes.&lt;/li&gt;
&lt;li&gt;The &lt;i&gt;data acquisition service&lt;/i&gt; is used by a client to format and acquire
the most recently updated telemetry bytes.&lt;/li&gt;
&lt;/ul&gt;
Finally, the check defined by this class is the
&lt;i&gt;validity check&lt;/i&gt;. This service allows a client to ask a telemetry packet
component to verify that the most recently updated information is valid.
&lt;p&gt;
Two implementations of the data acquisition service are provided: a &lt;i&gt;safe implementation&lt;/i&gt;
and a &lt;i&gt;fast implementation&lt;/i&gt;. The safe implementation is built upon methods
&lt;code&gt;getUnsignedByte&lt;/code&gt; and &lt;code&gt;getNumberOfBytes&lt;/code&gt;. It allows the
most recently acquired telemetry bytes to be transfered one by one to the caller.
This implementation is safe because it complies with all coding rules defined for
the OBS Framework. However, it may not be fast because the transfer of each byte
requires a call to a virtual method. The alternative implementation is built on
methods &lt;code&gt;getStartAddress&lt;/code&gt; and &lt;code&gt;getNumberOfBytes&lt;/code&gt;. The former
method returns a pointer to the internal data area where the telemetry bytes are
stored. The latter returns the number of telemetry bytes. This implementation is
fast because the caller can copy the telemetry bytes using a fast memory copy 
algorithm. It is potentially unsafe because it gives the caller access to an
internal data structure of the telemetry packet component. The safe implementation
of the data update service must always be provided by all concrete subclasses.
The fast version may be provided by subclasses that manage large amounts of 
telemetry data. Method &lt;code&gt;isFastAcquisitionImplemented&lt;/code&gt; is provided to
allow a caller to check whether the fast implementation is provided.
The fast version of the data acquisition service should be used only when
necessary for performance reasons. By default, the safe version should be used.
&lt;p&gt;
Telemetry item instances are intended to be used by a component that collects
telemetry data
and forwards them to a telemetry channel (in the OBS Framework, this telemetry
data collecting component is the &lt;i&gt;telemetry manager&lt;/i&gt; instantiated from class
&lt;code&gt;CC_TelemetryManager&lt;/code&gt;). The telemetry packet class assumes that the
collection of the telemetry data from one of its instances
is performed in three steps as follows:&lt;ol&gt;
&lt;li&gt;The data update service is called&lt;/li&gt;
&lt;li&gt;The validity check is performed on the newly updated data&lt;/li&gt;
&lt;li&gt;The data acquisition service is called to acquire the telemetry data&lt;/li&gt;
&lt;/ol&gt;
This class does not make any assumptions about the data structure that
is used internally to store the telemetry bytes.
It is an abstract class that is intended to provide a general interface
capable of modeling telemetry packet concepts
of varying complexity but it only provides minimal default implementations for
its attributes, services and for the validity check.
Applications should provide subclasses that implement their particular
telemetry concept.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5679'
        name = 'author'
        modelElement = 'S.1555'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5680'
        name = 'version'
        modelElement = 'S.1555'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5681'
        name = 'ingroup'
        modelElement = 'S.1555'>
   <UML:TaggedValue.dataValue>
    	Telemetry
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5682'
        name = 'documentation'
        modelElement = 'S.1898'>
   <UML:TaggedValue.dataValue>
    	Instantiate a telemetry packet component. The &quot;in use&quot; flag is set to: &quot;packet
is not in use&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5683'
        name = 'documentation'
        modelElement = 'S.1899'>
   <UML:TaggedValue.dataValue>
    	Setter method for the telemetry packet type. Since this class
identifies the telemetry packet type with the class identifier
(see &lt;code&gt;CC_RootObject&lt;/code&gt;), this method is implemented as
a dummy method that returns without taking any action.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5684'
        name = 'see'
        modelElement = 'S.1899'>
   <UML:TaggedValue.dataValue>
    	#getType
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5685'
        name = 'param'
        modelElement = 'S.1899'>
   <UML:TaggedValue.dataValue>
    	tmType the telemetry packet type
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5688'
        name = 'documentation'
        modelElement = 'S.1900'>
   <UML:TaggedValue.dataValue>
    	Setter method for the telemetry packet sub-type. Since this class
does not model the telemetry packet sub-type, this method is implemented as
a dummy method that returns without taking any action.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5689'
        name = 'see'
        modelElement = 'S.1900'>
   <UML:TaggedValue.dataValue>
    	#getSubType
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5690'
        name = 'param'
        modelElement = 'S.1900'>
   <UML:TaggedValue.dataValue>
    	tmSubType the telemetry packet sub-type
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5693'
        name = 'documentation'
        modelElement = 'S.1901'>
   <UML:TaggedValue.dataValue>
    	Setter method for the telemetry packet time tag. Since this class
does not model the telemetry packet time tag, this method is implemented as
a dummy method that returns without taking any action.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5694'
        name = 'see'
        modelElement = 'S.1901'>
   <UML:TaggedValue.dataValue>
    	#getTimeTag
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5695'
        name = 'param'
        modelElement = 'S.1901'>
   <UML:TaggedValue.dataValue>
    	timeTag the telemetry packet time tag
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5698'
        name = 'documentation'
        modelElement = 'S.1902'>
   <UML:TaggedValue.dataValue>
    	Setter method for the telemetry packet destination. Since this class
does not model the telemetry packet destination, this method is implemented as
a dummy method that returns without taking any action.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5699'
        name = 'see'
        modelElement = 'S.1902'>
   <UML:TaggedValue.dataValue>
    	#getDestination
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5700'
        name = 'param'
        modelElement = 'S.1902'>
   <UML:TaggedValue.dataValue>
    	tmDest telemetry packet destination
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5703'
        name = 'documentation'
        modelElement = 'S.1903'>
   <UML:TaggedValue.dataValue>
    	Return the number of bytes managed by this telemetry packet.
Each telemetry packet is responsible for generating a fixed number of
telemetry bytes. This method returns this fixed number.
&lt;p&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5704'
        name = 'return'
        modelElement = 'S.1903'>
   <UML:TaggedValue.dataValue>
    	number of bytes in this telemetry packet
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5706'
        name = 'documentation'
        modelElement = 'S.1904'>
   <UML:TaggedValue.dataValue>
    	Implement the &lt;i&gt;data update service&lt;/i&gt;.
A call to this method should normally be followed by a call to method
&lt;CODE&gt;isValid&lt;/CODE&gt; to verify the validity of the newly updated data.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5708'
        name = 'documentation'
        modelElement = 'S.1905'>
   <UML:TaggedValue.dataValue>
    	Execute the &lt;i&gt;validity check&lt;/i&gt; on the most recently updated
telemetry bytes.
This class provides a default implementation that always return &quot;data
valid&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5709'
        name = 'see'
        modelElement = 'S.1905'>
   <UML:TaggedValue.dataValue>
    	#update
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5710'
        name = 'return'
        modelElement = 'S.1905'>
   <UML:TaggedValue.dataValue>
    	true if the most recently updated telemetry bytes are valid,
false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5712'
        name = 'documentation'
        modelElement = 'S.1906'>
   <UML:TaggedValue.dataValue>
    	Implement the safe version of the &lt;i&gt;data acquisition service&lt;/i&gt;.
The telemetry data provided by this class are treated as a sequence
of bytes.
The method returns the n-th telemetry byte.
The parameter n must lie in the interval [0, N-1] where N is the
number of telemetry bytes (the return value
of method &lt;CODE&gt;getNumberOfBytes&lt;/CODE&gt;).
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5713'
        name = 'return'
        modelElement = 'S.1906'>
   <UML:TaggedValue.dataValue>
    	value of n-th telemetry byte
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5714'
        name = 'param'
        modelElement = 'S.1906'>
   <UML:TaggedValue.dataValue>
    	n the telemetry byte to be returned (starting with byte 0)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5717'
        name = 'documentation'
        modelElement = 'S.1907'>
   <UML:TaggedValue.dataValue>
    	Implement the fast version of the &lt;i&gt;data acquisition service&lt;/i&gt;.
If this version of the service is implemented, then this method returns
a pointer to start address of an internal data structure that holds all
telemetry data as a linear sequence of bytes. The size of the internal
data structure is given by method &lt;code&gt;getNumberOfBytes&lt;/code&gt;).
This method only has a meaningful implementation if the fast version of the
data acquisition service is provided. This is the case if method
&lt;code&gt;isFastAcquisitionImplemented&lt;/code&gt; returns a value of &lt;code&gt;true&lt;/code&gt;.
If this is not the case, this method should return a null pointer.
This class provideds a default implementation that returns a null
pointer.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5718'
        name = 'return'
        modelElement = 'S.1907'>
   <UML:TaggedValue.dataValue>
    	a null pointer
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5720'
        name = 'documentation'
        modelElement = 'S.1908'>
   <UML:TaggedValue.dataValue>
    	Return &lt;code&gt;true&lt;/code&gt; if the fast version of the data acquisition
service is implemented. This class provides a default implementation
that returns &lt;code&gt;false&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5721'
        name = 'see'
        modelElement = 'S.1908'>
   <UML:TaggedValue.dataValue>
    	#getStartAddress
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5722'
        name = 'return'
        modelElement = 'S.1908'>
   <UML:TaggedValue.dataValue>
    	&lt;code&gt;true&lt;/code&gt; if the fast version of the data acquisition
service is implemented
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5724'
        name = 'documentation'
        modelElement = 'S.1909'>
   <UML:TaggedValue.dataValue>
    	Getter method for the telemetry packet type. This class implements the
the type to coincide with the lest significant byte of the class identifier.
A pseudo-code implementation of this method therefore is:&lt;pre&gt;
return (TD_TelemetryType)(getClassId()%256);&lt;/pre&gt;
The modulo operation ensures that there is no overflow even if there is a
type mismatch between type &lt;code&gt;TD_TelemetryType&lt;/code&gt; the type of the
type of the class identifier.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5725'
        name = 'return'
        modelElement = 'S.1909'>
   <UML:TaggedValue.dataValue>
    	the telemetry packet type
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5727'
        name = 'documentation'
        modelElement = 'S.1910'>
   <UML:TaggedValue.dataValue>
    	Getter method for the telemetry sub-type. This class does not model
the telemetry sub-type. This method always returns zero.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5728'
        name = 'return'
        modelElement = 'S.1910'>
   <UML:TaggedValue.dataValue>
    	the telemetry sub-type
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5730'
        name = 'documentation'
        modelElement = 'S.1911'>
   <UML:TaggedValue.dataValue>
    	Getter method for the telemetry packet time tag. This class does not model
the telemetry packet time tag. This method always returns zero.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5731'
        name = 'return'
        modelElement = 'S.1911'>
   <UML:TaggedValue.dataValue>
    	the telemetry packet time
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5733'
        name = 'documentation'
        modelElement = 'S.1912'>
   <UML:TaggedValue.dataValue>
    	Getter method for the telemetry packet destination. This class does not model
the telemetry packet destination. This method always returns zero.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5734'
        name = 'return'
        modelElement = 'S.1912'>
   <UML:TaggedValue.dataValue>
    	the telemetry packet destination
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5736'
        name = 'documentation'
        modelElement = 'S.1913'>
   <UML:TaggedValue.dataValue>
    	Set the value of the &quot;in use&quot; attribute.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5737'
        name = 'see'
        modelElement = 'S.1913'>
   <UML:TaggedValue.dataValue>
    	#isInUse
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5738'
        name = 'param'
        modelElement = 'S.1913'>
   <UML:TaggedValue.dataValue>
    	newInUse the new value of the in use attribute
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5741'
        name = 'documentation'
        modelElement = 'S.1914'>
   <UML:TaggedValue.dataValue>
    	Return the value of the &quot;in use&quot; attribute. If the method returns true, then
the packet is already in use, otherwise it is free and can be configured.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5742'
        name = 'see'
        modelElement = 'S.1914'>
   <UML:TaggedValue.dataValue>
    	#setInUse
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5743'
        name = 'return'
        modelElement = 'S.1914'>
   <UML:TaggedValue.dataValue>
    	the value of the &quot;in use&quot; attribute.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5745'
        name = 'documentation'
        modelElement = 'S.1553'>
   <UML:TaggedValue.dataValue>
    	Base class from which all telemetry stream classes are derived.
A &lt;i&gt;telemetry stream&lt;/i&gt; represents a
data sink to which individual &lt;i&gt;telemetry packets&lt;/i&gt; can be written.
The telemetry packets are assumed to be encapsulated in objects of type
&lt;code&gt;TelemetryPacket&lt;/code&gt;.
This is an abstract class since the mechanism through which the telemetry
items are written to a physical telemetry channel vary widely across
applications.
&lt;p&gt;
The basic service provided by this class is implemented by a &lt;code&gt;write&lt;/code&gt;
operation that takes an instance of type &lt;code&gt;TelemetryPacket&lt;/code&gt; as
an argument. An application would implement this operation to write the content
of the telemetry packet to a physical telemetry channel.
Additionally, housekeeping operations are provided to manage the telemetry
stream.
These operations are designed to be compatible with a wide range of
concrete telemetry stream mechanisms.
Given the diversity of such mechanisms, this means that the semantics of
the operations is only weakly defined in this base class. More specific
definitions are left to the sub-classes. There is however one important constraint
on the implementations provided by the sub-classes. Some of the methods declared
by class &lt;code&gt;TelemetryStream&lt;/code&gt; receive as an argument a pointer to the
telemetry packet whose content must be written to the telemetry data sink.
Telemetry packets are in principle allocated dynamically by a &lt;i&gt;telemetry packet
factory&lt;/i&gt;. Hence, if the telemetry stream needs to buffer information about the
telemetry packet, it should do so by copying its content to an internal buffer. It
should &lt;i&gt;not&lt;/i&gt; try to store the pointer to the telemetry packet in order to
access it at a later time.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5746'
        name = 'author'
        modelElement = 'S.1553'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5747'
        name = 'version'
        modelElement = 'S.1553'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5748'
        name = 'ingroup'
        modelElement = 'S.1553'>
   <UML:TaggedValue.dataValue>
    	Telemetry
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5749'
        name = 'documentation'
        modelElement = 'S.1915'>
   <UML:TaggedValue.dataValue>
    	Instantiate a telemetry stream component. This constructor returns without taking
any action.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5750'
        name = 'documentation'
        modelElement = 'S.1916'>
   <UML:TaggedValue.dataValue>
    	Reset the telemetry stream. The effect of a reset are
implementation-specific.
This class provides a default implementation that does not take any
action.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5752'
        name = 'documentation'
        modelElement = 'S.1917'>
   <UML:TaggedValue.dataValue>
    	Flush the telemetry stream. The effect of a flush are
implementation-specific.
This class provides a default implementation that does not take any
action.
This operation is typically useful when the telemetry stream maintains
an internal buffer to which it writes the telemetry data. The &lt;code&gt;flush&lt;/code&gt;
operation can then be implemented to emtpy the buffer and write its content
to a telemetry channel.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5754'
        name = 'documentation'
        modelElement = 'S.1918'>
   <UML:TaggedValue.dataValue>
    	Return the capacity of the telemetry stream.
Some telemetry stream may have a capacity attribute associated to them.
This method returns its value.
This class provides a default implementation that returns MAX_INT.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5755'
        name = 'see'
        modelElement = 'S.1918'>
   <UML:TaggedValue.dataValue>
    	MAX_INT
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5756'
        name = 'return'
        modelElement = 'S.1918'>
   <UML:TaggedValue.dataValue>
    	the capacity of the telemetry stream
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5758'
        name = 'documentation'
        modelElement = 'S.1919'>
   <UML:TaggedValue.dataValue>
    	Check whether there is enough space in the telemetry stream for writing
the argument telemetry packet.
Some telemetry streams may have a limited capacity.
Before performing a write operation, it may therefore be necessary to
check whether there is enough space in the
telemetry stream for the data that it is desired to write.
This operation checks whether there is enough space for writing the
content of the argument telemetry packet.
This class provides a default implementation that always returns
&quot;enough space&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5759'
        name = 'param'
        modelElement = 'S.1919'>
   <UML:TaggedValue.dataValue>
    	pTmPacket the telemetry packet to be written to the telemetry stream
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5760'
        name = 'return'
        modelElement = 'S.1919'>
   <UML:TaggedValue.dataValue>
    	true if there is enough space in the telemetry stream to write
n bytes, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5763'
        name = 'documentation'
        modelElement = 'S.1920'>
   <UML:TaggedValue.dataValue>
    	Write the content of the telemetry packet to the telemetry stream.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5764'
        name = 'param'
        modelElement = 'S.1920'>
   <UML:TaggedValue.dataValue>
    	tmItem the telemetry packet to be written to the telemetry stream
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5776'
        name = 'documentation'
        modelElement = 'S.1927'>
   <UML:TaggedValue.dataValue>
    	Base class from which all classes encapsulating a test case are derived.
A &lt;i&gt;test case&lt;/i&gt; is a self-contained, and usually small test, that can either
fail or succeed.
The class encapsulating a test case is completely responsible for running the test
from the set-up of the test conditions to the shut-down of the test and for
reporting its outcome.
A test case class is however &quot;passive&quot; in the sense that it has the capabilities
to initiate, perform and terminate a test but these capabilities must be
controlled by some external entity.
&lt;p&gt;
This class declares, and defines trivial default implementations for, four services.
The &lt;i&gt;test set-up service&lt;/i&gt; set up the conditions for the performance of the
test case.
The &lt;i&gt;test execution service&lt;/i&gt; causes the test case to be executed. This service
should only be called after the test set-up service was called.
The &lt;i&gt;test shut-down service&lt;/i&gt; performs any shut-down actions that may be
required at the end of the test case. It should always be called at the end of a test
case.
The &lt;i&gt;test reporting service&lt;/i&gt; reports the outcome of the test. The outcome
of the test is made up of a true/false flag (the &lt;i&gt;test outcome&lt;/i&gt;)and an
explanatory message that
contains additional information about its outcome (the &lt;i&gt;test message&lt;/i&gt;).
&lt;p&gt;
This class defines two attributes for test cases.
The &lt;i&gt;test case ID&lt;/i&gt; is an integer acting as a numerical identifier of the test case.
The &lt;i&gt;test case name&lt;/i&gt; is a string that represent the name of the test case.
&lt;p&gt;
This class is abstract because the test execution service
must be defined by subclasses representing concrete test cases. Default
implementations are instead provided for the test set up and shut down services.
&lt;p&gt;
A pseudo-code example of how a test case could be run is as follows:
&lt;p&gt;&lt;PRE&gt;
testCase.setUpTestCase();
testCase.runTestCase();
testCase.shutDownTestCase();
bool outcome = testCase.getTestOutcome();
char* testMessage = testCase.getTestMessage();
&lt;/PRE&gt;
IMPORTANT NOTICE: the framework classes are designed to prevent class instances
from ever being destroyed (this applies both to explicit object deletion and
to implicit deletion when an object variable goes out of scope). This presents
a problem for the implementation of test cases since each test case should have
its own set of variables in order to preserve the mutual independence of test
cases. The solution adopted here is that each test case creates the class
variables it needs dynamically on the heap but &lt;i&gt;does not destry them when 
it terminates&lt;/i&gt;. This means that execution of a test case introduces a 
memory leak. The size of the memory leak should not cause any problems in a
desktop environment.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5777'
        name = 'author'
        modelElement = 'S.1927'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5778'
        name = 'todo'
        modelElement = 'S.1927'>
   <UML:TaggedValue.dataValue>
    	reformulate comments to test cases in terms of &quot;checks&quot; rather than 
&quot;verification&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5779'
        name = 'see'
        modelElement = 'S.1927'>
   <UML:TaggedValue.dataValue>
    	TestSuite
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5780'
        name = 'version'
        modelElement = 'S.1927'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5781'
        name = 'ingroup'
        modelElement = 'S.1927'>
   <UML:TaggedValue.dataValue>
    	TestCases
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5782'
        name = 'documentation'
        modelElement = 'S.1934'>
   <UML:TaggedValue.dataValue>
    	Method intended to be called by concrete test cases to set the
test outcome flag and the test message.
This method should only be called once in a given test case.
Attempts to call it more than once will result in an error message
being stored in the test message and in the test outcome flag having
an undefined value.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5783'
        name = 'param'
        modelElement = 'S.1934'>
   <UML:TaggedValue.dataValue>
    	outcome the test outcome flag
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5784'
        name = 'param'
        modelElement = 'S.1934'>
   <UML:TaggedValue.dataValue>
    	testMessage the test message string
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5788'
        name = 'documentation'
        modelElement = 'S.1935'>
   <UML:TaggedValue.dataValue>
    	Return true if non-nominal behaviour can be checked.
Some test cases may want to check the behaviour of the class under test
under non-nominal conditions. In general, this should only be done if
violation of an assertion check does not lead to a termination of the application.
This is because the non-nominal situation might be caught by an assertion check
which might lead to a premature termination of the test. 
This method returns true if violation of an assertion check does not lead
to termination of the application. The method is implemented in terms of the
pre-processor symbols NDEBUG and USE_SYSTEM_ASSERT defined in
the include file &lt;code&gt;CompilerSwitches.h&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5789'
        name = 'return'
        modelElement = 'S.1935'>
   <UML:TaggedValue.dataValue>
    	true if if violation of an assertion check does not lead to termination
of the application, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5791'
        name = 'documentation'
        modelElement = 'S.1936'>
   <UML:TaggedValue.dataValue>
    	Constructor defining the test case ID and the test case name.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5792'
        name = 'param'
        modelElement = 'S.1936'>
   <UML:TaggedValue.dataValue>
    	testId the test case ID
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5793'
        name = 'param'
        modelElement = 'S.1936'>
   <UML:TaggedValue.dataValue>
    	testName the test case name as a string
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5796'
        name = 'documentation'
        modelElement = 'S.1937'>
   <UML:TaggedValue.dataValue>
    	This method implements the test set up service. This class
provides a default implementation that always returns &quot;set up
was successful&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5797'
        name = 'return'
        modelElement = 'S.1937'>
   <UML:TaggedValue.dataValue>
    	true if the test set up succeeded, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5799'
        name = 'documentation'
        modelElement = 'S.1938'>
   <UML:TaggedValue.dataValue>
    	This method implements the test execution service.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5801'
        name = 'documentation'
        modelElement = 'S.1939'>
   <UML:TaggedValue.dataValue>
    	This method implements the test shut down service. This class
provides a default implementation that always returns &quot;shut down
was successful&quot;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5802'
        name = 'return'
        modelElement = 'S.1939'>
   <UML:TaggedValue.dataValue>
    	true if the test shut down succeeded, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5804'
        name = 'documentation'
        modelElement = 'S.1940'>
   <UML:TaggedValue.dataValue>
    	Return the test name.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5805'
        name = 'return'
        modelElement = 'S.1940'>
   <UML:TaggedValue.dataValue>
    	the test name.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5807'
        name = 'documentation'
        modelElement = 'S.1941'>
   <UML:TaggedValue.dataValue>
    	Return the test outcome.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5808'
        name = 'return'
        modelElement = 'S.1941'>
   <UML:TaggedValue.dataValue>
    	the test name.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5810'
        name = 'documentation'
        modelElement = 'S.1942'>
   <UML:TaggedValue.dataValue>
    	Return the test message. The test message can be an empty string (e.g. &quot; &quot;)
but should never be the null string.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5811'
        name = 'return'
        modelElement = 'S.1942'>
   <UML:TaggedValue.dataValue>
    	the test name.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5813'
        name = 'documentation'
        modelElement = 'S.938'>
   <UML:TaggedValue.dataValue>
    	Base class for generic test cases. This class specializes
class &lt;code&gt;TestCase&lt;/code&gt; to provide default implementations of
the &lt;code&gt;SetUpTestCase&lt;/code&gt; and &lt;code&gt;ShutDownTestCase&lt;/code&gt;
methods that are intended to be suitable for most framework test cases.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5814'
        name = 'author'
        modelElement = 'S.938'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5815'
        name = 'version'
        modelElement = 'S.938'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5816'
        name = 'ingroup'
        modelElement = 'S.938'>
   <UML:TaggedValue.dataValue>
    	TestCases
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5817'
        name = 'documentation'
        modelElement = 'S.1944'>
   <UML:TaggedValue.dataValue>
    	Set the test case name and ID.
Calls the constructor of the super class and returns.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5818'
        name = 'param'
        modelElement = 'S.1944'>
   <UML:TaggedValue.dataValue>
    	testId the test case ID
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5819'
        name = 'param'
        modelElement = 'S.1944'>
   <UML:TaggedValue.dataValue>
    	testName the test case name as a string
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5822'
        name = 'documentation'
        modelElement = 'S.1945'>
   <UML:TaggedValue.dataValue>
    	Perform basic test initialization actions. More specifically,
the following actions are taken: &lt;ul&gt;
&lt;li&gt;The system list size is initialized&lt;/li&gt;
&lt;li&gt;An event repository is created and initialized with a dummy OBS clock&lt;/li&gt;
&lt;li&gt;A dummy data pool is created as an instance of &lt;code&gt;DC_DummyDataPool&lt;/code&gt;
and is loaded in &lt;code&gt;CC_RootObject&lt;/code&gt; as the system data pool&lt;/li&gt;.
&lt;li&gt;A dummy parameter database is created as an instance of &lt;code&gt;DC_DummyParameterDatabase&lt;/code&gt;
and is loaded in &lt;code&gt;CC_RootObject&lt;/code&gt; as the system parameter database&lt;/li&gt;.
&lt;li&gt;The event repository is plugged into the &lt;code&gt;CC_RootObject&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A dummy tracer is created and loaded into the &lt;code&gt;CC_RootObject&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
Note that the above actions initialize the static part of framework components
and should therefore be performed only once (the first time the method is called).
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5824'
        name = 'documentation'
        modelElement = 'S.1946'>
   <UML:TaggedValue.dataValue>
    	Dummy implementation that returns without doing anything.
Subclasses should provide concrete test case implementations.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5826'
        name = 'documentation'
        modelElement = 'S.1947'>
   <UML:TaggedValue.dataValue>
    	There are no shut-down actions associated to the basic initialization
actions performed in method &lt;code&gt;setUpTestCase&lt;/code&gt;. Hence, this
method only returns &quot;shut down successful&quot; without performing any
actions. In order to preserve compatibility with future releases that
might be performing some actions in this method, implementations of
&lt;code&gt;setUpTestCase&lt;/code&gt; in subclasses should call this method before
returning as in the following pseudo-code example:
&lt;PRE&gt;
ConcreteTestCase::shutDownTestCase() {
bool outcome = . . . ;  // perform class-specific shut-down
if (!outcome)
return outcome;
else
return TestCaseGenericSetUp::shutDownTestCase();
&lt;/PRE&gt;
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5828'
        name = 'documentation'
        modelElement = 'S.948'>
   <UML:TaggedValue.dataValue>
    	Base class for test cases that implement a PUS-related scenario.
The test set-up procedure creates and configures several PUS-related components:
&lt;ul&gt;
&lt;li&gt;Telecommand loader of type &lt;code&gt;DC_BasicPUSTcLoader&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Telecommand manager&lt;/li&gt;
&lt;li&gt;Telemetry manager&lt;/li&gt;
&lt;li&gt;PUS Telemetry mode manager of type &lt;code&gt;DC_PUSTelemetryModeManager&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Logger telemetry stream of type &lt;code&gt;DC_PUSTmLogger&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;PUS event repository of type &lt;code&gt;DC_PUSEventRepository&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Manoeuvre manager&lt;/li&gt;
&lt;li&gt;Dummy OBS Clock of type &lt;code&gt;DC_DummyObsClock&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
The event repository is loaded in the &lt;code&gt;CC_RootObject&lt;/code&gt;
which is then unloaded in the shutdown procedure. 
All the above items are created as static instances and are accessible 
through getter methods defined by this class.
&lt;p&gt;
This class is especially useful for test cases that want to perform end-to-end
tests of PUS-related functionalities (many components they require are
already instantiated and configured) and generally for test cases that
exercise PUS-related functionalities.
&lt;p&gt;
In order to facilitate the task of the test developers, this class offers utility
methods to load the telecommand load area associated to the telecommand loader
with data representing instances of several types of telecommand packets.
The telecommand packet data are loaded in the command load area associated to the
telecommand loader managed by this class. This class is responsible for managing the
command load area. It updates its first byte that holds the number of telecommand packets
currently stored in the command area and it maintains a &lt;i&gt;command area position
index&lt;/i&gt; that points to the location in the command area where the next telecommand packet
should be written. The position index is initialized to 1 and can be reset with method 
&lt;code&gt;resetCommandLoadArea&lt;/code&gt;. The utility methods write both the header and the
application data part of the telecommand packet.  In general, except for the acknowledge 
field (which is specified by the caller), all other information in the telecommand packet 
header is given fixed default values. The header is written by method &lt;code&gt;writeTcHeader&lt;/code&gt;.
&lt;p&gt;
If there is no space left in the command load area to store the telecommand packet specified
by the caller of this method, then the method returns a value of false. Otherwise, the
telecommand is written to the command load area and a value of true is returned.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5829'
        name = 'author'
        modelElement = 'S.948'>
   <UML:TaggedValue.dataValue>
    	A. Pasetti
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5830'
        name = 'version'
        modelElement = 'S.948'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5831'
        name = 'ingroup'
        modelElement = 'S.948'>
   <UML:TaggedValue.dataValue>
    	TestCases
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5832'
        name = 'documentation'
        modelElement = 'S.1960'>
   <UML:TaggedValue.dataValue>
    	Helper method that writes a default telecommand packet header to the
telecommand load. 
This method is called by the methods that write telecommands packets
to the telecommand load area.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5833'
        name = 'param'
        modelElement = 'S.1960'>
   <UML:TaggedValue.dataValue>
    	length the &quot;packet length&quot; field of the telecommand packet
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5834'
        name = 'param'
        modelElement = 'S.1960'>
   <UML:TaggedValue.dataValue>
    	packetSeqControl the packet sequence control field of the telecommand packet
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5838'
        name = 'documentation'
        modelElement = 'S.1961'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5839'
        name = 'param'
        modelElement = 'S.1961'>
   <UML:TaggedValue.dataValue>
    	testId the test identifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5840'
        name = 'param'
        modelElement = 'S.1961'>
   <UML:TaggedValue.dataValue>
    	testName the name of the test
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5843'
        name = 'documentation'
        modelElement = 'S.1962'>
   <UML:TaggedValue.dataValue>
    	Call the test setup service of the super class and then create
and configure the components listed in the class comment. 
Component creation and configuration of some parameters is only performed the first
time this method is executed. Configuration parameters that can updated 
once are instead set at every activation. This ensures that all derived test cases
can rely on the same initial configuration. The values of
the configuration parameters are constants that are defined in file &lt;code&gt;TestConstants.h&lt;/code&gt;.
This method also loads the PUS event repository in &lt;code&gt;CC_RootObject&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5845'
        name = 'documentation'
        modelElement = 'S.1963'>
   <UML:TaggedValue.dataValue>
    	Restore the old event repository that was loaded at the time this
test case was started.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5847'
        name = 'documentation'
        modelElement = 'S.1964'>
   <UML:TaggedValue.dataValue>
    	Return the telecommand manager created by the initialization
procedure of this test case.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5848'
        name = 'return'
        modelElement = 'S.1964'>
   <UML:TaggedValue.dataValue>
    	the telecommmand manager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5850'
        name = 'documentation'
        modelElement = 'S.1965'>
   <UML:TaggedValue.dataValue>
    	Return the telemetry manager created by the initialization
procedure of this test case.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5851'
        name = 'return'
        modelElement = 'S.1965'>
   <UML:TaggedValue.dataValue>
    	the telemetry manager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5853'
        name = 'documentation'
        modelElement = 'S.1966'>
   <UML:TaggedValue.dataValue>
    	Return the telemetry mode manager created by the initialization
procedure of this test case.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5854'
        name = 'return'
        modelElement = 'S.1966'>
   <UML:TaggedValue.dataValue>
    	the telemetry mode manager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5856'
        name = 'documentation'
        modelElement = 'S.1967'>
   <UML:TaggedValue.dataValue>
    	Return the manoeuvre manager created by the initialization
procedure of this test case.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5857'
        name = 'return'
        modelElement = 'S.1967'>
   <UML:TaggedValue.dataValue>
    	the manoeuvre manager
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5859'
        name = 'documentation'
        modelElement = 'S.1968'>
   <UML:TaggedValue.dataValue>
    	Return the telecommand loader created by the initialization
procedure of this test case.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5860'
        name = 'return'
        modelElement = 'S.1968'>
   <UML:TaggedValue.dataValue>
    	the telecommand loader
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5862'
        name = 'documentation'
        modelElement = 'S.1969'>
   <UML:TaggedValue.dataValue>
    	Return the telemetry stream created by the initialization
procedure of this test case.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5863'
        name = 'return'
        modelElement = 'S.1969'>
   <UML:TaggedValue.dataValue>
    	the telemetry stream
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5865'
        name = 'documentation'
        modelElement = 'S.1970'>
   <UML:TaggedValue.dataValue>
    	Return the OBS clock created by the initialization
procedure of this test case.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5866'
        name = 'return'
        modelElement = 'S.1970'>
   <UML:TaggedValue.dataValue>
    	the OBS clock
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5868'
        name = 'documentation'
        modelElement = 'S.1971'>
   <UML:TaggedValue.dataValue>
    	Return the PUS Event Repository created by the initialization
procedure of this test case.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5869'
        name = 'return'
        modelElement = 'S.1971'>
   <UML:TaggedValue.dataValue>
    	the PUS event repository
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5871'
        name = 'documentation'
        modelElement = 'S.1972'>
   <UML:TaggedValue.dataValue>
    	Load the &lt;i&gt;command load area&lt;/i&gt; with data representing a &lt;code&gt;DC_TestPUSTelecommand&lt;/code&gt; 
telecommand packet.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5872'
        name = 'see'
        modelElement = 'S.1972'>
   <UML:TaggedValue.dataValue>
    	DC_TestPUSTelecommand
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5873'
        name = 'param'
        modelElement = 'S.1972'>
   <UML:TaggedValue.dataValue>
    	ackField the acknowledge field of the telecommand
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5874'
        name = 'param'
        modelElement = 'S.1972'>
   <UML:TaggedValue.dataValue>
    	execCounter the execution counter value
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5875'
        name = 'param'
        modelElement = 'S.1972'>
   <UML:TaggedValue.dataValue>
    	execCheckVal the execution check value
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5876'
        name = 'param'
        modelElement = 'S.1972'>
   <UML:TaggedValue.dataValue>
    	valCheckVal the validity check value
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5877'
        name = 'param'
        modelElement = 'S.1972'>
   <UML:TaggedValue.dataValue>
    	execCheckCode the execution check code
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5878'
        name = 'param'
        modelElement = 'S.1972'>
   <UML:TaggedValue.dataValue>
    	valCheckCode the validity check code
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5879'
        name = 'param'
        modelElement = 'S.1972'>
   <UML:TaggedValue.dataValue>
    	execOutcome the outcome of the execution check
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5880'
        name = 'param'
        modelElement = 'S.1972'>
   <UML:TaggedValue.dataValue>
    	packetSeqControl the packet sequence control field
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5881'
        name = 'return'
        modelElement = 'S.1972'>
   <UML:TaggedValue.dataValue>
    	true if the telecommand packet could be successfully written, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5891'
        name = 'documentation'
        modelElement = 'S.1973'>
   <UML:TaggedValue.dataValue>
    	Load the &lt;i&gt;command load area&lt;/i&gt; with data representing a &lt;code&gt;DC_PUSDefineDataReporting&lt;/code&gt; 
telecommand packet.
A simple instance of the telecommand is written that includes only one parameter to be 
sample at every collection interval.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5892'
        name = 'see'
        modelElement = 'S.1973'>
   <UML:TaggedValue.dataValue>
    	DC_PUSDefineDataReporting
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5893'
        name = 'param'
        modelElement = 'S.1973'>
   <UML:TaggedValue.dataValue>
    	ackField the acknowledge field of the telecommand
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5894'
        name = 'param'
        modelElement = 'S.1973'>
   <UML:TaggedValue.dataValue>
    	collectionInterval the collection interval
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5895'
        name = 'param'
        modelElement = 'S.1973'>
   <UML:TaggedValue.dataValue>
    	sid the SID of the packet being defined
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5896'
        name = 'param'
        modelElement = 'S.1973'>
   <UML:TaggedValue.dataValue>
    	par the parameter to be sampled
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5897'
        name = 'param'
        modelElement = 'S.1973'>
   <UML:TaggedValue.dataValue>
    	packetSeqControl the packet sequence control field
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5898'
        name = 'param'
        modelElement = 'S.1973'>
   <UML:TaggedValue.dataValue>
    	tcSubType the subtype of the telecommand packet
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5899'
        name = 'return'
        modelElement = 'S.1973'>
   <UML:TaggedValue.dataValue>
    	true if the telecommand packet could be successfully written, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5907'
        name = 'documentation'
        modelElement = 'S.1974'>
   <UML:TaggedValue.dataValue>
    	Load the &lt;i&gt;command load area&lt;/i&gt; with data representing either a &lt;code&gt;DC_PUSControlDataReporting&lt;/code&gt;,
or a &lt;code&gt;DC_PUSClearDataReporting&lt;/code&gt;, or a &lt;code&gt;DC_PUSRequestDataReporting&lt;/code&gt;
telecommand packet.
The telecommand content is specified by its subtype and by an array that holds the SIDs of 
data reporting telecommands that must be controlled, cleared, or requested.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5908'
        name = 'see'
        modelElement = 'S.1974'>
   <UML:TaggedValue.dataValue>
    	DC_PUSDefineDataReporting
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5909'
        name = 'param'
        modelElement = 'S.1974'>
   <UML:TaggedValue.dataValue>
    	ackField the acknowledge field of the telecommand
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5910'
        name = 'param'
        modelElement = 'S.1974'>
   <UML:TaggedValue.dataValue>
    	NSID the number of SIDs in the telecommand
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5911'
        name = 'param'
        modelElement = 'S.1974'>
   <UML:TaggedValue.dataValue>
    	sid the array holding the SIDs
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5912'
        name = 'param'
        modelElement = 'S.1974'>
   <UML:TaggedValue.dataValue>
    	tcSubType the telecommand subtype
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5913'
        name = 'param'
        modelElement = 'S.1974'>
   <UML:TaggedValue.dataValue>
    	packetSeqControl the packet sequence control field
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5914'
        name = 'return'
        modelElement = 'S.1974'>
   <UML:TaggedValue.dataValue>
    	true if the telecommand packet could be successfully written, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5921'
        name = 'documentation'
        modelElement = 'S.1975'>
   <UML:TaggedValue.dataValue>
    	Clear the &lt;i&gt;command load area&lt;/i&gt;. The command load area position index is reset to 
one and the first byte of the command load area is reset to zero.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5923'
        name = 'documentation'
        modelElement = 'S.958'>
   <UML:TaggedValue.dataValue>
    	Base class for test cases that need to perform checks on the
event repository associated to the &lt;code&gt;CC_RootObject&lt;/code&gt;
class.
Two types of checks are foreseen. The &lt;i&gt;latest event check&lt;/i&gt;
verifies the type and parameter of the latest event in the
repository and the total number of events in the repository.
The &lt;i&gt;specific event check&lt;/i&gt; verifies the type and parameter
of a specific event in the repository.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5924'
        name = 'author'
        modelElement = 'S.958'>
   <UML:TaggedValue.dataValue>
    	Roberto Totaro
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5925'
        name = 'see'
        modelElement = 'S.958'>
   <UML:TaggedValue.dataValue>
    	CC_RootObject#getEventRepository
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5926'
        name = 'version'
        modelElement = 'S.958'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5927'
        name = 'ingroup'
        modelElement = 'S.958'>
   <UML:TaggedValue.dataValue>
    	TestCases
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5928'
        name = 'documentation'
        modelElement = 'S.1976'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5929'
        name = 'param'
        modelElement = 'S.1976'>
   <UML:TaggedValue.dataValue>
    	testId the test identifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5930'
        name = 'param'
        modelElement = 'S.1976'>
   <UML:TaggedValue.dataValue>
    	testName the name of the test
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5933'
        name = 'documentation'
        modelElement = 'S.1977'>
   <UML:TaggedValue.dataValue>
    	Call the test setup service of the super class.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5935'
        name = 'documentation'
        modelElement = 'S.1978'>
   <UML:TaggedValue.dataValue>
    	Get the current number of events in the repository.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5936'
        name = 'return'
        modelElement = 'S.1978'>
   <UML:TaggedValue.dataValue>
    	Number of events
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5938'
        name = 'documentation'
        modelElement = 'S.1979'>
   <UML:TaggedValue.dataValue>
    	Get the size of the event repository (the maximum number of events
it can contain).
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5939'
        name = 'return'
        modelElement = 'S.1979'>
   <UML:TaggedValue.dataValue>
    	Size of event repository
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5941'
        name = 'documentation'
        modelElement = 'S.1980'>
   <UML:TaggedValue.dataValue>
    	Perform a &lt;i&gt;latest event check&lt;/i&gt;. More specifically, the
following tests are performed on the event repository associated
to the &lt;code&gt;CC_RootObject&lt;/code&gt; class: &lt;ul&gt;
&lt;li&gt;Verifies that the number of events in the repository
is equal to &lt;code&gt;nEvt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Checks that the event type of the latest event in the
repository is equal to &lt;code&gt;eventType&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
If all the tests are passed, the method returns &lt;code&gt;true&lt;/code&gt;,
otherwise &lt;code&gt;false&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5942'
        name = 'param'
        modelElement = 'S.1980'>
   <UML:TaggedValue.dataValue>
    	line line number
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5943'
        name = 'param'
        modelElement = 'S.1980'>
   <UML:TaggedValue.dataValue>
    	nEvt the expected number of events in the repository
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5944'
        name = 'param'
        modelElement = 'S.1980'>
   <UML:TaggedValue.dataValue>
    	eventType the expected type of the latest event in the repository
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5945'
        name = 'return'
        modelElement = 'S.1980'>
   <UML:TaggedValue.dataValue>
    	true if the tests are passed, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5950'
        name = 'documentation'
        modelElement = 'S.1981'>
   <UML:TaggedValue.dataValue>
    	Perform a &lt;i&gt;specific event check&lt;/i&gt;. The event to be checked is the
n-th event in the buffer. The argument n must lie in the range [N-S+1, N]
where N is the total number of events stored in the repository since
it was created (return value of method &lt;code&gt;getCounter()&lt;/code&gt;) and
S is the repository size. If the method argument does not satisfy this
constraint, the test returns false. Otherwise, the following checks
are performed on the target event: &lt;ul&gt;
&lt;li&gt;Verify that the event type of the checked event in the
repository is equal to &lt;code&gt;eventType&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
If all the tests are passed, the method returns &lt;code&gt;true&lt;/code&gt;,
otherwise &lt;code&gt;false&lt;/code&gt;.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5951'
        name = 'param'
        modelElement = 'S.1981'>
   <UML:TaggedValue.dataValue>
    	line line number
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5952'
        name = 'param'
        modelElement = 'S.1981'>
   <UML:TaggedValue.dataValue>
    	n the identifier of the target event
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5953'
        name = 'param'
        modelElement = 'S.1981'>
   <UML:TaggedValue.dataValue>
    	eventType the expected type of the target event
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5954'
        name = 'return'
        modelElement = 'S.1981'>
   <UML:TaggedValue.dataValue>
    	true if the tests are passed, false otherwise
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5959'
        name = 'documentation'
        modelElement = 'S.955'>
   <UML:TaggedValue.dataValue>
    	Base class for test cases that need to access the dynamic factories.
In the test set-up procedure, the dynamic factories for the
telemetry packets, telecommands and manouvres are initialized and
are loaded. The type of the items that are loaded are defined by the 
structure of the factories. Any change in the structure of the
factories should be reflected by a corresponding change in this
class. Test cases that need to access the dynamic factories 
should be constructed as subclasses of this class.
&lt;p/&gt;
The factory initialization and loading is only done the first time the
test case is executed. 
&lt;p/&gt;
This test case also defines a shut down procedure where all items in
the factories have their status set to &quot;item not in use&quot;. This ensures
that all test cases that inherit from this class can start with all
the items in the factories being available for their use.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5960'
        name = 'author'
        modelElement = 'S.955'>
   <UML:TaggedValue.dataValue>
    	A. Pasetti
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5961'
        name = 'todo'
        modelElement = 'S.955'>
   <UML:TaggedValue.dataValue>
    	Use this class as base class for test cases that use items that
could be provided by a dynamic factory
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5962'
        name = 'see'
        modelElement = 'S.955'>
   <UML:TaggedValue.dataValue>
    	CC_TelemetryPacketFactory
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5963'
        name = 'see'
        modelElement = 'S.955'>
   <UML:TaggedValue.dataValue>
    	CC_TelecommandFactory
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5964'
        name = 'see'
        modelElement = 'S.955'>
   <UML:TaggedValue.dataValue>
    	CC_ManoeuvreFactory
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5965'
        name = 'version'
        modelElement = 'S.955'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5966'
        name = 'ingroup'
        modelElement = 'S.955'>
   <UML:TaggedValue.dataValue>
    	TestCases
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5967'
        name = 'documentation'
        modelElement = 'S.2006'>
   <UML:TaggedValue.dataValue>
    	Set the identifier and the name of the test case.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5968'
        name = 'param'
        modelElement = 'S.2006'>
   <UML:TaggedValue.dataValue>
    	testId the test identifier
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5969'
        name = 'param'
        modelElement = 'S.2006'>
   <UML:TaggedValue.dataValue>
    	testName the name of the test
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5972'
        name = 'documentation'
        modelElement = 'S.2007'>
   <UML:TaggedValue.dataValue>
    	Call the test setup service of the super class and then initialize the
dynamic factories.
A pseudo-code implementation of this method is as follows: &lt;PRE&gt;
if ( !TestCaseWithEvtCheck::setUpTestCase() )
return false;
else {
if (first activation of this method) {
retrieve the telemetry packet factory
create telemetry packets for the telemetry packet factory
configure telemetry packets 
load telemetry packets in the telemetry packet factory

retrieve the telecommand factory
create telecommand components for the telecommand factory
load telecommands in the telecommand factory

retrieve the manoeuvre factory
create manoeuvre components for the manoeuvre factory
load manoeuvres in the manoeuvre factory

return true;
}
} &lt;/PRE&gt;
Note that the dynamic factories are implemented as singletons that
are created and initialized by simply calling their &lt;code&gt;getInstance&lt;/code&gt; method.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5974'
        name = 'documentation'
        modelElement = 'S.2008'>
   <UML:TaggedValue.dataValue>
    	All the items loaded in the factories in the &lt;code&gt;setUpTestCase&lt;/code&gt;
method are marked as &quot;not in use&quot;. The change in the &quot;in use&quot; status is
performed by calling their &lt;code&gt;setInUse&lt;/code&gt; method with argument
NOT_IN_USE. This relieves
concrete subclasses of the need to releases components that they have
retrieved from a factory at the end of the test. Note that, if a concrete
test case also releases the factory components by calling their &lt;code&gt;setInUse&lt;/code&gt;
method, this does not give rise to an error.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5976'
        name = 'documentation'
        modelElement = 'S.1926'>
   <UML:TaggedValue.dataValue>
    	Collection of test cases that are intended to be
executed as a single unit.
A test suite is used intended to be used as follows. First, the test cases
are &lt;i&gt;loaded&lt;/i&gt; into the test suite. Then, the test suite is &lt;i&gt;executed&lt;/i&gt;. This
causes all the test cases loaded in the test suite to be executed in sequence.
The test suite is responsible for setting up, executing, and shutting down
each test case. After a test case has been shut down, the test suite queries it
for the outcome of the test and writes this outcome together with the accompanying
test message to an &lt;i&gt;output file&lt;/i&gt;.
The data structure holding the test cases is defined statically and can hold a
maximum of MAX_TEST_CASES_IN_SUITE test cases.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5977'
        name = 'author'
        modelElement = 'S.1926'>
   <UML:TaggedValue.dataValue>
    	Alessandro Pasetti (P&amp;P Software GmbH)
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5978'
        name = 'see'
        modelElement = 'S.1926'>
   <UML:TaggedValue.dataValue>
    	TestCase
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5979'
        name = 'version'
        modelElement = 'S.1926'>
   <UML:TaggedValue.dataValue>
    	1.0
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5980'
        name = 'ingroup'
        modelElement = 'S.1926'>
   <UML:TaggedValue.dataValue>
    	TestCases
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5981'
        name = 'documentation'
        modelElement = 'S.2011'>
   <UML:TaggedValue.dataValue>
    	Constructor defining the output file.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5982'
        name = 'param'
        modelElement = 'S.2011'>
   <UML:TaggedValue.dataValue>
    	out the output file
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5984'
        name = 'documentation'
        modelElement = 'S.2012'>
   <UML:TaggedValue.dataValue>
    	Execute all the test cases currently loaded in the test suite and
write outcome information to the output file
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5986'
        name = 'documentation'
        modelElement = 'S.2013'>
   <UML:TaggedValue.dataValue>
    	Load a new test case in the test suite.
If the maximum number of test cases in the test suite has been exceeded,
then an error message is written to the output file.
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
  <UML:TaggedValue xmi.id = 'XX.5987'
        name = 'param'
        modelElement = 'S.2013'>
   <UML:TaggedValue.dataValue>
    	newTestCase the test case to be loaded
   </UML:TaggedValue.dataValue>
  </UML:TaggedValue>
 </XMI.content>
</XMI>