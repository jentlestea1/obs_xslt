<?xml version='1.0' encoding='ISO-8859-1' standalone='yes'?>
<tagfile>
  <compound kind="file">
    <name>BasicTypes.h</name>
    <path>D:/Projects/ObsFramework/src/cpp/GeneralInclude/</path>
    <filename>BasicTypes_8h</filename>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>TD_InstanceId</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>TD_ClassId</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>TD_ObsTime</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>TD_ObsCycle</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>TD_TraceItem</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>enum ActionOutcome</type>
      <name>TD_ActionOutcome</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>TD_FsmStateIndex</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>TD_Mode</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>TD_Config</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>TD_TelecommandId</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>TD_TelecommandType</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>TD_TelecommandSubType</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>TD_TelecommandSource</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>TD_TelecommandAck</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>TD_CheckCode</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short</type>
      <name>TD_DatabaseId</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>TD_DataPoolId</name>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>float</type>
      <name>TD_Float</name>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short</type>
      <name>TD_Integer</name>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>enum DataItemType</type>
      <name>TD_DataItemType</name>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>TD_PUSPacketId</name>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>TD_SID</name>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TD_PUSPacketId</type>
      <name>TD_APID</name>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>TD_PUSCollectionInterval</name>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>TD_PUSNumberOfParameters</name>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>TD_PUSMemLength</name>
      <anchor>a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>TD_PUSMemData</name>
      <anchor>a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>TD_PUSMemId</name>
      <anchor>a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>TD_PUSNumberMemBlocks</name>
      <anchor>a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>TD_PUSMemOffset</name>
      <anchor>a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>TD_TelemetryType</name>
      <anchor>a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>TD_TelemetrySubType</name>
      <anchor>a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>TD_TelemetryDestination</name>
      <anchor>a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>enum EventType</type>
      <name>TD_EventType</name>
      <anchor>a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ActionOutcome</name>
      <anchor>a117</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>DataItemType</name>
      <anchor>a118</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EventType</name>
      <anchor>a119</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CC_ComponentFactory.h</name>
    <path>D:/Projects/ObsFramework/src/cpp/SampleApplication/</path>
    <filename>CC__ComponentFactory_8h</filename>
    <class kind="class">CC_ComponentFactory</class>
  </compound>
  <compound kind="file">
    <name>Checksum.h</name>
    <path>D:/Projects/ObsFramework/src/cpp/Utilities/</path>
    <filename>Checksum_8h</filename>
    <member kind="function">
      <type>unsigned short</type>
      <name>doChecksum</name>
      <anchor>a4</anchor>
      <arglist>(unsigned char *item, unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>verifyChecksum</name>
      <anchor>a5</anchor>
      <arglist>(unsigned char *item, unsigned int n, unsigned short checksum)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ClassId.h</name>
    <path>D:/Projects/ObsFramework/src/cpp/GeneralInclude/</path>
    <filename>ClassId_8h</filename>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_ROOTOBJECT</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_EVENT</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_EVENTREPOSITORY</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_PUSEVENTREPOSITORY</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_DUMMYOBSCLOCK</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_DATAITEM</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_RAWDATAITEM</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_DUMMYTRACER</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_TESTTRACER</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_DUMMYPUNCTUALACTION</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_DUMMYCONDITIONALPUNCTUALACTION</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_SIMPLEPUNCTUALACTIONMODEMANAGER</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_PUNCTUALACTIONMANAGER</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_CYCLINGPUNCTUALACTIONMODEMANAGER</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_FSMEVENT</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_FROMFSMEVENT</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_DUMMYFSMSTATE</name>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_FSM</name>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_DUMMYCONFIGURABLEFSMSTATE</name>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_NESTEDFSMACTIVATOR</name>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_NESTEDFSMACTIVATORWITHENDSTATE</name>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_NESTEDFSMACTIVATORWITHEXITCHECK</name>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_UNSTABLEFSMSTATE</name>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_BASICDATABASE</name>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_SAMPLER1DATABASE</name>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_SAMPLER2DATABASE</name>
      <anchor>a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_SAMPLER3DATABASE</name>
      <anchor>a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_DUMMYDATABASE</name>
      <anchor>a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_DUMMYTELECOMMAND</name>
      <anchor>a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_DUMMYTELECOMMANDLOADER</name>
      <anchor>a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_TELECOMMANDMANAGER</name>
      <anchor>a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_DUMMYCRITICALTELECOMMAND</name>
      <anchor>a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_DUMMYPUSTELECOMMAND</name>
      <anchor>a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_BASICPUSTCLOADER</name>
      <anchor>a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_SIMPLECHANGEPROFILE</name>
      <anchor>a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_STUCKDATAPROFILE</name>
      <anchor>a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_DELTAPROFILE</name>
      <anchor>a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_FORBIDDENVALUEPROFILE</name>
      <anchor>a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_INRANGEPROFILE</name>
      <anchor>a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_OUTOFRANGEPROFILE</name>
      <anchor>a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_NULLPROFILE</name>
      <anchor>a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_PROFILELIST</name>
      <anchor>a41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_DUMMYMODEMANAGER</name>
      <anchor>a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_DUMMYMANOEUVRE</name>
      <anchor>a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_DUMMYCONFIGURABLEMANOEUVRE</name>
      <anchor>a44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_TESTPUSCONFIGURABLEMANOEUVRE</name>
      <anchor>a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_MANOEUVREMANAGER</name>
      <anchor>a46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_MANOEUVREPUNCTUALACTION</name>
      <anchor>a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_DUMMYCOPYCONTROLBLOCK</name>
      <anchor>a48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_DUMMYPOINTERCONTROLBLOCK</name>
      <anchor>a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_DUMMYDATAITEMCONTROLBLOCK</name>
      <anchor>a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_DUMMYDATAPOOLCONTROLBLOCK</name>
      <anchor>a51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_CONTROLACTION</name>
      <anchor>a52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_CONTROLLIST</name>
      <anchor>a53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_BASICRECONFIGURER</name>
      <anchor>a54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_MATLABCOPYPID</name>
      <anchor>a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_MATLABPOINTERPID</name>
      <anchor>a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_MATLABDATAITEMPID</name>
      <anchor>a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_MATLABDATAPOOLPID</name>
      <anchor>a58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_NULLRECOVERYACTION</name>
      <anchor>a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_DUMMYRECOVERYACTION</name>
      <anchor>a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_FDIRCHECK</name>
      <anchor>a61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_ROOTOBJECTSTACK</name>
      <anchor>a62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_INTSTACK</name>
      <anchor>a63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_BASICDATAPOOL</name>
      <anchor>a64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_SAMPLEFULLDATAPOOL</name>
      <anchor>a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_SAMPLEMONITOREDDATAPOOL</name>
      <anchor>a66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_DATAPOOLMONITOR</name>
      <anchor>a67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_DUMMYDATAPOOL</name>
      <anchor>a68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_DUMMYTELEMETRYSTREAM</name>
      <anchor>a69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_PUSTMLOGGER</name>
      <anchor>a70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_DUMMYPUSTCVERIFICATIONPACKET</name>
      <anchor>a71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_PUSDATAREPORTINGPACKET</name>
      <anchor>a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_PUSDATAREPORTINGPACKETFACTORY</name>
      <anchor>a73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_PUSTCVERIFICATIONPACKET</name>
      <anchor>a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_PUSMEMORYDUMPOFFSET</name>
      <anchor>a75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_PUSMEMORYDUMPABSOLUTE</name>
      <anchor>a76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_PUSCONTROLDATAREPORTING</name>
      <anchor>a77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_PUSCLEARDATAREPORTING</name>
      <anchor>a78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_PUSREQUESTDATAREPORTING</name>
      <anchor>a79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_PUSDEFINEDATAREPORTING</name>
      <anchor>a80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_PUSMEMORYLOADOFFSET</name>
      <anchor>a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_PUSMEMORYLOADABSOLUTE</name>
      <anchor>a82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_PUSDUMPMEMORYOFFSET</name>
      <anchor>a83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_PUSDUMPMEMORYABSOLUTE</name>
      <anchor>a84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_TESTPUSTELECOMMAND</name>
      <anchor>a85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_TELEMETRYPACKETFACTORY</name>
      <anchor>a86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_TELECOMMANDFACTORY</name>
      <anchor>a87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_MANOEUVREFACTORY</name>
      <anchor>a88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_DATAITEM16TMWORD</name>
      <anchor>a89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_CYCLEDATAITEM16TMSTREAM</name>
      <anchor>a90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_SIMPLETELEMETRYMODEMANAGER</name>
      <anchor>a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_TELEMETRYMANAGER</name>
      <anchor>a92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_FILETELEMETRYSTREAM</name>
      <anchor>a93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_DUMMYTELEMETRYITEM</name>
      <anchor>a94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_DUMMYPUSTELEMETRYPACKET</name>
      <anchor>a95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_BYTEARRAYTELEMETRYSTREAM</name>
      <anchor>a96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_CYCLINGTELEMETRYMODEMANAGER</name>
      <anchor>a97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_PUSTELEMETRYMODEMANAGER</name>
      <anchor>a98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_BASICPUSTMSTREAM</name>
      <anchor>a99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_ClassId</type>
      <name>ID_CHECKSUM</name>
      <anchor>a100</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CompilerSwitches.h</name>
    <path>D:/Projects/ObsFramework/src/cpp/GeneralInclude/</path>
    <filename>CompilerSwitches_8h</filename>
  </compound>
  <compound kind="file">
    <name>Constants.h</name>
    <path>D:/Projects/ObsFramework/src/cpp/GeneralInclude/</path>
    <filename>Constants_8h</filename>
    <member kind="variable">
      <type>const bool</type>
      <name>CONFIGURED</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>NOT_CONFIGURED</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>DISABLED</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>ENABLED</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>NOT_VALID</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>VALID</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>NOT_CRITICAL</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>CRITICAL</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>NOT_ARMED</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>ARMED</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>NOT_HEALTHY</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>HEALTHY</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>IN_USE</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>NOT_IN_USE</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>TC_CAN_EXECUTE</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>TC_CANNOT_EXECUTE</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>MAN_CAN_START</name>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>MAN_CANNOT_START</name>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>MAN_CAN_CONTINUE</name>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>MAN_CANNOT_CONTINUE</name>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>MAN_HAS_TERMINATED</name>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>MAN_HAS_NOT_TERMINATED</name>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>MAN_IN_USE</name>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>MAN_NOT_IN_USE</name>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>MAN_EXECUTING</name>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>MAN_NOT_EXECUTING</name>
      <anchor>a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>MAN_SUSPENDED</name>
      <anchor>a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>MAN_NOT_SUSPENDED</name>
      <anchor>a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>MON_PROFILE_DEVIATION</name>
      <anchor>a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>NO_MON_PROFILE_DEVIATION</name>
      <anchor>a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PREVIOUS_VALUE_INIT</name>
      <anchor>a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_InstanceId</type>
      <name>MAX_N_OBJECTS</name>
      <anchor>a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>MAX_INT</name>
      <anchor>a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>MAX_UNSIGNED_INT</name>
      <anchor>a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>PUS_DATA_REP_MODE</name>
      <anchor>a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_CheckCode</type>
      <name>VC_TOO_MANY_RAW_DATA</name>
      <anchor>a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_CheckCode</type>
      <name>VC_INCONSISTENT_RAW_DATA</name>
      <anchor>a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_CheckCode</type>
      <name>VC_TOO_MANY_MEM_BLOCK</name>
      <anchor>a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_CheckCode</type>
      <name>VC_TOO_MANY_MEM_DATA</name>
      <anchor>a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_CheckCode</type>
      <name>VC_TOO_MANY_SIDS</name>
      <anchor>a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PUS_TYPE_TC_VER</name>
      <anchor>a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PUS_ST_TC_VER_ACC_SC</name>
      <anchor>a41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PUS_ST_TC_VER_ACC_FL</name>
      <anchor>a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PUS_ST_TC_EXE_STR_SC</name>
      <anchor>a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PUS_ST_TC_EXE_STR_FL</name>
      <anchor>a44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PUS_ST_TC_EXE_PRO_SC</name>
      <anchor>a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PUS_ST_TC_EXE_PRO_FL</name>
      <anchor>a46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PUS_ST_TC_EXE_END_SC</name>
      <anchor>a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PUS_ST_TC_EXE_END_FL</name>
      <anchor>a48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PUS_TYPE_DATA_REP</name>
      <anchor>a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PUS_ST_DATA_REP_NEW_HK</name>
      <anchor>a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PUS_ST_DATA_REP_NEW_DG</name>
      <anchor>a51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PUS_ST_DATA_REP_CLR_HK</name>
      <anchor>a52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PUS_ST_DATA_REP_CLR_DG</name>
      <anchor>a53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PUS_ST_DATA_REP_ENB_HK</name>
      <anchor>a54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PUS_ST_DATA_REP_DIS_HK</name>
      <anchor>a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PUS_ST_DATA_REP_ENB_DG</name>
      <anchor>a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PUS_ST_DATA_REP_DIS_DG</name>
      <anchor>a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PUS_ST_DATA_REP_REP_HK</name>
      <anchor>a58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PUS_ST_DATA_REP_REP_HK_REP</name>
      <anchor>a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PUS_ST_DATA_REP_REP_DG</name>
      <anchor>a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PUS_ST_DATA_REP_REP_DG_REP</name>
      <anchor>a61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PUS_ST_DATA_REP_PER_HK</name>
      <anchor>a62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PUS_ST_DATA_REP_PER_DG</name>
      <anchor>a63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PUS_ST_DATA_REP_FIL_HK</name>
      <anchor>a64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PUS_ST_DATA_REP_FIL_DG</name>
      <anchor>a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PUS_ST_DATA_REP_UNF_HK</name>
      <anchor>a66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PUS_ST_DATA_REP_UNF_DG</name>
      <anchor>a67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PUS_ST_DATA_REP_UNF_HK_REP</name>
      <anchor>a68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PUS_ST_DATA_REP_UNF_DG_REP</name>
      <anchor>a69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PUS_ST_DATA_REP_PAR_HK_REP</name>
      <anchor>a70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PUS_ST_DATA_REP_PAR_DG_REP</name>
      <anchor>a71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PUS_TYPE_TC_FNC</name>
      <anchor>a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PUS_ST_TC_FNC_PER</name>
      <anchor>a73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PUS_TYPE_MEM</name>
      <anchor>a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PUS_ST_TC_MEM_OFF</name>
      <anchor>a75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PUS_ST_TC_MEM_ABS</name>
      <anchor>a76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PUS_ST_TC_DMP_OFF</name>
      <anchor>a77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PUS_ST_TM_DMP_OFF</name>
      <anchor>a78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PUS_ST_TC_DMP_ABS</name>
      <anchor>a79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PUS_ST_TM_DMP_ABS</name>
      <anchor>a80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PUS_TYPE_TEST</name>
      <anchor>a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PUS_ST_TC_TEST</name>
      <anchor>a82</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DC_SampleFullDataPool_inc.h</name>
    <path>D:/Projects/ObsFramework/src/cpp/Data/</path>
    <filename>DC__SampleFullDataPool__inc_8h</filename>
    <member kind="variable">
      <type>const TD_DatabaseId</type>
      <name>DP_RW_SPD_1</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_DatabaseId</type>
      <name>DP_RW_TOR_1</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_DatabaseId</type>
      <name>DP_RW_SPD_2</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_DatabaseId</type>
      <name>DP_RW_TOR_2</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_DatabaseId</type>
      <name>DP_RW_SPD_3</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_DatabaseId</type>
      <name>DP_RW_TOR_3</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_DatabaseId</type>
      <name>DP_RW_SPD_4</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_DatabaseId</type>
      <name>DP_RW_TOR_4</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DC_SampleMonitoredDataPool_inc.h</name>
    <path>D:/Projects/ObsFramework/src/cpp/Data/</path>
    <filename>DC__SampleMonitoredDataPool__inc_8h</filename>
    <member kind="variable">
      <type>const TD_DatabaseId</type>
      <name>DP_RW_SPD_1</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_DatabaseId</type>
      <name>DP_RW_TOR_1</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_DatabaseId</type>
      <name>DP_RW_SPD_2</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_DatabaseId</type>
      <name>DP_RW_TOR_2</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_DatabaseId</type>
      <name>DP_RW_SPD_3</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_DatabaseId</type>
      <name>DP_RW_TOR_3</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_DatabaseId</type>
      <name>DP_RW_SPD_4</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_DatabaseId</type>
      <name>DP_RW_TOR_4</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DC_SampleR1Database_inc.h</name>
    <path>D:/Projects/ObsFramework/src/cpp/Data/</path>
    <filename>DC__SampleR1Database__inc_8h</filename>
    <member kind="variable">
      <type>const TD_DatabaseId</type>
      <name>DB_K1</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_DatabaseId</type>
      <name>DB_K2</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_DatabaseId</type>
      <name>DB_K3</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_DatabaseId</type>
      <name>DB_K4</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DC_SampleR2Database_inc.h</name>
    <path>D:/Projects/ObsFramework/src/cpp/Data/</path>
    <filename>DC__SampleR2Database__inc_8h</filename>
    <member kind="variable">
      <type>const TD_DatabaseId</type>
      <name>DB_G1</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_DatabaseId</type>
      <name>DB_G2</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_DatabaseId</type>
      <name>DB_G3</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_DatabaseId</type>
      <name>DB_G4</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DC_SampleR3Database_inc.h</name>
    <path>D:/Projects/ObsFramework/src/cpp/Data/</path>
    <filename>DC__SampleR3Database__inc_8h</filename>
    <member kind="variable">
      <type>const TD_DatabaseId</type>
      <name>DB_P1</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_DatabaseId</type>
      <name>DB_P2</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_DatabaseId</type>
      <name>DB_P3</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_DatabaseId</type>
      <name>DB_P4</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_DatabaseId</type>
      <name>DB_P5</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_DatabaseId</type>
      <name>DB_P6</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_DatabaseId</type>
      <name>DB_P7</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_DatabaseId</type>
      <name>DB_P8</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TD_DatabaseId</type>
      <name>DB_P9</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DebugSupport.h</name>
    <path>D:/Projects/ObsFramework/src/cpp/GeneralInclude/</path>
    <filename>DebugSupport_8h</filename>
  </compound>
  <compound kind="file">
    <name>ForwardDeclarations.h</name>
    <path>D:/Projects/ObsFramework/src/cpp/GeneralInclude/</path>
    <filename>ForwardDeclarations_8h</filename>
  </compound>
  <compound kind="file">
    <name>TestCompilerSwitches.h</name>
    <path>D:/Projects/ObsFramework/src/cpp/GeneralInclude/</path>
    <filename>TestCompilerSwitches_8h</filename>
  </compound>
  <compound kind="file">
    <name>TestConstants.h</name>
    <path>D:/Projects/ObsFramework/src/cpp/GeneralInclude/</path>
    <filename>TestConstants_8h</filename>
    <member kind="variable">
      <type>const bool</type>
      <name>TEST_SUCCESS</name>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>TEST_FAILURE</name>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>INITIALIZATION_SUCCESS</name>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>INITIALIZATION_FAILURE</name>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>SHUTDOWN_SUCCESS</name>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>SHUTDOWN_FAILURE</name>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>MAX_TEST_CASES_IN_SUITE</name>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>EVT_REP_SIZE</name>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const float</type>
      <name>EPS_FLOAT</name>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>EPS_DOUBLE</name>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *const</type>
      <name>TEST_FILE_NAME_1</name>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *const</type>
      <name>TEST_FILE_NAME_2</name>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>MAX_TEST_FILE_NAME_LENGTH</name>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *const</type>
      <name>TEST_TRACER_LOG_FILE</name>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TD_TelemetryType const</type>
      <name>TEST_TM_TYPE</name>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TD_TelecommandType const</type>
      <name>TEST_TC_TYPE</name>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TD_TelemetrySubType const</type>
      <name>TEST_TM_SUBTYPE</name>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TD_TelecommandSubType const</type>
      <name>TEST_TC_SUBTYPE</name>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TD_ObsTime const</type>
      <name>TEST_TM_TIMETAG</name>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TD_TelemetryDestination const</type>
      <name>TEST_TM_DEST</name>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TD_TelecommandSource const</type>
      <name>TEST_TC_SOURCE</name>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TD_TelecommandId const</type>
      <name>TEST_TC_ID</name>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TD_TelemetryDestination const</type>
      <name>TEST_TM_DEF_DEST</name>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TD_APID const</type>
      <name>TEST_TM_APID</name>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TD_APID const</type>
      <name>TEST_TC_APID</name>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int const</type>
      <name>PUS_DRP_MAX_FA</name>
      <anchor>a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int const</type>
      <name>PUS_DRP_DEF_BUF_SIZE_LARGE</name>
      <anchor>a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int const</type>
      <name>PUS_DRP_DEF_BUF_SIZE_SMALL</name>
      <anchor>a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int const</type>
      <name>PUS_DRP_VAL_BUF_SIZE_LARGE</name>
      <anchor>a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int const</type>
      <name>PUS_DRP_VAL_BUF_SIZE_SMALL</name>
      <anchor>a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int const</type>
      <name>TC_MAN_PEND_TC_LIST_SIZE</name>
      <anchor>a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int const</type>
      <name>TM_MAN_IMMEDIATE_QUEUE</name>
      <anchor>a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int const</type>
      <name>TM_MODE_MAN_MAX_N_PACKETS</name>
      <anchor>a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int const</type>
      <name>MAN_MAN_PENDING_MAN_LIST_SIZE</name>
      <anchor>a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int const</type>
      <name>TC_COMMAND_AREA_MAX_N_TC</name>
      <anchor>a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int const</type>
      <name>TC_COMMAND_AREA_MAX_TC_LEN</name>
      <anchor>a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int const</type>
      <name>TM_LOGGER_BUFFER_CAPACITY</name>
      <anchor>a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int const</type>
      <name>TM_LOGGER_MAX_TM_LENGTH</name>
      <anchor>a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int const</type>
      <name>PUS_EVT_REP_SIZE</name>
      <anchor>a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TD_TelecommandSource const</type>
      <name>DEF_PUS_TC_SOURCE</name>
      <anchor>a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TD_PUSNumberMemBlocks const</type>
      <name>PUS_NUMBER_MEM_BLOCKS</name>
      <anchor>a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TD_PUSMemLength const</type>
      <name>PUS_MEM_BUFFER_LENGTH</name>
      <anchor>a41</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TestUtilities.h</name>
    <path>D:/Projects/ObsFramework/src/cpp/Utilities/</path>
    <filename>TestUtilities_8h</filename>
    <member kind="function">
      <type>void</type>
      <name>printRegressionTestHeader</name>
      <anchor>a1</anchor>
      <arglist>(FILE *outFile)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printRegressionTestTail</name>
      <anchor>a2</anchor>
      <arglist>(FILE *outFile)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printTestSuccess</name>
      <anchor>a3</anchor>
      <arglist>(FILE *outFile, char *testName, char *testMsg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printTestFailed</name>
      <anchor>a4</anchor>
      <arglist>(FILE *outFile, char *testName, char *testMsg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printErrorMsg</name>
      <anchor>a5</anchor>
      <arglist>(FILE *outFile, char *testName, char *msg)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>doubleUnderscore</name>
      <anchor>a6</anchor>
      <arglist>(FILE *outFile, char *testName)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CC_ComponentFactory</name>
    <filename>classCC__ComponentFactory.html</filename>
    <member kind="function">
      <type>void</type>
      <name>configureApplication</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>DC_ControlAction *</type>
      <name>getControlAction</name>
      <anchor>a1</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_SampleControlBlock_1 *</type>
      <name>getSampleControlBlock_1</name>
      <anchor>a2</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_SampleControlBlock_2 *</type>
      <name>getSampleControlBlock_2</name>
      <anchor>a3</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_SampleControlBlock_3 *</type>
      <name>getSampleControlBlock_3</name>
      <anchor>a4</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_SampleControlBlock_4 *</type>
      <name>getSampleControlBlock_4</name>
      <anchor>a5</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_SampleFullDataPool *</type>
      <name>getSampleFullDataPool</name>
      <anchor>a6</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_SampleR2Database *</type>
      <name>getSampleR2Database</name>
      <anchor>a7</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_PUSEventRepository *</type>
      <name>getPUSEventRepository</name>
      <anchor>a8</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_NullRecoveryAction *</type>
      <name>getNullRecoveryAction</name>
      <anchor>a9</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_OutOfRangeProfile *</type>
      <name>getOutOfRangeProfile</name>
      <anchor>a10</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_SampleMonitoringProfile *</type>
      <name>getSampleMonitoringProfile</name>
      <anchor>a11</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_SampleRecoveryAction *</type>
      <name>getSampleRecoveryAction</name>
      <anchor>a12</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_StuckDataProfile *</type>
      <name>getStuckDataProfile</name>
      <anchor>a13</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>CC_FSM *</type>
      <name>getFSM</name>
      <anchor>a14</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_AfsFsmState *</type>
      <name>getAfsFsmState</name>
      <anchor>a15</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_DummyFsmState *</type>
      <name>getDummyFsmState</name>
      <anchor>a16</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_FromFsmEvent *</type>
      <name>getFromFsmEvent</name>
      <anchor>a17</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_NestedFsmActivatorWithEndState *</type>
      <name>getNestedFsmActivatorWithEndState</name>
      <anchor>a18</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_NestedFsmActivatorWithExitCheck *</type>
      <name>getNestedFsmActivatorWithExitCheck</name>
      <anchor>a19</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_OCM_FsmState *</type>
      <name>getOCM_FsmState</name>
      <anchor>a20</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_SBY_PostSepFsmState *</type>
      <name>getSBY_PostSepFsmState</name>
      <anchor>a21</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_SBY_PreSepFsmState *</type>
      <name>getSBY_PreSepFsmState</name>
      <anchor>a22</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_SCM_FsmState *</type>
      <name>getSCM_FsmState</name>
      <anchor>a23</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_SM_PreSepFsmState *</type>
      <name>getSM_PreSepFsmState</name>
      <anchor>a24</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_UnstableFsmState *</type>
      <name>getUnstableFsmState</name>
      <anchor>a25</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>CC_ManoeuvreManager *</type>
      <name>getManoeuvreManager</name>
      <anchor>a26</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_DummyConfigurableManoeuvre *</type>
      <name>getDummyConfigurableManoeuvre</name>
      <anchor>a27</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_DummyManoeuvre *</type>
      <name>getDummyManoeuvre</name>
      <anchor>a28</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_TestPUSConfigurableManoeuvre *</type>
      <name>getTestPUSConfigurableManoeuvre</name>
      <anchor>a29</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_DummyObsClock *</type>
      <name>getDummyObsClock</name>
      <anchor>a30</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_DummyTracer *</type>
      <name>getDummyTracer</name>
      <anchor>a31</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>CC_TelecommandManager *</type>
      <name>getTelecommandManager</name>
      <anchor>a32</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_BasicPUSTcLoader *</type>
      <name>getBasicPUSTcLoader</name>
      <anchor>a33</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_DummyPUSTelecommand *</type>
      <name>getDummyPUSTelecommand</name>
      <anchor>a34</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_DummyTelecommand *</type>
      <name>getDummyTelecommand</name>
      <anchor>a35</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_PUSControlDataReporting *</type>
      <name>getPUSControlDataReporting</name>
      <anchor>a36</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_PUSDefineDataReporting *</type>
      <name>getPUSDefineDataReporting</name>
      <anchor>a37</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_PUSDumpMemoryAbsolute *</type>
      <name>getPUSDumpMemoryAbsolute</name>
      <anchor>a38</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_PUSDumpMemoryOffset *</type>
      <name>getPUSDumpMemoryOffset</name>
      <anchor>a39</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_PUSMemoryLoadAbsolute *</type>
      <name>getPUSMemoryLoadAbsolute</name>
      <anchor>a40</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_PUSMemoryLoadOffset *</type>
      <name>getPUSMemoryLoadOffset</name>
      <anchor>a41</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_TestPUSTelecommand *</type>
      <name>getTestPUSTelecommand</name>
      <anchor>a42</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>CC_TelemetryManager *</type>
      <name>getTelemetryManager</name>
      <anchor>a43</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_BasicPUSTmStream *</type>
      <name>getBasicPUSTmStream</name>
      <anchor>a44</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_DummyPUSTelemetryPacket *</type>
      <name>getDummyPUSTelemetryPacket</name>
      <anchor>a45</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_PUSDataReportingPacket *</type>
      <name>getPUSDataReportingPacket</name>
      <anchor>a46</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_PUSMemoryDumpAbsolute *</type>
      <name>getPUSMemoryDumpAbsolute</name>
      <anchor>a47</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_PUSMemoryDumpOffset *</type>
      <name>getPUSMemoryDumpOffset</name>
      <anchor>a48</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_PUSTcVerificationPacket *</type>
      <name>getPUSTcVerificationPacket</name>
      <anchor>a49</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function">
      <type>DC_PUSTelemetryModeManager *</type>
      <name>getPUSTelemetryModeManager</name>
      <anchor>a50</anchor>
      <arglist>(int compName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CC_ComponentFactory *</type>
      <name>getInstance</name>
      <anchor>e0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CC_ComponentFactory</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>configureRootObject</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>configureObsClock</name>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>configureEventRepository</name>
      <anchor>b3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>configureFSM</name>
      <anchor>b4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>configureControllers</name>
      <anchor>b5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>configureDataPool</name>
      <anchor>b6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>configureParameterDatabase</name>
      <anchor>b7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>configureFunctionalityManagers</name>
      <anchor>b8</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CC_FSM</name>
    <filename>classCC__FSM.html</filename>
    <base>CC_RootObject</base>
    <member kind="function">
      <type></type>
      <name>CC_FSM</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfStates</name>
      <anchor>a3</anchor>
      <arglist>(TD_FsmStateIndex numberOfStates)</arglist>
    </member>
    <member kind="function">
      <type>TD_FsmStateIndex</type>
      <name>getNumberOfStates</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchor>a5</anchor>
      <arglist>(TD_FsmStateIndex i, FsmState *state)</arglist>
    </member>
    <member kind="function">
      <type>FsmState *</type>
      <name>getState</name>
      <anchor>a6</anchor>
      <arglist>(TD_FsmStateIndex i) const</arglist>
    </member>
    <member kind="function">
      <type>TD_FsmStateIndex</type>
      <name>getCurrentState</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransitionEnableStatus</name>
      <anchor>a8</anchor>
      <arglist>(bool enabled)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransitionEnableStatus</name>
      <anchor>a9</anchor>
      <arglist>(TD_FsmStateIndex toState, bool enabled)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTransitionEnabled</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTransitionEnabled</name>
      <anchor>a11</anchor>
      <arglist>(TD_FsmStateIndex toState) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeTransitionRequest</name>
      <anchor>a12</anchor>
      <arglist>(TD_FsmStateIndex targetState)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>activate</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>tryTransition</name>
      <anchor>b0</anchor>
      <arglist>(TD_FsmStateIndex targetState)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CC_IntStack</name>
    <filename>classCC__IntStack.html</filename>
    <base>CC_RootObject</base>
    <member kind="function">
      <type></type>
      <name>CC_IntStack</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchor>a1</anchor>
      <arglist>(int newItem)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>pop</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStackSize</name>
      <anchor>a3</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getStackSize</name>
      <anchor>a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumberOfItems</name>
      <anchor>a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchor>a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFull</name>
      <anchor>a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CC_ManoeuvreFactory</name>
    <filename>classCC__ManoeuvreFactory.html</filename>
    <base>CC_RootObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setManoeuvre</name>
      <anchor>a1</anchor>
      <arglist>(unsigned int i, DC_DummyConfigurableManoeuvre *pItem)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumberDummyConfigurableManoeuvre</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getCapacityDummyConfigurableManoeuvre</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>DC_DummyConfigurableManoeuvre *</type>
      <name>allocateDummyConfigurableManoeuvre</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFreeDummyConfigurableManoeuvre</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setManoeuvre</name>
      <anchor>a6</anchor>
      <arglist>(unsigned int i, DC_DummyManoeuvre *pItem)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumberDummyManoeuvre</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getCapacityDummyManoeuvre</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>DC_DummyManoeuvre *</type>
      <name>allocateDummyManoeuvre</name>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFreeDummyManoeuvre</name>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setManoeuvre</name>
      <anchor>a11</anchor>
      <arglist>(unsigned int i, DC_TestPUSConfigurableManoeuvre *pItem)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumberTestPUSConfigurableManoeuvre</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getCapacityTestPUSConfigurableManoeuvre</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>DC_TestPUSConfigurableManoeuvre *</type>
      <name>allocateTestPUSConfigurableManoeuvre</name>
      <anchor>a14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFreeTestPUSConfigurableManoeuvre</name>
      <anchor>a15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CC_ManoeuvreFactory *</type>
      <name>getInstance</name>
      <anchor>e0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CC_ManoeuvreFactory</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CC_ManoeuvreManager</name>
    <filename>classCC__ManoeuvreManager.html</filename>
    <base>CC_RootObject</base>
    <member kind="function">
      <type></type>
      <name>CC_ManoeuvreManager</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPendingManoeuvreListSize</name>
      <anchor>a2</anchor>
      <arglist>(const unsigned int listSize)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getPendingManoeuvreListSize</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getPendingManoeuvres</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>load</name>
      <anchor>a5</anchor>
      <arglist>(Manoeuvre *pManoeuvre)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>abort</name>
      <anchor>a6</anchor>
      <arglist>(Manoeuvre *pManoeuvre)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>activate</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>unload</name>
      <anchor>b0</anchor>
      <arglist>(Manoeuvre *pManoeuvre)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CC_PunctualActionManager</name>
    <filename>classCC__PunctualActionManager.html</filename>
    <base>CC_RootObject</base>
    <member kind="function">
      <type></type>
      <name>CC_PunctualActionManager</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPunctualActionModeManager</name>
      <anchor>a1</anchor>
      <arglist>(PunctualActionModeManager *pModeManager)</arglist>
    </member>
    <member kind="function">
      <type>PunctualActionModeManager *</type>
      <name>getPunctualActionModeManager</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>activate</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CC_RootObject</name>
    <filename>classCC__RootObject.html</filename>
    <member kind="function">
      <type></type>
      <name>CC_RootObject</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TD_InstanceId</type>
      <name>getInstanceId</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>TD_ClassId</type>
      <name>getClassId</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setClassId</name>
      <anchor>a4</anchor>
      <arglist>(TD_ClassId classId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>bool</type>
      <name>isSystemConfigured</name>
      <anchor>e0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>setSystemListSize</name>
      <anchor>e1</anchor>
      <arglist>(TD_InstanceId systemListSize)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>TD_InstanceId</type>
      <name>getSystemListSize</name>
      <anchor>e2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>setEventRepository</name>
      <anchor>e3</anchor>
      <arglist>(DC_EventRepository *pEventRepository)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>DC_EventRepository *</type>
      <name>getEventRepository</name>
      <anchor>e4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>setParameterDatabase</name>
      <anchor>e5</anchor>
      <arglist>(ParameterDatabase *pDatabase)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ParameterDatabase *</type>
      <name>getParameterDatabase</name>
      <anchor>e6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>setDataPool</name>
      <anchor>e7</anchor>
      <arglist>(DataPool *pDataPool)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>DataPool *</type>
      <name>getDataPool</name>
      <anchor>e8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>setTracer</name>
      <anchor>e9</anchor>
      <arglist>(Tracer *pTracer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>Tracer *</type>
      <name>getTracer</name>
      <anchor>e10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>synchTrace</name>
      <anchor>e11</anchor>
      <arglist>(TD_TraceItem traceId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>packetTrace</name>
      <anchor>e12</anchor>
      <arglist>(unsigned int n, TD_TraceItem traceData[])</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~CC_RootObject</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CC_RootObjectStack</name>
    <filename>classCC__RootObjectStack.html</filename>
    <base>CC_RootObject</base>
    <member kind="function">
      <type></type>
      <name>CC_RootObjectStack</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchor>a1</anchor>
      <arglist>(CC_RootObject *newItem)</arglist>
    </member>
    <member kind="function">
      <type>CC_RootObject *</type>
      <name>pop</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStackSize</name>
      <anchor>a3</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getStackSize</name>
      <anchor>a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumberOfItems</name>
      <anchor>a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchor>a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFull</name>
      <anchor>a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CC_TelecommandFactory</name>
    <filename>classCC__TelecommandFactory.html</filename>
    <base>CC_RootObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTelecommand</name>
      <anchor>a1</anchor>
      <arglist>(unsigned int i, DC_DummyPUSTelecommand *pItem)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumberDummyPUSTelecommand</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getCapacityDummyPUSTelecommand</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>DC_DummyPUSTelecommand *</type>
      <name>allocateDummyPUSTelecommand</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFreeDummyPUSTelecommand</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTelecommand</name>
      <anchor>a6</anchor>
      <arglist>(unsigned int i, DC_DummyTelecommand *pItem)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumberDummyTelecommand</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getCapacityDummyTelecommand</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>DC_DummyTelecommand *</type>
      <name>allocateDummyTelecommand</name>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFreeDummyTelecommand</name>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTelecommand</name>
      <anchor>a11</anchor>
      <arglist>(unsigned int i, DC_PUSControlDataReporting *pItem)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumberPUSControlDataReporting</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getCapacityPUSControlDataReporting</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>DC_PUSControlDataReporting *</type>
      <name>allocatePUSControlDataReporting</name>
      <anchor>a14</anchor>
      <arglist>(unsigned int MaxNumberSID)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFreePUSControlDataReporting</name>
      <anchor>a15</anchor>
      <arglist>(unsigned int MaxNumberSID)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTelecommand</name>
      <anchor>a16</anchor>
      <arglist>(unsigned int i, DC_PUSDefineDataReporting *pItem)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumberPUSDefineDataReporting</name>
      <anchor>a17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getCapacityPUSDefineDataReporting</name>
      <anchor>a18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>DC_PUSDefineDataReporting *</type>
      <name>allocatePUSDefineDataReporting</name>
      <anchor>a19</anchor>
      <arglist>(unsigned int NumberOfRawData)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFreePUSDefineDataReporting</name>
      <anchor>a20</anchor>
      <arglist>(unsigned int NumberOfRawData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTelecommand</name>
      <anchor>a21</anchor>
      <arglist>(unsigned int i, DC_PUSDumpMemoryAbsolute *pItem)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumberPUSDumpMemoryAbsolute</name>
      <anchor>a22</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getCapacityPUSDumpMemoryAbsolute</name>
      <anchor>a23</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>DC_PUSDumpMemoryAbsolute *</type>
      <name>allocatePUSDumpMemoryAbsolute</name>
      <anchor>a24</anchor>
      <arglist>(unsigned int NumberOfRawData)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFreePUSDumpMemoryAbsolute</name>
      <anchor>a25</anchor>
      <arglist>(unsigned int NumberOfRawData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTelecommand</name>
      <anchor>a26</anchor>
      <arglist>(unsigned int i, DC_PUSDumpMemoryOffset *pItem)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumberPUSDumpMemoryOffset</name>
      <anchor>a27</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getCapacityPUSDumpMemoryOffset</name>
      <anchor>a28</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>DC_PUSDumpMemoryOffset *</type>
      <name>allocatePUSDumpMemoryOffset</name>
      <anchor>a29</anchor>
      <arglist>(unsigned int NumberOfRawData)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFreePUSDumpMemoryOffset</name>
      <anchor>a30</anchor>
      <arglist>(unsigned int NumberOfRawData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTelecommand</name>
      <anchor>a31</anchor>
      <arglist>(unsigned int i, DC_PUSMemoryLoadAbsolute *pItem)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumberPUSMemoryLoadAbsolute</name>
      <anchor>a32</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getCapacityPUSMemoryLoadAbsolute</name>
      <anchor>a33</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>DC_PUSMemoryLoadAbsolute *</type>
      <name>allocatePUSMemoryLoadAbsolute</name>
      <anchor>a34</anchor>
      <arglist>(unsigned int MaxNumberData, unsigned int MaxNumberBlocks)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFreePUSMemoryLoadAbsolute</name>
      <anchor>a35</anchor>
      <arglist>(unsigned int MaxNumberData, unsigned int MaxNumberBlocks)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTelecommand</name>
      <anchor>a36</anchor>
      <arglist>(unsigned int i, DC_PUSMemoryLoadOffset *pItem)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumberPUSMemoryLoadOffset</name>
      <anchor>a37</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getCapacityPUSMemoryLoadOffset</name>
      <anchor>a38</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>DC_PUSMemoryLoadOffset *</type>
      <name>allocatePUSMemoryLoadOffset</name>
      <anchor>a39</anchor>
      <arglist>(unsigned int MaxNumberData, unsigned int MaxNumberBlocks)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFreePUSMemoryLoadOffset</name>
      <anchor>a40</anchor>
      <arglist>(unsigned int MaxNumberData, unsigned int MaxNumberBlocks)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTelecommand</name>
      <anchor>a41</anchor>
      <arglist>(unsigned int i, DC_TestPUSTelecommand *pItem)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumberTestPUSTelecommand</name>
      <anchor>a42</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getCapacityTestPUSTelecommand</name>
      <anchor>a43</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>DC_TestPUSTelecommand *</type>
      <name>allocateTestPUSTelecommand</name>
      <anchor>a44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFreeTestPUSTelecommand</name>
      <anchor>a45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CC_TelecommandFactory *</type>
      <name>getInstance</name>
      <anchor>e0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CC_TelecommandFactory</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CC_TelecommandManager</name>
    <filename>classCC__TelecommandManager.html</filename>
    <base>CC_RootObject</base>
    <member kind="function">
      <type></type>
      <name>CC_TelecommandManager</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPendingTelecommandListSize</name>
      <anchor>a2</anchor>
      <arglist>(unsigned int listSize)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getPendingTelecommandListSize</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getPendingTelecommands</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Telecommand *</type>
      <name>getPendingTelecommand</name>
      <anchor>a5</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>load</name>
      <anchor>a6</anchor>
      <arglist>(Telecommand *pTelecommand)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>abort</name>
      <anchor>a7</anchor>
      <arglist>(Telecommand *pTelecommand)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abort</name>
      <anchor>a8</anchor>
      <arglist>(TD_TelecommandId telecommandId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTelecommandLoader</name>
      <anchor>a9</anchor>
      <arglist>(TelecommandLoader *pTcLoader)</arglist>
    </member>
    <member kind="function">
      <type>TelecommandLoader *</type>
      <name>getTelecommandLoader</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObsClock</name>
      <anchor>a11</anchor>
      <arglist>(ObsClock *pObsClock)</arglist>
    </member>
    <member kind="function">
      <type>ObsClock *</type>
      <name>getObsClock</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>activate</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CC_TelemetryManager</name>
    <filename>classCC__TelemetryManager.html</filename>
    <base>CC_RootObject</base>
    <member kind="function">
      <type></type>
      <name>CC_TelemetryManager</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTelemetryModeManager</name>
      <anchor>a1</anchor>
      <arglist>(TelemetryModeManager *pTmModeManager)</arglist>
    </member>
    <member kind="function">
      <type>TelemetryModeManager *</type>
      <name>getTelemetryModeManager</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTelemetryStream</name>
      <anchor>a3</anchor>
      <arglist>(TelemetryStream *pTmStream)</arglist>
    </member>
    <member kind="function">
      <type>TelemetryStream *</type>
      <name>getTelemetryStream</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setImmediateQueueSize</name>
      <anchor>a5</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getImmediateQueueSize</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TelemetryPacket *</type>
      <name>getImmediateQueueEntry</name>
      <anchor>a7</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isImmediateQueueFull</name>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>activate</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendTelemetryPacket</name>
      <anchor>a10</anchor>
      <arglist>(TelemetryPacket *pTmPacket)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unloadTelemetryPacket</name>
      <anchor>a11</anchor>
      <arglist>(TelemetryPacket *pTmPacket)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getImmediateQueueLoaded</name>
      <anchor>a12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CC_TelemetryPacketFactory</name>
    <filename>classCC__TelemetryPacketFactory.html</filename>
    <base>CC_RootObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTelemetryPacket</name>
      <anchor>a1</anchor>
      <arglist>(unsigned int i, DC_DummyPUSTelemetryPacket *pItem)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumberDummyPUSTelemetryPacket</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getCapacityDummyPUSTelemetryPacket</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>DC_DummyPUSTelemetryPacket *</type>
      <name>allocateDummyPUSTelemetryPacket</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFreeDummyPUSTelemetryPacket</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTelemetryPacket</name>
      <anchor>a6</anchor>
      <arglist>(unsigned int i, DC_PUSDataReportingPacket *pItem)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumberPUSDataReportingPacket</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getCapacityPUSDataReportingPacket</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>DC_PUSDataReportingPacket *</type>
      <name>allocatePUSDataReportingPacket</name>
      <anchor>a9</anchor>
      <arglist>(unsigned int DefinitionBufferSize, unsigned int ValueBufferSize, unsigned int MaxNumberFA)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFreePUSDataReportingPacket</name>
      <anchor>a10</anchor>
      <arglist>(unsigned int DefinitionBufferSize, unsigned int ValueBufferSize, unsigned int MaxNumberFA)</arglist>
    </member>
    <member kind="function">
      <type>DC_PUSDataReportingPacket *</type>
      <name>getPUSDataReportingPacket</name>
      <anchor>a11</anchor>
      <arglist>(TD_SID sid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTelemetryPacket</name>
      <anchor>a12</anchor>
      <arglist>(unsigned int i, DC_PUSMemoryDumpAbsolute *pItem)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumberPUSMemoryDumpAbsolute</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getCapacityPUSMemoryDumpAbsolute</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>DC_PUSMemoryDumpAbsolute *</type>
      <name>allocatePUSMemoryDumpAbsolute</name>
      <anchor>a15</anchor>
      <arglist>(unsigned int MaxNumberBlocks, unsigned int DumpBufferSize)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFreePUSMemoryDumpAbsolute</name>
      <anchor>a16</anchor>
      <arglist>(unsigned int MaxNumberBlocks, unsigned int DumpBufferSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTelemetryPacket</name>
      <anchor>a17</anchor>
      <arglist>(unsigned int i, DC_PUSMemoryDumpOffset *pItem)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumberPUSMemoryDumpOffset</name>
      <anchor>a18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getCapacityPUSMemoryDumpOffset</name>
      <anchor>a19</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>DC_PUSMemoryDumpOffset *</type>
      <name>allocatePUSMemoryDumpOffset</name>
      <anchor>a20</anchor>
      <arglist>(unsigned int MaxNumberBlocks, unsigned int DumpBufferSize)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFreePUSMemoryDumpOffset</name>
      <anchor>a21</anchor>
      <arglist>(unsigned int MaxNumberBlocks, unsigned int DumpBufferSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTelemetryPacket</name>
      <anchor>a22</anchor>
      <arglist>(unsigned int i, DC_PUSTcVerificationPacket *pItem)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumberPUSTcVerificationPacket</name>
      <anchor>a23</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getCapacityPUSTcVerificationPacket</name>
      <anchor>a24</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>DC_PUSTcVerificationPacket *</type>
      <name>allocatePUSTcVerificationPacket</name>
      <anchor>a25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFreePUSTcVerificationPacket</name>
      <anchor>a26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>CC_TelemetryPacketFactory *</type>
      <name>getInstance</name>
      <anchor>e0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CC_TelemetryPacketFactory</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConditionalPunctualAction</name>
    <filename>classConditionalPunctualAction.html</filename>
    <base>PunctualAction</base>
    <member kind="function">
      <type></type>
      <name>ConditionalPunctualAction</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TD_ActionOutcome</type>
      <name>doAction</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>canExecute</name>
      <anchor>b1</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual TD_ActionOutcome</type>
      <name>doConditionalAction</name>
      <anchor>b2</anchor>
      <arglist>(void)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ControlBlock</name>
    <filename>classControlBlock.html</filename>
    <base>CC_RootObject</base>
    <member kind="function">
      <type></type>
      <name>ControlBlock</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfOutputs</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfStates</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfInputs</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfParameters</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>TD_Float</type>
      <name>getState</name>
      <anchor>a5</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>TD_Float</type>
      <name>getParameter</name>
      <anchor>a6</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchor>a7</anchor>
      <arglist>(unsigned int i, TD_Float newValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameter</name>
      <anchor>a8</anchor>
      <arglist>(unsigned int i, TD_Float newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>propagate</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>setNumberOfInputs</name>
      <anchor>b0</anchor>
      <arglist>(unsigned int n)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>setNumberOfOutputs</name>
      <anchor>b1</anchor>
      <arglist>(unsigned int n)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setNumberOfStates</name>
      <anchor>b2</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setNumberOfParameters</name>
      <anchor>b3</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>propagateState</name>
      <anchor>b4</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>updateOutput</name>
      <anchor>b5</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nInputs</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nOutputs</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nStates</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nParameters</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TD_Float *</type>
      <name>x</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TD_Float *</type>
      <name>p</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CopyControlBlock</name>
    <filename>classCopyControlBlock.html</filename>
    <base>ControlBlock</base>
    <member kind="function">
      <type></type>
      <name>CopyControlBlock</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TD_Float</type>
      <name>getInput</name>
      <anchor>a1</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>TD_Float</type>
      <name>getOutput</name>
      <anchor>a2</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInput</name>
      <anchor>a3</anchor>
      <arglist>(unsigned int i, TD_Float newValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutput</name>
      <anchor>a4</anchor>
      <arglist>(unsigned int i, TD_Float newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumberOfInputs</name>
      <anchor>b0</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumberOfOutputs</name>
      <anchor>b1</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TD_Float *</type>
      <name>u</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TD_Float *</type>
      <name>y</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CriticalTelecommand</name>
    <filename>classCriticalTelecommand.html</filename>
    <base>Telecommand</base>
    <member kind="function">
      <type></type>
      <name>CriticalTelecommand</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCritical</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCriticalityLevel</name>
      <anchor>a3</anchor>
      <arglist>(bool isCritical)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isArmed</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isImageValid</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>storeImage</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxArmedDuration</name>
      <anchor>a7</anchor>
      <arglist>(TD_ObsTime t)</arglist>
    </member>
    <member kind="function">
      <type>TD_ObsTime</type>
      <name>getMaxArmedDuration</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TD_ObsTime</type>
      <name>getTimeWhenArmed</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObsClock</name>
      <anchor>a10</anchor>
      <arglist>(ObsClock *pObsClock)</arglist>
    </member>
    <member kind="function">
      <type>ObsClock *</type>
      <name>getObsClock</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canExecute</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TD_ActionOutcome</type>
      <name>doAction</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual TD_ActionOutcome</type>
      <name>doCriticalAction</name>
      <anchor>b1</anchor>
      <arglist>(void)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataItemControlBlock</name>
    <filename>classDataItemControlBlock.html</filename>
    <base>ControlBlock</base>
    <member kind="function">
      <type></type>
      <name>DataItemControlBlock</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInputLink</name>
      <anchor>a1</anchor>
      <arglist>(unsigned int i, DC_DataItem *pDataItem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutputLink</name>
      <anchor>a2</anchor>
      <arglist>(unsigned int i, DC_DataItem *pDataItem)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumberOfInputs</name>
      <anchor>b0</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumberOfOutputs</name>
      <anchor>b1</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DC_DataItem **</type>
      <name>pDIU</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DC_DataItem **</type>
      <name>pDIY</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataPool</name>
    <filename>classDataPool.html</filename>
    <base>CC_RootObject</base>
    <member kind="function">
      <type></type>
      <name>DataPool</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setValue</name>
      <anchor>a1</anchor>
      <arglist>(TD_DataPoolId id, TD_Float newValue)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setValue</name>
      <anchor>a2</anchor>
      <arglist>(TD_DataPoolId id, TD_Integer newValue)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TD_Float</type>
      <name>getFloatValue</name>
      <anchor>a3</anchor>
      <arglist>(TD_DataPoolId id)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TD_Integer</type>
      <name>getIntegerValue</name>
      <anchor>a4</anchor>
      <arglist>(TD_DataPoolId id)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TD_Float *</type>
      <name>getPointerFloatValue</name>
      <anchor>a5</anchor>
      <arglist>(TD_DataPoolId id)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TD_Integer *</type>
      <name>getPointerIntegerValue</name>
      <anchor>a6</anchor>
      <arglist>(TD_DataPoolId id)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DC_DataItem *</type>
      <name>getDataItem</name>
      <anchor>a7</anchor>
      <arglist>(TD_DataPoolId id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_ObsTime</type>
      <name>getTimeStamp</name>
      <anchor>a8</anchor>
      <arglist>(TD_DataPoolId id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isValid</name>
      <anchor>a9</anchor>
      <arglist>(TD_DataPoolId id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValidityStatus</name>
      <anchor>a10</anchor>
      <arglist>(TD_DataPoolId id, bool newValidityStatus)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MonitoringProfile *</type>
      <name>getMonitoringProfile</name>
      <anchor>a11</anchor>
      <arglist>(TD_DataPoolId id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RecoveryAction *</type>
      <name>getRecoveryAction</name>
      <anchor>a12</anchor>
      <arglist>(TD_DataPoolId id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_DataPoolId</type>
      <name>firstIdentifier</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_DataPoolId</type>
      <name>nextIdentifier</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isLastIdentifier</name>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFloat</name>
      <anchor>a16</anchor>
      <arglist>(TD_DataPoolId id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInteger</name>
      <anchor>a17</anchor>
      <arglist>(TD_DataPoolId id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchor>a18</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataPoolControlBlock</name>
    <filename>classDataPoolControlBlock.html</filename>
    <base>ControlBlock</base>
    <member kind="function">
      <type></type>
      <name>DataPoolControlBlock</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInputLink</name>
      <anchor>a1</anchor>
      <arglist>(unsigned int i, TD_DataPoolId dpIdentifier)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutputLink</name>
      <anchor>a2</anchor>
      <arglist>(unsigned int i, TD_DataPoolId dpIdentifier)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumberOfInputs</name>
      <anchor>b0</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumberOfOutputs</name>
      <anchor>b1</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TD_DataPoolId *</type>
      <name>dpu</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TD_DataPoolId *</type>
      <name>dpy</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_AfsFsmState</name>
    <filename>classDC__AfsFsmState.html</filename>
    <base>FsmState</base>
    <member kind="function">
      <type></type>
      <name>DC_AfsFsmState</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doInit</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doContinue</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doExit</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_BasicDatabase</name>
    <filename>classDC__BasicDatabase.html</filename>
    <base>ParameterDatabase</base>
    <member kind="function">
      <type></type>
      <name>DC_BasicDatabase</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTableLength</name>
      <anchor>a2</anchor>
      <arglist>(TD_DatabaseId length)</arglist>
    </member>
    <member kind="function">
      <type>TD_DatabaseId</type>
      <name>getTableLength</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultTable</name>
      <anchor>a4</anchor>
      <arglist>(char *pDefTable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOperationalTable</name>
      <anchor>a5</anchor>
      <arglist>(char *pOperTable)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a6</anchor>
      <arglist>(TD_DatabaseId parId, unsigned int newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a7</anchor>
      <arglist>(TD_DatabaseId parId, int newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a8</anchor>
      <arglist>(TD_DatabaseId parId, unsigned short newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a9</anchor>
      <arglist>(TD_DatabaseId parId, short newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a10</anchor>
      <arglist>(TD_DatabaseId parId, bool newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a11</anchor>
      <arglist>(TD_DatabaseId parId, char newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a12</anchor>
      <arglist>(TD_DatabaseId parId, unsigned char newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a13</anchor>
      <arglist>(TD_DatabaseId parId, float newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a14</anchor>
      <arglist>(TD_DatabaseId parId, double newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getParameterUnsignedInt</name>
      <anchor>a15</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getParameterInt</name>
      <anchor>a16</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short</type>
      <name>getParameterUnsignedShort</name>
      <anchor>a17</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getParameterShort</name>
      <anchor>a18</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getParameterBool</name>
      <anchor>a19</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getParameterUnsignedChar</name>
      <anchor>a20</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getParameterChar</name>
      <anchor>a21</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>getParameterFloat</name>
      <anchor>a22</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getParameterDouble</name>
      <anchor>a23</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int *</type>
      <name>getParameterPointerUnsignedInt</name>
      <anchor>a24</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int *</type>
      <name>getParameterPointerInt</name>
      <anchor>a25</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short *</type>
      <name>getParameterPointerUnsignedShort</name>
      <anchor>a26</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short *</type>
      <name>getParameterPointerShort</name>
      <anchor>a27</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char *</type>
      <name>getParameterPointerUnsignedChar</name>
      <anchor>a28</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char *</type>
      <name>getParameterPointerChar</name>
      <anchor>a29</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool *</type>
      <name>getParameterPointerBool</name>
      <anchor>a30</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float *</type>
      <name>getParameterPointerFloat</name>
      <anchor>a31</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double *</type>
      <name>getParameterPointerDouble</name>
      <anchor>a32</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a33</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_BasicDataPool</name>
    <filename>classDC__BasicDataPool.html</filename>
    <base>DataPool</base>
    <member kind="function">
      <type></type>
      <name>DC_BasicDataPool</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDataPoolSize</name>
      <anchor>a1</anchor>
      <arglist>(TD_DataPoolId size)</arglist>
    </member>
    <member kind="function">
      <type>TD_DataPoolId</type>
      <name>getDataPoolSize</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchor>a3</anchor>
      <arglist>(TD_DataPoolId id, TD_Float newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchor>a4</anchor>
      <arglist>(TD_DataPoolId id, TD_Integer newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_Float</type>
      <name>getFloatValue</name>
      <anchor>a5</anchor>
      <arglist>(TD_DataPoolId id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_Integer</type>
      <name>getIntegerValue</name>
      <anchor>a6</anchor>
      <arglist>(TD_DataPoolId id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_Float *</type>
      <name>getPointerFloatValue</name>
      <anchor>a7</anchor>
      <arglist>(TD_DataPoolId id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_Integer *</type>
      <name>getPointerIntegerValue</name>
      <anchor>a8</anchor>
      <arglist>(TD_DataPoolId id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_BasicPUSTcLoader</name>
    <filename>classDC__BasicPUSTcLoader.html</filename>
    <base>TelecommandLoader</base>
    <member kind="function">
      <type></type>
      <name>DC_BasicPUSTcLoader</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>activate</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>release</name>
      <anchor>a2</anchor>
      <arglist>(Telecommand *pTelecommand)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTcLoadAreaStart</name>
      <anchor>a3</anchor>
      <arglist>(unsigned char *startAddress)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxTcLength</name>
      <anchor>a4</anchor>
      <arglist>(unsigned int maxTcLength)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMaxTcLength</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxNumberOfTc</name>
      <anchor>a6</anchor>
      <arglist>(unsigned int max)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMaxNumberOfTc</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_BasicPUSTmStream</name>
    <filename>classDC__BasicPUSTmStream.html</filename>
    <base>TelemetryStream</base>
    <member kind="function">
      <type></type>
      <name>DC_BasicPUSTmStream</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>flush</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getCapacity</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCapacity</name>
      <anchor>a4</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartAddress</name>
      <anchor>a5</anchor>
      <arglist>(unsigned char *pAddress)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char *</type>
      <name>getStartAddress</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getPacketCounter</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getWriteCounter</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getSequenceCounter</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>doesPacketFit</name>
      <anchor>a10</anchor>
      <arglist>(TelemetryPacket *pPacket)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchor>a11</anchor>
      <arglist>(TelemetryPacket *pItem)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_BasicReconfigurer</name>
    <filename>classDC__BasicReconfigurer.html</filename>
    <base>CC_RootObject</base>
    <member kind="function">
      <type></type>
      <name>DC_BasicReconfigurer</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reconfigure</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfConfigurations</name>
      <anchor>a2</anchor>
      <arglist>(TD_Config nOfConfig)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHealthStatus</name>
      <anchor>a3</anchor>
      <arglist>(TD_Config i, bool healthStatus)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConfigurationHealthy</name>
      <anchor>a4</anchor>
      <arglist>(TD_Config i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setActive</name>
      <anchor>a5</anchor>
      <arglist>(TD_Config activeConfig)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnabled</name>
      <anchor>a6</anchor>
      <arglist>(bool enabled)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEnabled</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>TD_Config</type>
      <name>getActive</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>TD_Config</type>
      <name>getNumberOfConfigurations</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_ByteArrayTelemetryStream</name>
    <filename>classDC__ByteArrayTelemetryStream.html</filename>
    <base>TelemetryStream</base>
    <member kind="function">
      <type></type>
      <name>DC_ByteArrayTelemetryStream</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>flush</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getCapacity</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCapacity</name>
      <anchor>a4</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartingAddress</name>
      <anchor>a5</anchor>
      <arglist>(unsigned char *pAddress)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char *</type>
      <name>getStartingAddress</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>doesPacketFit</name>
      <anchor>a7</anchor>
      <arglist>(TelemetryPacket *pPacket)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchor>a8</anchor>
      <arglist>(TelemetryPacket *pItem)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_ControlAction</name>
    <filename>classDC__ControlAction.html</filename>
    <base>ConditionalPunctualAction</base>
    <member kind="function">
      <type></type>
      <name>DC_ControlAction</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTargetControlBlock</name>
      <anchor>a1</anchor>
      <arglist>(ControlBlock *pBlock)</arglist>
    </member>
    <member kind="function">
      <type>ControlBlock *</type>
      <name>getTargetControlBlock</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>canExecute</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TD_ActionOutcome</type>
      <name>doConditionalAction</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_ControlList</name>
    <filename>classDC__ControlList.html</filename>
    <base>ConditionalPunctualAction</base>
    <member kind="function">
      <type></type>
      <name>DC_ControlList</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setListSize</name>
      <anchor>a1</anchor>
      <arglist>(unsigned int listSize)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getListSize</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setControlBlock</name>
      <anchor>a3</anchor>
      <arglist>(unsigned int i, ControlBlock *item)</arglist>
    </member>
    <member kind="function">
      <type>ControlBlock *</type>
      <name>getControlBlock</name>
      <anchor>a4</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>canExecute</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TD_ActionOutcome</type>
      <name>doConditionalAction</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_CycleDataItem16TmStream</name>
    <filename>classDC__CycleDataItem16TmStream.html</filename>
    <base>TelemetryStream</base>
    <member kind="function">
      <type></type>
      <name>DC_CycleDataItem16TmStream</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>flush</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getCapacity</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfDataItems</name>
      <anchor>a4</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDataItem</name>
      <anchor>a5</anchor>
      <arglist>(unsigned int n, DC_RawDataItem *pDataItem)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>doesPacketFit</name>
      <anchor>a6</anchor>
      <arglist>(TelemetryPacket *pPacket)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchor>a7</anchor>
      <arglist>(TelemetryPacket *pItem)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_CyclingPunctualActionModeManager</name>
    <filename>classDC__CyclingPunctualActionModeManager.html</filename>
    <base>PunctualActionListModeManager</base>
    <member kind="function">
      <type></type>
      <name>DC_CyclingPunctualActionModeManager</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_CyclingTelemetryModeManager</name>
    <filename>classDC__CyclingTelemetryModeManager.html</filename>
    <base>TelemetryListModeManager</base>
    <member kind="function">
      <type></type>
      <name>DC_CyclingTelemetryModeManager</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_DataItem</name>
    <filename>classDC__DataItem.html</filename>
    <member kind="function">
      <type></type>
      <name>DC_DataItem</name>
      <anchor>a0</anchor>
      <arglist>(TD_Float *d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DC_DataItem</name>
      <anchor>a1</anchor>
      <arglist>(TD_Integer *d)</arglist>
    </member>
    <member kind="function">
      <type>TD_Float</type>
      <name>getFloatValue</name>
      <anchor>a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchor>a3</anchor>
      <arglist>(TD_Float newValue)</arglist>
    </member>
    <member kind="function">
      <type>TD_Integer</type>
      <name>getIntegerValue</name>
      <anchor>a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchor>a5</anchor>
      <arglist>(TD_Integer newValue)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>pVar</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TD_DataItemType</type>
      <name>varType</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_DataItem16TmWord</name>
    <filename>classDC__DataItem16TmWord.html</filename>
    <base>StructuredTelemetryPacket</base>
    <member kind="function">
      <type></type>
      <name>DC_DataItem16TmWord</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDataItem</name>
      <anchor>a2</anchor>
      <arglist>(DC_RawDataItem *pDataItem)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_DataPoolMonitor</name>
    <filename>classDC__DataPoolMonitor.html</filename>
    <base>ConditionalPunctualAction</base>
    <member kind="function">
      <type></type>
      <name>DC_DataPoolMonitor</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>canExecute</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TD_ActionOutcome</type>
      <name>doConditionalAction</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_DeltaProfile</name>
    <filename>classDC__DeltaProfile.html</filename>
    <base>MonitoringProfile</base>
    <member kind="function">
      <type></type>
      <name>DC_DeltaProfile</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDeltaThreshold</name>
      <anchor>a1</anchor>
      <arglist>(TD_Float deltaThreshold)</arglist>
    </member>
    <member kind="function">
      <type>TD_Float</type>
      <name>getDeltaThreshold</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>doProfileCheck</name>
      <anchor>b0</anchor>
      <arglist>(TD_Integer value)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>doProfileCheck</name>
      <anchor>b1</anchor>
      <arglist>(TD_Float value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_DummyConditionalPunctualAction</name>
    <filename>classDC__DummyConditionalPunctualAction.html</filename>
    <base>ConditionalPunctualAction</base>
    <member kind="function">
      <type></type>
      <name>DC_DummyConditionalPunctualAction</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExecutionFlag</name>
      <anchor>a1</anchor>
      <arglist>(bool newState)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>canExecute</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TD_ActionOutcome</type>
      <name>doConditionalAction</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_DummyConfigurableFsmState</name>
    <filename>classDC__DummyConfigurableFsmState.html</filename>
    <base>FsmState</base>
    <member kind="function">
      <type></type>
      <name>DC_DummyConfigurableFsmState</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doContinue</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canEnter</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doInit</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canExit</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doExit</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFinished</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getActivationCounter</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getInitializationCounter</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getExitCounter</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInitializationCheckValue</name>
      <anchor>a10</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExitCheckValue</name>
      <anchor>a11</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTerminationCheckValue</name>
      <anchor>a12</anchor>
      <arglist>(bool value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_DummyConfigurableManoeuvre</name>
    <filename>classDC__DummyConfigurableManoeuvre.html</filename>
    <base>Manoeuvre</base>
    <member kind="function">
      <type></type>
      <name>DC_DummyConfigurableManoeuvre</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canStart</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canContinue</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFinished</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartCheckStatus</name>
      <anchor>a5</anchor>
      <arglist>(bool startCheck)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContinuationCheckStatus</name>
      <anchor>a6</anchor>
      <arglist>(bool continuationCheck)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContinuationCheckCode</name>
      <anchor>a7</anchor>
      <arglist>(TD_CheckCode continuationCheckCode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_CheckCode</type>
      <name>getContinuationCheckCode</name>
      <anchor>a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTerminationCheckStatus</name>
      <anchor>a9</anchor>
      <arglist>(bool terminationCheck)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getInitializationActionCounter</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getContinuationActionCounter</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTerminationActionCounter</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doInternalContinue</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>internalTerminate</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_DummyCopyControlBlock</name>
    <filename>classDC__DummyCopyControlBlock.html</filename>
    <base>CopyControlBlock</base>
    <member kind="function">
      <type></type>
      <name>DC_DummyCopyControlBlock</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>propagateState</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateOutput</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_DummyCriticalTelecommand</name>
    <filename>classDC__DummyCriticalTelecommand.html</filename>
    <base>CriticalTelecommand</base>
    <member kind="function">
      <type></type>
      <name>DC_DummyCriticalTelecommand</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumberOfExecutions</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isImageValid</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setImageValidity</name>
      <anchor>a3</anchor>
      <arglist>(bool isValid)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TD_ActionOutcome</type>
      <name>doCriticalAction</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_DummyDatabase</name>
    <filename>classDC__DummyDatabase.html</filename>
    <base>DC_BasicDatabase</base>
    <member kind="function">
      <type></type>
      <name>DC_DummyDatabase</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_DummyDataItemControlBlock</name>
    <filename>classDC__DummyDataItemControlBlock.html</filename>
    <base>DataItemControlBlock</base>
    <member kind="function">
      <type></type>
      <name>DC_DummyDataItemControlBlock</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>propagateState</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateOutput</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_DummyDataPool</name>
    <filename>classDC__DummyDataPool.html</filename>
    <base>DC_BasicDataPool</base>
    <member kind="function">
      <type></type>
      <name>DC_DummyDataPool</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_DummyDataPoolControlBlock</name>
    <filename>classDC__DummyDataPoolControlBlock.html</filename>
    <base>DataPoolControlBlock</base>
    <member kind="function">
      <type></type>
      <name>DC_DummyDataPoolControlBlock</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>propagateState</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateOutput</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_DummyFsmState</name>
    <filename>classDC__DummyFsmState.html</filename>
    <base>FsmState</base>
    <member kind="function">
      <type></type>
      <name>DC_DummyFsmState</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doContinue</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_DummyManoeuvre</name>
    <filename>classDC__DummyManoeuvre.html</filename>
    <base>Manoeuvre</base>
    <member kind="function">
      <type></type>
      <name>DC_DummyManoeuvre</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFinished</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doInternalContinue</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_DummyModeManager</name>
    <filename>classDC__DummyModeManager.html</filename>
    <base>ModeManager</base>
    <member kind="function">
      <type></type>
      <name>DC_DummyModeManager</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>allocateMemory</name>
      <anchor>b0</anchor>
      <arglist>(TD_Mode numberOfModes)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_DummyObsClock</name>
    <filename>classDC__DummyObsClock.html</filename>
    <base>ObsClock</base>
    <member kind="function">
      <type></type>
      <name>DC_DummyObsClock</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_ObsTime</type>
      <name>getTime</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_ObsCycle</type>
      <name>getCycle</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>synchronizeWithSystemTime</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTime</name>
      <anchor>a5</anchor>
      <arglist>(TD_ObsTime time)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCycle</name>
      <anchor>a6</anchor>
      <arglist>(TD_ObsCycle cycle)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_DummyPointerControlBlock</name>
    <filename>classDC__DummyPointerControlBlock.html</filename>
    <base>PointerControlBlock</base>
    <member kind="function">
      <type></type>
      <name>DC_DummyPointerControlBlock</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>propagateState</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateOutput</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_DummyPunctualAction</name>
    <filename>classDC__DummyPunctualAction.html</filename>
    <base>PunctualAction</base>
    <member kind="function">
      <type></type>
      <name>DC_DummyPunctualAction</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getActivationCounter</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TD_ActionOutcome</type>
      <name>doAction</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_DummyPUSTelecommand</name>
    <filename>classDC__DummyPUSTelecommand.html</filename>
    <base>PUSTelecommand</base>
    <member kind="function">
      <type></type>
      <name>DC_DummyPUSTelecommand</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getExecutionCounter</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TD_ActionOutcome</type>
      <name>doAction</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_DummyPUSTelemetryPacket</name>
    <filename>classDC__DummyPUSTelemetryPacket.html</filename>
    <base>PUSTelemetryPacket</base>
    <member kind="function">
      <type></type>
      <name>DC_DummyPUSTelemetryPacket</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getNumberOfBytes</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getUnsignedByte</name>
      <anchor>a2</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchor>a4</anchor>
      <arglist>(unsigned char value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_DummyRecoveryAction</name>
    <filename>classDC__DummyRecoveryAction.html</filename>
    <base>RecoveryAction</base>
    <member kind="function">
      <type></type>
      <name>DC_DummyRecoveryAction</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setActionOutcome</name>
      <anchor>a1</anchor>
      <arglist>(TD_ActionOutcome nextOutcome)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExecutionFlag</name>
      <anchor>a2</anchor>
      <arglist>(bool canExecute)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TD_ActionOutcome</type>
      <name>doRecoveryAction</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>canExecute</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_DummyTelecommand</name>
    <filename>classDC__DummyTelecommand.html</filename>
    <base>Telecommand</base>
    <member kind="function">
      <type></type>
      <name>DC_DummyTelecommand</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getExecutionCounter</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canExecute</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isValid</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_CheckCode</type>
      <name>getValidityCheckCode</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_CheckCode</type>
      <name>getExecutionCheckCode</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExecutionCheckValue</name>
      <anchor>a6</anchor>
      <arglist>(bool executionCheckValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValidityCheckValue</name>
      <anchor>a7</anchor>
      <arglist>(bool validityCheckValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValidityCheckCode</name>
      <anchor>a8</anchor>
      <arglist>(TD_CheckCode validityCheckCode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExecutionCheckCode</name>
      <anchor>a9</anchor>
      <arglist>(TD_CheckCode executionCheckCode)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TD_ActionOutcome</type>
      <name>doAction</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_DummyTelecommandLoader</name>
    <filename>classDC__DummyTelecommandLoader.html</filename>
    <base>TelecommandLoader</base>
    <member kind="function">
      <type></type>
      <name>DC_DummyTelecommandLoader</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>activate</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>release</name>
      <anchor>a2</anchor>
      <arglist>(Telecommand *pTelecommand)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSampleTelecommand</name>
      <anchor>a3</anchor>
      <arglist>(unsigned int i, Telecommand *pSampleTc)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getAllocationCounter</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_DummyTelemetryPacket</name>
    <filename>classDC__DummyTelemetryPacket.html</filename>
    <base>TelemetryPacket</base>
    <member kind="function">
      <type></type>
      <name>DC_DummyTelemetryPacket</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getNumberOfBytes</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getUnsignedByte</name>
      <anchor>a2</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValidStatus</name>
      <anchor>a4</anchor>
      <arglist>(bool validStatus)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchor>a5</anchor>
      <arglist>(unsigned int n, unsigned char value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfBytes</name>
      <anchor>a6</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isValid</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_DummyTelemetryStream</name>
    <filename>classDC__DummyTelemetryStream.html</filename>
    <base>TelemetryStream</base>
    <member kind="function">
      <type></type>
      <name>DC_DummyTelemetryStream</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchor>a1</anchor>
      <arglist>(TelemetryPacket *tmItem)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_DummyTracer</name>
    <filename>classDC__DummyTracer.html</filename>
    <base>Tracer</base>
    <member kind="function">
      <type></type>
      <name>DC_DummyTracer</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendRawTrace</name>
      <anchor>b0</anchor>
      <arglist>(TD_TraceItem traceItem) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_Event</name>
    <filename>classDC__Event.html</filename>
    <member kind="function">
      <type></type>
      <name>DC_Event</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TD_ObsTime</type>
      <name>getTimeStamp</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>TD_EventType</type>
      <name>getEventType</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimeStamp</name>
      <anchor>a3</anchor>
      <arglist>(TD_ObsTime timeStamp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEventType</name>
      <anchor>a4</anchor>
      <arglist>(TD_EventType eventType)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_EventRepository</name>
    <filename>classDC__EventRepository.html</filename>
    <base>CC_RootObject</base>
    <member kind="function">
      <type></type>
      <name>DC_EventRepository</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRepositorySize</name>
      <anchor>a1</anchor>
      <arglist>(unsigned int repositorySize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>create</name>
      <anchor>a2</anchor>
      <arglist>(CC_RootObject *originator, TD_EventType eventId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnabled</name>
      <anchor>a3</anchor>
      <arglist>(bool isEnabled)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnabled</name>
      <anchor>a4</anchor>
      <arglist>(TD_EventType eventType, bool isEnabled)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEnabled</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEnabled</name>
      <anchor>a6</anchor>
      <arglist>(TD_EventType eventType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>latest</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>previous</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIterationFinished</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>TD_EventType</type>
      <name>getEventType</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>TD_ObsTime</type>
      <name>getTimeStamp</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getCounter</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getRepositorySize</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObsClock</name>
      <anchor>a14</anchor>
      <arglist>(ObsClock *pObsClock)</arglist>
    </member>
    <member kind="function">
      <type>ObsClock *</type>
      <name>getObsClock</name>
      <anchor>a15</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>createEventDataStructure</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DC_Event **</type>
      <name>pList</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>eventPointer</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_FdirCheck</name>
    <filename>classDC__FdirCheck.html</filename>
    <base>PunctualAction</base>
    <member kind="function">
      <type></type>
      <name>DC_FdirCheck</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFdiCheck</name>
      <anchor>a1</anchor>
      <arglist>(PunctualAction *pFdiCheck)</arglist>
    </member>
    <member kind="function">
      <type>PunctualAction *</type>
      <name>getFdiCheck</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRecoveryAction</name>
      <anchor>a3</anchor>
      <arglist>(RecoveryAction *pRecoveryAction)</arglist>
    </member>
    <member kind="function">
      <type>RecoveryAction *</type>
      <name>getRecoveryAction</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TD_ActionOutcome</type>
      <name>doAction</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_FileTelemetryStream</name>
    <filename>classDC__FileTelemetryStream.html</filename>
    <base>TelemetryStream</base>
    <member kind="function">
      <type></type>
      <name>DC_FileTelemetryStream</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutputStream</name>
      <anchor>a1</anchor>
      <arglist>(FILE *outputStream)</arglist>
    </member>
    <member kind="function">
      <type>FILE *</type>
      <name>getOutputStream</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>flush</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchor>a4</anchor>
      <arglist>(TelemetryPacket *tmItem)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_ForbiddenValueProfile</name>
    <filename>classDC__ForbiddenValueProfile.html</filename>
    <base>MonitoringProfile</base>
    <member kind="function">
      <type></type>
      <name>DC_ForbiddenValueProfile</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setForbiddenValue</name>
      <anchor>a1</anchor>
      <arglist>(TD_Integer forbiddenValue)</arglist>
    </member>
    <member kind="function">
      <type>TD_Integer</type>
      <name>getForbiddenValue</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>doProfileCheck</name>
      <anchor>b0</anchor>
      <arglist>(TD_Integer value)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>doProfileCheck</name>
      <anchor>b1</anchor>
      <arglist>(TD_Float value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_FromFsmEvent</name>
    <filename>classDC__FromFsmEvent.html</filename>
    <base>DC_FsmEvent</base>
    <member kind="function">
      <type></type>
      <name>DC_FromFsmEvent</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartingState</name>
      <anchor>a1</anchor>
      <arglist>(TD_FsmStateIndex startingState)</arglist>
    </member>
    <member kind="function">
      <type>TD_FsmStateIndex</type>
      <name>getStartingState</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TD_ActionOutcome</type>
      <name>doAction</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_FsmEvent</name>
    <filename>classDC__FsmEvent.html</filename>
    <base>PunctualAction</base>
    <member kind="function">
      <type></type>
      <name>DC_FsmEvent</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTargetFsm</name>
      <anchor>a1</anchor>
      <arglist>(CC_FSM *pTargetFsm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTargetState</name>
      <anchor>a2</anchor>
      <arglist>(TD_FsmStateIndex targetState)</arglist>
    </member>
    <member kind="function">
      <type>CC_FSM *</type>
      <name>getTargetFsm</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>TD_FsmStateIndex</type>
      <name>getTargetState</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TD_ActionOutcome</type>
      <name>doAction</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_InRangeProfile</name>
    <filename>classDC__InRangeProfile.html</filename>
    <base>RangeProfile</base>
    <member kind="function">
      <type></type>
      <name>DC_InRangeProfile</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>doProfileCheck</name>
      <anchor>b0</anchor>
      <arglist>(TD_Float value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_ManoeuvrePunctualAction</name>
    <filename>classDC__ManoeuvrePunctualAction.html</filename>
    <base>PunctualAction</base>
    <member kind="function">
      <type></type>
      <name>DC_ManoeuvrePunctualAction</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setManoeuvreManager</name>
      <anchor>a1</anchor>
      <arglist>(CC_ManoeuvreManager *pManMan)</arglist>
    </member>
    <member kind="function">
      <type>CC_ManoeuvreManager *</type>
      <name>getManoeuvreManager</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setManoeuvre</name>
      <anchor>a3</anchor>
      <arglist>(Manoeuvre *pMan)</arglist>
    </member>
    <member kind="function">
      <type>Manoeuvre *</type>
      <name>getManoeuvre</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TD_ActionOutcome</type>
      <name>doAction</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_MatlabCopyPID</name>
    <filename>classDC__MatlabCopyPID.html</filename>
    <base>CopyControlBlock</base>
    <member kind="function">
      <type></type>
      <name>DC_MatlabCopyPID</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>propagateState</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateOutput</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_MatlabDataItemPID</name>
    <filename>classDC__MatlabDataItemPID.html</filename>
    <base>DataItemControlBlock</base>
    <member kind="function">
      <type></type>
      <name>DC_MatlabDataItemPID</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>propagateState</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateOutput</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_MatlabDataPoolPID</name>
    <filename>classDC__MatlabDataPoolPID.html</filename>
    <base>DataPoolControlBlock</base>
    <member kind="function">
      <type></type>
      <name>DC_MatlabDataPoolPID</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>propagateState</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateOutput</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_MatlabPointerPID</name>
    <filename>classDC__MatlabPointerPID.html</filename>
    <base>PointerControlBlock</base>
    <member kind="function">
      <type></type>
      <name>DC_MatlabPointerPID</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>propagateState</name>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateOutput</name>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_NestedFsmActivator</name>
    <filename>classDC__NestedFsmActivator.html</filename>
    <base>FsmState</base>
    <member kind="function">
      <type></type>
      <name>DC_NestedFsmActivator</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTargetFsm</name>
      <anchor>a1</anchor>
      <arglist>(CC_FSM *pTargetFsm)</arglist>
    </member>
    <member kind="function">
      <type>CC_FSM *</type>
      <name>getTargetFsm</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doContinue</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doInit</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_NestedFsmActivatorWithEndState</name>
    <filename>classDC__NestedFsmActivatorWithEndState.html</filename>
    <base>DC_NestedFsmActivator</base>
    <member kind="function">
      <type></type>
      <name>DC_NestedFsmActivatorWithEndState</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTargetState</name>
      <anchor>a1</anchor>
      <arglist>(TD_FsmStateIndex targetState)</arglist>
    </member>
    <member kind="function">
      <type>TD_FsmStateIndex</type>
      <name>getTargetState</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFinished</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_NestedFsmActivatorWithExitCheck</name>
    <filename>classDC__NestedFsmActivatorWithExitCheck.html</filename>
    <base>DC_NestedFsmActivator</base>
    <member kind="function">
      <type></type>
      <name>DC_NestedFsmActivatorWithExitCheck</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTargetState</name>
      <anchor>a1</anchor>
      <arglist>(TD_FsmStateIndex targetState)</arglist>
    </member>
    <member kind="function">
      <type>TD_FsmStateIndex</type>
      <name>getTargetState</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canExit</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_NullProfile</name>
    <filename>classDC__NullProfile.html</filename>
    <base>MonitoringProfile</base>
    <member kind="function">
      <type></type>
      <name>DC_NullProfile</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>doProfileCheck</name>
      <anchor>b0</anchor>
      <arglist>(TD_Integer value)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>doProfileCheck</name>
      <anchor>b1</anchor>
      <arglist>(TD_Float value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_NullRecoveryAction</name>
    <filename>classDC__NullRecoveryAction.html</filename>
    <base>RecoveryAction</base>
    <member kind="function">
      <type></type>
      <name>DC_NullRecoveryAction</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TD_ActionOutcome</type>
      <name>doRecoveryAction</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_OCM_FsmState</name>
    <filename>classDC__OCM__FsmState.html</filename>
    <base>FsmState</base>
    <member kind="function">
      <type></type>
      <name>DC_OCM_FsmState</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doInit</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doContinue</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFinished</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_OutOfRangeProfile</name>
    <filename>classDC__OutOfRangeProfile.html</filename>
    <base>RangeProfile</base>
    <member kind="function">
      <type></type>
      <name>DC_OutOfRangeProfile</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>doProfileCheck</name>
      <anchor>b0</anchor>
      <arglist>(TD_Float value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_ProfileList</name>
    <filename>classDC__ProfileList.html</filename>
    <base>MonitoringProfile</base>
    <member kind="function">
      <type></type>
      <name>DC_ProfileList</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setListSize</name>
      <anchor>a1</anchor>
      <arglist>(unsigned int listSize)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getListSize</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMonitoringProfile</name>
      <anchor>a3</anchor>
      <arglist>(unsigned int i, MonitoringProfile *item)</arglist>
    </member>
    <member kind="function">
      <type>MonitoringProfile *</type>
      <name>getMonitoringProfile</name>
      <anchor>a4</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>doProfileCheck</name>
      <anchor>b0</anchor>
      <arglist>(TD_Integer value)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>doProfileCheck</name>
      <anchor>b1</anchor>
      <arglist>(TD_Float value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_PUSClearDataReporting</name>
    <filename>classDC__PUSClearDataReporting.html</filename>
    <base>PUSTelecommand</base>
    <member kind="function">
      <type></type>
      <name>DC_PUSClearDataReporting</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxNumberSID</name>
      <anchor>a1</anchor>
      <arglist>(unsigned char max)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRawData</name>
      <anchor>a2</anchor>
      <arglist>(unsigned int i, unsigned char d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getNumberOfRawData</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPUSTelemetryModeManager</name>
      <anchor>a4</anchor>
      <arglist>(DC_PUSTelemetryModeManager *pTmModeManager)</arglist>
    </member>
    <member kind="function">
      <type>DC_PUSTelemetryModeManager *</type>
      <name>getPUSTelemetryModeManager</name>
      <anchor>a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TD_ActionOutcome</type>
      <name>doAction</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_PUSControlDataReporting</name>
    <filename>classDC__PUSControlDataReporting.html</filename>
    <base>PUSTelecommand</base>
    <member kind="function">
      <type></type>
      <name>DC_PUSControlDataReporting</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxNumberSID</name>
      <anchor>a1</anchor>
      <arglist>(unsigned char max)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMaxNumberSID</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRawData</name>
      <anchor>a3</anchor>
      <arglist>(unsigned int i, unsigned char d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getNumberOfRawData</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TD_ActionOutcome</type>
      <name>doAction</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_PUSDataReportingPacket</name>
    <filename>classDC__PUSDataReportingPacket.html</filename>
    <base>PUSTelemetryPacket</base>
    <member kind="function">
      <type></type>
      <name>DC_PUSDataReportingPacket</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnabled</name>
      <anchor>a1</anchor>
      <arglist>(bool enabledStatus)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEnabled</name>
      <anchor>a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TD_PUSCollectionInterval</type>
      <name>getCollectionInterval</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TD_PUSNumberOfParameters</type>
      <name>getNPAR1</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>getNFA</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TD_SID</type>
      <name>getSID</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefinitionBuffer</name>
      <anchor>a7</anchor>
      <arglist>(unsigned int i, unsigned char val)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>getDefinitionBuffer</name>
      <anchor>a8</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDefinitionBufferLength</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchor>a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getNumberOfBytes</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getUnsignedByte</name>
      <anchor>a13</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char *</type>
      <name>getStartAddress</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFastAcquisitionImplemented</name>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefinitionBufferSize</name>
      <anchor>a16</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDefinitionBufferSize</name>
      <anchor>a17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxNumberFA</name>
      <anchor>a18</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMaxNumberFA</name>
      <anchor>a19</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValueBufferSize</name>
      <anchor>a20</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getValueBufferSize</name>
      <anchor>a21</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a22</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TD_DataPoolId</type>
      <name>getParameterId</name>
      <anchor>b0</anchor>
      <arglist>(unsigned int faIndex, unsigned int parPos)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_PUSDefineDataReporting</name>
    <filename>classDC__PUSDefineDataReporting.html</filename>
    <base>PUSTelecommand</base>
    <member kind="function">
      <type></type>
      <name>DC_PUSDefineDataReporting</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfRawData</name>
      <anchor>a1</anchor>
      <arglist>(unsigned int max)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getNumberOfRawData</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRawData</name>
      <anchor>a3</anchor>
      <arglist>(unsigned char *d, unsigned int n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getNumberOfApplicationData</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPUSTelemetryModeManager</name>
      <anchor>a5</anchor>
      <arglist>(DC_PUSTelemetryModeManager *pTmModeManager)</arglist>
    </member>
    <member kind="function">
      <type>DC_PUSTelemetryModeManager *</type>
      <name>getPUSTelemetryModeManager</name>
      <anchor>a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TD_ActionOutcome</type>
      <name>doAction</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_PUSDumpMemoryAbsolute</name>
    <filename>classDC__PUSDumpMemoryAbsolute.html</filename>
    <base>PUSDumpMemory</base>
    <member kind="function">
      <type></type>
      <name>DC_PUSDumpMemoryAbsolute</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TD_ActionOutcome</type>
      <name>doAction</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_PUSDumpMemoryOffset</name>
    <filename>classDC__PUSDumpMemoryOffset.html</filename>
    <base>PUSDumpMemory</base>
    <member kind="function">
      <type></type>
      <name>DC_PUSDumpMemoryOffset</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TD_ActionOutcome</type>
      <name>doAction</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_PUSEventRepository</name>
    <filename>classDC__PUSEventRepository.html</filename>
    <base>DC_EventRepository</base>
    <member kind="function">
      <type></type>
      <name>DC_PUSEventRepository</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchor>a1</anchor>
      <arglist>(PUSTelecommand *originator, TD_EventType eventId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchor>a2</anchor>
      <arglist>(PUSTcManoeuvre *originator, TD_EventType eventId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>create</name>
      <anchor>a3</anchor>
      <arglist>(CC_RootObject *originator, TD_EventType eventId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTelemetryManager</name>
      <anchor>a5</anchor>
      <arglist>(CC_TelemetryManager *pTmManager)</arglist>
    </member>
    <member kind="function">
      <type>CC_TelemetryManager *</type>
      <name>getTelemetryManager</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_PUSMemoryDumpAbsolute</name>
    <filename>classDC__PUSMemoryDumpAbsolute.html</filename>
    <base>PUSMemoryDump</base>
    <member kind="function">
      <type></type>
      <name>DC_PUSMemoryDumpAbsolute</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_PUSMemoryDumpOffset</name>
    <filename>classDC__PUSMemoryDumpOffset.html</filename>
    <base>PUSMemoryDump</base>
    <member kind="function">
      <type></type>
      <name>DC_PUSMemoryDumpOffset</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBaseAddress</name>
      <anchor>a1</anchor>
      <arglist>(TD_PUSMemData *base)</arglist>
    </member>
    <member kind="function">
      <type>TD_PUSMemData *</type>
      <name>getBaseAddress</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_PUSMemoryLoadAbsolute</name>
    <filename>classDC__PUSMemoryLoadAbsolute.html</filename>
    <base>PUSMemoryLoad</base>
    <member kind="function">
      <type></type>
      <name>DC_PUSMemoryLoadAbsolute</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRawData</name>
      <anchor>a1</anchor>
      <arglist>(unsigned char *d, unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type>TD_PUSMemId</type>
      <name>getMemoryBlockId</name>
      <anchor>a2</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_PUSMemoryLoadOffset</name>
    <filename>classDC__PUSMemoryLoadOffset.html</filename>
    <base>PUSMemoryLoad</base>
    <member kind="function">
      <type></type>
      <name>DC_PUSMemoryLoadOffset</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRawData</name>
      <anchor>a1</anchor>
      <arglist>(unsigned char *d, unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type>TD_PUSMemId</type>
      <name>getMemoryBlockId</name>
      <anchor>a2</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_PUSTcVerificationPacket</name>
    <filename>classDC__PUSTcVerificationPacket.html</filename>
    <base>PUSTelemetryPacket</base>
    <member kind="function">
      <type></type>
      <name>DC_PUSTcVerificationPacket</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getNumberOfBytes</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getUnsignedByte</name>
      <anchor>a2</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type>TD_CheckCode</type>
      <name>getErrorCode</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setErrorCode</name>
      <anchor>a4</anchor>
      <arglist>(TD_CheckCode errCode)</arglist>
    </member>
    <member kind="function">
      <type>TD_TelecommandId</type>
      <name>getTelecommandId</name>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTelecommandId</name>
      <anchor>a6</anchor>
      <arglist>(TD_TelecommandId tcId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_PUSTelemetryModeManager</name>
    <filename>classDC__PUSTelemetryModeManager.html</filename>
    <base>TelemetryModeManager</base>
    <member kind="function">
      <type></type>
      <name>DC_PUSTelemetryModeManager</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TelemetryPacket *</type>
      <name>getIterationTelemetryPacket</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadPacket</name>
      <anchor>a3</anchor>
      <arglist>(DC_PUSDataReportingPacket *pItem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unloadPacket</name>
      <anchor>a4</anchor>
      <arglist>(TD_SID sid)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFull</name>
      <anchor>a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumberOfPackets</name>
      <anchor>a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSIDLoaded</name>
      <anchor>a7</anchor>
      <arglist>(TD_SID sid) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxNumberOfPackets</name>
      <anchor>a8</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMaxNumberOfPackets</name>
      <anchor>a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>first</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isIterationFinished</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>allocateMemory</name>
      <anchor>b0</anchor>
      <arglist>(TD_Mode numberOfModes)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_PUSTmLogger</name>
    <filename>classDC__PUSTmLogger.html</filename>
    <base>TelemetryStream</base>
    <member kind="function">
      <type></type>
      <name>DC_PUSTmLogger</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBufferCapacity</name>
      <anchor>a1</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getBufferCapacity</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxPacketLength</name>
      <anchor>a3</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMaxPacketLength</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getPacketCounter</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>TD_TelemetryType</type>
      <name>getType</name>
      <anchor>a6</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>TD_TelemetrySubType</type>
      <name>getSubType</name>
      <anchor>a7</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>TD_ObsTime</type>
      <name>getTimeTag</name>
      <anchor>a8</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getLength</name>
      <anchor>a9</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>getData</name>
      <anchor>a10</anchor>
      <arglist>(unsigned int i, unsigned int j) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>doesPacketFit</name>
      <anchor>a11</anchor>
      <arglist>(TelemetryPacket *pPacket)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchor>a12</anchor>
      <arglist>(TelemetryPacket *pItem)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_RawDataItem</name>
    <filename>classDC__RawDataItem.html</filename>
    <base>DC_DataItem</base>
    <member kind="function">
      <type></type>
      <name>DC_RawDataItem</name>
      <anchor>a0</anchor>
      <arglist>(void *d)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>getChar</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChar</name>
      <anchor>a2</anchor>
      <arglist>(char newValue)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>getUnsignedChar</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUnsignedChar</name>
      <anchor>a4</anchor>
      <arglist>(unsigned char newValue)</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>getShort</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setShort</name>
      <anchor>a6</anchor>
      <arglist>(short newValue)</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>getUnsignedShort</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUnsignedShort</name>
      <anchor>a8</anchor>
      <arglist>(unsigned short newValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getInt</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInt</name>
      <anchor>a10</anchor>
      <arglist>(int newValue)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getUnsignedInt</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUnsignedInt</name>
      <anchor>a12</anchor>
      <arglist>(unsigned int newValue)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getFloat</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFloat</name>
      <anchor>a14</anchor>
      <arglist>(float newValue)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDouble</name>
      <anchor>a15</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDouble</name>
      <anchor>a16</anchor>
      <arglist>(double newValue)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_SampleControlBlock_1</name>
    <filename>classDC__SampleControlBlock__1.html</filename>
    <base>DataPoolControlBlock</base>
    <member kind="function">
      <type></type>
      <name>DC_SampleControlBlock_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>propagateState</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateOutput</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_SampleControlBlock_2</name>
    <filename>classDC__SampleControlBlock__2.html</filename>
    <base>DataPoolControlBlock</base>
    <member kind="function">
      <type></type>
      <name>DC_SampleControlBlock_2</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>propagateState</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateOutput</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_SampleControlBlock_3</name>
    <filename>classDC__SampleControlBlock__3.html</filename>
    <base>DataPoolControlBlock</base>
    <member kind="function">
      <type></type>
      <name>DC_SampleControlBlock_3</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>propagateState</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateOutput</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_SampleControlBlock_4</name>
    <filename>classDC__SampleControlBlock__4.html</filename>
    <base>DataPoolControlBlock</base>
    <member kind="function">
      <type></type>
      <name>DC_SampleControlBlock_4</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>propagateState</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateOutput</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_SampleFullDataPool</name>
    <filename>classDC__SampleFullDataPool.html</filename>
    <base>DataPool</base>
    <member kind="function">
      <type></type>
      <name>DC_SampleFullDataPool</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObsClock</name>
      <anchor>a1</anchor>
      <arglist>(ObsClock *pObsClock)</arglist>
    </member>
    <member kind="function">
      <type>ObsClock *</type>
      <name>getObsClock</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchor>a3</anchor>
      <arglist>(TD_DataPoolId id, TD_Float newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchor>a4</anchor>
      <arglist>(TD_DataPoolId id, TD_Integer newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_Float</type>
      <name>getFloatValue</name>
      <anchor>a5</anchor>
      <arglist>(TD_DataPoolId id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_Integer</type>
      <name>getIntegerValue</name>
      <anchor>a6</anchor>
      <arglist>(TD_DataPoolId id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_Float *</type>
      <name>getPointerFloatValue</name>
      <anchor>a7</anchor>
      <arglist>(TD_DataPoolId id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_Integer *</type>
      <name>getPointerIntegerValue</name>
      <anchor>a8</anchor>
      <arglist>(TD_DataPoolId id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DC_DataItem *</type>
      <name>getDataItem</name>
      <anchor>a9</anchor>
      <arglist>(TD_DataPoolId id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_ObsTime</type>
      <name>getTimeStamp</name>
      <anchor>a10</anchor>
      <arglist>(TD_DataPoolId id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isValid</name>
      <anchor>a11</anchor>
      <arglist>(TD_DataPoolId id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValidityStatus</name>
      <anchor>a12</anchor>
      <arglist>(TD_DataPoolId id, bool newValidityStatus)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MonitoringProfile *</type>
      <name>getMonitoringProfile</name>
      <anchor>a13</anchor>
      <arglist>(TD_DataPoolId id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMonitoringProfile</name>
      <anchor>a14</anchor>
      <arglist>(TD_DataPoolId id, MonitoringProfile *pMonitoringProfile)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RecoveryAction *</type>
      <name>getRecoveryAction</name>
      <anchor>a15</anchor>
      <arglist>(TD_DataPoolId id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRecoveryAction</name>
      <anchor>a16</anchor>
      <arglist>(TD_DataPoolId id, RecoveryAction *pRcoveryAction)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_DataPoolId</type>
      <name>firstIdentifier</name>
      <anchor>a17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_DataPoolId</type>
      <name>nextIdentifier</name>
      <anchor>a18</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isLastIdentifier</name>
      <anchor>a19</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFloat</name>
      <anchor>a20</anchor>
      <arglist>(TD_DataPoolId id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInteger</name>
      <anchor>a21</anchor>
      <arglist>(TD_DataPoolId id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchor>a22</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a23</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_SampleMonitoredDataPool</name>
    <filename>classDC__SampleMonitoredDataPool.html</filename>
    <base>DataPool</base>
    <member kind="function">
      <type></type>
      <name>DC_SampleMonitoredDataPool</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchor>a1</anchor>
      <arglist>(TD_DataPoolId id, TD_Float newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchor>a2</anchor>
      <arglist>(TD_DataPoolId id, TD_Integer newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_Float</type>
      <name>getFloatValue</name>
      <anchor>a3</anchor>
      <arglist>(TD_DataPoolId id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_Integer</type>
      <name>getIntegerValue</name>
      <anchor>a4</anchor>
      <arglist>(TD_DataPoolId id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_Float *</type>
      <name>getPointerFloatValue</name>
      <anchor>a5</anchor>
      <arglist>(TD_DataPoolId id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_Integer *</type>
      <name>getPointerIntegerValue</name>
      <anchor>a6</anchor>
      <arglist>(TD_DataPoolId id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DC_DataItem *</type>
      <name>getDataItem</name>
      <anchor>a7</anchor>
      <arglist>(TD_DataPoolId id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isValid</name>
      <anchor>a8</anchor>
      <arglist>(TD_DataPoolId id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValidityStatus</name>
      <anchor>a9</anchor>
      <arglist>(TD_DataPoolId id, bool newValidityStatus)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MonitoringProfile *</type>
      <name>getMonitoringProfile</name>
      <anchor>a10</anchor>
      <arglist>(TD_DataPoolId id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMonitoringProfile</name>
      <anchor>a11</anchor>
      <arglist>(TD_DataPoolId id, MonitoringProfile *pMonitoringProfile)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_DataPoolId</type>
      <name>firstIdentifier</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_DataPoolId</type>
      <name>nextIdentifier</name>
      <anchor>a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isLastIdentifier</name>
      <anchor>a14</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchor>a15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a16</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_SampleMonitoringProfile</name>
    <filename>classDC__SampleMonitoringProfile.html</filename>
    <base>MonitoringProfile</base>
    <member kind="function">
      <type></type>
      <name>DC_SampleMonitoringProfile</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>doProfileCheck</name>
      <anchor>a1</anchor>
      <arglist>(TD_Float value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>doProfileCheck</name>
      <anchor>a2</anchor>
      <arglist>(TD_Integer value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_SampleR1Database</name>
    <filename>classDC__SampleR1Database.html</filename>
    <base>ParameterDatabase</base>
    <member kind="function">
      <type></type>
      <name>DC_SampleR1Database</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultTable</name>
      <anchor>a2</anchor>
      <arglist>(char *pDefTable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOperationalTable</name>
      <anchor>a3</anchor>
      <arglist>(char *pOperTable)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a4</anchor>
      <arglist>(TD_DatabaseId parId, int newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a5</anchor>
      <arglist>(TD_DatabaseId parId, unsigned int newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a6</anchor>
      <arglist>(TD_DatabaseId parId, short newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a7</anchor>
      <arglist>(TD_DatabaseId parId, unsigned short newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a8</anchor>
      <arglist>(TD_DatabaseId parId, char newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a9</anchor>
      <arglist>(TD_DatabaseId parId, unsigned char newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a10</anchor>
      <arglist>(TD_DatabaseId parId, bool newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a11</anchor>
      <arglist>(TD_DatabaseId parId, float newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a12</anchor>
      <arglist>(TD_DatabaseId parId, double newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getParameterInt</name>
      <anchor>a13</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getParameterUnsignedInt</name>
      <anchor>a14</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getParameterShort</name>
      <anchor>a15</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short</type>
      <name>getParameterUnsignedShort</name>
      <anchor>a16</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getParameterChar</name>
      <anchor>a17</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getParameterUnsignedChar</name>
      <anchor>a18</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getParameterBool</name>
      <anchor>a19</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>getParameterFloat</name>
      <anchor>a20</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getParameterDouble</name>
      <anchor>a21</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int *</type>
      <name>getParameterPointerInt</name>
      <anchor>a22</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int *</type>
      <name>getParameterPointerUnsignedInt</name>
      <anchor>a23</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short *</type>
      <name>getParameterPointerShort</name>
      <anchor>a24</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short *</type>
      <name>getParameterPointerUnsignedShort</name>
      <anchor>a25</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char *</type>
      <name>getParameterPointerChar</name>
      <anchor>a26</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char *</type>
      <name>getParameterPointerUnsignedChar</name>
      <anchor>a27</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool *</type>
      <name>getParameterPointerBool</name>
      <anchor>a28</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float *</type>
      <name>getParameterPointerFloat</name>
      <anchor>a29</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double *</type>
      <name>getParameterPointerDouble</name>
      <anchor>a30</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a31</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_SampleR2Database</name>
    <filename>classDC__SampleR2Database.html</filename>
    <base>ParameterDatabase</base>
    <member kind="function">
      <type></type>
      <name>DC_SampleR2Database</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultTable</name>
      <anchor>a2</anchor>
      <arglist>(char *pDefTable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOperationalTable</name>
      <anchor>a3</anchor>
      <arglist>(char *pOperTable)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a4</anchor>
      <arglist>(TD_DatabaseId parId, int newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a5</anchor>
      <arglist>(TD_DatabaseId parId, unsigned int newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a6</anchor>
      <arglist>(TD_DatabaseId parId, short newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a7</anchor>
      <arglist>(TD_DatabaseId parId, unsigned short newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a8</anchor>
      <arglist>(TD_DatabaseId parId, char newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a9</anchor>
      <arglist>(TD_DatabaseId parId, unsigned char newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a10</anchor>
      <arglist>(TD_DatabaseId parId, bool newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a11</anchor>
      <arglist>(TD_DatabaseId parId, float newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a12</anchor>
      <arglist>(TD_DatabaseId parId, double newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getParameterInt</name>
      <anchor>a13</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getParameterUnsignedInt</name>
      <anchor>a14</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getParameterShort</name>
      <anchor>a15</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short</type>
      <name>getParameterUnsignedShort</name>
      <anchor>a16</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getParameterChar</name>
      <anchor>a17</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getParameterUnsignedChar</name>
      <anchor>a18</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getParameterBool</name>
      <anchor>a19</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>getParameterFloat</name>
      <anchor>a20</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getParameterDouble</name>
      <anchor>a21</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int *</type>
      <name>getParameterPointerInt</name>
      <anchor>a22</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int *</type>
      <name>getParameterPointerUnsignedInt</name>
      <anchor>a23</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short *</type>
      <name>getParameterPointerShort</name>
      <anchor>a24</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short *</type>
      <name>getParameterPointerUnsignedShort</name>
      <anchor>a25</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char *</type>
      <name>getParameterPointerChar</name>
      <anchor>a26</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char *</type>
      <name>getParameterPointerUnsignedChar</name>
      <anchor>a27</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool *</type>
      <name>getParameterPointerBool</name>
      <anchor>a28</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float *</type>
      <name>getParameterPointerFloat</name>
      <anchor>a29</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double *</type>
      <name>getParameterPointerDouble</name>
      <anchor>a30</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a31</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_SampleR3Database</name>
    <filename>classDC__SampleR3Database.html</filename>
    <base>ParameterDatabase</base>
    <member kind="function">
      <type></type>
      <name>DC_SampleR3Database</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultTable</name>
      <anchor>a2</anchor>
      <arglist>(char *pDefTable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOperationalTable</name>
      <anchor>a3</anchor>
      <arglist>(char *pOperTable)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a4</anchor>
      <arglist>(TD_DatabaseId parId, int newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a5</anchor>
      <arglist>(TD_DatabaseId parId, unsigned int newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a6</anchor>
      <arglist>(TD_DatabaseId parId, short newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a7</anchor>
      <arglist>(TD_DatabaseId parId, unsigned short newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a8</anchor>
      <arglist>(TD_DatabaseId parId, char newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a9</anchor>
      <arglist>(TD_DatabaseId parId, unsigned char newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a10</anchor>
      <arglist>(TD_DatabaseId parId, bool newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a11</anchor>
      <arglist>(TD_DatabaseId parId, float newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a12</anchor>
      <arglist>(TD_DatabaseId parId, double newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getParameterInt</name>
      <anchor>a13</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getParameterUnsignedInt</name>
      <anchor>a14</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short</type>
      <name>getParameterShort</name>
      <anchor>a15</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short</type>
      <name>getParameterUnsignedShort</name>
      <anchor>a16</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getParameterChar</name>
      <anchor>a17</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getParameterUnsignedChar</name>
      <anchor>a18</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getParameterBool</name>
      <anchor>a19</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>getParameterFloat</name>
      <anchor>a20</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getParameterDouble</name>
      <anchor>a21</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int *</type>
      <name>getParameterPointerInt</name>
      <anchor>a22</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int *</type>
      <name>getParameterPointerUnsignedInt</name>
      <anchor>a23</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual short *</type>
      <name>getParameterPointerShort</name>
      <anchor>a24</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned short *</type>
      <name>getParameterPointerUnsignedShort</name>
      <anchor>a25</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char *</type>
      <name>getParameterPointerChar</name>
      <anchor>a26</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char *</type>
      <name>getParameterPointerUnsignedChar</name>
      <anchor>a27</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool *</type>
      <name>getParameterPointerBool</name>
      <anchor>a28</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float *</type>
      <name>getParameterPointerFloat</name>
      <anchor>a29</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double *</type>
      <name>getParameterPointerDouble</name>
      <anchor>a30</anchor>
      <arglist>(TD_DatabaseId parId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a31</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_SampleRecoveryAction</name>
    <filename>classDC__SampleRecoveryAction.html</filename>
    <base>RecoveryAction</base>
    <member kind="function">
      <type></type>
      <name>DC_SampleRecoveryAction</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_ActionOutcome</type>
      <name>doRecoveryAction</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_SBY_PostSepFsmState</name>
    <filename>classDC__SBY__PostSepFsmState.html</filename>
    <base>FsmState</base>
    <member kind="function">
      <type></type>
      <name>DC_SBY_PostSepFsmState</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doInit</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doContinue</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doExit</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFinished</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_SBY_PreSepFsmState</name>
    <filename>classDC__SBY__PreSepFsmState.html</filename>
    <base>FsmState</base>
    <member kind="function">
      <type></type>
      <name>DC_SBY_PreSepFsmState</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doInit</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doContinue</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFinished</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_SCM_FsmState</name>
    <filename>classDC__SCM__FsmState.html</filename>
    <base>FsmState</base>
    <member kind="function">
      <type></type>
      <name>DC_SCM_FsmState</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doInit</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doContinue</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFinished</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_SettableDataItem</name>
    <filename>classDC__SettableDataItem.html</filename>
    <base>DC_DataItem</base>
    <member kind="function">
      <type></type>
      <name>DC_SettableDataItem</name>
      <anchor>a0</anchor>
      <arglist>(TD_Integer *d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DC_SettableDataItem</name>
      <anchor>a1</anchor>
      <arglist>(TD_Float *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariable</name>
      <anchor>a2</anchor>
      <arglist>(TD_Integer *pNewVar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariable</name>
      <anchor>a3</anchor>
      <arglist>(TD_Float *pNewVar)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_SimpleChangeProfile</name>
    <filename>classDC__SimpleChangeProfile.html</filename>
    <base>MonitoringProfile</base>
    <member kind="function">
      <type></type>
      <name>DC_SimpleChangeProfile</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReferenceValue</name>
      <anchor>a1</anchor>
      <arglist>(TD_Integer refValue)</arglist>
    </member>
    <member kind="function">
      <type>TD_Integer</type>
      <name>getReferenceValue</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>doProfileCheck</name>
      <anchor>b0</anchor>
      <arglist>(TD_Integer value)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>doProfileCheck</name>
      <anchor>b1</anchor>
      <arglist>(TD_Float value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_SimplePunctualActionModeManager</name>
    <filename>classDC__SimplePunctualActionModeManager.html</filename>
    <base>PunctualActionListModeManager</base>
    <member kind="function">
      <type></type>
      <name>DC_SimplePunctualActionModeManager</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_SimpleTelemetryModeManager</name>
    <filename>classDC__SimpleTelemetryModeManager.html</filename>
    <base>TelemetryListModeManager</base>
    <member kind="function">
      <type></type>
      <name>DC_SimpleTelemetryModeManager</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_SM_PreSepFsmState</name>
    <filename>classDC__SM__PreSepFsmState.html</filename>
    <base>FsmState</base>
    <member kind="function">
      <type></type>
      <name>DC_SM_PreSepFsmState</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doInit</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doContinue</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFinished</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_StuckDataProfile</name>
    <filename>classDC__StuckDataProfile.html</filename>
    <base>MonitoringProfile</base>
    <member kind="function">
      <type></type>
      <name>DC_StuckDataProfile</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStuckThreshold</name>
      <anchor>a1</anchor>
      <arglist>(unsigned int stuckThreshold)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getStuckThreshold</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>doProfileCheck</name>
      <anchor>b0</anchor>
      <arglist>(TD_Integer value)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>doProfileCheck</name>
      <anchor>b1</anchor>
      <arglist>(TD_Float value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_TestPUSConfigurableManoeuvre</name>
    <filename>classDC__TestPUSConfigurableManoeuvre.html</filename>
    <base>PUSTcManoeuvre</base>
    <member kind="function">
      <type></type>
      <name>DC_TestPUSConfigurableManoeuvre</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canStart</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canContinue</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFinished</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartCheckStatus</name>
      <anchor>a5</anchor>
      <arglist>(bool startCheck)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContinuationCheckStatus</name>
      <anchor>a6</anchor>
      <arglist>(bool continuationCheck)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContinuationCheckCode</name>
      <anchor>a7</anchor>
      <arglist>(TD_CheckCode continuationCheckCode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_CheckCode</type>
      <name>getContinuationCheckCode</name>
      <anchor>a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTerminationCheckStatus</name>
      <anchor>a9</anchor>
      <arglist>(bool terminationCheck)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getInitializationActionCounter</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getContinuationActionCounter</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTerminationActionCounter</name>
      <anchor>a12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doInternalContinue</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>internalTerminate</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_TestPUSTelecommand</name>
    <filename>classDC__TestPUSTelecommand.html</filename>
    <base>PUSTelecommand</base>
    <member kind="function">
      <type></type>
      <name>DC_TestPUSTelecommand</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getExecutionCounter</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canExecute</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isValid</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_CheckCode</type>
      <name>getValidityCheckCode</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_CheckCode</type>
      <name>getExecutionCheckCode</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExecutionCheckValue</name>
      <anchor>a6</anchor>
      <arglist>(bool executionCheckValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValidityCheckValue</name>
      <anchor>a7</anchor>
      <arglist>(bool validityCheckValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValidityCheckCode</name>
      <anchor>a8</anchor>
      <arglist>(TD_CheckCode validityCheckCode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExecutionCheckCode</name>
      <anchor>a9</anchor>
      <arglist>(TD_CheckCode executionCheckCode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setActionOutcome</name>
      <anchor>a10</anchor>
      <arglist>(bool executionSuccess)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getActionOutcome</name>
      <anchor>a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRawData</name>
      <anchor>a12</anchor>
      <arglist>(unsigned int i, unsigned char d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getNumberOfRawData</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TD_ActionOutcome</type>
      <name>doAction</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_TestTracer</name>
    <filename>classDC__TestTracer.html</filename>
    <base>Tracer</base>
    <member kind="function">
      <type></type>
      <name>DC_TestTracer</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>closeLogFile</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const char *const</type>
      <name>getLogFileName</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendRawTrace</name>
      <anchor>b0</anchor>
      <arglist>(TD_TraceItem traceItem) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DC_UnstableFsmState</name>
    <filename>classDC__UnstableFsmState.html</filename>
    <base>FsmState</base>
    <member kind="function">
      <type></type>
      <name>DC_UnstableFsmState</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doContinue</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFinished</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FsmState</name>
    <filename>classFsmState.html</filename>
    <base>CC_RootObject</base>
    <member kind="function">
      <type></type>
      <name>FsmState</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canEnter</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doInit</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canExit</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>doContinue</name>
      <anchor>a4</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doExit</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFinished</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNextState</name>
      <anchor>a7</anchor>
      <arglist>(FsmState *pNextState)</arglist>
    </member>
    <member kind="function">
      <type>FsmState *</type>
      <name>getNextState</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Manoeuvre</name>
    <filename>classManoeuvre.html</filename>
    <base>CC_RootObject</base>
    <member kind="function">
      <type></type>
      <name>Manoeuvre</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canStart</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canContinue</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_CheckCode</type>
      <name>getContinuationCheckCode</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doContinue</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abort</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>terminate</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isFinished</name>
      <anchor>a8</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInUse</name>
      <anchor>a9</anchor>
      <arglist>(bool newInUse)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInUse</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsSuspended</name>
      <anchor>a11</anchor>
      <arglist>(bool newIsSuspended)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSuspended</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExecuting</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnabled</name>
      <anchor>a14</anchor>
      <arglist>(bool isEnabled)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEnabled</name>
      <anchor>a15</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getActivationStepCounter</name>
      <anchor>a16</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>doInternalContinue</name>
      <anchor>b0</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>internalAbort</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>internalTerminate</name>
      <anchor>b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>internalCanStart</name>
      <anchor>b3</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ModeManager</name>
    <filename>classModeManager.html</filename>
    <base>CC_RootObject</base>
    <member kind="function">
      <type></type>
      <name>ModeManager</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchor>a1</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfModes</name>
      <anchor>a2</anchor>
      <arglist>(TD_Mode numberOfModes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultMode</name>
      <anchor>a3</anchor>
      <arglist>(TD_Mode defaultMode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransitionEnableStatus</name>
      <anchor>a4</anchor>
      <arglist>(bool enabled)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransitionEnableStatus</name>
      <anchor>a5</anchor>
      <arglist>(TD_Mode toMode, bool enabled)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTransitionEnabled</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTransitionEnabled</name>
      <anchor>a7</anchor>
      <arglist>(TD_Mode toMode) const</arglist>
    </member>
    <member kind="function">
      <type>TD_Mode</type>
      <name>getCurrentMode</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>TD_Mode</type>
      <name>getNumberOfModes</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setMode</name>
      <anchor>b0</anchor>
      <arglist>(TD_Mode newMode)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>allocateMemory</name>
      <anchor>b1</anchor>
      <arglist>(TD_Mode numberOfModes)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MonitoringProfile</name>
    <filename>classMonitoringProfile.html</filename>
    <base>CC_RootObject</base>
    <member kind="function">
      <type></type>
      <name>MonitoringProfile</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deviatesFromProfile</name>
      <anchor>a1</anchor>
      <arglist>(TD_Float value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deviatesFromProfile</name>
      <anchor>a2</anchor>
      <arglist>(TD_Integer value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnabled</name>
      <anchor>a3</anchor>
      <arglist>(bool enableStatus)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEnabled</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNextMonitoringProfile</name>
      <anchor>a5</anchor>
      <arglist>(MonitoringProfile *pNextMonitoringProfile)</arglist>
    </member>
    <member kind="function">
      <type>MonitoringProfile *</type>
      <name>getNextMonitoringProfile</name>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>doProfileCheck</name>
      <anchor>b0</anchor>
      <arglist>(TD_Float value)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>doProfileCheck</name>
      <anchor>b1</anchor>
      <arglist>(TD_Integer value)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ObsClock</name>
    <filename>classObsClock.html</filename>
    <base>CC_RootObject</base>
    <member kind="function" virtualness="pure">
      <type>virtual TD_ObsTime</type>
      <name>getTime</name>
      <anchor>a0</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TD_ObsCycle</type>
      <name>getCycle</name>
      <anchor>a1</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>synchronizeWithSystemTime</name>
      <anchor>a2</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset</name>
      <anchor>a3</anchor>
      <arglist>(void)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ParameterDatabase</name>
    <filename>classParameterDatabase.html</filename>
    <base>CC_RootObject</base>
    <member kind="function">
      <type></type>
      <name>ParameterDatabase</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset</name>
      <anchor>a1</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a2</anchor>
      <arglist>(TD_DatabaseId parId, unsigned int newValue)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a3</anchor>
      <arglist>(TD_DatabaseId parId, int newValue)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a4</anchor>
      <arglist>(TD_DatabaseId parId, unsigned short newValue)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a5</anchor>
      <arglist>(TD_DatabaseId parId, short newValue)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a6</anchor>
      <arglist>(TD_DatabaseId parId, bool newValue)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a7</anchor>
      <arglist>(TD_DatabaseId parId, char newValue)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a8</anchor>
      <arglist>(TD_DatabaseId parId, unsigned char newValue)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a9</anchor>
      <arglist>(TD_DatabaseId parId, float newValue)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setParameter</name>
      <anchor>a10</anchor>
      <arglist>(TD_DatabaseId parId, double newValue)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>getParameterUnsignedInt</name>
      <anchor>a11</anchor>
      <arglist>(TD_DatabaseId parId)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getParameterInt</name>
      <anchor>a12</anchor>
      <arglist>(TD_DatabaseId parId)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned short</type>
      <name>getParameterUnsignedShort</name>
      <anchor>a13</anchor>
      <arglist>(TD_DatabaseId parId)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual short</type>
      <name>getParameterShort</name>
      <anchor>a14</anchor>
      <arglist>(TD_DatabaseId parId)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getParameterBool</name>
      <anchor>a15</anchor>
      <arglist>(TD_DatabaseId parId)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned char</type>
      <name>getParameterUnsignedChar</name>
      <anchor>a16</anchor>
      <arglist>(TD_DatabaseId parId)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual char</type>
      <name>getParameterChar</name>
      <anchor>a17</anchor>
      <arglist>(TD_DatabaseId parId)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getParameterFloat</name>
      <anchor>a18</anchor>
      <arglist>(TD_DatabaseId parId)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getParameterDouble</name>
      <anchor>a19</anchor>
      <arglist>(TD_DatabaseId parId)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int *</type>
      <name>getParameterPointerUnsignedInt</name>
      <anchor>a20</anchor>
      <arglist>(TD_DatabaseId parId)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int *</type>
      <name>getParameterPointerInt</name>
      <anchor>a21</anchor>
      <arglist>(TD_DatabaseId parId)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned short *</type>
      <name>getParameterPointerUnsignedShort</name>
      <anchor>a22</anchor>
      <arglist>(TD_DatabaseId parId)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual short *</type>
      <name>getParameterPointerShort</name>
      <anchor>a23</anchor>
      <arglist>(TD_DatabaseId parId)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned char *</type>
      <name>getParameterPointerUnsignedChar</name>
      <anchor>a24</anchor>
      <arglist>(TD_DatabaseId parId)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual char *</type>
      <name>getParameterPointerChar</name>
      <anchor>a25</anchor>
      <arglist>(TD_DatabaseId parId)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool *</type>
      <name>getParameterPointerBool</name>
      <anchor>a26</anchor>
      <arglist>(TD_DatabaseId parId)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float *</type>
      <name>getParameterPointerFloat</name>
      <anchor>a27</anchor>
      <arglist>(TD_DatabaseId parId)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double *</type>
      <name>getParameterPointerDouble</name>
      <anchor>a28</anchor>
      <arglist>(TD_DatabaseId parId)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PointerControlBlock</name>
    <filename>classPointerControlBlock.html</filename>
    <base>ControlBlock</base>
    <member kind="function">
      <type></type>
      <name>PointerControlBlock</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInputLink</name>
      <anchor>a1</anchor>
      <arglist>(unsigned int i, TD_Float *pInput)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutputLink</name>
      <anchor>a2</anchor>
      <arglist>(unsigned int i, TD_Float *pOutput)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumberOfInputs</name>
      <anchor>b0</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumberOfOutputs</name>
      <anchor>b1</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TD_Float **</type>
      <name>pU</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TD_Float **</type>
      <name>pY</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PunctualAction</name>
    <filename>classPunctualAction.html</filename>
    <base>CC_RootObject</base>
    <member kind="function">
      <type></type>
      <name>PunctualAction</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TD_ActionOutcome</type>
      <name>execute</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnabled</name>
      <anchor>a2</anchor>
      <arglist>(bool isEnabled)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEnabled</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>TD_ActionOutcome</type>
      <name>getLastOutcome</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetLastOutcome</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual TD_ActionOutcome</type>
      <name>doAction</name>
      <anchor>b0</anchor>
      <arglist>(void)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PunctualActionListModeManager</name>
    <filename>classPunctualActionListModeManager.html</filename>
    <base>PunctualActionModeManager</base>
    <member kind="function" virtualness="virtual">
      <type>virtual PunctualAction *</type>
      <name>getIterationPunctualAction</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setListItem</name>
      <anchor>a1</anchor>
      <arglist>(unsigned int n, unsigned int pos, PunctualAction *pItem)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PunctualActionListModeManager</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setListLength</name>
      <anchor>a3</anchor>
      <arglist>(unsigned int n, unsigned int length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>first</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isIterationFinished</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>allocateMemory</name>
      <anchor>b0</anchor>
      <arglist>(TD_Mode numberOfModes)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PunctualActionModeManager</name>
    <filename>classPunctualActionModeManager.html</filename>
    <base>ModeManager</base>
    <member kind="function">
      <type></type>
      <name>PunctualActionModeManager</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>first</name>
      <anchor>a1</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>next</name>
      <anchor>a2</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isIterationFinished</name>
      <anchor>a3</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PunctualAction *</type>
      <name>getIterationPunctualAction</name>
      <anchor>a4</anchor>
      <arglist>(void)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PUSDumpMemory</name>
    <filename>classPUSDumpMemory.html</filename>
    <base>PUSTelecommand</base>
    <member kind="function">
      <type></type>
      <name>PUSDumpMemory</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfRawData</name>
      <anchor>a1</anchor>
      <arglist>(unsigned int max)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getNumberOfRawData</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRawData</name>
      <anchor>a3</anchor>
      <arglist>(unsigned char *d, unsigned int n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getNumberOfApplicationData</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTelemetryManager</name>
      <anchor>a5</anchor>
      <arglist>(CC_TelemetryManager *pTmManager)</arglist>
    </member>
    <member kind="function">
      <type>CC_TelemetryManager *</type>
      <name>getTelemetryManager</name>
      <anchor>a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>data</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxNumberData</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numberData</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CC_TelemetryManager *</type>
      <name>pTmManager</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PUSFunctionManagement</name>
    <filename>classPUSFunctionManagement.html</filename>
    <base>PUSTelecommand</base>
    <member kind="function">
      <type></type>
      <name>PUSFunctionManagement</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PUSMemoryDump</name>
    <filename>classPUSMemoryDump.html</filename>
    <base>PUSTelemetryPacket</base>
    <member kind="function">
      <type></type>
      <name>PUSMemoryDump</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxNumberBlocks</name>
      <anchor>a1</anchor>
      <arglist>(TD_PUSNumberMemBlocks max)</arglist>
    </member>
    <member kind="function">
      <type>TD_PUSNumberMemBlocks</type>
      <name>getMaxNumberBlocks</name>
      <anchor>a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberBlocks</name>
      <anchor>a3</anchor>
      <arglist>(TD_PUSNumberMemBlocks max)</arglist>
    </member>
    <member kind="function">
      <type>TD_PUSNumberMemBlocks</type>
      <name>getNumberBlocks</name>
      <anchor>a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDumpBufferSize</name>
      <anchor>a5</anchor>
      <arglist>(unsigned int max)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDumpBufferSize</name>
      <anchor>a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>defineBlock</name>
      <anchor>a7</anchor>
      <arglist>(TD_PUSNumberMemBlocks i, TD_PUSMemData *start, TD_PUSMemLength length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getNumberOfBytes</name>
      <anchor>a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getUnsignedByte</name>
      <anchor>a9</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char *</type>
      <name>getStartAddress</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFastAcquisitionImplemented</name>
      <anchor>a11</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>TD_PUSMemData *</type>
      <name>getStartAddress</name>
      <anchor>a12</anchor>
      <arglist>(TD_PUSNumberMemBlocks i) const</arglist>
    </member>
    <member kind="function">
      <type>TD_PUSMemLength</type>
      <name>getLength</name>
      <anchor>a13</anchor>
      <arglist>(TD_PUSNumberMemBlocks i) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>getChecksum</name>
      <anchor>a14</anchor>
      <arglist>(TD_PUSNumberMemBlocks i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMemoryId</name>
      <anchor>a15</anchor>
      <arglist>(TD_PUSMemId memId)</arglist>
    </member>
    <member kind="function">
      <type>TD_PUSMemId</type>
      <name>getMemoryId</name>
      <anchor>a16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>setChecksumFlag</name>
      <anchor>e0</anchor>
      <arglist>(bool checksumFlag)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>bool</type>
      <name>isChecksumFlagSet</name>
      <anchor>e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MemBlockType *</type>
      <name>block</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TD_PUSNumberMemBlocks</type>
      <name>maxNumberBlocks</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TD_PUSNumberMemBlocks</type>
      <name>numberBlocks</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned char *</type>
      <name>data</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>tmPacketSize</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxNumberData</name>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TD_PUSMemId</type>
      <name>memId</name>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>bool</type>
      <name>isChecksumRequired</name>
      <anchor>t0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>PUSMemoryDump::MemBlockType</name>
    <filename>structPUSMemoryDump_1_1MemBlockType.html</filename>
    <member kind="variable">
      <type>TD_PUSMemData *</type>
      <name>startAddress</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TD_PUSMemLength</type>
      <name>length</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>checksum</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PUSMemoryLoad</name>
    <filename>classPUSMemoryLoad.html</filename>
    <base>PUSTelecommand</base>
    <member kind="function">
      <type></type>
      <name>PUSMemoryLoad</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxNumberBlocks</name>
      <anchor>a1</anchor>
      <arglist>(unsigned int max)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMaxNumberBlocks</name>
      <anchor>a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumberBlocks</name>
      <anchor>a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxNumberData</name>
      <anchor>a4</anchor>
      <arglist>(unsigned int max)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMaxNumberData</name>
      <anchor>a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TD_PUSMemData *</type>
      <name>getStartAddress</name>
      <anchor>a6</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>TD_PUSMemLength</type>
      <name>getLength</name>
      <anchor>a7</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>getChecksum</name>
      <anchor>a8</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TD_ActionOutcome</type>
      <name>doAction</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MemBlockType *</type>
      <name>block</name>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TD_PUSNumberMemBlocks</type>
      <name>maxNumberBlocks</name>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TD_PUSNumberMemBlocks</type>
      <name>numberBlocks</name>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TD_PUSMemData *</type>
      <name>data</name>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxNumberData</name>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>PUSMemoryLoad::MemBlockType</name>
    <filename>structPUSMemoryLoad_1_1MemBlockType.html</filename>
    <member kind="variable">
      <type>TD_PUSMemData *</type>
      <name>startAddress</name>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TD_PUSMemLength</type>
      <name>length</name>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>checksum</name>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PUSTcManoeuvre</name>
    <filename>classPUSTcManoeuvre.html</filename>
    <base>Manoeuvre</base>
    <member kind="function">
      <type></type>
      <name>PUSTcManoeuvre</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStartAckRequired</name>
      <anchor>a1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isProgressAckRequired</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompletionAckRequired</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartAckFlag</name>
      <anchor>a4</anchor>
      <arglist>(bool startAckFlag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCompletionAckFlag</name>
      <anchor>a5</anchor>
      <arglist>(bool completionAckFlag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProgressAckFlag</name>
      <anchor>a6</anchor>
      <arglist>(bool progressAckFlag)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_TelecommandId</type>
      <name>getTelecommandId</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTelecommandId</name>
      <anchor>a8</anchor>
      <arglist>(TD_TelecommandId tcIdentifier)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>generateProgressEvent</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PUSTelecommand</name>
    <filename>classPUSTelecommand.html</filename>
    <base>Telecommand</base>
    <member kind="function">
      <type></type>
      <name>PUSTelecommand</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isValid</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_CheckCode</type>
      <name>getValidityCheckCode</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_TelecommandId</type>
      <name>getTelecommandId</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTelecommandId</name>
      <anchor>a4</anchor>
      <arglist>(TD_TelecommandId tcIdentifier)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_TelecommandType</type>
      <name>getType</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setType</name>
      <anchor>a6</anchor>
      <arglist>(TD_TelecommandType tcType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_TelecommandSubType</type>
      <name>getSubType</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSubType</name>
      <anchor>a8</anchor>
      <arglist>(TD_TelecommandSubType tcSubType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_TelecommandSource</type>
      <name>getSource</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSource</name>
      <anchor>a10</anchor>
      <arglist>(TD_TelecommandSource tcSource)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAcknowledgeLevel</name>
      <anchor>a11</anchor>
      <arglist>(TD_TelecommandAck ackLevel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_TelecommandAck</type>
      <name>getAcknowledgeLevel</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAcceptanceAckRequired</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStartAckRequired</name>
      <anchor>a14</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isProgressAckRequired</name>
      <anchor>a15</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompletionAckRequired</name>
      <anchor>a16</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a17</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>TD_PUSPacketId</type>
      <name>getPacketId</name>
      <anchor>e0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>setApplicationId</name>
      <anchor>e1</anchor>
      <arglist>(TD_APID apid)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setValidityCheckCode</name>
      <anchor>b0</anchor>
      <arglist>(TD_CheckCode valCheckCode)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PUSTelemetryPacket</name>
    <filename>classPUSTelemetryPacket.html</filename>
    <base>TelemetryPacket</base>
    <member kind="function">
      <type></type>
      <name>PUSTelemetryPacket</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setType</name>
      <anchor>a1</anchor>
      <arglist>(TD_TelemetryType tmType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSubType</name>
      <anchor>a2</anchor>
      <arglist>(TD_TelemetrySubType tmSubType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestination</name>
      <anchor>a3</anchor>
      <arglist>(TD_TelemetryDestination tmDest)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_TelemetryType</type>
      <name>getType</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_TelemetrySubType</type>
      <name>getSubType</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_ObsTime</type>
      <name>getTimeTag</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTimeTag</name>
      <anchor>a7</anchor>
      <arglist>(TD_ObsTime timeTag)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_TelemetryDestination</type>
      <name>getDestination</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>setApplicationId</name>
      <anchor>e0</anchor>
      <arglist>(TD_APID apid)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>TD_PUSPacketId</type>
      <name>getPacketId</name>
      <anchor>e1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>TD_TelemetryDestination</type>
      <name>getDefaultDestination</name>
      <anchor>e2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>setDefaultDestination</name>
      <anchor>e3</anchor>
      <arglist>(TD_TelemetryDestination defDest)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>void</type>
      <name>setObsClock</name>
      <anchor>e4</anchor>
      <arglist>(ObsClock *pObsClock)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>ObsClock *</type>
      <name>getObsClock</name>
      <anchor>e5</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RangeProfile</name>
    <filename>classRangeProfile.html</filename>
    <base>MonitoringProfile</base>
    <member kind="function">
      <type></type>
      <name>RangeProfile</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLowerBound</name>
      <anchor>a1</anchor>
      <arglist>(TD_Float lowerBound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpperBound</name>
      <anchor>a2</anchor>
      <arglist>(TD_Float upperBound)</arglist>
    </member>
    <member kind="function">
      <type>TD_Float</type>
      <name>getLowerBound</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>TD_Float</type>
      <name>getUpperBound</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>doProfileCheck</name>
      <anchor>b0</anchor>
      <arglist>(TD_Integer value)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>doProfileCheck</name>
      <anchor>b1</anchor>
      <arglist>(TD_Float value)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RecoveryAction</name>
    <filename>classRecoveryAction.html</filename>
    <base>PunctualAction</base>
    <member kind="function">
      <type></type>
      <name>RecoveryAction</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNextRecoveryAction</name>
      <anchor>a1</anchor>
      <arglist>(RecoveryAction *pNextRecoveryAction)</arglist>
    </member>
    <member kind="function">
      <type>RecoveryAction *</type>
      <name>getNextRecoveryAction</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TD_ActionOutcome</type>
      <name>doAction</name>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>canExecute</name>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual TD_ActionOutcome</type>
      <name>doRecoveryAction</name>
      <anchor>b2</anchor>
      <arglist>(void)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StructuredTelemetryPacket</name>
    <filename>classStructuredTelemetryPacket.html</filename>
    <base>TelemetryPacket</base>
    <member kind="function">
      <type></type>
      <name>StructuredTelemetryPacket</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfBytes</name>
      <anchor>a1</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getNumberOfBytes</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char</type>
      <name>getUnsignedByte</name>
      <anchor>a3</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchor>a4</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>getUnsignedShort</name>
      <anchor>a5</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getUnsignedInt</name>
      <anchor>a6</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setUnsignedByte</name>
      <anchor>b0</anchor>
      <arglist>(unsigned int index, unsigned char d)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setUnsignedShort</name>
      <anchor>b1</anchor>
      <arglist>(unsigned int index, unsigned short d)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setUnsignedInt</name>
      <anchor>b2</anchor>
      <arglist>(unsigned int index, unsigned int d)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Telecommand</name>
    <filename>classTelecommand.html</filename>
    <base>PunctualAction</base>
    <member kind="function">
      <type></type>
      <name>Telecommand</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isValid</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_CheckCode</type>
      <name>getValidityCheckCode</name>
      <anchor>a2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canExecute</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_CheckCode</type>
      <name>getExecutionCheckCode</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_TelecommandId</type>
      <name>getTelecommandId</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTelecommandId</name>
      <anchor>a6</anchor>
      <arglist>(TD_TelecommandId tcIdentifier)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_TelecommandType</type>
      <name>getType</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setType</name>
      <anchor>a8</anchor>
      <arglist>(TD_TelecommandType tcType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_TelecommandSubType</type>
      <name>getSubType</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSubType</name>
      <anchor>a10</anchor>
      <arglist>(TD_TelecommandSubType tcSubType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_TelecommandSource</type>
      <name>getSource</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSource</name>
      <anchor>a12</anchor>
      <arglist>(TD_TelecommandSource tcSource)</arglist>
    </member>
    <member kind="function">
      <type>TD_ObsTime</type>
      <name>getTimeTag</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimeTag</name>
      <anchor>a14</anchor>
      <arglist>(TD_ObsTime timeTag)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRawData</name>
      <anchor>a15</anchor>
      <arglist>(unsigned int i, unsigned char d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getNumberOfRawData</name>
      <anchor>a16</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRawData</name>
      <anchor>a17</anchor>
      <arglist>(unsigned char *d, unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInUse</name>
      <anchor>a18</anchor>
      <arglist>(bool newInUse)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInUse</name>
      <anchor>a19</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAcknowledgeLevel</name>
      <anchor>a20</anchor>
      <arglist>(TD_TelecommandAck ackLevel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_TelecommandAck</type>
      <name>getAcknowledgeLevel</name>
      <anchor>a21</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a22</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TelecommandLoader</name>
    <filename>classTelecommandLoader.html</filename>
    <base>CC_RootObject</base>
    <member kind="function">
      <type></type>
      <name>TelecommandLoader</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>activate</name>
      <anchor>a1</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>release</name>
      <anchor>a2</anchor>
      <arglist>(Telecommand *pTelecommand)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTelecommandManager</name>
      <anchor>a3</anchor>
      <arglist>(CC_TelecommandManager *pTcManager)</arglist>
    </member>
    <member kind="function">
      <type>CC_TelecommandManager *</type>
      <name>getTelecommandManager</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TelemetryListModeManager</name>
    <filename>classTelemetryListModeManager.html</filename>
    <base>TelemetryModeManager</base>
    <member kind="function" virtualness="virtual">
      <type>virtual TelemetryPacket *</type>
      <name>getIterationTelemetryPacket</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setListItem</name>
      <anchor>a1</anchor>
      <arglist>(unsigned int n, unsigned int pos, TelemetryPacket *pItem)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TelemetryListModeManager</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setListLength</name>
      <anchor>a3</anchor>
      <arglist>(unsigned int n, unsigned int length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>first</name>
      <anchor>a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchor>a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isIterationFinished</name>
      <anchor>a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isObjectConfigured</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>allocateMemory</name>
      <anchor>b0</anchor>
      <arglist>(TD_Mode numberOfModes)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TelemetryModeManager</name>
    <filename>classTelemetryModeManager.html</filename>
    <base>ModeManager</base>
    <member kind="function">
      <type></type>
      <name>TelemetryModeManager</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>first</name>
      <anchor>a1</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>next</name>
      <anchor>a2</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isIterationFinished</name>
      <anchor>a3</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TelemetryPacket *</type>
      <name>getIterationTelemetryPacket</name>
      <anchor>a4</anchor>
      <arglist>(void)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TelemetryPacket</name>
    <filename>classTelemetryPacket.html</filename>
    <base>CC_RootObject</base>
    <member kind="function">
      <type></type>
      <name>TelemetryPacket</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setType</name>
      <anchor>a1</anchor>
      <arglist>(TD_TelemetryType tmType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSubType</name>
      <anchor>a2</anchor>
      <arglist>(TD_TelemetrySubType tmSubType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTimeTag</name>
      <anchor>a3</anchor>
      <arglist>(TD_ObsTime timeTag)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestination</name>
      <anchor>a4</anchor>
      <arglist>(TD_TelemetryDestination tmDest)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>getNumberOfBytes</name>
      <anchor>a5</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchor>a6</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isValid</name>
      <anchor>a7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned char</type>
      <name>getUnsignedByte</name>
      <anchor>a8</anchor>
      <arglist>(unsigned int n)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned char *</type>
      <name>getStartAddress</name>
      <anchor>a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFastAcquisitionImplemented</name>
      <anchor>a10</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_TelemetryType</type>
      <name>getType</name>
      <anchor>a11</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_TelemetrySubType</type>
      <name>getSubType</name>
      <anchor>a12</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_ObsTime</type>
      <name>getTimeTag</name>
      <anchor>a13</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TD_TelemetryDestination</type>
      <name>getDestination</name>
      <anchor>a14</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInUse</name>
      <anchor>a15</anchor>
      <arglist>(bool newInUse)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInUse</name>
      <anchor>a16</anchor>
      <arglist>(void) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TelemetryStream</name>
    <filename>classTelemetryStream.html</filename>
    <base>CC_RootObject</base>
    <member kind="function">
      <type></type>
      <name>TelemetryStream</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>flush</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getCapacity</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>doesPacketFit</name>
      <anchor>a4</anchor>
      <arglist>(TelemetryPacket *pTmPacket)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>write</name>
      <anchor>a5</anchor>
      <arglist>(TelemetryPacket *tmItem)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCase</name>
    <filename>classTestCase.html</filename>
    <member kind="function">
      <type></type>
      <name>TestCase</name>
      <anchor>a0</anchor>
      <arglist>(int testId, char *testName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setUpTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a2</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>shutDownTestCase</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>getTestName</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getTestOutcome</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>getTestMessage</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setTestResult</name>
      <anchor>b0</anchor>
      <arglist>(bool outcome, char *testMessage)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isNonNominalCheckAllowed</name>
      <anchor>b1</anchor>
      <arglist>(void) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseBasicDatabase_1</name>
    <filename>classTestCaseBasicDatabase__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseBasicDatabase_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseBasicDataPool_1</name>
    <filename>classTestCaseBasicDataPool__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseBasicDataPool_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseBasicPUSTcLoader_1</name>
    <filename>classTestCaseBasicPUSTcLoader__1.html</filename>
    <base>TestCasePUSFull</base>
    <member kind="function">
      <type></type>
      <name>TestCaseBasicPUSTcLoader_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeTcHeader</name>
      <anchor>a2</anchor>
      <arglist>(unsigned int start, unsigned short packetID, unsigned short packetSeqControl, unsigned short packetLength, unsigned char ackField, unsigned char tcType, unsigned char tcSubType, TD_TelecommandSource tcSource)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeTcData</name>
      <anchor>a3</anchor>
      <arglist>(unsigned int start, unsigned int execCounter, bool execCheckVal, bool valCheckVal, TD_CheckCode execCheckCode, TD_CheckCode valCheckCode, bool execOutcome)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkTcConfig</name>
      <anchor>a4</anchor>
      <arglist>(DC_TestPUSTelecommand *pTC, unsigned short packetID, unsigned short packetSeqControl, unsigned char ackField, TD_TelecommandSource tcSource, unsigned int execCounter, bool execCheckVal, bool valCheckVal, TD_CheckCode execCheckCode, TD_CheckCode valCheckCode, bool execOutcome)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseBasicPUSTmStream_1</name>
    <filename>classTestCaseBasicPUSTmStream__1.html</filename>
    <base>TestCaseWithFactories</base>
    <member kind="function">
      <type></type>
      <name>TestCaseBasicPUSTmStream_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkTmImage</name>
      <anchor>a2</anchor>
      <arglist>(unsigned int start, unsigned char value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseBasicReconfigurer_1</name>
    <filename>classTestCaseBasicReconfigurer__1.html</filename>
    <base>TestCaseWithEvtCheck</base>
    <member kind="function">
      <type></type>
      <name>TestCaseBasicReconfigurer_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseByteArrayTelemetryStream_1</name>
    <filename>classTestCaseByteArrayTelemetryStream__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseByteArrayTelemetryStream_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseChecksum_1</name>
    <filename>classTestCaseChecksum__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseChecksum_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseControlAction_1</name>
    <filename>classTestCaseControlAction__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseControlAction_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseControlList_1</name>
    <filename>classTestCaseControlList__1.html</filename>
    <base>TestCaseWithEvtCheck</base>
    <member kind="function">
      <type></type>
      <name>TestCaseControlList_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseCycleDataItem16TmStream_1</name>
    <filename>classTestCaseCycleDataItem16TmStream__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseCycleDataItem16TmStream_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseCyclingPunctualActionModeManager_1</name>
    <filename>classTestCaseCyclingPunctualActionModeManager__1.html</filename>
    <base>TestCaseWithEvtCheck</base>
    <member kind="function">
      <type></type>
      <name>TestCaseCyclingPunctualActionModeManager_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseCyclingTelemetryModeManager_1</name>
    <filename>classTestCaseCyclingTelemetryModeManager__1.html</filename>
    <base>TestCaseWithEvtCheck</base>
    <member kind="function">
      <type></type>
      <name>TestCaseCyclingTelemetryModeManager_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseDataItem16TmWord_1</name>
    <filename>classTestCaseDataItem16TmWord__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseDataItem16TmWord_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseDataItem_1</name>
    <filename>classTestCaseDataItem__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseDataItem_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseDataPoolMonitor_1</name>
    <filename>classTestCaseDataPoolMonitor__1.html</filename>
    <base>TestCaseWithEvtCheck</base>
    <member kind="function">
      <type></type>
      <name>TestCaseDataPoolMonitor_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseDeltaProfile_1</name>
    <filename>classTestCaseDeltaProfile__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseDeltaProfile_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseDummyConditionalPunctualAction_1</name>
    <filename>classTestCaseDummyConditionalPunctualAction__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseDummyConditionalPunctualAction_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseDummyConfigurableManoeuvre_1</name>
    <filename>classTestCaseDummyConfigurableManoeuvre__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseDummyConfigurableManoeuvre_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseDummyCopyControlBlock_1</name>
    <filename>classTestCaseDummyCopyControlBlock__1.html</filename>
    <base>TestCaseWithEvtCheck</base>
    <member kind="function">
      <type></type>
      <name>TestCaseDummyCopyControlBlock_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseDummyCriticalTelecommand_1</name>
    <filename>classTestCaseDummyCriticalTelecommand__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseDummyCriticalTelecommand_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseDummyCriticalTelecommand_2</name>
    <filename>classTestCaseDummyCriticalTelecommand__2.html</filename>
    <base>TestCaseWithEvtCheck</base>
    <member kind="function">
      <type></type>
      <name>TestCaseDummyCriticalTelecommand_2</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseDummyDatabase_1</name>
    <filename>classTestCaseDummyDatabase__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseDummyDatabase_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseDummyDataItemControlBlock_1</name>
    <filename>classTestCaseDummyDataItemControlBlock__1.html</filename>
    <base>TestCaseWithEvtCheck</base>
    <member kind="function">
      <type></type>
      <name>TestCaseDummyDataItemControlBlock_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseDummyDataPool_1</name>
    <filename>classTestCaseDummyDataPool__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseDummyDataPool_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseDummyDataPoolControlBlock_1</name>
    <filename>classTestCaseDummyDataPoolControlBlock__1.html</filename>
    <base>TestCaseWithEvtCheck</base>
    <member kind="function">
      <type></type>
      <name>TestCaseDummyDataPoolControlBlock_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseDummyFsmState_1</name>
    <filename>classTestCaseDummyFsmState__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseDummyFsmState_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseDummyManoeuvre_1</name>
    <filename>classTestCaseDummyManoeuvre__1.html</filename>
    <base>TestCaseWithEvtCheck</base>
    <member kind="function">
      <type></type>
      <name>TestCaseDummyManoeuvre_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseDummyModeManager_1</name>
    <filename>classTestCaseDummyModeManager__1.html</filename>
    <base>TestCaseWithEvtCheck</base>
    <member kind="function">
      <type></type>
      <name>TestCaseDummyModeManager_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseDummyObsClock_1</name>
    <filename>classTestCaseDummyObsClock__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseDummyObsClock_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseDummyPointerControlBlock_1</name>
    <filename>classTestCaseDummyPointerControlBlock__1.html</filename>
    <base>TestCaseWithEvtCheck</base>
    <member kind="function">
      <type></type>
      <name>TestCaseDummyPointerControlBlock_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseDummyPunctualAction_1</name>
    <filename>classTestCaseDummyPunctualAction__1.html</filename>
    <base>TestCaseWithEvtCheck</base>
    <member kind="function">
      <type></type>
      <name>TestCaseDummyPunctualAction_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseDummyPUSTelecommand_1</name>
    <filename>classTestCaseDummyPUSTelecommand__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseDummyPUSTelecommand_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseDummyPUSTelemetryPacket_1</name>
    <filename>classTestCaseDummyPUSTelemetryPacket__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseDummyPUSTelemetryPacket_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseDummyTelecommand_1</name>
    <filename>classTestCaseDummyTelecommand__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseDummyTelecommand_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseDummyTelecommandLoader_1</name>
    <filename>classTestCaseDummyTelecommandLoader__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseDummyTelecommandLoader_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseDummyTelemetryPacket_1</name>
    <filename>classTestCaseDummyTelemetryPacket__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseDummyTelemetryPacket_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseDummyTelemetryStream_1</name>
    <filename>classTestCaseDummyTelemetryStream__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseDummyTelemetryStream_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseDummyTracer_1</name>
    <filename>classTestCaseDummyTracer__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseDummyTracer_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseEvent_1</name>
    <filename>classTestCaseEvent__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseEvent_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseEventRepository_1</name>
    <filename>classTestCaseEventRepository__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseEventRepository_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseEventRepository_2</name>
    <filename>classTestCaseEventRepository__2.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseEventRepository_2</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseEventRepository_3</name>
    <filename>classTestCaseEventRepository__3.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseEventRepository_3</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseFdirCheck_1</name>
    <filename>classTestCaseFdirCheck__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseFdirCheck_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseFileTelemetryStream_1</name>
    <filename>classTestCaseFileTelemetryStream__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseFileTelemetryStream_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseFileTelemetryStream_2</name>
    <filename>classTestCaseFileTelemetryStream__2.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseFileTelemetryStream_2</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseForbiddenValueProfile_1</name>
    <filename>classTestCaseForbiddenValueProfile__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseForbiddenValueProfile_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseFromFsmEvent_1</name>
    <filename>classTestCaseFromFsmEvent__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseFromFsmEvent_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseFSM_1</name>
    <filename>classTestCaseFSM__1.html</filename>
    <base>TestCaseWithEvtCheck</base>
    <member kind="function">
      <type></type>
      <name>TestCaseFSM_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseFSM_2</name>
    <filename>classTestCaseFSM__2.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseFSM_2</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseFSM_3</name>
    <filename>classTestCaseFSM__3.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseFSM_3</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseFsmEvent_1</name>
    <filename>classTestCaseFsmEvent__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseFsmEvent_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseGenericSetUp</name>
    <filename>classTestCaseGenericSetUp.html</filename>
    <base>TestCase</base>
    <member kind="function">
      <type></type>
      <name>TestCaseGenericSetUp</name>
      <anchor>a0</anchor>
      <arglist>(int testId, char *testName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setUpTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>shutDownTestCase</name>
      <anchor>a3</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseInRangeProfile_1</name>
    <filename>classTestCaseInRangeProfile__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseInRangeProfile_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseIntStack_1</name>
    <filename>classTestCaseIntStack__1.html</filename>
    <base>TestCaseWithEvtCheck</base>
    <member kind="function">
      <type></type>
      <name>TestCaseIntStack_1</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseManoeuvreManager_1</name>
    <filename>classTestCaseManoeuvreManager__1.html</filename>
    <base>TestCaseWithEvtCheck</base>
    <member kind="function">
      <type></type>
      <name>TestCaseManoeuvreManager_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseManoeuvreManager_2</name>
    <filename>classTestCaseManoeuvreManager__2.html</filename>
    <base>TestCaseWithEvtCheck</base>
    <member kind="function">
      <type></type>
      <name>TestCaseManoeuvreManager_2</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseManoeuvreManager_3</name>
    <filename>classTestCaseManoeuvreManager__3.html</filename>
    <base>TestCaseWithEvtCheck</base>
    <member kind="function">
      <type></type>
      <name>TestCaseManoeuvreManager_3</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseManoeuvrePunctualAction_1</name>
    <filename>classTestCaseManoeuvrePunctualAction__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseManoeuvrePunctualAction_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseMatlabCopyPID_1</name>
    <filename>classTestCaseMatlabCopyPID__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseMatlabCopyPID_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseMatlabDataItemPID_1</name>
    <filename>classTestCaseMatlabDataItemPID__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseMatlabDataItemPID_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseMatlabDataPoolPID_1</name>
    <filename>classTestCaseMatlabDataPoolPID__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseMatlabDataPoolPID_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseMatlabPointerPID_1</name>
    <filename>classTestCaseMatlabPointerPID__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseMatlabPointerPID_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseNestedFsmActivator_1</name>
    <filename>classTestCaseNestedFsmActivator__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseNestedFsmActivator_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseNestedFsmActivatorWithEndState_1</name>
    <filename>classTestCaseNestedFsmActivatorWithEndState__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseNestedFsmActivatorWithEndState_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseNestedFsmActivatorWithExitCheck_1</name>
    <filename>classTestCaseNestedFsmActivatorWithExitCheck__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseNestedFsmActivatorWithExitCheck_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseNullProfile_1</name>
    <filename>classTestCaseNullProfile__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseNullProfile_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseOutOfRangeProfile_1</name>
    <filename>classTestCaseOutOfRangeProfile__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseOutOfRangeProfile_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseProfileList_1</name>
    <filename>classTestCaseProfileList__1.html</filename>
    <base>TestCaseWithEvtCheck</base>
    <member kind="function">
      <type></type>
      <name>TestCaseProfileList_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCasePunctualActionManager_1</name>
    <filename>classTestCasePunctualActionManager__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCasePunctualActionManager_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCasePUSClearDataReporting_1</name>
    <filename>classTestCasePUSClearDataReporting__1.html</filename>
    <base>TestCasePUSFull</base>
    <member kind="function">
      <type></type>
      <name>TestCasePUSClearDataReporting_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCasePUSControlDataReporting_1</name>
    <filename>classTestCasePUSControlDataReporting__1.html</filename>
    <base>TestCaseWithFactories</base>
    <member kind="function">
      <type></type>
      <name>TestCasePUSControlDataReporting_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCasePUSDataReportingPacket_1</name>
    <filename>classTestCasePUSDataReportingPacket__1.html</filename>
    <base>TestCaseWithEvtCheck</base>
    <member kind="function">
      <type></type>
      <name>TestCasePUSDataReportingPacket_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCasePUSDataReportingPacket_2</name>
    <filename>classTestCasePUSDataReportingPacket__2.html</filename>
    <base>TestCaseWithEvtCheck</base>
    <member kind="function">
      <type></type>
      <name>TestCasePUSDataReportingPacket_2</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCasePUSDataReportingPacket_3</name>
    <filename>classTestCasePUSDataReportingPacket__3.html</filename>
    <base>TestCaseWithEvtCheck</base>
    <member kind="function">
      <type></type>
      <name>TestCasePUSDataReportingPacket_3</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCasePUSEventRepository_1</name>
    <filename>classTestCasePUSEventRepository__1.html</filename>
    <base>TestCasePUSFull</base>
    <member kind="function">
      <type></type>
      <name>TestCasePUSEventRepository_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkTmPacket</name>
      <anchor>a2</anchor>
      <arglist>(DC_PUSEventRepository *pEvtRep, TD_TelemetrySubType tmSubType, TD_TelecommandId tcId, TD_ObsTime tt, TD_CheckCode errCode)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkNoTmPacket</name>
      <anchor>a3</anchor>
      <arglist>(DC_PUSEventRepository *pEvtRep)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCasePUSFull</name>
    <filename>classTestCasePUSFull.html</filename>
    <base>TestCaseWithFactories</base>
    <member kind="function">
      <type></type>
      <name>TestCasePUSFull</name>
      <anchor>a0</anchor>
      <arglist>(int testId, char *testName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setUpTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>shutDownTestCase</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>CC_TelecommandManager *</type>
      <name>getTelecommandManager</name>
      <anchor>a3</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>CC_TelemetryManager *</type>
      <name>getTelemetryManager</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>DC_PUSTelemetryModeManager *</type>
      <name>getTelemetryModeManager</name>
      <anchor>a5</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>CC_ManoeuvreManager *</type>
      <name>getManoeuvreManager</name>
      <anchor>a6</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>DC_BasicPUSTcLoader *</type>
      <name>getTcLoader</name>
      <anchor>a7</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>DC_PUSTmLogger *</type>
      <name>getTmStream</name>
      <anchor>a8</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>DC_DummyObsClock *</type>
      <name>getObsClock</name>
      <anchor>a9</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>DC_PUSEventRepository *</type>
      <name>getEventRepository</name>
      <anchor>a10</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeTestPUSTelecommand</name>
      <anchor>a11</anchor>
      <arglist>(unsigned char ackField, unsigned int execCounter, bool execCheckVal, bool valCheckVal, TD_CheckCode execCheckCode, TD_CheckCode valCheckCode, bool execOutcome, unsigned short packetSeqControl)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writePUSDefineDataReporting</name>
      <anchor>a12</anchor>
      <arglist>(unsigned char ackField, TD_PUSCollectionInterval collectionInterval, TD_SID sid, TD_DataPoolId par, unsigned short packetSeqControl, TD_TelecommandSubType tcSubType)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writePUSDataReportingControl</name>
      <anchor>a13</anchor>
      <arglist>(unsigned char ackField, unsigned char NSID, TD_SID *sid, TD_TelecommandSubType tcSubType, unsigned short packetSeqControl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetCommandLoadArea</name>
      <anchor>a14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeTcHeader</name>
      <anchor>b0</anchor>
      <arglist>(unsigned short length, unsigned short packetSeqControl)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCasePUSMemoryDumpOffset_1</name>
    <filename>classTestCasePUSMemoryDumpOffset__1.html</filename>
    <base>TestCaseWithEvtCheck</base>
    <member kind="function">
      <type></type>
      <name>TestCasePUSMemoryDumpOffset_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCasePUSMemoryLoadAbsolute_1</name>
    <filename>classTestCasePUSMemoryLoadAbsolute__1.html</filename>
    <base>TestCaseWithEvtCheck</base>
    <member kind="function">
      <type></type>
      <name>TestCasePUSMemoryLoadAbsolute_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCasePUSMemoryLoadOffset_1</name>
    <filename>classTestCasePUSMemoryLoadOffset__1.html</filename>
    <base>TestCaseWithEvtCheck</base>
    <member kind="function">
      <type></type>
      <name>TestCasePUSMemoryLoadOffset_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCasePUSMemoryLoadOffset_2</name>
    <filename>classTestCasePUSMemoryLoadOffset__2.html</filename>
    <base>TestCaseWithEvtCheck</base>
    <member kind="function">
      <type></type>
      <name>TestCasePUSMemoryLoadOffset_2</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCasePUSTelemetryModeManager_1</name>
    <filename>classTestCasePUSTelemetryModeManager__1.html</filename>
    <base>TestCasePUSFull</base>
    <member kind="function">
      <type></type>
      <name>TestCasePUSTelemetryModeManager_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseRawDataItem_1</name>
    <filename>classTestCaseRawDataItem__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseRawDataItem_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseRecoveryAction_1</name>
    <filename>classTestCaseRecoveryAction__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseRecoveryAction_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseRootObject_1</name>
    <filename>classTestCaseRootObject__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseRootObject_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseRootObject_2</name>
    <filename>classTestCaseRootObject__2.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseRootObject_2</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseRootObject_3</name>
    <filename>classTestCaseRootObject__3.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseRootObject_3</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseRootObjectStack_1</name>
    <filename>classTestCaseRootObjectStack__1.html</filename>
    <base>TestCaseWithEvtCheck</base>
    <member kind="function">
      <type></type>
      <name>TestCaseRootObjectStack_1</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseSampleFullDataPool_1</name>
    <filename>classTestCaseSampleFullDataPool__1.html</filename>
    <base>TestCaseWithEvtCheck</base>
    <member kind="function">
      <type></type>
      <name>TestCaseSampleFullDataPool_1</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseSampleMonitoredDataPool_1</name>
    <filename>classTestCaseSampleMonitoredDataPool__1.html</filename>
    <base>TestCaseWithEvtCheck</base>
    <member kind="function">
      <type></type>
      <name>TestCaseSampleMonitoredDataPool_1</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseSampleR1Database_1</name>
    <filename>classTestCaseSampleR1Database__1.html</filename>
    <base>TestCaseWithEvtCheck</base>
    <member kind="function">
      <type></type>
      <name>TestCaseSampleR1Database_1</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseSampleR2Database_1</name>
    <filename>classTestCaseSampleR2Database__1.html</filename>
    <base>TestCaseWithEvtCheck</base>
    <member kind="function">
      <type></type>
      <name>TestCaseSampleR2Database_1</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseSampleR3Database_1</name>
    <filename>classTestCaseSampleR3Database__1.html</filename>
    <base>TestCaseWithEvtCheck</base>
    <member kind="function">
      <type></type>
      <name>TestCaseSampleR3Database_1</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseSimpleChangeProfile_1</name>
    <filename>classTestCaseSimpleChangeProfile__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseSimpleChangeProfile_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseSimplePunctualActionModeManager_1</name>
    <filename>classTestCaseSimplePunctualActionModeManager__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseSimplePunctualActionModeManager_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseSimpleTelemetryModeManager_1</name>
    <filename>classTestCaseSimpleTelemetryModeManager__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseSimpleTelemetryModeManager_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseStuckDataProfile_1</name>
    <filename>classTestCaseStuckDataProfile__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseStuckDataProfile_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseTelecommandManager_1</name>
    <filename>classTestCaseTelecommandManager__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseTelecommandManager_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseTelecommandManager_2</name>
    <filename>classTestCaseTelecommandManager__2.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseTelecommandManager_2</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseTelecommandManager_3</name>
    <filename>classTestCaseTelecommandManager__3.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseTelecommandManager_3</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseTelemetryManager_1</name>
    <filename>classTestCaseTelemetryManager__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseTelemetryManager_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseTelemetryManager_2</name>
    <filename>classTestCaseTelemetryManager__2.html</filename>
    <base>TestCaseWithEvtCheck</base>
    <member kind="function">
      <type></type>
      <name>TestCaseTelemetryManager_2</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseTestPUSConfigurableManoeuvre_1</name>
    <filename>classTestCaseTestPUSConfigurableManoeuvre__1.html</filename>
    <base>TestCaseWithEvtCheck</base>
    <member kind="function">
      <type></type>
      <name>TestCaseTestPUSConfigurableManoeuvre_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseTestTracer_1</name>
    <filename>classTestCaseTestTracer__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseTestTracer_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseUnstableFsmState_1</name>
    <filename>classTestCaseUnstableFsmState__1.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseUnstableFsmState_1</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseWithEvtCheck</name>
    <filename>classTestCaseWithEvtCheck.html</filename>
    <base>TestCaseGenericSetUp</base>
    <member kind="function">
      <type></type>
      <name>TestCaseWithEvtCheck</name>
      <anchor>a0</anchor>
      <arglist>(int testId, char *testName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setUpTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned int</type>
      <name>getNumberOfEvents</name>
      <anchor>b0</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned int</type>
      <name>getEventRepositorySize</name>
      <anchor>b1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>verifyLatestEventHidden</name>
      <anchor>b2</anchor>
      <arglist>(const int line, const unsigned int nEvt, const TD_EventType eventType)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>verifySpecificEventHidden</name>
      <anchor>b3</anchor>
      <arglist>(const int line, const unsigned int n, const TD_EventType eventType)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCaseWithFactories</name>
    <filename>classTestCaseWithFactories.html</filename>
    <base>TestCaseWithEvtCheck</base>
    <member kind="function">
      <type></type>
      <name>TestCaseWithFactories</name>
      <anchor>a0</anchor>
      <arglist>(int testId, char *testName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setUpTestCase</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>shutDownTestCase</name>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestSuite</name>
    <filename>classTestSuite.html</filename>
    <member kind="function">
      <type></type>
      <name>TestSuite</name>
      <anchor>a0</anchor>
      <arglist>(FILE *out)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>runTestSuite</name>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadTestCase</name>
      <anchor>a2</anchor>
      <arglist>(TestCase *newTestCase)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Tracer</name>
    <filename>classTracer.html</filename>
    <base>CC_RootObject</base>
    <member kind="function">
      <type></type>
      <name>Tracer</name>
      <anchor>a0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendSynchTrace</name>
      <anchor>a1</anchor>
      <arglist>(TD_TraceItem traceId) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendPacketTrace</name>
      <anchor>a2</anchor>
      <arglist>(unsigned int n, TD_TraceItem traceData[]) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEnabled</name>
      <anchor>a3</anchor>
      <arglist>(bool isEnabled)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEnabled</name>
      <anchor>a4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>sendRawTrace</name>
      <anchor>b0</anchor>
      <arglist>(TD_TraceItem rawItem) const =0</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Base</name>
    <title>General Base Classes</title>
    <filename>group__Base.html</filename>
    <class kind="class">CC_RootObject</class>
    <class kind="class">ConditionalPunctualAction</class>
    <class kind="class">DC_BasicReconfigurer</class>
    <class kind="class">ModeManager</class>
    <class kind="class">PunctualAction</class>
    <class kind="class">PunctualActionListModeManager</class>
    <class kind="class">TelemetryListModeManager</class>
  </compound>
  <compound kind="group">
    <name>FunctionalityManagers</name>
    <title>Functionality Managers</title>
    <filename>group__FunctionalityManagers.html</filename>
    <class kind="class">CC_PunctualActionManager</class>
    <class kind="class">CC_ManoeuvreManager</class>
    <class kind="class">CC_TelecommandManager</class>
    <class kind="class">CC_TelemetryManager</class>
  </compound>
  <compound kind="group">
    <name>ModeManagement</name>
    <title>Mode Management</title>
    <filename>group__ModeManagement.html</filename>
    <class kind="class">ModeManager</class>
    <class kind="class">PunctualActionListModeManager</class>
    <class kind="class">PunctualActionModeManager</class>
    <class kind="class">TelemetryListModeManager</class>
    <class kind="class">TelemetryModeManager</class>
  </compound>
  <compound kind="group">
    <name>Manoeuvre</name>
    <title>Manoeuvre Management</title>
    <filename>group__Manoeuvre.html</filename>
    <class kind="class">CC_ManoeuvreFactory</class>
    <class kind="class">CC_ManoeuvreManager</class>
    <class kind="class">Manoeuvre</class>
    <class kind="class">PUSTcManoeuvre</class>
  </compound>
  <compound kind="group">
    <name>FSM</name>
    <title>Finite State Machines</title>
    <filename>group__FSM.html</filename>
    <class kind="class">CC_FSM</class>
    <class kind="class">DC_FsmEvent</class>
    <class kind="class">FsmState</class>
  </compound>
  <compound kind="group">
    <name>FDIR</name>
    <title>Fault Detection Identification and Recovery</title>
    <filename>group__FDIR.html</filename>
    <class kind="class">DC_FdirCheck</class>
    <class kind="class">MonitoringProfile</class>
    <class kind="class">RecoveryAction</class>
  </compound>
  <compound kind="group">
    <name>Data</name>
    <title>Data Processing</title>
    <filename>group__Data.html</filename>
    <class kind="class">ControlBlock</class>
    <class kind="class">CopyControlBlock</class>
    <class kind="class">DataItemControlBlock</class>
    <class kind="class">DataPool</class>
    <class kind="class">DataPoolControlBlock</class>
    <class kind="class">DC_ControlAction</class>
    <class kind="class">DC_DataItem</class>
    <class kind="class">ParameterDatabase</class>
    <class kind="class">PointerControlBlock</class>
  </compound>
  <compound kind="group">
    <name>Telecommand</name>
    <title>Telecommand Management</title>
    <filename>group__Telecommand.html</filename>
    <class kind="class">CC_TelecommandFactory</class>
    <class kind="class">CC_TelecommandManager</class>
    <class kind="class">CriticalTelecommand</class>
    <class kind="class">PUSTelecommand</class>
    <class kind="class">Telecommand</class>
    <class kind="class">TelecommandLoader</class>
  </compound>
  <compound kind="group">
    <name>Telemetry</name>
    <title>Telemetry Management</title>
    <filename>group__Telemetry.html</filename>
    <class kind="class">CC_TelemetryManager</class>
    <class kind="class">PUSTelemetryPacket</class>
    <class kind="class">StructuredTelemetryPacket</class>
    <class kind="class">TelemetryModeManager</class>
    <class kind="class">TelemetryPacket</class>
    <class kind="class">TelemetryStream</class>
  </compound>
  <compound kind="group">
    <name>PUS</name>
    <title>Packet Utilization Standard (PUS)</title>
    <filename>group__PUS.html</filename>
    <class kind="class">DC_PUSEventRepository</class>
    <class kind="class">PUSTcManoeuvre</class>
    <class kind="class">PUSTelecommand</class>
    <class kind="class">DC_PUSTelemetryModeManager</class>
    <class kind="class">PUSTelemetryPacket</class>
  </compound>
  <compound kind="group">
    <name>TestCases</name>
    <title>Test Case Support</title>
    <filename>group__TestCases.html</filename>
    <file>TestUtilities.h</file>
    <class kind="class">TestCase</class>
    <class kind="class">TestCaseGenericSetUp</class>
    <class kind="class">TestCasePUSFull</class>
    <class kind="class">TestCaseWithEvtCheck</class>
    <class kind="class">TestCaseWithFactories</class>
    <class kind="class">TestSuite</class>
  </compound>
</tagfile>
