<?xml version="1.0" encoding="ISO-8859-1"?>
<Chapter>
    <Title> Generator Meta-Components </Title>
    <Author>
        <Name> A. Pasetti </Name>
        <Affiliation>
            <a HREF="http://www.pnp-software.com">P&amp;P Software</a>
        </Affiliation>
        <EMail> pasetti@pnp-software.com </EMail>
    </Author>
    <LastModified> 2003-12-05 </LastModified>
    <Introduction>
        <p>Generator meta-components are one of the building blocks that are provided by the OBS
            Framework. They are introduced to automate the tailoring process whereby the assets
            provided by the framework are modified to match the needs of a target application (see
            the <a href="indexDevelopmentProcess.html" target="_parent">framework development
            process</a>). More specifically, two types of generator meta-components can be
            identified serving two purposes:</p>
        <ul>
            <li>
                <a href="#Instantiators">Instantiators</a> that generate application-specific
                implementations for the abstract interfaces provided by the framework</li>
            <li>
                <a href="#Configurers">Configurers</a> that automate the configuration of clusters
                of related components</li>
        </ul>
        <p>In the OBS Framework, generator meta-components are implemented as XSL programs that
            process a specification written in XML and generate either code for the
            application-specific component or the configuration code for the cluster of components.
            Their mode of operation is illustrated in the
            figure:<Figure>GeneratorMetaComponents_1</Figure> The code generation process is driven
            by a set of specifications that are expressed in an XML document. The OBS Framework uses
            as the XML-based specifications for the generator meta-components the <a
                href="indexModellingApproach.html#ApplicationModel">application model</a>. Since the
            application model is generated by instantiating the <a
                href="indexModellingApproach.html#FrameworkModel">framework model</a>, the generator
            meta-components help create an automated link from the framework model through the
            application specification down to the code of the target application.</p>
    </Introduction>
    <Section Title="Instantiators">
        <p>Generator meta-components that generate application-specific implementations for the
            abstract interfaces provided by the framework are called <i>instantiators</i>. Their
            mode of operation is illustrated in the next
            figure:<Figure>CodeGenerationPhilosophy</Figure> A base abstract class is provided by
            the framework and represent one of the framework <a HREF="indexAbstractInterfaces.html"
                target="_parent">abstract interfaces</a>. Code generation is used to construct
            application-specific components. Derivation from a framework abstract class ensures that
            the class thus generated is compatible with other framework classes.</p>
        <p>The code generation process for an application-specific component is illustrated in the
            next figure. The code generation is performed by a set of XSL programs that taken
            together implement the generator meta-component. The aim of the generation process is to
            construct a complete C++ class that implements the application-specific component. This
            consists as a minimum of one header file and one body file but may also include an
            <code>#include</code> file that defines variables and constants that are exported by the
            generated class. Additionally, in some cases, a test case class is also generated that
            can be added to the framework <a href="indexQualificationApproach.html#TestSuite">test
            suite</a> to test the generated class.<Figure>CodeGenerationProcess_1</Figure>
            <a href="InstantiatorGeneratorMeta-Components.html">This page</a> gives an overview of
            the instantiator meta-components currently provided by the OBS Framework.</p>
    </Section>
    <Section Title="Configurers">
        <p>In order to appreciate the rol of the configurer meta-components it is useful to divide
            the life of an application to be instantiated from the OBS Framework into two phases. In
            the <i>initialization phase</i>, all the components required by the target application
            are instantiated and configured. In the <i>operational phase</i>, the target application
            performs the function that users expects from it and that justify its existence. The
            configurer meta-components are concerned with the component configuration process in the
            former of these two phases. The component configuration process consists in executing a
            set of operations upon a given component to ready it for the operational phase. Typical
            configuration operations are the setting of property values and the composition of
            plug-in components.<p/> The configurer generator meta-components are responsible for
            configuring clusters of related components. They are implemented as XSL rules that are
            called by a master XSL program that is responsible for generating the initialization
            code of an application. The configurer meta-components contribute fragments of this
            initialization code in that each configurer meta-component covers the configuration of a
            set of logically related components. The OBS Framework currently provides a set of
            configurer meta-components that are described in greater detail in a <a
                href="ConfigurerGeneratorMeta-Components.html">dedicated page</a>.</p>
        <p>It should be noted that there is, in principle, one way to dispense with configurer
            meta-components. If a component meta-model were introduced to define the kind of
            operations that can be performed to instantiate components, to configure them, and to
            link them together (an example of such a meta-model is the JavaBeans standard), then it
            would be possible to have one generic meta-component that processes an application model
            and automatically generates all its initialization code. The adoption OBS Framework does
            not at present adopt this approach in full. This means that capturing the configuration
            process of tis components requires many distinct configurer meta-components. Future
            versions of the framework may be re-designed to comply with it and thus to avoid the
            need for configurer meta-components.</p>
    </Section>
</Chapter>
