<?xml version="1.0" encoding="ISO-8859-1"?>
<Chapter>
    <Title>PUS Services Implementation</Title>
    <Author>
        <Name> A. Pasetti </Name>
        <Affiliation>
            <a HREF="http://www.pnp-software.com">P&amp;P Software</a>
        </Affiliation>
        <EMail> pasetti@pnp-software.com </EMail>
    </Author>
    <LastModified> 2004-02-09 </LastModified>
    <Introduction>
        <p>This page describes the level of implementation of the PUS services in the OBS Framework.
            For each implemented service, a subsection in this page is provided that points to the
            OBS classes that implement the service. Detailed information about the degree of
            implementaion can be found in the class documentation. Finally, it should be noted that
            implementation of the PUS Services is currently on-going and more service
            implementations will be added in the near future.</p>
    </Introduction>
    <Section Title="Telecommand Verification Service">
        <p>This service is implemented in full. The telemetry packets that carry the telemetry
            verification information are implemented by class <cls>DC_PUSTcVerificationPacket</cls>.
            The mechanism for dispatchig telemetry verification packets is implemented on top of the
            standard <a href="DomainDictionaryEntries.html#EventRepository">event reporting
            mechanism</a> provided by the OBS Framework. The framework provides a class
            <cls>DC_PUSEventRepository</cls> that intercepts all telecommand-related event reports.
            This class analyses the event report and decides whether a telemetry verification packet
            should be configured and dispatched.</p>
    </Section>
    <Section Title="Housekeeping And Diagnostic Data Reporting Service">
        <p>This service is implemened in part as follows:</p>
        <ul>
            <li>Class <cls>DC_PUSDefineDataReporting</cls> implements the service to define new
                housekeeping or diagnostic data reports (subtype 1 and 2)</li>
            <li>Class <cls>DC_PUSClearDataReporting</cls> implements the service to clear
                housekeeping or diagnostic data report definitions (subtype 3 and 4)</li>
            <li>Class <cls>DC_PUSControlDataReporting</cls> implements the service to enable and
                disable housekeeping or diagnostic data report definitions (subtypes 5 to 8)</li>
            <li>Class <cls>DC_PUSDataReportingPacket</cls> implements the telemetry packets
                reporting the housekeeping or diagnostic data (subtype 25 and 26)</li>
        </ul>
    </Section>
    <Section Title="Memory Management Service">
        <p>This service is implemened in part as follows:</p>
        <ul>
            <li>Class <cls>DC_PUSMemoryLoadOffset</cls> implements the service to load data in
                memory using base plus offset (subtype 1)</li>
            <li>Class <cls>DC_PUSMemoryLoadAbsolute</cls> implements the service to load data in
                memory using absolute addresses (subtype 2)</li>
            <li>Class <cls>DC_PUSDumpMemoryOffset</cls> implements the service to command a memory
                dump using base plus offset (subtype 3)</li>
            <li>Class <cls>DC_PUSMemoryDumpOffset</cls> implements the service to perform a memory
                dump using base plus offset (subtype 4)</li>
            <li>Class <cls>DC_PUSDumpMemoryAbsolute</cls> implements the service to command a memory
                dump using absolute addresses (subtype 5)</li>
            <li>Class <cls>DC_PUSMemoryDumpAbsolute</cls> implements the service to perform a memory
                dump using absolute addresses (subtype 6)</li>
        </ul>
    </Section>
    <Section Title="Function Management Service">
        <p>This service is implemened in full. The telecommand concept implemented by the OBS
            Framework makes support for this service easy and natural since telecommand packets are
            translated into telecommand components (instances of class <cls>Telecommand</cls>) that
            can be executed by some external agent. Class <cls>PUSFunctionManagement</cls> is
            provided to define the type and subtype for this PUS service.</p>
    </Section>
</Chapter>
