<?xml version="1.0" encoding="ISO-8859-1"?>
<Chapter>
    <Title> Instantiator Generator Meta-Components </Title>
    <Author>
        <Name> A. Pasetti </Name>
        <Affiliation>
            <a HREF="http://www.pnp-software.com">P&amp;P Software</a>
        </Affiliation>
        <EMail> pasetti@pnp-software.com </EMail>
    </Author>
    <LastModified> 2003-08-09 </LastModified>
    <Introduction>
        <p>This page describes the <a
                href="indexGeneratorMeta-Components.html#Instantiators">instantiator generator
            meta-components</a> that are offered by the OBS Framework. The set of meta-components is
            currently being expanded and the offering in the future releases of the OBS Framework
            will be correspondingly larger.</p>
    </Introduction>
    <Section Title="Matlab Bridge">
        <p>The OBS Framework offers a "bridge" to code generated by the Real-Time Workshop facility
            of the <a href="http://www.mathworks.com">Matlab suite</a>. The objective is to allow
            users of the framework to integrate Matlab-generated code with the framework components.
            This Matlab bridge takes the form of a meta-component that generates a C++ class that
            acts as a wrapper for a Matlab-generated routine. It is assumed that Matlab would be
            used to model control algorithms or digital filters and hence the wrapper class is
            intended to represent an OBS Framework <a
                href="DomainDictionaryEntries.html#ControlBlock">control block</a>. It is therefore
            built as an extension of the abstract framework class <a href="doxygen/html/classControlBlock.html">
                <code>ControlBlock</code>
            </a>.</p>
        <p>The meta-component for the Matlab bridge is implemented by the following XSL programs:</p>
        <ul>
            <li>
                <a
                href="../src/xsl/GenerateMatlabWrapperHeader.xsl">GenerateMatlabWrapperHeader</a>:
                generation of the header file for the Matlab wrapper class.</li>
            <li>
                <a href="../src/xsl/GenerateMatlabWrapperBody.xsl">GenerateMatlabWrapperBody</a>:
                generation of the body file for the Matlab wrapper class.</li>
        </ul>
        <p>The Ant build file <a
            href="../scripts/runGeneratorMetaComponent.xml">runGeneratorMetaComponent</a> defines a
            target (<code>genMatlabWR</code>) to run the two programs in sequence.</p>
        <p>The XSL programs process an XML file (the <i>Matlab wrapper descriptor</i>) that
            describes the Matlab-generated code to be wrapped. Four examples of matlab wrapper
            classes generated by this meta-component and corresponding to four different link modes
            for the wrapper parameters are:</p>
        <ul>
            <li>Class <cls>DC_MatlabCopyPid</cls> generated from <a
                href="../src/xml/MatlabCopyPid.xml">this wrapper descriptor file</a>.</li>
            <li>Class <cls>DC_MatlabPointerPid</cls> generated from <a
                href="../src/xml/MatlabDataItemPid.xml">this wrapper descriptor file</a>.</li>
            <li>Class <cls>DC_MatlabDataItemPid</cls> generated from <a
                href="../src/xml/MatlabDataPoolPid.xml">this wrapper descriptor file</a>.</li>
            <li>Class <cls>DC_MatlabDataPoolPid</cls> generated from <a
                href="../src/xml/MatlabPointerPid.xml">this wrapper descriptor file</a>.</li>
        </ul>
        <p>Additionally, an <a href="indexModellingApproach.html#ApplicationModel">application feature
            model</a> can serve as input Matlab wrapper descriptor. The initial comment of the <a
            href="../src/xsl/GenerateMatlabWrapperHeader.xsl">GenerateMatlabWrapperHeader</a>
            program states the assumptions about the Matlab code generation process.</p>
    </Section>
    <Section Title="Indexed Parameter Database">
        <p>The OBS Framework defines an abstract class to encapsulate the concept of <a
                href="DomainDictionaryEntries.html#ParameterDatabase">parameter database</a>. The
            framework also offers a concrete implementation of this class representing a basic type
            of parameter database (see class<a href="doxygen/html/classDC__BasicDatabase.html">
                <code>DC_BasicDatabase</code>
            </a>. This generator meta-component allows a more sophisticated type of database class
            to be constructed. The database is more sophisticated in that it encapsulates a
            user-defined "database map" and in that it can offer varying levels of protection
            against illegal accesses to the database parameters. The price paid for the
            implementation of these features is a higher memory and execution time overhead than in
            the case of the default parameter database. The database map is defined by the designer
            who specifies the parameters to be modelled by the database, their synticatical type,
            and their relative position within the database. This meta-component can therefore
            directly transform a specification of the database into an implementation that complies
            with the framework interfaces and can therefore be integrated with other framework components.</p>
        <p>The meta-component for the indexed parameter database is implemented by the following XSL programs:</p>
        <ul>
            <li>
                <a
                href="../src/xsl/GenerateParameterDatabaseHeader.xsl">GenerateParameterDatabaserHeader</a>:
                generation of the header file for the parameter database class.</li>
            <li>
                <a
                href="../src/xsl/GenerateParameterDatabaseBody.xsl">GenerateParameterDatabaseBody</a>:
                generation of the body file for the parameter database class.</li>
            <li>
                <a
                href="../src/xsl/GenerateParameterDatabaseInclude.xsl">GenerateParameterDatabaseInclude</a>:
                generation of an <code>#include</code> that defines the symbolic constants to access
                the items in the parameter database.</li>
            <li>
                <a
                href="../src/xsl/GenerateParameterDatabaseTestCaseHeader.xsl">GenerateParameterDatabaseTestCaseHeader</a>:
                generation of the header file for the test case for the parameter database class.</li>
            <li>
                <a
                href="../src/xsl/GenerateParameterDatabaseTestCaseBody.xsl">GenerateParameterDatabaseTestCaseBody</a>:
                generation of the body file for the test case for the parameter database class.</li>
        </ul>
        <p>The Ant build file <a
            href="../scripts/runGeneratorMetaComponent.xml">runGeneratorMetaComponent</a> defines a
            target (<code>genParameterDatabase</code>) to run the above programs in sequence.</p>
        <p>The XSL programs process an XML file (the <i>parameter database descriptor file</i>) that
            describes the database map and specifies the desired level of robustness to illegal
            database accesses. An <a href="indexModellingApproach.html#ApplicationModel">application
                feature model</a> can serve as input parameter database descriptor file. Three
            examples of parameter database classes corresponding to three different levels of
            robutsness to illegal database accesses are:</p>
        <ul>
            <li>From the XML database descriptor <a
                href="../src/xml/SampleR1Database.xml">SampleParameterDbR1</a> the parameter
                database class<a href="doxygen/html/classDC__SampleR1Database.html">
                    <code>DC_SampleParameterDbR1</code>
                </a> and the test class<a href="doxygen/html/classTestCaseSampleR1Database__1.html">
                    <code>TestCaseSampleParameterDbR1_1</code>
                </a> are generated.</li>.<li>From the XML database descriptor <a
                href="../src/xml/SampleR2Database.xml">SampleParameterDbR2</a> the parameter
                database class<a href="doxygen/html/classDC__SampleR2Database.html">
                    <code>DC_SampleParameterDbR2</code>
                </a> and the test class<a href="doxygen/html/classTestCaseSampleR2Database__1.html">
                    <code>TestCaseSampleParameterDbR2_1</code>
                </a> are generated.</li>.<li>From the XML database descriptor <a
                href="../src/xml/SampleR3Database.xml">SampleParameterDbR3</a> the parameter
                database class<a href="doxygen/html/classDC__SampleR3Database.html">
                    <code>DC_SampleParameterDbR3</code>
                </a> and the test class<a href="doxygen/html/classTestCaseSampleR3Database__1.html">
                    <code>TestCaseSampleParameterDbR3_1</code>
                </a> are generated.</li>.</ul>
    </Section>
    <Section Title="Indexed Data Pool">
        <p>The OBS Framework defines an abstract class to encapsulate the concept of <a
                href="DomainDictionaryEntries.html#DataPool">data pool</a>. The framework also
            offers a concrete implementation of this class representing a basic type of data pool
            (see class<a href="doxygen/html/classDC__BasicDataPool.html">
                <code>DC_BasicDataPool</code>
            </a>. This generator meta-component allows a more sophisticated type of data pool class
            to be constructed. The data pool is more sophisticated in that it allows the designer to
            specify the "data pool map" and to specify the attributes of the items in the data pool.
            The price paid for the implementation of these features is a higher memory and execution
            time overhead than in the case of the default data pool. The data pool map is defined by
            the designer who specifies the items to be contained in the data pool and their
            syntactical type. This meta-component can therefore directly transform a specification
            of the data pool into an implementation that complies with the framework interfaces and
            can therefore be integrated with other framework components.</p>
        <p>The meta-component for the indexed data pool is implemented by the following XSL programs:</p>
        <ul>
            <li>
                <a href="../src/xsl/GenerateDataPoolHeader.xsl">GenerateDataPoolHeader</a>:
                generation of the header file for the data pool class.</li>
            <li>
                <a href="../src/xsl/GenerateDataPoolBody.xsl">GenerateDataPoolBody</a>: generation
                of the body file for the data pool class.</li>
            <li>
                <a href="../src/xsl/GenerateDataPoolInclude.xsl">GenerateDataPoolInclude</a>:
                generation of an <code>#include</code> that defines the symbolic constants to access
                the items in the data pool.</li>
            <li>
                <a
                href="../src/xsl/GenerateDataPoolTestCaseHeader.xsl">GenerateDataPoolTestCaseHeader</a>:
                generation of the header file for the test case for the data pool class.</li>
            <li>
                <a
                href="../src/xsl/GenerateDataPoolTestCaseBody.xsl">GenerateDataPoolTestCaseBody</a>:
                generation of the body file for the test case for the data pool class.</li>
        </ul>
        <p>The Ant build file <a
            href="../scripts/runGeneratorMetaComponent.xml">runGeneratorMetaComponent</a> defines a
            target (<code>genDatapool</code>) to run the above programs in sequence.</p>
        <p>The XSL programs process an XML file (the <i>datapool descriptor file</i>) that describes
            the datapool and specifies the desired level of robustness to illegal database accesses.
            An <a href="indexModellingApproach.html#ApplicationModel">application feature model</a> can
            serve as input datapool descriptor file. Two examples of data pool classes corresponding
            to two different sets of data pool attributes are:</p>
        <ul>
            <li>From the XML database descriptor <a
                href="../src/xml/SampleFullDataPool.xml">SampleFullDataPool</a> the data pool
                    class<a href="doxygen/html/classDC__SampleFullDataPool.html">
                    <code>DC_SampleFullDataPool</code>
                </a> and the test class<a href="doxygen/html/classTestCaseSampleFullDataPool__1.html">
                    <code>TestCaseSampleFullDataPool_1</code>
                </a> are generated.</li>.<li>From the XML database descriptor <a
                href="../src/xml/SampleMonitoredDataPool.xml">SampleMonitoredDataPool</a> the
                datapool class<a href="doxygen/html/classDC__SampleMonitoredDataPool.html">
                    <code>DC_SampleMonitoredDataPool</code>
                </a> and the test class <a href="doxygen/html/classTestCaseSampleMonitoredDataPool__1.html">
                    <code>TestCaseSampleMonitoredDataPool_1</code>
                </a> are generated.</li>.</ul>
    </Section>
    <Section Title="Dynamic Factories">
        <p>The OBS Framework uses <i>dynamic factories</i> to emulate dynamic object creation at run
            time in a manner that is compatible with real-time constraints. The OBS Framework
            provides three types of dynamic factories:</p>
        <ul>
            <li>The <i>telemetry packet factory</i> to provide components that encapsulate telemetry
                packets (instances of abstract class<a href="doxygen/html/classTelemetryPacket.html">
                    <code>TelemetryPacket</code>
                </a>)</li>
            <li>The <i>telecommand factory</i> to provide components that encapsulate telecommands
                (instances of abstract class<a href="doxygen/html/classTelecommand.html">
                    <code>Telecommand</code>
                </a>)</li>
            <li>The <i>manoeuvre factory</i> to provide components that encapsulate telecommands
                (instances of abstract class<a href="doxygen/html/classManoeuvre.html">
                    <code>Manoeuvre</code>
                </a>)</li>
        </ul>
        <p>Dynamic factories must be tailored to the specific types of the items they provide and to
            the number of items of each type that they provide. The OBS Framework provides a
            generator meta-component to generate the dynamic factories. This meta-component is
            implemented by the following XSL programs:</p>
        <ul>
            <li>
                <a
                href="../src/xsl/GenerateDynamicFactoryHeader.xsl">GenerateDynamicFactoryHeader</a>:
                generation of the header file for the dynamic factory.</li>
            <li>
                <a href="../src/xsl/GenerateDynamicFactoryBody.xsl">GenerateDynamicFactoryBody</a>:
                generation of the body file for the dynamic factory.</li>
        </ul>
        <p>The Ant build file <a
            href="../scripts/runGeneratorMetaComponent.xml">runGeneratorMetaComponent</a> defines a
            target (<code>genDynFactory</code>) to run the above programs in sequence.</p>
        <p>The XSL programs process an XML file (the <i>dynamic factory descriptor file</i>) that
            describes the dynamic factories. An <a
                href="indexModellingApproach.html#ApplicationModel">application feature model</a> can
            serve as input dynamic factory descriptor file. Three examples of dynamic factories
            included in the OBS Framework are:</p>
        <ul>
            <li>From the XML database descriptor <a
                href="../src/xml/SampleTelecommands.xml">SampleTelecommands</a> the dynamic factory
                class<cls>CC_TelecommandFactory</cls> is generated.</li>. <li>From the XML database
                    descriptor <a
                href="../src/xml/SampleTelemetryPackets.xml">SampleTelemetryPackets</a> the dynamic
                factory class<cls>CC_TelemetryPacketFactory</cls> is generated.</li>. <li>From the
                XML database descriptor <a
                href="../src/xml/SampleManoeuvres.xml">SampleManoeuvres</a> the dynamic factory
                    class<a href="doxygen/html/classCC__ManoeuvreFactory.html">
                    <code>CC_ManoeuvreFactory</code>
                </a> is generated.</li>. </ul>
    </Section>
    <Section Title="Custom Classes">
        <p>The OBS Framework typically defines abstract classes that must be instantiated by the
            application developer. In many cases, it also provides default implementations for these
            abstract classes but some applications will need custom implementations. In order to
            help their developers, instantiator meta-components are provided that generate stub
            versions of these classes. The following such custom class generators are provided at
            present (with self-explanatory names):</p>
        <ul>
            <li>
                <a href="../src/xsl/GenerateFsmState.xsl">GenerateFsmState</a>
            </li>
            <li>
                <a href="../src/xsl/GenerateControlBlock.xsl">GenerateControlBlock</a>
            </li>
            <li>
                <a href="../src/xsl/GenerateMonitoringProfile.xsl">GenerateMonitoringProfile</a>
            </li>
            <li>
                <a href="../src/xsl/GenerateRecoveryAction.xsl">GenerateRecoveryAction</a>
            </li>
        </ul>
    </Section>
    <Section Title="Containers">
        <p>A <i>container</i> is a component that acts as a container for objects or variable
            values. Robust container classes must be parameterized by the syntactical type of object
            or variable that they hold. In C++, this kind of parameterization is implemented using
            the template mechanism. Templates however are not permitted in the OBS Framework because
            of the restricted <a href="LanguageSubset.html">language subset</a> adopted for the
            framework. Automatic code generation offers an alternative mechanism.</p>
        <p>One generator meta-component is implemented for each type of container. At present, the
            OBS Framework offers only meta-component to implement a stack-like container (FIFO
            container). The generator allows a container to be generated for a particular type of
            contained object or variable. The two XSL programs that implement this meta-component are:</p>
        <ul>
            <li>
                <a
                href="../src/xsl/GenerateStackContainerHeader.xsl">GenerateStackContainerHeader</a>:
                generation of the header file for the stack container class.</li>
            <li>
                <a href="../src/xsl/GenerateStackContainerBody.xsl">GenerateStackContainerBody</a>:
                generation of the body file for the stack container class.</li>
        </ul>
        <p>The Ant build file <a
            href="../scripts/runGeneratorMetaComponent.xml">runGeneratorMetaComponent</a> defines a
            target (<code>genStkCont</code>) to run the above programs in sequence.</p>
        <p>The XSL programs process an XML file (the <i>stack container descriptor</i>) that
            describes the container to be generated. The structure of the XML file is described in
            the initial comment of the <a
            href="../src/xsl/GenerateStackContainerHeader.xsl">GenerateStackContainerHeader</a>
            program. Two examples of stack container classes corresponding to two different types of
            contained items are:</p>
        <ul>
            <li>From the XML database descriptor <a href="../src/xml/IntStack.xml">IntStack</a> the
                stack container class<a href="doxygen/html/classCC__IntStack.html">
                    <code>CC_IntStack</code>
                </a> and the test class<a href="doxygen/html/classTestCaseIntStack__1.html">
                    <code>TestCaseIntStack_1</code>
                </a> are generated.</li>. <li>From the XML database descriptor <a
                href="../src/xml/RootObjectStack.xml">CC_RootObjectStack</a> the stack container
                    class<a href="doxygen/html/classCC__RootObject.html">
                    <code>CC_RootObject</code>
                </a> and the test class <a href="doxygen/html/classTestCaseRootObject__1.html">
                    <code>TestCaseRootObject_1</code>
                </a> are generated.</li>.</ul>
    </Section>
</Chapter>
