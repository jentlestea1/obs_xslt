<DesignPattern>

<Name>Recovery Action</Name>

<BasedOn>
This pattern is derived from the <i>failure recovery design pattern</i> proposed by the
<a HREF="http://www.aut.ee.ethz.ch/~pasetti/AocsFramework/index.html">AOCS Framework</a> (see also:
A. Pasetti, <i>Embedded Control Systems and Software Frameworks</i>, Springer-Verlag, 2002).
</BasedOn>

<Intent>
Decouple the management of individual failure recovery actions from their implementation by allowing recovery actions to be manipulated as abstract entities independent of the specific recovery actions they implement.
</Intent>

<Motivation>
<p> Many OBS are capable of performing a certain amount of failure detection checks. The detection of a failure or suspected failure may lead to the execution of a recovery action. Thus, on-board systems often specify a number of failure detection checks and associate to each one or more recovery actions to be executed when the check fails.
<p></p>
The type of actions to be executed in response to a given failure obviously varies across applications but the way these actions are managed presents some similarities. Thus, in most cases, there is a requirement that it be possible to disable and enable individual recovery actions; that it be possible to react only to consecutive occurrences of the same action; that execution of the recovery action be recorded as an event; etc.
<p></p>
This design pattern allows these commonalities to be factored out by encapsulating recovery actions in objects that are indirectly instantiated from a base class that implements the invariant recovery action operations.
</p>
</Motivation>

<DictionaryEntry>Recovery Action</DictionaryEntry>

<Structure>
<p>
The recovery action design pattern represents the recovery action abstraction as an
abstract interface <CODE>RecoveryAction</CODE> that defines the generic operations
that can be performed on a generic recovery action. Concrete recovery actions are
implemented as instances of classes that implement <code>RecoveryAction</code>.
Recovery actions are therefore plug-in components and components that must execute
them only see them as instances of the abstract type <CODE>RecoveryAction</CODE>.
<p></p>
It is often necessary to execute several recovery actions in response to the same failure. For this reason, the design pattern allows recovery actions to be linked together to form a chain. Clients only see one end of the chain and the operations they perform on it are automatically propagated to all members in the chain. Clients are thus unaware of whether they deal with a single recovery action or with a chain of linked recovery actions.
</p>
</Structure>

<Participant>
<Name>Client</Name>
<Role> The component that executes the recovery action or performs housekeeping operations (e.g. disabling and enabling) on it.</Role>
</Participant>

<Participant>
<Name>RecoveryAction</Name>
<Role> The abstract interface or base abstract class that defines the basic operations that can be performed on generic recovery actions. </Role>
</Participant>

<Participant>
<Name>ConcreteRecoveryAction</Name>
<Role> Component implementing (or derived from) <CODE>RecoveryAction</CODE> that represents a specific and concrete recovery action. At a minimum, it must provide an implementation for the <CODE>doRecovery</CODE> operation. Other base operations could in principle be inherited from an abstract <CODE>RecoveryAction</CODE> base class. </Role>
</Participant>


<Collaborations>
Typical operational scenarios for this design pattern are:
<ul>
<li>A component that may need to execute a recovery action, is loaded the recovery action component that implements it (as an instance of type <CODE>RecoveryAction</CODE>) and, when the conditions for the execution occur, calls its <CODE>doRecovery</CODE> method</li>
<li>A component that executes a command to disable or enable a recovery action, holds a reference to the recovery action (which is sees as an instance of type <CODE>RecoveryAction</CODE>) and, when the telecommand must be executed, calls the disable or enable method on it.</li>
</ul>
</Collaborations>

<Consequence>
Clients are decoupled from the implementation of recovery actions: they only see abstract recovery actions and only interact with them through the same interface. Changing the concrete recovery action that is associated to a certain component has no impact on it.
</Consequence>
<Consequence>
Functionalities that are common to all recovery actions (e.g. the management of the enable/disable status) can be placed in the base <CODE>RecoveryAction</CODE> class and can be coded only once.
</Consequence>
<Consequence>
Linked lists of recovery actions can be treated as if they were one single recovery action: the client is not - and need not be - aware of whether it is executing one single or several recovery actions.
</Consequence>
<Consequence>
It is possible to build a library of commonly recurring recovery actions and to use them within an application as ready-made components.
</Consequence>
<Consequence>
It is necessary to have a dedicated class for each concrete recovery action required by an application. This may lead to a proliferation of small classes.
</Consequence>


<Applicability>
This design pattern is useful when:<ul>
<li> components in an application need to execute and handle recovery actions </li>
<li> it is necessary to be able to vary the implementation of the recovery actions without affecting the components that execute or handle them </li>
</ul>
</Applicability>

<ImplementationIssue>
Conceptually, <CODE>RecoveryAction</CODE> is an abstract interface but instantiation of the pattern will often implement it as a base abstract class that provides concrete implementations for its housekeeping operations and leaves only <CODE>doRecovery</CODE> as an abstract operation to be defined in concrete subclasses.
</ImplementationIssue>

<ImplementationIssue>
Which operations should be defined at the level of <CODE>RecoveryAction</CODE>? The class diagram of the pattern considers only three types of operation but one might conceivably want to implement more (or less). For instance, in some on-board applications, failures that are detected only once (or only a small number of times) are treated differently from failures that recur in several consecutive operating cycles. The corresponding logic could be placed in a <CODE>RecoveryAction</CODE> base class. Similarly, execution of a recovery action should sometimes
be recorded as an <a HREF="domainDictionaryEvent.html">Event</a>. The logic to create the event report could again be placed in a <CODE>RecoveryAction</CODE> base class.
</ImplementationIssue>

<ImplementationIssue>
Since they are encapsulated in objects, recovery actions can have memory. Thus, it is possible to make the execution of a recovery action
conditional upon past executions. Consider for instance the case where recovery should only be performed if a certain failure conditions
persist for two consecutive cycles (this is often done to avoid triggering of recovery actions in response to detection of spurious
failures). In such a case, the simplest mechanism is to have a recovery action that returns without performing any
action the first time it is called and that only executes some concrete action after it is called twice in a row (indicating that the
failure is persistent).
</ImplementationIssue>

<ImplementationIssue>
The sample definition of interface <CODE>RecoveryAction</CODE> given in the class diagram of the design pattern, foresees methods to
enable and disable <i>individual</i> recovery actions. There is sometimes a need to disable or enable <i>all</i> recovery actions. This
type of requirement can be implemented by having <i>static</i> enable/disable methods.
</ImplementationIssue>

<ImplementationIssue>
In the concept proposed here, a recovery action is a <i>punctual</i> action that is executed in one-shot immediately after the fault has been detected. In some cases, however, the response to a fault must consist of a sequence of actions that may extend over several activation cycles. In such a case, the sequence of actions should be encapsulated in a
<a HREF="domainDictionaryManoeuvre.html">manoeuvre</a> and the recovery action will consist in loading the manoeuvre into
the <a HREF="domainDictionaryManoeuvreManager.html">manoeuvre manager</a>.
</ImplementationIssue>

<FrameworkMapping>
  <Name>RecoveryAction</Name>
  <Type>abstract interface</Type>
  <FrameworkClass>RecoveryAction</FrameworkClass>
</FrameworkMapping>



<SampleCode>
<p>
Consider a recovery action associated to the detection of a transmission bus fault that specifies that, when the fault is detected, there should be a switchover to the redundant bus if the fault is sporadic or a fall-back to SBY mode if the fault is permanent. The fault is defined to be <i>permament</i> if it has occurred more than once.
Use of the recovery action design pattern implies that a dedicated class be defined to encapsulate this recovery action. A tentative implementation for the <CODE>doRecovery</CODE> method for this class could be as follows:
<PRE>	class BusFaultRecoveryAction : RecoveryAction {
	  bool alreadyTried=false;
	  . . .
	  void doRecovery() {
	    if (!alreadyTried) 	// sporadic fault
	    {	 . . .		// do switch over to redundant bus
		 alreadyTried = true;
	    }
	    else
		 . . .		// command fall-back to SBY
	  }
	}  </PRE>

The component that implements the bus fault check would then look like this:
<PRE>	Class BusManager {
		RecoveryAction* busFaultRecoveryAction;
		. . .

		// Method to load recovery action as plug-in component
		void loadBusFaultRecoveryAction(RecoveryAction* ra) {
			busFaultRecoveryAction = ra;
		}

		// Method to perform the APS fault check
		void doBusFaultCheck {
			if (bus fault detected)
				busFaultRecoveryAction.doRecovery();
		}
		. . .
	}  </PRE>

This component sees the recovery action as a plug-in component that is loaded when the component is configured during the initialization phase. Consequently, its code is independent of which specific recovery action is executed in response to the bus fault. It is also independent of whether the fault is sporadic or permanent. The management of the sporadic/permanent status is done internally to the recovery action.
</p><p>
The configuration code for such a component could be as follows:
<PRE>	BusFaultRecoveryAction* busFaultRecoveryAction;
	. . .
	BusManager* busManager = new BusManager();
	BusManager->loadBusFaultRecoveryAction(busManager);  </PRE>

Note that the recovery action is created as an instance of a specific recovery action class but is loaded into the client component as an instance of the generic abstract class <CODE>RecoveryAction</CODE>.
As already mentioned earlier, the management of the sporadic/permanent status could be done at the level of an abstract base class <CODE>RecoveryAction</CODE> of the following kind:
<PRE>	class RecoveryAction {
		int limit;
		int counter=0;
		bool isSporadic=true;
		. . .

		void setLimit(int l) {
			limit=l;
		}

		bool isSporadic() {
			return isSporadic;
		}

		void doRecovery() {
			limitCounter++;
			if (limitCounter>limit)
			{	isSporadic=false;
				limitCounter=0;
			}
		}
		. . .
	}   </PRE>

The implementation of the <CODE>doRecovery</CODE> method in a derived class would then be as follows:
<PRE>
    class ConcreteRecoveryAction : RecoveryAction {
        . . .

        void doRecovery() {
            RecoveryAction:doRecovery();
            if (isSporadic())
            . . .	// execute sporadic part of recovery action
            else
            . . .	// execute permanent part of recovery action
         }
    }  </PRE>

As a final example, consider the recovery action that requires execution of a complex manoeuvre extending over a prolonged period of time. This recovery action cannot be executed by a <CODE>RecoveryAction</CODE> object that, by definition, is activated only once and can only perform <i>punctual</i> actions within the same operational cycle. This type of situation can be handled
by defining a <i><a HREF="domainDictionaryManoeuvre.html">Manoeuvre</a></i> that is responsible for performing the recovery procedure and by having the recovery action load the manoeuvre into the manoeuvre manager. The corresponding <CODE>RecoveryAction</CODE> class can then be defined as follows:
<PRE>
    class ComplexRecoveryAction : RecoveryAction {

        Manoeuvre* recoveryProcedure;
        ManoeuvreManager* manoeuvreManager;
	. . .

        void doRecovery() {
	. . .
	manoeuvreManager->add(recoveryProcedure);
        }
    }  </PRE>

The loading of the manoeuvre in a sense allows the recovery action to extend the range of its action beyond the cycle where the fault was detected.
</p><p>
Note that the <CODE>recoveryProcedure</CODE> manoeuvre can also be used in contexts other than the execution of the recovery action.
</p>
</SampleCode>

<Remarks>
None
</Remarks>

<LastModified>
2003-05-19
</LastModified>

<Author>
A. Pasetti (<a HREF="http://www.pnp-software.com">P&amp;P Software</a>)
</Author>

</DesignPattern>
