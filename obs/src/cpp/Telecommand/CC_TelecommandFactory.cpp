
//
// Copyright 2003 P&P Software GmbH - All Rights Reserved
//
// CC_TelecommandFactory.cpp
//
// This file was automatically generated by an XSL program
//

#include "../GeneralInclude/CompilerSwitches.h"
#include "../GeneralInclude/DebugSupport.h"
#include "../GeneralInclude/BasicTypes.h"
#include "../GeneralInclude/ClassId.h"
#include "../GeneralInclude/Constants.h"  
#include "../Telecommand/DC_DummyPUSTelecommand.h"  
#include "../Telecommand/DC_DummyTelecommand.h"  
#include "../Telecommand/DC_PUSControlDataReporting.h"  
#include "../Telecommand/DC_PUSDefineDataReporting.h"  
#include "../Telecommand/DC_PUSDumpMemoryAbsolute.h"  
#include "../Telecommand/DC_PUSDumpMemoryOffset.h"  
#include "../Telecommand/DC_PUSMemoryLoadAbsolute.h"  
#include "../Telecommand/DC_PUSMemoryLoadOffset.h"  
#include "../Telecommand/DC_TestPUSTelecommand.h"  
#include "../Base/CC_RootObject.h"
#include "CC_TelecommandFactory.h"

CC_TelecommandFactory* CC_TelecommandFactory::pInstance = pNULL;

CC_TelecommandFactory::CC_TelecommandFactory(void) {
    setClassId(ID_TELECOMMANDFACTORY);

  
    sizeDummyPUSTelecommand = 1;
    poolDummyPUSTelecommand = new DC_DummyPUSTelecommand*[sizeDummyPUSTelecommand];
    for (unsigned int i=0; i<sizeDummyPUSTelecommand; i++)
        poolDummyPUSTelecommand[i] = pNULL;
      
    sizeDummyTelecommand = 2;
    poolDummyTelecommand = new DC_DummyTelecommand*[sizeDummyTelecommand];
    for (unsigned int i=0; i<sizeDummyTelecommand; i++)
        poolDummyTelecommand[i] = pNULL;
      
    sizePUSControlDataReporting = 1;
    poolPUSControlDataReporting = new DC_PUSControlDataReporting*[sizePUSControlDataReporting];
    for (unsigned int i=0; i<sizePUSControlDataReporting; i++)
        poolPUSControlDataReporting[i] = pNULL;
      
    sizePUSDefineDataReporting = 1;
    poolPUSDefineDataReporting = new DC_PUSDefineDataReporting*[sizePUSDefineDataReporting];
    for (unsigned int i=0; i<sizePUSDefineDataReporting; i++)
        poolPUSDefineDataReporting[i] = pNULL;
      
    sizePUSDumpMemoryAbsolute = 1;
    poolPUSDumpMemoryAbsolute = new DC_PUSDumpMemoryAbsolute*[sizePUSDumpMemoryAbsolute];
    for (unsigned int i=0; i<sizePUSDumpMemoryAbsolute; i++)
        poolPUSDumpMemoryAbsolute[i] = pNULL;
      
    sizePUSDumpMemoryOffset = 1;
    poolPUSDumpMemoryOffset = new DC_PUSDumpMemoryOffset*[sizePUSDumpMemoryOffset];
    for (unsigned int i=0; i<sizePUSDumpMemoryOffset; i++)
        poolPUSDumpMemoryOffset[i] = pNULL;
      
    sizePUSMemoryLoadAbsolute = 2;
    poolPUSMemoryLoadAbsolute = new DC_PUSMemoryLoadAbsolute*[sizePUSMemoryLoadAbsolute];
    for (unsigned int i=0; i<sizePUSMemoryLoadAbsolute; i++)
        poolPUSMemoryLoadAbsolute[i] = pNULL;
      
    sizePUSMemoryLoadOffset = 1;
    poolPUSMemoryLoadOffset = new DC_PUSMemoryLoadOffset*[sizePUSMemoryLoadOffset];
    for (unsigned int i=0; i<sizePUSMemoryLoadOffset; i++)
        poolPUSMemoryLoadOffset[i] = pNULL;
      
    sizeTestPUSTelecommand = 3;
    poolTestPUSTelecommand = new DC_TestPUSTelecommand*[sizeTestPUSTelecommand];
    for (unsigned int i=0; i<sizeTestPUSTelecommand; i++)
        poolTestPUSTelecommand[i] = pNULL;
      
}

bool CC_TelecommandFactory::isObjectConfigured(void) {

    if ( !CC_RootObject::isObjectConfigured() )
        return false;
  
    if ( poolDummyPUSTelecommand==pNULL )
        return false;

    for (unsigned int i=0; i<sizeDummyPUSTelecommand; i++)
        if ( poolDummyPUSTelecommand[i]==pNULL )
            return false;
     
    if ( poolDummyTelecommand==pNULL )
        return false;

    for (unsigned int i=0; i<sizeDummyTelecommand; i++)
        if ( poolDummyTelecommand[i]==pNULL )
            return false;
     
    if ( poolPUSControlDataReporting==pNULL )
        return false;

    for (unsigned int i=0; i<sizePUSControlDataReporting; i++)
        if ( poolPUSControlDataReporting[i]==pNULL )
            return false;
     
    if ( poolPUSDefineDataReporting==pNULL )
        return false;

    for (unsigned int i=0; i<sizePUSDefineDataReporting; i++)
        if ( poolPUSDefineDataReporting[i]==pNULL )
            return false;
     
    if ( poolPUSDumpMemoryAbsolute==pNULL )
        return false;

    for (unsigned int i=0; i<sizePUSDumpMemoryAbsolute; i++)
        if ( poolPUSDumpMemoryAbsolute[i]==pNULL )
            return false;
     
    if ( poolPUSDumpMemoryOffset==pNULL )
        return false;

    for (unsigned int i=0; i<sizePUSDumpMemoryOffset; i++)
        if ( poolPUSDumpMemoryOffset[i]==pNULL )
            return false;
     
    if ( poolPUSMemoryLoadAbsolute==pNULL )
        return false;

    for (unsigned int i=0; i<sizePUSMemoryLoadAbsolute; i++)
        if ( poolPUSMemoryLoadAbsolute[i]==pNULL )
            return false;
     
    if ( poolPUSMemoryLoadOffset==pNULL )
        return false;

    for (unsigned int i=0; i<sizePUSMemoryLoadOffset; i++)
        if ( poolPUSMemoryLoadOffset[i]==pNULL )
            return false;
     
    if ( poolTestPUSTelecommand==pNULL )
        return false;

    for (unsigned int i=0; i<sizeTestPUSTelecommand; i++)
        if ( poolTestPUSTelecommand[i]==pNULL )
            return false;
     

   return true;
}

CC_TelecommandFactory* CC_TelecommandFactory::getInstance(void) {
    if (pInstance==pNULL)
        pInstance = new CC_TelecommandFactory();
    return pInstance;
}

  
void CC_TelecommandFactory::setTelecommand(unsigned int i, DC_DummyPUSTelecommand* pItem) {
    assert(i<sizeDummyPUSTelecommand);
    assert(pItem!=pNULL);
    poolDummyPUSTelecommand[i] = pItem;
    poolDummyPUSTelecommand[i]->setInUse(false);
}

unsigned int CC_TelecommandFactory::getNumberDummyPUSTelecommand(void) {
    unsigned int counter = 0;
    for (unsigned int i=0; i<sizeDummyPUSTelecommand; i++)
        if ( poolDummyPUSTelecommand[i]->isInUse() )
            counter++;
    return counter;
}

unsigned int CC_TelecommandFactory::getCapacityDummyPUSTelecommand(void) {
    return sizeDummyPUSTelecommand;
}


DC_DummyPUSTelecommand* CC_TelecommandFactory::allocateDummyPUSTelecommand() {
    assert( isObjectConfigured() );
    for (unsigned int i=0; i<sizeDummyPUSTelecommand; i++)
        if (!poolDummyPUSTelecommand[i]->isInUse() ) {
           poolDummyPUSTelecommand[i]->setInUse(true);
           return poolDummyPUSTelecommand[i];
        }
    return pNULL;
}

bool CC_TelecommandFactory::isFreeDummyPUSTelecommand() {
    for (unsigned int i=0; i<sizeDummyPUSTelecommand; i++)
        if ( !poolDummyPUSTelecommand[i]->isInUse() )
           return true;

    return false;
}

      
            
void CC_TelecommandFactory::setTelecommand(unsigned int i, DC_DummyTelecommand* pItem) {
    assert(i<sizeDummyTelecommand);
    assert(pItem!=pNULL);
    poolDummyTelecommand[i] = pItem;
    poolDummyTelecommand[i]->setInUse(false);
}

unsigned int CC_TelecommandFactory::getNumberDummyTelecommand(void) {
    unsigned int counter = 0;
    for (unsigned int i=0; i<sizeDummyTelecommand; i++)
        if ( poolDummyTelecommand[i]->isInUse() )
            counter++;
    return counter;
}

unsigned int CC_TelecommandFactory::getCapacityDummyTelecommand(void) {
    return sizeDummyTelecommand;
}


DC_DummyTelecommand* CC_TelecommandFactory::allocateDummyTelecommand() {
    assert( isObjectConfigured() );
    for (unsigned int i=0; i<sizeDummyTelecommand; i++)
        if (!poolDummyTelecommand[i]->isInUse() ) {
           poolDummyTelecommand[i]->setInUse(true);
           return poolDummyTelecommand[i];
        }
    return pNULL;
}

bool CC_TelecommandFactory::isFreeDummyTelecommand() {
    for (unsigned int i=0; i<sizeDummyTelecommand; i++)
        if ( !poolDummyTelecommand[i]->isInUse() )
           return true;

    return false;
}

      
            
void CC_TelecommandFactory::setTelecommand(unsigned int i, DC_PUSControlDataReporting* pItem) {
    assert(i<sizePUSControlDataReporting);
    assert(pItem!=pNULL);
    poolPUSControlDataReporting[i] = pItem;
    poolPUSControlDataReporting[i]->setInUse(false);
}

unsigned int CC_TelecommandFactory::getNumberPUSControlDataReporting(void) {
    unsigned int counter = 0;
    for (unsigned int i=0; i<sizePUSControlDataReporting; i++)
        if ( poolPUSControlDataReporting[i]->isInUse() )
            counter++;
    return counter;
}

unsigned int CC_TelecommandFactory::getCapacityPUSControlDataReporting(void) {
    return sizePUSControlDataReporting;
}


DC_PUSControlDataReporting* CC_TelecommandFactory::allocatePUSControlDataReporting(unsigned int MaxNumberSID) {
    assert( isObjectConfigured() );
    for (unsigned int i=0; i<sizePUSControlDataReporting; i++)
        if (poolPUSControlDataReporting[i]->getMaxNumberSID()>=MaxNumberSID &&
             !poolPUSControlDataReporting[i]->isInUse() ) {
           poolPUSControlDataReporting[i]->setInUse(true);
           return poolPUSControlDataReporting[i];
        }
    return pNULL;
}

bool CC_TelecommandFactory::isFreePUSControlDataReporting(unsigned int MaxNumberSID) {
    for (unsigned int i=0; i<sizePUSControlDataReporting; i++)
        if ( poolPUSControlDataReporting[i]->getMaxNumberSID()>=MaxNumberSID &&
             !poolPUSControlDataReporting[i]->isInUse() )
           return true;

    return false;
}

      
            
void CC_TelecommandFactory::setTelecommand(unsigned int i, DC_PUSDefineDataReporting* pItem) {
    assert(i<sizePUSDefineDataReporting);
    assert(pItem!=pNULL);
    poolPUSDefineDataReporting[i] = pItem;
    poolPUSDefineDataReporting[i]->setInUse(false);
}

unsigned int CC_TelecommandFactory::getNumberPUSDefineDataReporting(void) {
    unsigned int counter = 0;
    for (unsigned int i=0; i<sizePUSDefineDataReporting; i++)
        if ( poolPUSDefineDataReporting[i]->isInUse() )
            counter++;
    return counter;
}

unsigned int CC_TelecommandFactory::getCapacityPUSDefineDataReporting(void) {
    return sizePUSDefineDataReporting;
}


DC_PUSDefineDataReporting* CC_TelecommandFactory::allocatePUSDefineDataReporting(unsigned int NumberOfRawData) {
    assert( isObjectConfigured() );
    for (unsigned int i=0; i<sizePUSDefineDataReporting; i++)
        if (poolPUSDefineDataReporting[i]->getNumberOfRawData()>=NumberOfRawData &&
             !poolPUSDefineDataReporting[i]->isInUse() ) {
           poolPUSDefineDataReporting[i]->setInUse(true);
           return poolPUSDefineDataReporting[i];
        }
    return pNULL;
}

bool CC_TelecommandFactory::isFreePUSDefineDataReporting(unsigned int NumberOfRawData) {
    for (unsigned int i=0; i<sizePUSDefineDataReporting; i++)
        if ( poolPUSDefineDataReporting[i]->getNumberOfRawData()>=NumberOfRawData &&
             !poolPUSDefineDataReporting[i]->isInUse() )
           return true;

    return false;
}

      
            
void CC_TelecommandFactory::setTelecommand(unsigned int i, DC_PUSDumpMemoryAbsolute* pItem) {
    assert(i<sizePUSDumpMemoryAbsolute);
    assert(pItem!=pNULL);
    poolPUSDumpMemoryAbsolute[i] = pItem;
    poolPUSDumpMemoryAbsolute[i]->setInUse(false);
}

unsigned int CC_TelecommandFactory::getNumberPUSDumpMemoryAbsolute(void) {
    unsigned int counter = 0;
    for (unsigned int i=0; i<sizePUSDumpMemoryAbsolute; i++)
        if ( poolPUSDumpMemoryAbsolute[i]->isInUse() )
            counter++;
    return counter;
}

unsigned int CC_TelecommandFactory::getCapacityPUSDumpMemoryAbsolute(void) {
    return sizePUSDumpMemoryAbsolute;
}


DC_PUSDumpMemoryAbsolute* CC_TelecommandFactory::allocatePUSDumpMemoryAbsolute(unsigned int NumberOfRawData) {
    assert( isObjectConfigured() );
    for (unsigned int i=0; i<sizePUSDumpMemoryAbsolute; i++)
        if (poolPUSDumpMemoryAbsolute[i]->getNumberOfRawData()>=NumberOfRawData &&
             !poolPUSDumpMemoryAbsolute[i]->isInUse() ) {
           poolPUSDumpMemoryAbsolute[i]->setInUse(true);
           return poolPUSDumpMemoryAbsolute[i];
        }
    return pNULL;
}

bool CC_TelecommandFactory::isFreePUSDumpMemoryAbsolute(unsigned int NumberOfRawData) {
    for (unsigned int i=0; i<sizePUSDumpMemoryAbsolute; i++)
        if ( poolPUSDumpMemoryAbsolute[i]->getNumberOfRawData()>=NumberOfRawData &&
             !poolPUSDumpMemoryAbsolute[i]->isInUse() )
           return true;

    return false;
}

      
            
void CC_TelecommandFactory::setTelecommand(unsigned int i, DC_PUSDumpMemoryOffset* pItem) {
    assert(i<sizePUSDumpMemoryOffset);
    assert(pItem!=pNULL);
    poolPUSDumpMemoryOffset[i] = pItem;
    poolPUSDumpMemoryOffset[i]->setInUse(false);
}

unsigned int CC_TelecommandFactory::getNumberPUSDumpMemoryOffset(void) {
    unsigned int counter = 0;
    for (unsigned int i=0; i<sizePUSDumpMemoryOffset; i++)
        if ( poolPUSDumpMemoryOffset[i]->isInUse() )
            counter++;
    return counter;
}

unsigned int CC_TelecommandFactory::getCapacityPUSDumpMemoryOffset(void) {
    return sizePUSDumpMemoryOffset;
}


DC_PUSDumpMemoryOffset* CC_TelecommandFactory::allocatePUSDumpMemoryOffset(unsigned int NumberOfRawData) {
    assert( isObjectConfigured() );
    for (unsigned int i=0; i<sizePUSDumpMemoryOffset; i++)
        if (poolPUSDumpMemoryOffset[i]->getNumberOfRawData()>=NumberOfRawData &&
             !poolPUSDumpMemoryOffset[i]->isInUse() ) {
           poolPUSDumpMemoryOffset[i]->setInUse(true);
           return poolPUSDumpMemoryOffset[i];
        }
    return pNULL;
}

bool CC_TelecommandFactory::isFreePUSDumpMemoryOffset(unsigned int NumberOfRawData) {
    for (unsigned int i=0; i<sizePUSDumpMemoryOffset; i++)
        if ( poolPUSDumpMemoryOffset[i]->getNumberOfRawData()>=NumberOfRawData &&
             !poolPUSDumpMemoryOffset[i]->isInUse() )
           return true;

    return false;
}

      
            
void CC_TelecommandFactory::setTelecommand(unsigned int i, DC_PUSMemoryLoadAbsolute* pItem) {
    assert(i<sizePUSMemoryLoadAbsolute);
    assert(pItem!=pNULL);
    poolPUSMemoryLoadAbsolute[i] = pItem;
    poolPUSMemoryLoadAbsolute[i]->setInUse(false);
}

unsigned int CC_TelecommandFactory::getNumberPUSMemoryLoadAbsolute(void) {
    unsigned int counter = 0;
    for (unsigned int i=0; i<sizePUSMemoryLoadAbsolute; i++)
        if ( poolPUSMemoryLoadAbsolute[i]->isInUse() )
            counter++;
    return counter;
}

unsigned int CC_TelecommandFactory::getCapacityPUSMemoryLoadAbsolute(void) {
    return sizePUSMemoryLoadAbsolute;
}


DC_PUSMemoryLoadAbsolute* CC_TelecommandFactory::allocatePUSMemoryLoadAbsolute(unsigned int MaxNumberData, unsigned int MaxNumberBlocks) {
    assert( isObjectConfigured() );
    for (unsigned int i=0; i<sizePUSMemoryLoadAbsolute; i++)
        if (poolPUSMemoryLoadAbsolute[i]->getMaxNumberData()>=MaxNumberData &&
             poolPUSMemoryLoadAbsolute[i]->getMaxNumberBlocks()>=MaxNumberBlocks &&
             !poolPUSMemoryLoadAbsolute[i]->isInUse() ) {
           poolPUSMemoryLoadAbsolute[i]->setInUse(true);
           return poolPUSMemoryLoadAbsolute[i];
        }
    return pNULL;
}

bool CC_TelecommandFactory::isFreePUSMemoryLoadAbsolute(unsigned int MaxNumberData, unsigned int MaxNumberBlocks) {
    for (unsigned int i=0; i<sizePUSMemoryLoadAbsolute; i++)
        if ( poolPUSMemoryLoadAbsolute[i]->getMaxNumberData()>=MaxNumberData &&
             poolPUSMemoryLoadAbsolute[i]->getMaxNumberBlocks()>=MaxNumberBlocks &&
             !poolPUSMemoryLoadAbsolute[i]->isInUse() )
           return true;

    return false;
}

      
            
void CC_TelecommandFactory::setTelecommand(unsigned int i, DC_PUSMemoryLoadOffset* pItem) {
    assert(i<sizePUSMemoryLoadOffset);
    assert(pItem!=pNULL);
    poolPUSMemoryLoadOffset[i] = pItem;
    poolPUSMemoryLoadOffset[i]->setInUse(false);
}

unsigned int CC_TelecommandFactory::getNumberPUSMemoryLoadOffset(void) {
    unsigned int counter = 0;
    for (unsigned int i=0; i<sizePUSMemoryLoadOffset; i++)
        if ( poolPUSMemoryLoadOffset[i]->isInUse() )
            counter++;
    return counter;
}

unsigned int CC_TelecommandFactory::getCapacityPUSMemoryLoadOffset(void) {
    return sizePUSMemoryLoadOffset;
}


DC_PUSMemoryLoadOffset* CC_TelecommandFactory::allocatePUSMemoryLoadOffset(unsigned int MaxNumberData, unsigned int MaxNumberBlocks) {
    assert( isObjectConfigured() );
    for (unsigned int i=0; i<sizePUSMemoryLoadOffset; i++)
        if (poolPUSMemoryLoadOffset[i]->getMaxNumberData()>=MaxNumberData &&
             poolPUSMemoryLoadOffset[i]->getMaxNumberBlocks()>=MaxNumberBlocks &&
             !poolPUSMemoryLoadOffset[i]->isInUse() ) {
           poolPUSMemoryLoadOffset[i]->setInUse(true);
           return poolPUSMemoryLoadOffset[i];
        }
    return pNULL;
}

bool CC_TelecommandFactory::isFreePUSMemoryLoadOffset(unsigned int MaxNumberData, unsigned int MaxNumberBlocks) {
    for (unsigned int i=0; i<sizePUSMemoryLoadOffset; i++)
        if ( poolPUSMemoryLoadOffset[i]->getMaxNumberData()>=MaxNumberData &&
             poolPUSMemoryLoadOffset[i]->getMaxNumberBlocks()>=MaxNumberBlocks &&
             !poolPUSMemoryLoadOffset[i]->isInUse() )
           return true;

    return false;
}

      
            
void CC_TelecommandFactory::setTelecommand(unsigned int i, DC_TestPUSTelecommand* pItem) {
    assert(i<sizeTestPUSTelecommand);
    assert(pItem!=pNULL);
    poolTestPUSTelecommand[i] = pItem;
    poolTestPUSTelecommand[i]->setInUse(false);
}

unsigned int CC_TelecommandFactory::getNumberTestPUSTelecommand(void) {
    unsigned int counter = 0;
    for (unsigned int i=0; i<sizeTestPUSTelecommand; i++)
        if ( poolTestPUSTelecommand[i]->isInUse() )
            counter++;
    return counter;
}

unsigned int CC_TelecommandFactory::getCapacityTestPUSTelecommand(void) {
    return sizeTestPUSTelecommand;
}


DC_TestPUSTelecommand* CC_TelecommandFactory::allocateTestPUSTelecommand() {
    assert( isObjectConfigured() );
    for (unsigned int i=0; i<sizeTestPUSTelecommand; i++)
        if (!poolTestPUSTelecommand[i]->isInUse() ) {
           poolTestPUSTelecommand[i]->setInUse(true);
           return poolTestPUSTelecommand[i];
        }
    return pNULL;
}

bool CC_TelecommandFactory::isFreeTestPUSTelecommand() {
    for (unsigned int i=0; i<sizeTestPUSTelecommand; i++)
        if ( !poolTestPUSTelecommand[i]->isInUse() )
           return true;

    return false;
}

      
            