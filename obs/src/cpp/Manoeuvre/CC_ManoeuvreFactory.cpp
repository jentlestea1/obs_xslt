
//
// Copyright 2003 P&P Software GmbH - All Rights Reserved
//
// CC_ManoeuvreFactory.cpp
//
// This file was automatically generated by an XSL program
//

#include "../GeneralInclude/CompilerSwitches.h"
#include "../GeneralInclude/DebugSupport.h"
#include "../GeneralInclude/BasicTypes.h"
#include "../GeneralInclude/ClassId.h"
#include "../GeneralInclude/Constants.h"  
#include "../Manoeuvre/DC_DummyConfigurableManoeuvre.h"  
#include "../Manoeuvre/DC_DummyManoeuvre.h"  
#include "../Manoeuvre/DC_TestPUSConfigurableManoeuvre.h"  
#include "../Base/CC_RootObject.h"
#include "CC_ManoeuvreFactory.h"

CC_ManoeuvreFactory* CC_ManoeuvreFactory::pInstance = pNULL;

CC_ManoeuvreFactory::CC_ManoeuvreFactory(void) {
    setClassId(ID_MANOEUVREFACTORY);

  
    sizeDummyConfigurableManoeuvre = 1;
    poolDummyConfigurableManoeuvre = new DC_DummyConfigurableManoeuvre*[sizeDummyConfigurableManoeuvre];
    for (unsigned int i=0; i<sizeDummyConfigurableManoeuvre; i++)
        poolDummyConfigurableManoeuvre[i] = pNULL;
      
    sizeDummyManoeuvre = 1;
    poolDummyManoeuvre = new DC_DummyManoeuvre*[sizeDummyManoeuvre];
    for (unsigned int i=0; i<sizeDummyManoeuvre; i++)
        poolDummyManoeuvre[i] = pNULL;
      
    sizeTestPUSConfigurableManoeuvre = 1;
    poolTestPUSConfigurableManoeuvre = new DC_TestPUSConfigurableManoeuvre*[sizeTestPUSConfigurableManoeuvre];
    for (unsigned int i=0; i<sizeTestPUSConfigurableManoeuvre; i++)
        poolTestPUSConfigurableManoeuvre[i] = pNULL;
      
}

bool CC_ManoeuvreFactory::isObjectConfigured(void) {

    if ( !CC_RootObject::isObjectConfigured() )
        return false;
  
    if ( poolDummyConfigurableManoeuvre==pNULL )
        return false;

    for (unsigned int i=0; i<sizeDummyConfigurableManoeuvre; i++)
        if ( poolDummyConfigurableManoeuvre[i]==pNULL )
            return false;
     
    if ( poolDummyManoeuvre==pNULL )
        return false;

    for (unsigned int i=0; i<sizeDummyManoeuvre; i++)
        if ( poolDummyManoeuvre[i]==pNULL )
            return false;
     
    if ( poolTestPUSConfigurableManoeuvre==pNULL )
        return false;

    for (unsigned int i=0; i<sizeTestPUSConfigurableManoeuvre; i++)
        if ( poolTestPUSConfigurableManoeuvre[i]==pNULL )
            return false;
     

   return true;
}

CC_ManoeuvreFactory* CC_ManoeuvreFactory::getInstance(void) {
    if (pInstance==pNULL)
        pInstance = new CC_ManoeuvreFactory();
    return pInstance;
}

  
void CC_ManoeuvreFactory::setManoeuvre(unsigned int i, DC_DummyConfigurableManoeuvre* pItem) {
    assert(i<sizeDummyConfigurableManoeuvre);
    assert(pItem!=pNULL);
    poolDummyConfigurableManoeuvre[i] = pItem;
    poolDummyConfigurableManoeuvre[i]->setInUse(false);
}

unsigned int CC_ManoeuvreFactory::getNumberDummyConfigurableManoeuvre(void) {
    unsigned int counter = 0;
    for (unsigned int i=0; i<sizeDummyConfigurableManoeuvre; i++)
        if ( poolDummyConfigurableManoeuvre[i]->isInUse() )
            counter++;
    return counter;
}

unsigned int CC_ManoeuvreFactory::getCapacityDummyConfigurableManoeuvre(void) {
    return sizeDummyConfigurableManoeuvre;
}


DC_DummyConfigurableManoeuvre* CC_ManoeuvreFactory::allocateDummyConfigurableManoeuvre() {
    assert( isObjectConfigured() );
    for (unsigned int i=0; i<sizeDummyConfigurableManoeuvre; i++)
        if (!poolDummyConfigurableManoeuvre[i]->isInUse() ) {
           poolDummyConfigurableManoeuvre[i]->setInUse(true);
           return poolDummyConfigurableManoeuvre[i];
        }
    return pNULL;
}

bool CC_ManoeuvreFactory::isFreeDummyConfigurableManoeuvre() {
    for (unsigned int i=0; i<sizeDummyConfigurableManoeuvre; i++)
        if ( !poolDummyConfigurableManoeuvre[i]->isInUse() )
           return true;

    return false;
}

      
            
void CC_ManoeuvreFactory::setManoeuvre(unsigned int i, DC_DummyManoeuvre* pItem) {
    assert(i<sizeDummyManoeuvre);
    assert(pItem!=pNULL);
    poolDummyManoeuvre[i] = pItem;
    poolDummyManoeuvre[i]->setInUse(false);
}

unsigned int CC_ManoeuvreFactory::getNumberDummyManoeuvre(void) {
    unsigned int counter = 0;
    for (unsigned int i=0; i<sizeDummyManoeuvre; i++)
        if ( poolDummyManoeuvre[i]->isInUse() )
            counter++;
    return counter;
}

unsigned int CC_ManoeuvreFactory::getCapacityDummyManoeuvre(void) {
    return sizeDummyManoeuvre;
}


DC_DummyManoeuvre* CC_ManoeuvreFactory::allocateDummyManoeuvre() {
    assert( isObjectConfigured() );
    for (unsigned int i=0; i<sizeDummyManoeuvre; i++)
        if (!poolDummyManoeuvre[i]->isInUse() ) {
           poolDummyManoeuvre[i]->setInUse(true);
           return poolDummyManoeuvre[i];
        }
    return pNULL;
}

bool CC_ManoeuvreFactory::isFreeDummyManoeuvre() {
    for (unsigned int i=0; i<sizeDummyManoeuvre; i++)
        if ( !poolDummyManoeuvre[i]->isInUse() )
           return true;

    return false;
}

      
            
void CC_ManoeuvreFactory::setManoeuvre(unsigned int i, DC_TestPUSConfigurableManoeuvre* pItem) {
    assert(i<sizeTestPUSConfigurableManoeuvre);
    assert(pItem!=pNULL);
    poolTestPUSConfigurableManoeuvre[i] = pItem;
    poolTestPUSConfigurableManoeuvre[i]->setInUse(false);
}

unsigned int CC_ManoeuvreFactory::getNumberTestPUSConfigurableManoeuvre(void) {
    unsigned int counter = 0;
    for (unsigned int i=0; i<sizeTestPUSConfigurableManoeuvre; i++)
        if ( poolTestPUSConfigurableManoeuvre[i]->isInUse() )
            counter++;
    return counter;
}

unsigned int CC_ManoeuvreFactory::getCapacityTestPUSConfigurableManoeuvre(void) {
    return sizeTestPUSConfigurableManoeuvre;
}


DC_TestPUSConfigurableManoeuvre* CC_ManoeuvreFactory::allocateTestPUSConfigurableManoeuvre() {
    assert( isObjectConfigured() );
    for (unsigned int i=0; i<sizeTestPUSConfigurableManoeuvre; i++)
        if (!poolTestPUSConfigurableManoeuvre[i]->isInUse() ) {
           poolTestPUSConfigurableManoeuvre[i]->setInUse(true);
           return poolTestPUSConfigurableManoeuvre[i];
        }
    return pNULL;
}

bool CC_ManoeuvreFactory::isFreeTestPUSConfigurableManoeuvre() {
    for (unsigned int i=0; i<sizeTestPUSConfigurableManoeuvre; i++)
        if ( !poolTestPUSConfigurableManoeuvre[i]->isInUse() )
           return true;

    return false;
}

      
            