  
//
// Copyright 2003 P&P Software GmbH - All Rights Reserved
//
// DC_SampleR3Database.cpp
//
// This file was automatically generated by an XSL program
//

#include "../GeneralInclude/CompilerSwitches.h"
#include "../GeneralInclude/DebugSupport.h"
#include "../GeneralInclude/BasicTypes.h"
#include "../GeneralInclude/ClassId.h"
#include "../GeneralInclude/Constants.h"
#include "../Base/CC_RootObject.h"
#include "DC_SampleR3Database.h"

static unsigned int const CharCode = 1;
static unsigned int const UnsignedCharCode = 2;
static unsigned int const ShortCode = 3;
static unsigned int const UnsignedShortCode = 4;
static unsigned int const IntCode = 5;
static unsigned int const UnsignedIntCode = 6;
static unsigned int const BoolCode = 7;
static unsigned int const FloatCode = 8;
static unsigned int const DoubleCode = 9;

DC_SampleR3Database::DC_SampleR3Database() {
   setClassId(ID_SAMPLER3DATABASE);
   pDefaultTable = pNULL;
   pOperationalTable = pNULL;
   resetWasCalled = false;

   tableLength = 80;

   maxParId = 9;
   pPar = new char*[maxParId+1];
   parType = new char[maxParId+1];
   for (TD_DatabaseId i=0; i<maxParId; i++)  {
       pPar[i] = pNULL;
       parType[i] = -1;
   }

}

void DC_SampleR3Database::reset() {
   assert( pDefaultTable != pNULL ) ;
   assert( pOperationalTable != pNULL );
   assert( tableLength > 0 );
   for (TD_DatabaseId i=0; i<tableLength; i++)
      pOperationalTable[i] = pDefaultTable[i];
   resetWasCalled = true;


   pPar[1] = pOperationalTable+0;
   parType[1] = ShortCode;
   pPar[2] = pOperationalTable+8;
   parType[2] = UnsignedShortCode;
   pPar[3] = pOperationalTable+16;
   parType[3] = IntCode;
   pPar[4] = pOperationalTable+24;
   parType[4] = UnsignedIntCode;
   pPar[5] = pOperationalTable+32;
   parType[5] = CharCode;
   pPar[6] = pOperationalTable+40;
   parType[6] = UnsignedCharCode;
   pPar[7] = pOperationalTable+48;
   parType[7] = FloatCode;
   pPar[8] = pOperationalTable+56;
   parType[8] = DoubleCode;
   pPar[9] = pOperationalTable+64;
   parType[9] = BoolCode;
}

void DC_SampleR3Database::setDefaultTable(char* pDefTable) {
   assert( pDefTable != pNULL );
   pDefaultTable = pDefTable;
}

void DC_SampleR3Database::setOperationalTable(char* pOperTable) {
   assert( pOperTable != pNULL );
   pOperationalTable = pOperTable;
}

bool DC_SampleR3Database::isObjectConfigured() {

   // Check configuration of super object
   if ( !CC_RootObject::isObjectConfigured() )
       return NOT_CONFIGURED;

   if ( (tableLength <= 0) ||
        (pDefaultTable == pNULL) ||
        (pOperationalTable == pNULL) ||
        (!resetWasCalled) )
       return NOT_CONFIGURED;
   return CONFIGURED;
}


void DC_SampleR3Database::setParameter(TD_DatabaseId parId, int newValue) {
   assert( pOperationalTable != pNULL );
   assert( (parId <= maxParId) && (parType[parId]==IntCode) );
   
   if (parId > maxParId) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return;
   }
   if (parType[parId]!=IntCode) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return;
   }
   
   *( (int*)(pPar[parId]) ) = newValue;
}

void DC_SampleR3Database::setParameter(TD_DatabaseId parId, unsigned int newValue) {
   assert( pOperationalTable != pNULL );
   assert( (parId <= maxParId) && (parType[parId]==UnsignedIntCode) );
   
   if (parId > maxParId) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return;
   }
   if (parType[parId]!=UnsignedIntCode) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return;
   }
   
   *( (unsigned int*)(pPar[parId]) ) = newValue;
}

void DC_SampleR3Database::setParameter(TD_DatabaseId parId, short newValue) {
   assert( pOperationalTable != pNULL );
   assert( (parId <= maxParId) && (parType[parId]==ShortCode) );
   
   if (parId > maxParId) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return;
   }
   if (parType[parId]!=ShortCode) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return;
   }
   
   *( (short*)(pPar[parId]) ) = newValue;
}

void DC_SampleR3Database::setParameter(TD_DatabaseId parId, unsigned short newValue) {
   assert( pOperationalTable != pNULL );
   assert( (parId <= maxParId) && (parType[parId]==UnsignedShortCode) );
   
   if (parId > maxParId) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return;
   }
   if (parType[parId]!=UnsignedShortCode) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return;
   }
   
   *( (unsigned short*)(pPar[parId]) ) = newValue;
}

void DC_SampleR3Database::setParameter(TD_DatabaseId parId, char newValue) {
   assert( pOperationalTable != pNULL );
   assert( (parId <= maxParId) && (parType[parId]==CharCode) );
   
   if (parId > maxParId) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return;
   }
   if (parType[parId]!=CharCode) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return;
   }
   
   *( (char*)(pPar[parId]) ) = newValue;
}

void DC_SampleR3Database::setParameter(TD_DatabaseId parId, unsigned char newValue) {
   assert( pOperationalTable != pNULL );
   assert( (parId <= maxParId) && (parType[parId]==UnsignedCharCode) );
   
   if (parId > maxParId) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return;
   }
   if (parType[parId]!=UnsignedCharCode) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return;
   }
   
   *( (unsigned char*)(pPar[parId]) ) = newValue;
}

void DC_SampleR3Database::setParameter(TD_DatabaseId parId, bool newValue) {
   assert( pOperationalTable != pNULL );
   assert( (parId <= maxParId) && (parType[parId]==BoolCode) );
   
   if (parId > maxParId) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return;
   }
   if (parType[parId]!=BoolCode) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return;
   }
   
   *( (bool*)(pPar[parId]) ) = newValue;
}

void DC_SampleR3Database::setParameter(TD_DatabaseId parId, float newValue) {
   assert( pOperationalTable != pNULL );
   assert( (parId <= maxParId) && (parType[parId]==FloatCode) );
   
   if (parId > maxParId) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return;
   }
   if (parType[parId]!=FloatCode) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return;
   }
   
   *( (float*)(pPar[parId]) ) = newValue;
}

void DC_SampleR3Database::setParameter(TD_DatabaseId parId, double newValue) {
   assert( pOperationalTable != pNULL );
   assert( (parId <= maxParId) && (parType[parId]==DoubleCode) );
   
   if (parId > maxParId) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return;
   }
   if (parType[parId]!=DoubleCode) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return;
   }
   
   *( (double*)(pPar[parId]) ) = newValue;
}
int DC_SampleR3Database::getParameterInt(TD_DatabaseId parId) {
   assert( pOperationalTable != pNULL );
   assert( (parId <= maxParId) && (parType[parId]==IntCode) );
   
   if (parId > maxParId) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return (int)0;
   }
   if (parType[parId]!=IntCode) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return (int)0;
   }
   
   return *(int*)(pPar[parId]);
}
unsigned int DC_SampleR3Database::getParameterUnsignedInt(TD_DatabaseId parId) {
   assert( pOperationalTable != pNULL );
   assert( (parId <= maxParId) && (parType[parId]==UnsignedIntCode) );
   
   if (parId > maxParId) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return (unsigned int)0;
   }
   if (parType[parId]!=UnsignedIntCode) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return (unsigned int)0;
   }
   
   return *(unsigned int*)(pPar[parId]);
}
short DC_SampleR3Database::getParameterShort(TD_DatabaseId parId) {
   assert( pOperationalTable != pNULL );
   assert( (parId <= maxParId) && (parType[parId]==ShortCode) );
   
   if (parId > maxParId) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return (short)0;
   }
   if (parType[parId]!=ShortCode) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return (short)0;
   }
   
   return *(short*)(pPar[parId]);
}
unsigned short DC_SampleR3Database::getParameterUnsignedShort(TD_DatabaseId parId) {
   assert( pOperationalTable != pNULL );
   assert( (parId <= maxParId) && (parType[parId]==UnsignedShortCode) );
   
   if (parId > maxParId) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return (unsigned short)0;
   }
   if (parType[parId]!=UnsignedShortCode) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return (unsigned short)0;
   }
   
   return *(unsigned short*)(pPar[parId]);
}
char DC_SampleR3Database::getParameterChar(TD_DatabaseId parId) {
   assert( pOperationalTable != pNULL );
   assert( (parId <= maxParId) && (parType[parId]==CharCode) );
   
   if (parId > maxParId) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return (char)0;
   }
   if (parType[parId]!=CharCode) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return (char)0;
   }
   
   return *(char*)(pPar[parId]);
}
unsigned char DC_SampleR3Database::getParameterUnsignedChar(TD_DatabaseId parId) {
   assert( pOperationalTable != pNULL );
   assert( (parId <= maxParId) && (parType[parId]==UnsignedCharCode) );
   
   if (parId > maxParId) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return (unsigned char)0;
   }
   if (parType[parId]!=UnsignedCharCode) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return (unsigned char)0;
   }
   
   return *(unsigned char*)(pPar[parId]);
}
bool DC_SampleR3Database::getParameterBool(TD_DatabaseId parId) {
   assert( pOperationalTable != pNULL );
   assert( (parId <= maxParId) && (parType[parId]==BoolCode) );
   
   if (parId > maxParId) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return (bool)0;
   }
   if (parType[parId]!=BoolCode) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return (bool)0;
   }
   
   return *(bool*)(pPar[parId]);
}
float DC_SampleR3Database::getParameterFloat(TD_DatabaseId parId) {
   assert( pOperationalTable != pNULL );
   assert( (parId <= maxParId) && (parType[parId]==FloatCode) );
   
   if (parId > maxParId) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return (float)0;
   }
   if (parType[parId]!=FloatCode) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return (float)0;
   }
   
   return *(float*)(pPar[parId]);
}
double DC_SampleR3Database::getParameterDouble(TD_DatabaseId parId) {
   assert( pOperationalTable != pNULL );
   assert( (parId <= maxParId) && (parType[parId]==DoubleCode) );
   
   if (parId > maxParId) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return (double)0;
   }
   if (parType[parId]!=DoubleCode) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return (double)0;
   }
   
   return *(double*)(pPar[parId]);
}
int* DC_SampleR3Database::getParameterPointerInt(TD_DatabaseId parId) {
   assert( pOperationalTable != pNULL );
   assert( (parId <= maxParId) && (parType[parId]==IntCode) );
   
   if (parId > maxParId) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return pNULL;
   }
   if (parType[parId]!=IntCode) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return pNULL;
   }
   
   return (int*)(pPar[parId]);
}
unsigned int* DC_SampleR3Database::getParameterPointerUnsignedInt(TD_DatabaseId parId) {
   assert( pOperationalTable != pNULL );
   assert( (parId <= maxParId) && (parType[parId]==UnsignedIntCode) );
   
   if (parId > maxParId) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return pNULL;
   }
   if (parType[parId]!=UnsignedIntCode) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return pNULL;
   }
   
   return (unsigned int*)(pPar[parId]);
}
short* DC_SampleR3Database::getParameterPointerShort(TD_DatabaseId parId) {
   assert( pOperationalTable != pNULL );
   assert( (parId <= maxParId) && (parType[parId]==ShortCode) );
   
   if (parId > maxParId) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return pNULL;
   }
   if (parType[parId]!=ShortCode) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return pNULL;
   }
   
   return (short*)(pPar[parId]);
}
unsigned short* DC_SampleR3Database::getParameterPointerUnsignedShort(TD_DatabaseId parId) {
   assert( pOperationalTable != pNULL );
   assert( (parId <= maxParId) && (parType[parId]==UnsignedShortCode) );
   
   if (parId > maxParId) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return pNULL;
   }
   if (parType[parId]!=UnsignedShortCode) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return pNULL;
   }
   
   return (unsigned short*)(pPar[parId]);
}
char* DC_SampleR3Database::getParameterPointerChar(TD_DatabaseId parId) {
   assert( pOperationalTable != pNULL );
   assert( (parId <= maxParId) && (parType[parId]==CharCode) );
   
   if (parId > maxParId) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return pNULL;
   }
   if (parType[parId]!=CharCode) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return pNULL;
   }
   
   return (char*)(pPar[parId]);
}
unsigned char* DC_SampleR3Database::getParameterPointerUnsignedChar(TD_DatabaseId parId) {
   assert( pOperationalTable != pNULL );
   assert( (parId <= maxParId) && (parType[parId]==UnsignedCharCode) );
   
   if (parId > maxParId) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return pNULL;
   }
   if (parType[parId]!=UnsignedCharCode) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return pNULL;
   }
   
   return (unsigned char*)(pPar[parId]);
}
bool* DC_SampleR3Database::getParameterPointerBool(TD_DatabaseId parId) {
   assert( pOperationalTable != pNULL );
   assert( (parId <= maxParId) && (parType[parId]==BoolCode) );
   
   if (parId > maxParId) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return pNULL;
   }
   if (parType[parId]!=BoolCode) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return pNULL;
   }
   
   return (bool*)(pPar[parId]);
}
float* DC_SampleR3Database::getParameterPointerFloat(TD_DatabaseId parId) {
   assert( pOperationalTable != pNULL );
   assert( (parId <= maxParId) && (parType[parId]==FloatCode) );
   
   if (parId > maxParId) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return pNULL;
   }
   if (parType[parId]!=FloatCode) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return pNULL;
   }
   
   return (float*)(pPar[parId]);
}
double* DC_SampleR3Database::getParameterPointerDouble(TD_DatabaseId parId) {
   assert( pOperationalTable != pNULL );
   assert( (parId <= maxParId) && (parType[parId]==DoubleCode) );
   
   if (parId > maxParId) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return pNULL;
   }
   if (parType[parId]!=DoubleCode) {
       CC_RootObject::getEventRepository()->create(this,EVT_ILLEGAL_DB_ACCESS);
       return pNULL;
   }
   
   return (double*)(pPar[parId]);
}
