  
  
//
// Copyright 2003 P&P Software GmbH - All Rights Reserved
//
// DC_MatlabPointerPID.h
//
// This file was generated automatically

#ifndef DC_MatlabPointerPIDH
#define DC_MatlabPointerPIDH

#include "../GeneralInclude/ForwardDeclarations.h"
#include "../GeneralInclude/BasicTypes.h"
#include "../Data/PointerControlBlock.h"

#ifdef HAVE_SIMULINK
extern "C" {
#include "MatlabAutocode/pid.h"
}
#endif

/**
 * Matlab Wrapper for a PID Control Block.
 * This class assumes that the Real-Time
 * Workshop code generation tool with which the wrapped code was generated
 * using the
 * "RTW Embedded Coder" target file. The storage class of all inputs,
 * outputs and parameters is assumed to have been set to "ExportedGlobal".
 * <p>
 * This class was tested only with code generated by Real-Time Workshop
 * Embedded Coder version 3.0.
 * <p>
 * The Matlab-generated code is not part of the OBS
 * Framework. It must be provided by the user. This class assumes that
 * the code is placed in directory: "../MatlabAutocode" where the path
 * is relative to the directory where this class is stored.
 * <p>
 * Since not all users will be able to provide this code, a compiler switch
 * is provided to disable use of the
 * matlab-generated code. If the macro HAVE_SIMULINK is
 * not defined, then the class behaves like a dummy class that
 * implements a trivial transfer function.
 * <p>
 * The wrapper is implemented as a form of <i>control block</i>.
 * The control block has 1 inputs and
 * 1 outputs.
 * The control block has the following parameters:
 * <ul>
 * <li>KP: The proportional gain</li>
 * <li>KI: The integral gain</li>
 * <li>KD: The derivative gain</li>
 * </ul>
 * The model "step" and "initialization" functions are:
 * <code>PID_step</code> and 
 * <code>PID_init</code>.
 * The model "terminate" function is never invoked (OBS classes are never
 * destroyed). The
 * pointer link 
 * mechanism is used to link the Matlab inputs and outputs 
 * to their external inputs and outputs.
 * <p>
 * This class should be used as a singleton because the matlab-generated
 * code is not re-entrant. 
 * @see HAVE_SIMULINK
 * @author R. Totaro (code template) / A. Pasetti (code generator)
 * @version 1.0
 */
class DC_MatlabPointerPID : public PointerControlBlock {

  private:
    static unsigned int numberOfInstances;

    unsigned int numberOfOutputs;
    unsigned int numberOfInputs;
    unsigned int numberOfParameters;

#ifdef HAVE_SIMULINK
   /**
    * The following arrays contain pointers to the globally visible
    * input/output/parameter variables in the Simulink model.
    * The type real_T is defined in Simulink's header files.
    */
   real_T **modelInputs;
   real_T **modelOutputs;
   real_T **modelParameters;

   /**
    * Pointers to the Simulink model update and initialization function
    * The type boolean_T is defined in Simulink's header files.
    */
    void (*modelStep)(void);
    void (*modelInitialize)(boolean_T);
#endif

  protected:

    /**
     * Implement the state propagation function. State propagation is performed
     * internally to the matlab-generated code. This method therefore performs
     * only the following two housekeeping tasks:<ul>
     * <li>Copy the values of the parameters from the buffer 
     * maintained by the control block class into the parameter buffer maintained by the
     * Matlab code</li>
     * <li>Load the values of the inputs into the input buffer maintained by the
     * Matlab code</li>
     * </ul>
     * @see ControlBlockFloatDbPar#propagate
     */
     virtual void propagateState();

    /**
     * Implement the output update function. This method performs
     * the following two tasks:<ul>
     * <li>Call the matlab-generated step function</li>
     * <li>Write the values of the outputs computed
     * by the matlab-generated code to the control block outputs</li>
     * </ul>
     * @see ControlBlock#propagate
     */
     virtual void updateOutput();

public:

    /**
     * Configure the PID control block. The control block is configured to have one
     * input, one outputs, three parameters. The three parameters represent
     * the proportional, integral and derivative gain. The number of states is
     * set to zero because the state is maintained internally to the
     * Simulink-generated code. The Simulink model is initialized by calling
     * the <code>reset</code> method.
     * The class identifier is set.
     * A pseudo-code implementation of this method therefore is:<pre>
     *    . . . // set up internal data structures to link to matlab code
     *    . . . // set class identifier
     *    setNumberOfStates(0);
     *    setNumberOfInputs(1);
     *    setNumberOfOutputs(1);
     *    setNumberOfParameters(3);
     *    reset(); </pre>
     * Note that the number of states is set to zero because the matlab
     * code already provides a data structure to save the propagation state.
     * <p>
     * This class should only be instantiated once.
     */
     DC_MatlabPointerPID();

    /**
     * Reset the control block by invoking the matlab-generated initialize function.
     */
    virtual void reset();
};

#endif
