//
// Copyright 2004 P&P Software GmbH - All Rights Reserved
//
// DC_Event.h
//
// Version	1.1
// Date	    13.09.03 (version 1.0)
// Author	A. Pasetti (P&P Software)
//
// Change Record:

#ifndef DC_EventH
#define DC_EventH

#include "../GeneralInclude/BasicTypes.h"
#include "../Base/CC_RootObject.h"

/**
 * Base class from which all event classes are derived.
 * An event class encapsulates an <i>event report</i>.
 * An event report is used to store information that is generated by
 * an application upon the occurrence of certain conditions. From an implementation
 * point of view, an event is a container for attributes that describe the occurrence
 * that triggered the creation of event report. This class recognizes only
 * two such attributes:<ul>
 * <li>an <i>event type identifier</i> that defines the event category,</li>
 * <li>a <i>time stamp</i> that defines the time when the event was created.</li>
 * </ul>
 * Both attributes are read-write. Applications that need to attach more information
 * to an event report can do so by extending this class.
 * <p>
 * Normally, to each event class is associated an event repository class that
 * encapsulates a container for a set of event reports.
 * The event repository class associated to the <code>DC_Event</code>
 * class is <CODE>DC_EventRepository</CODE>.
 * Events should normally be manipulated only by their associated <i>event
 * repository</i>. Applications should normally have no need to directly
 * interact with an event object.
 * <p>
 * This class is intended to be very light-weight because it may be
 * instantiated in large numbers within an event repository.
 * For this reason, unlike most OBS Framework classes, it is a stand-alone class
 * which does not inherit from <CODE>DC_RootObject</CODE>. This is a deviation
 * from project-specific coding rule PR1.1.
 * @see DC_EventRepository
 * @author A. Pasetti (P&P Software GmbH)
 * @version 1.o
 */
class DC_Event  {

  private:

     TD_ObsTime timeStamp;
     TD_EventType evtType;

  public:

    /**
     * Instantiate an event object. In order to minimize the overhead due to the
     * instantiation of a <code>DC_Event</code> component, this constructor
     * returns without
     * taking any action. The time stamp and event type therefore remain
     * uninitialized (note that the <code>DC_Event</code> components should only be seen
     * inside an event repository and are not intended to be ever directly accessed
     * by the application code).
     * <p>
     * The constructor is declared <code>inline</code> which should result in
     * it being optimized away.
     */
    inline DC_Event(void);

    /**
     * Getter method for the time stamp attribute of the event.
     * @return the time stamp
     */
    inline TD_ObsTime getTimeStamp(void) const;

    /**
     * Getter method for the event identifier attribute of the event.
     * @return the event type
     */
    inline TD_EventType getEventType(void) const;

    /**
     * Setter method for the time stamp attribute of the event.
     * @param timeStamp the event time stamp
     */
    inline void setTimeStamp(TD_ObsTime timeStamp);

    /**
     * Setter method for the event identifier attribute of the event.
     * @param eventType the event type
     */
    inline void setEventType(TD_EventType eventType);

};

#include "DC_Event_inl.h"

#endif


