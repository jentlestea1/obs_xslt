//
// Copyright 2004 P&P Software GmbH - All Rights Reserved
//
// DC_PUSEventRepository.h
//
// Version	1.0
// Date		13.11.03 (Version 1.0)
// Author	A. Pasetti (P&P Software)
//
// Change Record:

#ifndef DC_PUSEventRepositoryH
#define DC_PUSEventRepositoryH

#include "../GeneralInclude/ForwardDeclarations.h"
#include "../GeneralInclude/BasicTypes.h"
#include "../Event/DC_EventRepository.h"

/**
 * Event repository for PUS applications.
 * This event repository differs from the basic repository implemented by its
 * base class in that it processes telecommand-related events separately from
 * other events. For this purpose, it adds two new <code>create</code> methods
 * that intercept events generated by PUS telecommands (i.e. events whose originator
 * is a component of type <code>PUSTelecommand</code>) and by PUS telecommand 
 * manoeuvres (i.e. events whose originator is a component of type
 * <code>PUSTcManoeuvre</code>). Events of this kind signal a change in execution
 * status of a PUS telecommand. Their detection results in the generation of
 * a telecommand verification telemetry packet (instance of class 
 * <code>DC_PUSTcVerificationPacket</code>). 
 * <p>
 * The events that are intercepted by this repository and the way they are interpreted
 * is as follows:<ul>
 * <li>EVT_TC_LOADED is interpreted as: "telecommand acceptance - success".</li>
 * <li>EVT_TC_NOT_VALID is interpreted as: "telecommand acceptance - failure". The error
 * code in the verification telemetry packet is the <i>validity check code</i> of the telecommand
 * if this is different from zero, otherwise it is the event identifier EVT_TC_NOT_VALID.</li>
 * <li>EVT_TC_LIST_FULL is interpreted as: "telecommand acceptance - failure". The error
 * code in the verification telemetry packet is the event identifier EVT_TC_LIST_FULL.</li>
 * <li>EVT_MAN_STARTED is interpreted as: "telecommand execution start - success". This
 * event identifier can only be generated for manoeuvre telecommands.</li>
 * <li>EVT_MAN_LIST_FULL is interpreted as: "telecommand execution start - failure". The error
 * code in the verification telemetry packet is the event identifier EVT_MAN_LIST_FULL. This
 * event identifier can only be generated for manoeuvre telecommands.</li>
 * <li>EVT_TC_EXEC_CHECK_FAIL is interpreted as: "telecommand execution start - failure". The error
 * code in the verification telemetry packet is the <i>execution check code</i> of the telecommand
 * if this is different from zero, otherwise it is the event identifier EVT_TC_EXEC_CHECK_FAIL.</li>
 * <li>EVT_TC_ABORTED is interpreted as: "telecommand execution start - failure". The error
 * code in the verification telemetry packet is the event identifier EVT_TC_ABORTED.</li>
 * <li>EVT_MAN_PROGRESS is interpreted as: "telecommand execution progress - success". This
 * event identifier can only be generated for telemecommand manoeuvres.</li>
 * <li>EVT_TC_EXEC_SUCC is interpreted as: "telecommand execution completion - success". </li>
 * <li>EVT_TC_EXEC_FAIL is interpreted as: "telecommand execution completion - failure". The error
 * code in the verification telemetry packet is the <i>outcome code</i> of the telecommand.</li>
 * <li>EVT_MAN_ABORTED is interpreted as: "telecommand execution progress - failure". The error
 * code in the verification telemetry packet is the <i>continuation check code</i> of the telecommand
 * manoeuvre if this is different from zero, otherwise it is the event identifier EVT_MAN_ABORTED. This
 * event identifier can only be generated for telemecommand manoeuvres.</li>
 * <li>EVT_MAN_TERMINATED is interpreted as: "telecommand execution completion - success". This
 * event identifier can only be generated for telemecommand manoeuvres.</li>
 * </ul>
 * For events that indicate "success", the disptaching of the associated telemetry packet is only
 * done if the telecommand had set the associated "acknowledge flag". 
 * @todo Verify whether the declaration and implementation of method create(CC_RootObject*,TD_EventId)
 * is really needed (try omitting it on the gnu compiler). Its presence seems unnecessary and it
 * is undesirable because it adds a level of indirection
 * @todo Modify the processing of the events denoting "success" to include a check on the 
 * acknowledge flag of the telecommand that is being verified: a verification packet should
 * only be sent in case of success if this is explicitly requested by the telecommand through
 * its acknowledge flags (see pag. 44 of PUS standard).
 * to most calls of the event creation service. 
 * @see PUSTelecommand
 * @see PUSTcManoeuvre
 * @see DC_PUSTcVerificationPacket
 * @author Alessandro Pasetti (P&P Software)
 * @version 1.0
 * @ingroup PUS
 */
class DC_PUSEventRepository : public DC_EventRepository {

  private:
    CC_TelemetryManager* pTmManager;

  public:

    /**
     * Instantiate a PUS event repository.
     * The PUS event repository maintains as an internal variable an instance of 
     * class <code>DC_PUSTcVerificationPacket</code>. This is used to encapsulate
     * the telemetry packet that describes a change in telecommand execution status.
     * This constructor creates and configures this component and sets the class
     * identifier.
     */
    DC_PUSEventRepository(void);

    /**
     * Implement the event creation service for event originators of type
     * <code>PUSTelecommand</code>. A pseudo-code implementation for this method
     * is as follows: <pre>
     *  if ( isEnabled() && isEnabled(eventId) ) {
     *      allocate a TC verification packet from the telemetry packet factory
     *      if (allocation fails) {
     *          create((CC_RootObject*)originator,EVT_TM_PCK_ALLOC_FAIL);
     *          create((CC_RootObject*)originator,eventId); 
     *          return;
     *      }
     *      configure TC verification packet according to value of eventId;
     *      submit TC verification packet to TM manager for immediate dispatch;
     *      create((CC_RootObject*)originator,eventId); 
     *  } </pre>
     * The mapping of the event identifiers to the configuration of the TC verification 
     * packet is explained in the class comment. The last instruction in the "if"
     * clause indicates that the event processing is delegated to the default version
     * of the <code>create</code> method provided by the superclass <code>DC_EventRepositor</code>.
     * If the event is a "success event", then the above processing is only performed
     * if the associated "acknowledge flag" in the telecommand is set.
     * @param originator the originator of the event
     * @param eventId the event type identifier
     */
    void create(PUSTelecommand* originator, TD_EventType eventId);

    /**
     * Implement the event creation service for event originators of type
     * <code>PUSTcManoeuvre</code>. The implementation logic of this method is
     * the same as for the <code>create(PUSTelecommand*, TD_EventType)</code> method
     * in this same class.
     * @param originator the originator of the event
     * @param eventId the event type identifier
     */
    void create(PUSTcManoeuvre* originator, TD_EventType eventId);

    /**
     * Implement the event creation service for event originators of type
     * other than <code>PUSTcManoeuvre</code> or <code>PUSTelecommand</code>. 
     * This method simply calls the implementation of the create method in the 
     * super class.
     * <p>
     * <i>Implementation Note</i>: this method is strictly speaking unnecessary because
     * it simply calls the same virtual method in the superclass. However its absence 
     * causes a warning (C4264) in the Microsoft Visual Studio compiler.
     * @param originator the originator of the event
     * @param eventId the event type identifier
     */
    virtual void create(CC_RootObject* originator, TD_EventType eventId);

    /**
     * Perform a class-specific configuration check on a repository object:
     * verify that the telemetry manager plug-in component has been loaded.
     * @return true if the object is configured, false otherwise
     */
    virtual bool isObjectConfigured(void);

    /**
     * Load the telemetry manager component. The event repository needs access to
     * the telemetry manager to dispatch the telecommand verification telemetry 
     * packet.
     * @param pTmManager the telemetry manager
     */
    void setTelemetryManager(CC_TelemetryManager* pTmManager);

    /**
     * Return the telemetry manager component.
     * @see #setTelemetryManager
     * @return the the telemetry manager
     */
    CC_TelemetryManager* getTelemetryManager(void) const;
};

#endif
