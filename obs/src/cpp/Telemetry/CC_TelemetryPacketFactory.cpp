
//
// Copyright 2003 P&P Software GmbH - All Rights Reserved
//
// CC_TelemetryPacketFactory.cpp
//
// This file was automatically generated by an XSL program
//

#include "../GeneralInclude/CompilerSwitches.h"
#include "../GeneralInclude/DebugSupport.h"
#include "../GeneralInclude/BasicTypes.h"
#include "../GeneralInclude/ClassId.h"
#include "../GeneralInclude/Constants.h"  
#include "../Telemetry/DC_DummyPUSTelemetryPacket.h"  
#include "../Telemetry/DC_PUSDataReportingPacket.h"  
#include "../Telemetry/DC_PUSMemoryDumpAbsolute.h"  
#include "../Telemetry/DC_PUSMemoryDumpOffset.h"  
#include "../Telemetry/DC_PUSTcVerificationPacket.h"  
#include "../Base/CC_RootObject.h"
#include "CC_TelemetryPacketFactory.h"

CC_TelemetryPacketFactory* CC_TelemetryPacketFactory::pInstance = pNULL;

CC_TelemetryPacketFactory::CC_TelemetryPacketFactory(void) {
    setClassId(ID_TELECOMMANDFACTORY);

  
    sizeDummyPUSTelemetryPacket = 2;
    poolDummyPUSTelemetryPacket = new DC_DummyPUSTelemetryPacket*[sizeDummyPUSTelemetryPacket];
    for (unsigned int i=0; i<sizeDummyPUSTelemetryPacket; i++)
        poolDummyPUSTelemetryPacket[i] = pNULL;
      
    sizePUSDataReportingPacket = 2;
    poolPUSDataReportingPacket = new DC_PUSDataReportingPacket*[sizePUSDataReportingPacket];
    for (unsigned int i=0; i<sizePUSDataReportingPacket; i++)
        poolPUSDataReportingPacket[i] = pNULL;
      
    sizePUSMemoryDumpAbsolute = 1;
    poolPUSMemoryDumpAbsolute = new DC_PUSMemoryDumpAbsolute*[sizePUSMemoryDumpAbsolute];
    for (unsigned int i=0; i<sizePUSMemoryDumpAbsolute; i++)
        poolPUSMemoryDumpAbsolute[i] = pNULL;
      
    sizePUSMemoryDumpOffset = 1;
    poolPUSMemoryDumpOffset = new DC_PUSMemoryDumpOffset*[sizePUSMemoryDumpOffset];
    for (unsigned int i=0; i<sizePUSMemoryDumpOffset; i++)
        poolPUSMemoryDumpOffset[i] = pNULL;
      
    sizePUSTcVerificationPacket = 1;
    poolPUSTcVerificationPacket = new DC_PUSTcVerificationPacket*[sizePUSTcVerificationPacket];
    for (unsigned int i=0; i<sizePUSTcVerificationPacket; i++)
        poolPUSTcVerificationPacket[i] = pNULL;
      
}

bool CC_TelemetryPacketFactory::isObjectConfigured(void) {

    if ( !CC_RootObject::isObjectConfigured() )
        return false;
  
    if ( poolDummyPUSTelemetryPacket==pNULL )
        return false;

    for (unsigned int i=0; i<sizeDummyPUSTelemetryPacket; i++)
        if ( poolDummyPUSTelemetryPacket[i]==pNULL )
            return false;
     
    if ( poolPUSDataReportingPacket==pNULL )
        return false;

    for (unsigned int i=0; i<sizePUSDataReportingPacket; i++)
        if ( poolPUSDataReportingPacket[i]==pNULL )
            return false;
     
    if ( poolPUSMemoryDumpAbsolute==pNULL )
        return false;

    for (unsigned int i=0; i<sizePUSMemoryDumpAbsolute; i++)
        if ( poolPUSMemoryDumpAbsolute[i]==pNULL )
            return false;
     
    if ( poolPUSMemoryDumpOffset==pNULL )
        return false;

    for (unsigned int i=0; i<sizePUSMemoryDumpOffset; i++)
        if ( poolPUSMemoryDumpOffset[i]==pNULL )
            return false;
     
    if ( poolPUSTcVerificationPacket==pNULL )
        return false;

    for (unsigned int i=0; i<sizePUSTcVerificationPacket; i++)
        if ( poolPUSTcVerificationPacket[i]==pNULL )
            return false;
     

   return true;
}

CC_TelemetryPacketFactory* CC_TelemetryPacketFactory::getInstance(void) {
    if (pInstance==pNULL)
        pInstance = new CC_TelemetryPacketFactory();
    return pInstance;
}

  
void CC_TelemetryPacketFactory::setTelemetryPacket(unsigned int i, DC_DummyPUSTelemetryPacket* pItem) {
    assert(i<sizeDummyPUSTelemetryPacket);
    assert(pItem!=pNULL);
    poolDummyPUSTelemetryPacket[i] = pItem;
    poolDummyPUSTelemetryPacket[i]->setInUse(false);
}

unsigned int CC_TelemetryPacketFactory::getNumberDummyPUSTelemetryPacket(void) {
    unsigned int counter = 0;
    for (unsigned int i=0; i<sizeDummyPUSTelemetryPacket; i++)
        if ( poolDummyPUSTelemetryPacket[i]->isInUse() )
            counter++;
    return counter;
}

unsigned int CC_TelemetryPacketFactory::getCapacityDummyPUSTelemetryPacket(void) {
    return sizeDummyPUSTelemetryPacket;
}


DC_DummyPUSTelemetryPacket* CC_TelemetryPacketFactory::allocateDummyPUSTelemetryPacket() {
    assert( isObjectConfigured() );
    for (unsigned int i=0; i<sizeDummyPUSTelemetryPacket; i++)
        if (!poolDummyPUSTelemetryPacket[i]->isInUse() ) {
           poolDummyPUSTelemetryPacket[i]->setInUse(true);
           return poolDummyPUSTelemetryPacket[i];
        }
    return pNULL;
}

bool CC_TelemetryPacketFactory::isFreeDummyPUSTelemetryPacket() {
    for (unsigned int i=0; i<sizeDummyPUSTelemetryPacket; i++)
        if ( !poolDummyPUSTelemetryPacket[i]->isInUse() )
           return true;

    return false;
}

      
            
void CC_TelemetryPacketFactory::setTelemetryPacket(unsigned int i, DC_PUSDataReportingPacket* pItem) {
    assert(i<sizePUSDataReportingPacket);
    assert(pItem!=pNULL);
    poolPUSDataReportingPacket[i] = pItem;
    poolPUSDataReportingPacket[i]->setInUse(false);
}

unsigned int CC_TelemetryPacketFactory::getNumberPUSDataReportingPacket(void) {
    unsigned int counter = 0;
    for (unsigned int i=0; i<sizePUSDataReportingPacket; i++)
        if ( poolPUSDataReportingPacket[i]->isInUse() )
            counter++;
    return counter;
}

unsigned int CC_TelemetryPacketFactory::getCapacityPUSDataReportingPacket(void) {
    return sizePUSDataReportingPacket;
}


DC_PUSDataReportingPacket* CC_TelemetryPacketFactory::allocatePUSDataReportingPacket(unsigned int DefinitionBufferSize, unsigned int ValueBufferSize, unsigned int MaxNumberFA) {
    assert( isObjectConfigured() );
    for (unsigned int i=0; i<sizePUSDataReportingPacket; i++)
        if (poolPUSDataReportingPacket[i]->getDefinitionBufferSize()>=DefinitionBufferSize &&
             poolPUSDataReportingPacket[i]->getValueBufferSize()>=ValueBufferSize &&
             poolPUSDataReportingPacket[i]->getMaxNumberFA()>=MaxNumberFA &&
             !poolPUSDataReportingPacket[i]->isInUse() ) {
           poolPUSDataReportingPacket[i]->setInUse(true);
           return poolPUSDataReportingPacket[i];
        }
    return pNULL;
}

bool CC_TelemetryPacketFactory::isFreePUSDataReportingPacket(unsigned int DefinitionBufferSize, unsigned int ValueBufferSize, unsigned int MaxNumberFA) {
    for (unsigned int i=0; i<sizePUSDataReportingPacket; i++)
        if ( poolPUSDataReportingPacket[i]->getDefinitionBufferSize()>=DefinitionBufferSize &&
             poolPUSDataReportingPacket[i]->getValueBufferSize()>=ValueBufferSize &&
             poolPUSDataReportingPacket[i]->getMaxNumberFA()>=MaxNumberFA &&
             !poolPUSDataReportingPacket[i]->isInUse() )
           return true;

    return false;
}

      
            DC_PUSDataReportingPacket* CC_TelemetryPacketFactory::getPUSDataReportingPacket(TD_SID sid) {
    assert( isObjectConfigured() );
    assert( sid>0 );

    for (unsigned int i=0; i<sizePUSDataReportingPacket; i++)
        if ( ( poolPUSDataReportingPacket[i]->getSID() == sid ) &&
             ( poolPUSDataReportingPacket[i]->isInUse() ) ) {
            return poolPUSDataReportingPacket[i];
         }
    return pNULL;
}
            
void CC_TelemetryPacketFactory::setTelemetryPacket(unsigned int i, DC_PUSMemoryDumpAbsolute* pItem) {
    assert(i<sizePUSMemoryDumpAbsolute);
    assert(pItem!=pNULL);
    poolPUSMemoryDumpAbsolute[i] = pItem;
    poolPUSMemoryDumpAbsolute[i]->setInUse(false);
}

unsigned int CC_TelemetryPacketFactory::getNumberPUSMemoryDumpAbsolute(void) {
    unsigned int counter = 0;
    for (unsigned int i=0; i<sizePUSMemoryDumpAbsolute; i++)
        if ( poolPUSMemoryDumpAbsolute[i]->isInUse() )
            counter++;
    return counter;
}

unsigned int CC_TelemetryPacketFactory::getCapacityPUSMemoryDumpAbsolute(void) {
    return sizePUSMemoryDumpAbsolute;
}


DC_PUSMemoryDumpAbsolute* CC_TelemetryPacketFactory::allocatePUSMemoryDumpAbsolute(unsigned int MaxNumberBlocks, unsigned int DumpBufferSize) {
    assert( isObjectConfigured() );
    for (unsigned int i=0; i<sizePUSMemoryDumpAbsolute; i++)
        if (poolPUSMemoryDumpAbsolute[i]->getMaxNumberBlocks()>=MaxNumberBlocks &&
             poolPUSMemoryDumpAbsolute[i]->getDumpBufferSize()>=DumpBufferSize &&
             !poolPUSMemoryDumpAbsolute[i]->isInUse() ) {
           poolPUSMemoryDumpAbsolute[i]->setInUse(true);
           return poolPUSMemoryDumpAbsolute[i];
        }
    return pNULL;
}

bool CC_TelemetryPacketFactory::isFreePUSMemoryDumpAbsolute(unsigned int MaxNumberBlocks, unsigned int DumpBufferSize) {
    for (unsigned int i=0; i<sizePUSMemoryDumpAbsolute; i++)
        if ( poolPUSMemoryDumpAbsolute[i]->getMaxNumberBlocks()>=MaxNumberBlocks &&
             poolPUSMemoryDumpAbsolute[i]->getDumpBufferSize()>=DumpBufferSize &&
             !poolPUSMemoryDumpAbsolute[i]->isInUse() )
           return true;

    return false;
}

      
            
void CC_TelemetryPacketFactory::setTelemetryPacket(unsigned int i, DC_PUSMemoryDumpOffset* pItem) {
    assert(i<sizePUSMemoryDumpOffset);
    assert(pItem!=pNULL);
    poolPUSMemoryDumpOffset[i] = pItem;
    poolPUSMemoryDumpOffset[i]->setInUse(false);
}

unsigned int CC_TelemetryPacketFactory::getNumberPUSMemoryDumpOffset(void) {
    unsigned int counter = 0;
    for (unsigned int i=0; i<sizePUSMemoryDumpOffset; i++)
        if ( poolPUSMemoryDumpOffset[i]->isInUse() )
            counter++;
    return counter;
}

unsigned int CC_TelemetryPacketFactory::getCapacityPUSMemoryDumpOffset(void) {
    return sizePUSMemoryDumpOffset;
}


DC_PUSMemoryDumpOffset* CC_TelemetryPacketFactory::allocatePUSMemoryDumpOffset(unsigned int MaxNumberBlocks, unsigned int DumpBufferSize) {
    assert( isObjectConfigured() );
    for (unsigned int i=0; i<sizePUSMemoryDumpOffset; i++)
        if (poolPUSMemoryDumpOffset[i]->getMaxNumberBlocks()>=MaxNumberBlocks &&
             poolPUSMemoryDumpOffset[i]->getDumpBufferSize()>=DumpBufferSize &&
             !poolPUSMemoryDumpOffset[i]->isInUse() ) {
           poolPUSMemoryDumpOffset[i]->setInUse(true);
           return poolPUSMemoryDumpOffset[i];
        }
    return pNULL;
}

bool CC_TelemetryPacketFactory::isFreePUSMemoryDumpOffset(unsigned int MaxNumberBlocks, unsigned int DumpBufferSize) {
    for (unsigned int i=0; i<sizePUSMemoryDumpOffset; i++)
        if ( poolPUSMemoryDumpOffset[i]->getMaxNumberBlocks()>=MaxNumberBlocks &&
             poolPUSMemoryDumpOffset[i]->getDumpBufferSize()>=DumpBufferSize &&
             !poolPUSMemoryDumpOffset[i]->isInUse() )
           return true;

    return false;
}

      
            
void CC_TelemetryPacketFactory::setTelemetryPacket(unsigned int i, DC_PUSTcVerificationPacket* pItem) {
    assert(i<sizePUSTcVerificationPacket);
    assert(pItem!=pNULL);
    poolPUSTcVerificationPacket[i] = pItem;
    poolPUSTcVerificationPacket[i]->setInUse(false);
}

unsigned int CC_TelemetryPacketFactory::getNumberPUSTcVerificationPacket(void) {
    unsigned int counter = 0;
    for (unsigned int i=0; i<sizePUSTcVerificationPacket; i++)
        if ( poolPUSTcVerificationPacket[i]->isInUse() )
            counter++;
    return counter;
}

unsigned int CC_TelemetryPacketFactory::getCapacityPUSTcVerificationPacket(void) {
    return sizePUSTcVerificationPacket;
}


DC_PUSTcVerificationPacket* CC_TelemetryPacketFactory::allocatePUSTcVerificationPacket() {
    assert( isObjectConfigured() );
    for (unsigned int i=0; i<sizePUSTcVerificationPacket; i++)
        if (!poolPUSTcVerificationPacket[i]->isInUse() ) {
           poolPUSTcVerificationPacket[i]->setInUse(true);
           return poolPUSTcVerificationPacket[i];
        }
    return pNULL;
}

bool CC_TelemetryPacketFactory::isFreePUSTcVerificationPacket() {
    for (unsigned int i=0; i<sizePUSTcVerificationPacket; i++)
        if ( !poolPUSTcVerificationPacket[i]->isInUse() )
           return true;

    return false;
}

      
            