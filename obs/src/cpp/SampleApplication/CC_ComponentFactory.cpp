
//
// Copyright 2004 P&P Software GmbH - All Rights Reserved
//
// CC_ComponentFactory.cpp
//
// This file was automatically generated by an XSL program

#include "../GeneralInclude/ForwardDeclarations.h"
#include "../GeneralInclude/CompilerSwitches.h"
#include "../GeneralInclude/DebugSupport.h"
#include "../GeneralInclude/BasicTypes.h"
#include "../GeneralInclude/Constants.h"
#include "CC_ComponentFactory_inc.h"
#include "CC_ComponentFactory.h"
#include "../Base/CC_RootObject.h"   

#include "../Data/DC_ControlAction.h"        
#include "../Data/DC_SampleControlBlock_1.h"        
#include "../Data/DC_SampleControlBlock_2.h"        
#include "../Data/DC_SampleControlBlock_3.h"        
#include "../Data/DC_SampleControlBlock_4.h"        
#include "../Data/DC_SampleFullDataPool.h"        
#include "../Data/DC_SampleR2Database.h"        
#include "../Event/DC_PUSEventRepository.h"        
#include "../FDIR/DC_NullRecoveryAction.h"        
#include "../FDIR/DC_OutOfRangeProfile.h"        
#include "../FDIR/DC_SampleMonitoringProfile.h"        
#include "../FDIR/DC_SampleRecoveryAction.h"        
#include "../FDIR/DC_StuckDataProfile.h"        
#include "../FSM/CC_FSM.h"        
#include "../FSM/DC_AfsFsmState.h"        
#include "../FSM/DC_DummyFsmState.h"        
#include "../FSM/DC_FromFsmEvent.h"        
#include "../FSM/DC_NestedFsmActivatorWithEndState.h"        
#include "../FSM/DC_NestedFsmActivatorWithExitCheck.h"        
#include "../FSM/DC_OCM_FsmState.h"        
#include "../FSM/DC_SBY_PostSepFsmState.h"        
#include "../FSM/DC_SBY_PreSepFsmState.h"        
#include "../FSM/DC_SCM_FsmState.h"        
#include "../FSM/DC_SM_PreSepFsmState.h"        
#include "../FSM/DC_UnstableFsmState.h"        
#include "../Manoeuvre/CC_ManoeuvreManager.h"        
#include "../Manoeuvre/DC_DummyConfigurableManoeuvre.h"        
#include "../Manoeuvre/DC_DummyManoeuvre.h"        
#include "../Manoeuvre/DC_TestPUSConfigurableManoeuvre.h"        
#include "../System/DC_DummyObsClock.h"        
#include "../System/DC_DummyTracer.h"        
#include "../Telecommand/CC_TelecommandManager.h"        
#include "../Telecommand/DC_BasicPUSTcLoader.h"        
#include "../Telecommand/DC_DummyPUSTelecommand.h"        
#include "../Telecommand/DC_DummyTelecommand.h"        
#include "../Telecommand/DC_PUSControlDataReporting.h"        
#include "../Telecommand/DC_PUSDefineDataReporting.h"        
#include "../Telecommand/DC_PUSDumpMemoryAbsolute.h"        
#include "../Telecommand/DC_PUSDumpMemoryOffset.h"        
#include "../Telecommand/DC_PUSMemoryLoadAbsolute.h"        
#include "../Telecommand/DC_PUSMemoryLoadOffset.h"        
#include "../Telecommand/DC_TestPUSTelecommand.h"        
#include "../Telemetry/CC_TelemetryManager.h"        
#include "../Telemetry/DC_BasicPUSTmStream.h"        
#include "../Telemetry/DC_DummyPUSTelemetryPacket.h"        
#include "../Telemetry/DC_PUSDataReportingPacket.h"        
#include "../Telemetry/DC_PUSMemoryDumpAbsolute.h"        
#include "../Telemetry/DC_PUSMemoryDumpOffset.h"        
#include "../Telemetry/DC_PUSTcVerificationPacket.h"        
#include "../Telemetry/DC_PUSTelemetryModeManager.h"        

// Disable type mismatch warning that arise when calling
// the configuration methods on monitoring profiles
#pragma warning( disable : 4305 )



// Create the parameter database storage areas. In an operational
// context the two pointers should be made to point to the database
// operational and default tables. The names of the pointers must 
// match the names in the parameter database application models.
char* PARDATABASE_OP_TABLE_START = new char[50];
char* PARDATABASE_DEF_TABLE_START = new char[50];

// Create the telecommand storage area. In an operational setting,
// this should be linked to the area where TCs are written. The name
// used here must match the name used in the telecommand loader model and
// the size of the allocated memory should be consistent with the configuration
// parameters of the telecommand loader.
unsigned char* TC_LOADER_AREA_START = new unsigned char[1000];

// Create the telemetry storage area. In an operational setting,
// this should be linked to the area from where TMs are read. The name
// used here must match the name used in the telemetry stream model and
// the size of the allocated memory should be consistent with the configuration
// parameters of the telemetry stream.
unsigned char* TM_STREAM_START = new unsigned char[5000];

CC_ComponentFactory* CC_ComponentFactory::pInstance = pNULL;

CC_ComponentFactory::CC_ComponentFactory(void) {

   
   
   // Initialize the system list size. The size is computed as the number of components
   // defined in the application model plus a (heuritically defined) margin of ten to
   // account for components that are created internally to other components
   CC_RootObject::setSystemListSize(101+10);

   fullDataPool = new DC_SampleFullDataPool();
   list[1] = fullDataPool;
   type[1] =  TN_SampleFullDataPool;
   sdMonProf_1 = new DC_StuckDataProfile();
   list[2] = sdMonProf_1;
   type[2] =  TN_StuckDataProfile;
   orMonProf_1 = new DC_OutOfRangeProfile();
   list[3] = orMonProf_1;
   type[3] =  TN_OutOfRangeProfile;
   sMonProf_1 = new DC_SampleMonitoringProfile();
   list[4] = sMonProf_1;
   type[4] =  TN_SampleMonitoringProfile;
   nRecAct_1 = new DC_NullRecoveryAction();
   list[5] = nRecAct_1;
   type[5] =  TN_NullRecoveryAction;
   orMonProf_2 = new DC_OutOfRangeProfile();
   list[6] = orMonProf_2;
   type[6] =  TN_OutOfRangeProfile;
   sRecAct_2 = new DC_SampleRecoveryAction();
   list[7] = sRecAct_2;
   type[7] =  TN_SampleRecoveryAction;
   nRecAct_2 = new DC_NullRecoveryAction();
   list[8] = nRecAct_2;
   type[8] =  TN_NullRecoveryAction;
   sdMonProf_4 = new DC_StuckDataProfile();
   list[9] = sdMonProf_4;
   type[9] =  TN_StuckDataProfile;
   orMonProf_4 = new DC_OutOfRangeProfile();
   list[10] = orMonProf_4;
   type[10] =  TN_OutOfRangeProfile;
   nRecAct_4 = new DC_NullRecoveryAction();
   list[11] = nRecAct_4;
   type[11] =  TN_NullRecoveryAction;
   orMonProf_5 = new DC_OutOfRangeProfile();
   list[12] = orMonProf_5;
   type[12] =  TN_OutOfRangeProfile;
   nRecAct_5 = new DC_NullRecoveryAction();
   list[13] = nRecAct_5;
   type[13] =  TN_NullRecoveryAction;
   sdMonProf_7 = new DC_StuckDataProfile();
   list[14] = sdMonProf_7;
   type[14] =  TN_StuckDataProfile;
   orMonProf_7 = new DC_OutOfRangeProfile();
   list[15] = orMonProf_7;
   type[15] =  TN_OutOfRangeProfile;
   nRecAct_7 = new DC_NullRecoveryAction();
   list[16] = nRecAct_7;
   type[16] =  TN_NullRecoveryAction;
   orMonProf_8 = new DC_OutOfRangeProfile();
   list[17] = orMonProf_8;
   type[17] =  TN_OutOfRangeProfile;
   nRecAct_8 = new DC_NullRecoveryAction();
   list[18] = nRecAct_8;
   type[18] =  TN_NullRecoveryAction;
   sdMonProf_10 = new DC_StuckDataProfile();
   list[19] = sdMonProf_10;
   type[19] =  TN_StuckDataProfile;
   orMonProf_10 = new DC_OutOfRangeProfile();
   list[20] = orMonProf_10;
   type[20] =  TN_OutOfRangeProfile;
   nRecAct_10 = new DC_NullRecoveryAction();
   list[21] = nRecAct_10;
   type[21] =  TN_NullRecoveryAction;
   orMonProf_11 = new DC_OutOfRangeProfile();
   list[22] = orMonProf_11;
   type[22] =  TN_OutOfRangeProfile;
   nRecAct_11 = new DC_NullRecoveryAction();
   list[23] = nRecAct_11;
   type[23] =  TN_NullRecoveryAction;
   parDB = new DC_SampleR2Database();
   list[24] = parDB;
   type[24] =  TN_SampleR2Database;
   Nominal_FSM = new CC_FSM();
   list[25] = Nominal_FSM;
   type[25] =  TN_FSM;
   SBY_FsmState = new DC_NestedFsmActivatorWithEndState();
   list[26] = SBY_FsmState;
   type[26] =  TN_NestedFsmActivatorWithEndState;
   SAM_FsmState = new DC_NestedFsmActivatorWithExitCheck();
   list[27] = SAM_FsmState;
   type[27] =  TN_NestedFsmActivatorWithExitCheck;
   SCM_FsmState = new DC_SCM_FsmState();
   list[28] = SCM_FsmState;
   type[28] =  TN_SCM_FsmState;
   OCM_FsmState = new DC_OCM_FsmState();
   list[29] = OCM_FsmState;
   type[29] =  TN_OCM_FsmState;
   SAM_to_OCM = new DC_FromFsmEvent();
   list[30] = SAM_to_OCM;
   type[30] =  TN_FromFsmEvent;
   OCM_to_SAM = new DC_FromFsmEvent();
   list[31] = OCM_to_SAM;
   type[31] =  TN_FromFsmEvent;
   SCM_to_SAM = new DC_FromFsmEvent();
   list[32] = SCM_to_SAM;
   type[32] =  TN_FromFsmEvent;
   SAM_to_SCM = new DC_FromFsmEvent();
   list[33] = SAM_to_SCM;
   type[33] =  TN_FromFsmEvent;
   SCM_to_OCM = new DC_FromFsmEvent();
   list[34] = SCM_to_OCM;
   type[34] =  TN_FromFsmEvent;
   OCM_to_SCM = new DC_FromFsmEvent();
   list[35] = OCM_to_SCM;
   type[35] =  TN_FromFsmEvent;
   SBY_FSM = new CC_FSM();
   list[36] = SBY_FSM;
   type[36] =  TN_FSM;
   SBY_PreSeparation = new DC_SBY_PreSepFsmState();
   list[37] = SBY_PreSeparation;
   type[37] =  TN_SBY_PreSepFsmState;
   SBY_PostSeparation = new DC_SBY_PostSepFsmState();
   list[38] = SBY_PostSeparation;
   type[38] =  TN_SBY_PostSepFsmState;
   END = new DC_DummyFsmState();
   list[39] = END;
   type[39] =  TN_DummyFsmState;
   SAM_FSM = new CC_FSM();
   list[40] = SAM_FSM;
   type[40] =  TN_FSM;
   SAM_SunAcquisition = new DC_UnstableFsmState();
   list[41] = SAM_SunAcquisition;
   type[41] =  TN_UnstableFsmState;
   SAM_SunPointing = new DC_DummyFsmState();
   list[42] = SAM_SunPointing;
   type[42] =  TN_DummyFsmState;
   OCM_FSM = new CC_FSM();
   list[43] = OCM_FSM;
   type[43] =  TN_FSM;
   OCM_Slewing = new DC_UnstableFsmState();
   list[44] = OCM_Slewing;
   type[44] =  TN_UnstableFsmState;
   OCM_Pointing = new DC_DummyFsmState();
   list[45] = OCM_Pointing;
   type[45] =  TN_DummyFsmState;
   OCM_Thrusting = new DC_DummyFsmState();
   list[46] = OCM_Thrusting;
   type[46] =  TN_DummyFsmState;
   SCM_FSM = new CC_FSM();
   list[47] = SCM_FSM;
   type[47] =  TN_FSM;
   SCM_Slewing = new DC_DummyFsmState();
   list[48] = SCM_Slewing;
   type[48] =  TN_DummyFsmState;
   SCM_Pointing = new DC_DummyFsmState();
   list[49] = SCM_Pointing;
   type[49] =  TN_DummyFsmState;
   SCM_Scanning = new DC_DummyFsmState();
   list[50] = SCM_Scanning;
   type[50] =  TN_DummyFsmState;
   SM_FSM = new CC_FSM();
   list[51] = SM_FSM;
   type[51] =  TN_FSM;
   SM_PreSeparation = new DC_SM_PreSepFsmState();
   list[52] = SM_PreSeparation;
   type[52] =  TN_SM_PreSepFsmState;
   SM_PostSeparation = new DC_UnstableFsmState();
   list[53] = SM_PostSeparation;
   type[53] =  TN_UnstableFsmState;
   SM_SunAcquisition = new DC_UnstableFsmState();
   list[54] = SM_SunAcquisition;
   type[54] =  TN_UnstableFsmState;
   SM_SunPointing = new DC_DummyFsmState();
   list[55] = SM_SunPointing;
   type[55] =  TN_DummyFsmState;
   SM_PreToPost = new DC_FromFsmEvent();
   list[56] = SM_PreToPost;
   type[56] =  TN_FromFsmEvent;
   FDIR_FSM = new CC_FSM();
   list[57] = FDIR_FSM;
   type[57] =  TN_FSM;
   AFS = new DC_AfsFsmState();
   list[58] = AFS;
   type[58] =  TN_AfsFsmState;
   AFO = new DC_DummyFsmState();
   list[59] = AFO;
   type[59] =  TN_DummyFsmState;
   AFS_to_AFO = new DC_FromFsmEvent();
   list[60] = AFS_to_AFO;
   type[60] =  TN_FromFsmEvent;
   AFO_to_AFS = new DC_FromFsmEvent();
   list[61] = AFO_to_AFS;
   type[61] =  TN_FromFsmEvent;
   contAction_1 = new DC_ControlAction();
   list[62] = contAction_1;
   type[62] =  TN_ControlAction;
   contBlock_1 = new DC_SampleControlBlock_1();
   list[63] = contBlock_1;
   type[63] =  TN_SampleControlBlock_1;
   contAction_2 = new DC_ControlAction();
   list[64] = contAction_2;
   type[64] =  TN_ControlAction;
   contBlock_2 = new DC_SampleControlBlock_2();
   list[65] = contBlock_2;
   type[65] =  TN_SampleControlBlock_2;
   contAction_3 = new DC_ControlAction();
   list[66] = contAction_3;
   type[66] =  TN_ControlAction;
   contBlock_3 = new DC_SampleControlBlock_3();
   list[67] = contBlock_3;
   type[67] =  TN_SampleControlBlock_3;
   contAction_4 = new DC_ControlAction();
   list[68] = contAction_4;
   type[68] =  TN_ControlAction;
   contBlock_4 = new DC_SampleControlBlock_4();
   list[69] = contBlock_4;
   type[69] =  TN_SampleControlBlock_4;
   obsClk = new DC_DummyObsClock();
   list[70] = obsClk;
   type[70] =  TN_DummyObsClock;
   evtRep = new DC_PUSEventRepository();
   list[71] = evtRep;
   type[71] =  TN_PUSEventRepository;
   tracer = new DC_DummyTracer();
   list[72] = tracer;
   type[72] =  TN_DummyTracer;
   manMan = new CC_ManoeuvreManager();
   list[73] = manMan;
   type[73] =  TN_ManoeuvreManager;
   man_1 = new DC_DummyManoeuvre();
   list[74] = man_1;
   type[74] =  TN_DummyManoeuvre;
   man_2 = new DC_DummyConfigurableManoeuvre();
   list[75] = man_2;
   type[75] =  TN_DummyConfigurableManoeuvre;
   man_3 = new DC_TestPUSConfigurableManoeuvre();
   list[76] = man_3;
   type[76] =  TN_TestPUSConfigurableManoeuvre;
   tcMan = new CC_TelecommandManager();
   list[77] = tcMan;
   type[77] =  TN_TelecommandManager;
   tcLoader = new DC_BasicPUSTcLoader();
   list[78] = tcLoader;
   type[78] =  TN_BasicPUSTcLoader;
   tc_1 = new DC_DummyTelecommand();
   list[79] = tc_1;
   type[79] =  TN_DummyTelecommand;
   tc_2 = new DC_DummyTelecommand();
   list[80] = tc_2;
   type[80] =  TN_DummyTelecommand;
   tc_3 = new DC_DummyPUSTelecommand();
   list[81] = tc_3;
   type[81] =  TN_DummyPUSTelecommand;
   tc_4 = new DC_PUSDefineDataReporting();
   list[82] = tc_4;
   type[82] =  TN_PUSDefineDataReporting;
   tc_5 = new DC_PUSControlDataReporting();
   list[83] = tc_5;
   type[83] =  TN_PUSControlDataReporting;
   tc_6 = new DC_TestPUSTelecommand();
   list[84] = tc_6;
   type[84] =  TN_TestPUSTelecommand;
   tc_7 = new DC_TestPUSTelecommand();
   list[85] = tc_7;
   type[85] =  TN_TestPUSTelecommand;
   tc_8 = new DC_TestPUSTelecommand();
   list[86] = tc_8;
   type[86] =  TN_TestPUSTelecommand;
   tc_9 = new DC_PUSDumpMemoryAbsolute();
   list[87] = tc_9;
   type[87] =  TN_PUSDumpMemoryAbsolute;
   tc_10 = new DC_PUSDumpMemoryOffset();
   list[88] = tc_10;
   type[88] =  TN_PUSDumpMemoryOffset;
   tc_11 = new DC_PUSMemoryLoadAbsolute();
   list[89] = tc_11;
   type[89] =  TN_PUSMemoryLoadAbsolute;
   tc_12 = new DC_PUSMemoryLoadAbsolute();
   list[90] = tc_12;
   type[90] =  TN_PUSMemoryLoadAbsolute;
   tc_13 = new DC_PUSMemoryLoadOffset();
   list[91] = tc_13;
   type[91] =  TN_PUSMemoryLoadOffset;
   tmMan = new CC_TelemetryManager();
   list[92] = tmMan;
   type[92] =  TN_TelemetryManager;
   tmStream = new DC_BasicPUSTmStream();
   list[93] = tmStream;
   type[93] =  TN_BasicPUSTmStream;
   tm_1 = new DC_DummyPUSTelemetryPacket();
   list[94] = tm_1;
   type[94] =  TN_DummyPUSTelemetryPacket;
   tm_2 = new DC_DummyPUSTelemetryPacket();
   list[95] = tm_2;
   type[95] =  TN_DummyPUSTelemetryPacket;
   tm_3 = new DC_PUSTcVerificationPacket();
   list[96] = tm_3;
   type[96] =  TN_PUSTcVerificationPacket;
   tm_4 = new DC_PUSDataReportingPacket();
   list[97] = tm_4;
   type[97] =  TN_PUSDataReportingPacket;
   tm_5 = new DC_PUSDataReportingPacket();
   list[98] = tm_5;
   type[98] =  TN_PUSDataReportingPacket;
   tm_6 = new DC_PUSMemoryDumpAbsolute();
   list[99] = tm_6;
   type[99] =  TN_PUSMemoryDumpAbsolute;
   tm_7 = new DC_PUSMemoryDumpOffset();
   list[100] = tm_7;
   type[100] =  TN_PUSMemoryDumpOffset;
   tmModeMan = new DC_PUSTelemetryModeManager();
   list[101] = tmModeMan;
   type[101] =  TN_PUSTelemetryModeManager;

}

CC_ComponentFactory* CC_ComponentFactory::getInstance(void) {
   if (pInstance==pNULL)
      pInstance = new CC_ComponentFactory();
   return pInstance;
}

void CC_ComponentFactory::configureApplication(void) {
   configureRootObject();
   configureEventRepository();
   configureObsClock();
   configureDataPool();
   configureParameterDatabase();
   configureFSM();
   configureFunctionalityManagers();
   configureControllers();
}

void CC_ComponentFactory::configureRootObject(void) {
   

   // Load the event repository
   CC_RootObject::setEventRepository(evtRep);

   // Load the parameter database
   CC_RootObject::setParameterDatabase(parDB);
           
   // Load the datapool
   CC_RootObject::setDataPool(fullDataPool);

   // Load the tracer
   CC_RootObject::setTracer(tracer);

      
}


void CC_ComponentFactory::configureObsClock(void) {
   
   // ---- Configure the OBS Clock "obsClk" ----
   obsClk->setTime(10);
   obsClk->setCycle(20);

}

void CC_ComponentFactory::configureEventRepository(void) {
   
   // ---- Configure the event repository "evtRep" ----
   evtRep->setRepositorySize(10);
   evtRep->setObsClock(obsClk);
   evtRep->setTelemetryManager(tmMan);
   evtRep->setEnabled(ENABLED);

}

void CC_ComponentFactory::configureFSM(void) {
   
   // ---- Configuration of FsmEvent "SAM_to_OCM" ----  
   SAM_to_OCM->setTargetFsm(Nominal_FSM);  
   SAM_to_OCM->setTargetState(3);
   SAM_to_OCM->setStartingState(1);

   // ---- Configuration of FsmEvent "OCM_to_SAM" ----  
   OCM_to_SAM->setTargetFsm(Nominal_FSM);  
   OCM_to_SAM->setTargetState(1);
   OCM_to_SAM->setStartingState(3);

   // ---- Configuration of FsmEvent "SCM_to_SAM" ----  
   SCM_to_SAM->setTargetFsm(Nominal_FSM);  
   SCM_to_SAM->setTargetState(1);
   SCM_to_SAM->setStartingState(2);

   // ---- Configuration of FsmEvent "SAM_to_SCM" ----  
   SAM_to_SCM->setTargetFsm(Nominal_FSM);  
   SAM_to_SCM->setTargetState(2);
   SAM_to_SCM->setStartingState(1);

   // ---- Configuration of FsmEvent "SCM_to_OCM" ----  
   SCM_to_OCM->setTargetFsm(Nominal_FSM);  
   SCM_to_OCM->setTargetState(3);
   SCM_to_OCM->setStartingState(2);

   // ---- Configuration of FsmEvent "OCM_to_SCM" ----  
   OCM_to_SCM->setTargetFsm(Nominal_FSM);  
   OCM_to_SCM->setTargetState(2);
   OCM_to_SCM->setStartingState(3);

   // ---- Configuration of FsmState "SBY_FsmState" ----  
   SBY_FsmState->setTargetState(2);
   SBY_FsmState->setNextState(SAM_FsmState);
   SBY_FsmState->setTargetFsm(SBY_FSM);

   // ---- Configuration of FsmState "SAM_FsmState" ----  
   SAM_FsmState->setTargetState(1);
   SAM_FsmState->setTargetFsm(SAM_FSM);

   // ---- Configuration of FsmState "SCM_FsmState" ----  
   SCM_FsmState->setNextState(SAM_FsmState);

   // ---- Configuration of FsmState "OCM_FsmState" ----  
   OCM_FsmState->setNextState(SAM_FsmState);

   // ---- Configure the FSM "Nominal_FSM" ----
   Nominal_FSM->setNumberOfStates(4);
   Nominal_FSM->setState(0,SBY_FsmState);
   Nominal_FSM->setState(1,SAM_FsmState);
   Nominal_FSM->setState(2,SCM_FsmState);
   Nominal_FSM->setState(3,OCM_FsmState);

   // ---- Configuration of FsmState "SBY_PreSeparation" ----  
   SBY_PreSeparation->setNextState(SBY_PostSeparation);

   // ---- Configuration of FsmState "SBY_PostSeparation" ----  
   SBY_PostSeparation->setNextState(END);

   // ---- Configuration of FsmState "END" ----  
   END->setNextState(END);

   // ---- Configure the FSM "SBY_FSM" ----
   SBY_FSM->setNumberOfStates(3);
   SBY_FSM->setState(0,SBY_PreSeparation);
   SBY_FSM->setState(1,SBY_PostSeparation);
   SBY_FSM->setState(2,END);

   // ---- Configuration of FsmState "SAM_SunAcquisition" ----  
   SAM_SunAcquisition->setNextState(SAM_SunPointing);

   // ---- Configuration of FsmState "SAM_SunPointing" ----  

   // ---- Configure the FSM "SAM_FSM" ----
   SAM_FSM->setNumberOfStates(2);
   SAM_FSM->setState(0,SAM_SunAcquisition);
   SAM_FSM->setState(1,SAM_SunPointing);

   // ---- Configuration of FsmState "OCM_Slewing" ----  
   OCM_Slewing->setNextState(OCM_Pointing);

   // ---- Configuration of FsmState "OCM_Pointing" ----  

   // ---- Configuration of FsmState "OCM_Thrusting" ----  

   // ---- Configure the FSM "OCM_FSM" ----
   OCM_FSM->setNumberOfStates(3);
   OCM_FSM->setState(0,OCM_Slewing);
   OCM_FSM->setState(1,OCM_Pointing);
   OCM_FSM->setState(2,OCM_Thrusting);

   // ---- Configuration of FsmState "SCM_Slewing" ----  

   // ---- Configuration of FsmState "SCM_Pointing" ----  

   // ---- Configuration of FsmState "SCM_Scanning" ----  

   // ---- Configure the FSM "SCM_FSM" ----
   SCM_FSM->setNumberOfStates(3);
   SCM_FSM->setState(0,SCM_Slewing);
   SCM_FSM->setState(1,SCM_Pointing);
   SCM_FSM->setState(2,SCM_Scanning);

   // ---- Configuration of FsmEvent "SM_PreToPost" ----  
   SM_PreToPost->setTargetFsm(SM_FSM);  
   SM_PreToPost->setTargetState(1);
   SM_PreToPost->setStartingState(0);

   // ---- Configuration of FsmState "SM_PreSeparation" ----  
   SM_PreSeparation->setNextState(SM_PostSeparation);

   // ---- Configuration of FsmState "SM_PostSeparation" ----  
   SM_PostSeparation->setNextState(SM_SunAcquisition);

   // ---- Configuration of FsmState "SM_SunAcquisition" ----  
   SM_SunAcquisition->setNextState(SM_SunPointing);

   // ---- Configuration of FsmState "SM_SunPointing" ----  

   // ---- Configure the FSM "SM_FSM" ----
   SM_FSM->setNumberOfStates(4);
   SM_FSM->setState(0,SM_PreSeparation);
   SM_FSM->setState(1,SM_PostSeparation);
   SM_FSM->setState(2,SM_SunAcquisition);
   SM_FSM->setState(3,SM_SunPointing);

   // ---- Configuration of FsmEvent "AFS_to_AFO" ----  
   AFS_to_AFO->setTargetFsm(FDIR_FSM);  
   AFS_to_AFO->setTargetState(1);
   AFS_to_AFO->setStartingState(0);

   // ---- Configuration of FsmEvent "AFO_to_AFS" ----  
   AFO_to_AFS->setTargetFsm(FDIR_FSM);  
   AFO_to_AFS->setTargetState(0);
   AFO_to_AFS->setStartingState(1);

   // ---- Configuration of FsmState "AFS" ----  

   // ---- Configuration of FsmState "AFO" ----  

   // ---- Configure the FSM "FDIR_FSM" ----
   FDIR_FSM->setNumberOfStates(2);
   FDIR_FSM->setState(0,AFS);
   FDIR_FSM->setState(1,AFO);

   // ---- Reset all the FSM  ----
   Nominal_FSM->reset();
   SBY_FSM->reset();
   SAM_FSM->reset();
   OCM_FSM->reset();
   SCM_FSM->reset();
   SM_FSM->reset();
   FDIR_FSM->reset();

}

void CC_ComponentFactory::configureControllers(void) {
      
   // ---- Configure the control block "contBlock_1" ----
   contBlock_1->setInputLink(0,DP_RW_SPD_1);
   contBlock_1->setOutputLink(0,DP_RW_TOR_1);
   contBlock_1->setParameter(0,CC_RootObject::getParameterDatabase()->getParameterFloat(DB_G1));

   // ---- Configure the control block "contBlock_2" ----
   contBlock_2->setInputLink(0,DP_RW_SPD_2);
   contBlock_2->setOutputLink(0,DP_RW_TOR_2);
   contBlock_2->setParameter(0,CC_RootObject::getParameterDatabase()->getParameterFloat(DB_G2));

   // ---- Configure the control block "contBlock_3" ----
   contBlock_3->setInputLink(0,DP_RW_SPD_3);
   contBlock_3->setOutputLink(0,DP_RW_TOR_3);
   contBlock_3->setParameter(0,CC_RootObject::getParameterDatabase()->getParameterFloat(DB_G3));

   // ---- Configure the control block "contBlock_4" ----
   contBlock_4->setInputLink(0,DP_RW_SPD_4);
   contBlock_4->setOutputLink(0,DP_RW_TOR_4);
   contBlock_4->setParameter(0,CC_RootObject::getParameterDatabase()->getParameterFloat(DB_G4));

   // ---- Configure the control  action "contAction_1" ----
   contAction_1->setTargetControlBlock(contBlock_1);

   // ---- Configure the control  action "contAction_2" ----
   contAction_2->setTargetControlBlock(contBlock_2);

   // ---- Configure the control  action "contAction_3" ----
   contAction_3->setTargetControlBlock(contBlock_3);

   // ---- Configure the control  action "contAction_4" ----
   contAction_4->setTargetControlBlock(contBlock_4);
           
}     

void CC_ComponentFactory::configureDataPool(void) {
   
   sdMonProf_1->setStuckThreshold(3);
   orMonProf_1->setLowerBound(-2400);
   orMonProf_1->setUpperBound(2400);
   orMonProf_2->setLowerBound(-0.2);
   orMonProf_2->setUpperBound(0.2);
   sdMonProf_4->setStuckThreshold(3);
   orMonProf_4->setLowerBound(-2400);
   orMonProf_4->setUpperBound(2400);
   orMonProf_5->setLowerBound(-0.2);
   orMonProf_5->setUpperBound(0.2);
   sdMonProf_7->setStuckThreshold(3);
   orMonProf_7->setLowerBound(-2400);
   orMonProf_7->setUpperBound(2400);
   orMonProf_8->setLowerBound(-0.2);
   orMonProf_8->setUpperBound(0.2);
   sdMonProf_10->setStuckThreshold(3);
   orMonProf_10->setLowerBound(-2400);
   orMonProf_10->setUpperBound(2400);
   orMonProf_11->setLowerBound(-0.2);
   orMonProf_11->setUpperBound(0.2);
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
   // Set the properties of the data pool
   fullDataPool->setObsClock(obsClk);
                  
                  
   // ---- Configuration of data pool item  "RW_SPD_1" ---- 
   sdMonProf_1->setNextMonitoringProfile(orMonProf_1);
   orMonProf_1->setNextMonitoringProfile(sMonProf_1);
   fullDataPool->setMonitoringProfile(DP_RW_SPD_1,sdMonProf_1);
   fullDataPool->setRecoveryAction(DP_RW_SPD_1,nRecAct_1);
                  
   // ---- Configuration of data pool item  "RW_TOR_1" ---- 
   fullDataPool->setMonitoringProfile(DP_RW_TOR_1,orMonProf_2);
   sRecAct_2->setNextRecoveryAction(nRecAct_2);
   fullDataPool->setRecoveryAction(DP_RW_TOR_1,sRecAct_2);
                  
   // ---- Configuration of data pool item  "RW_SPD_2" ---- 
   sdMonProf_4->setNextMonitoringProfile(orMonProf_4);
   fullDataPool->setMonitoringProfile(DP_RW_SPD_2,sdMonProf_4);
   fullDataPool->setRecoveryAction(DP_RW_SPD_2,nRecAct_4);
                  
   // ---- Configuration of data pool item  "RW_TOR_2" ---- 
   fullDataPool->setMonitoringProfile(DP_RW_TOR_2,orMonProf_5);
   fullDataPool->setRecoveryAction(DP_RW_TOR_2,nRecAct_5);
                  
   // ---- Configuration of data pool item  "RW_SPD_3" ---- 
   sdMonProf_7->setNextMonitoringProfile(orMonProf_7);
   fullDataPool->setMonitoringProfile(DP_RW_SPD_3,sdMonProf_7);
   fullDataPool->setRecoveryAction(DP_RW_SPD_3,nRecAct_7);
                  
   // ---- Configuration of data pool item  "RW_TOR_3" ---- 
   fullDataPool->setMonitoringProfile(DP_RW_TOR_3,orMonProf_8);
   fullDataPool->setRecoveryAction(DP_RW_TOR_3,nRecAct_8);
                  
   // ---- Configuration of data pool item  "RW_SPD_4" ---- 
   sdMonProf_10->setNextMonitoringProfile(orMonProf_10);
   fullDataPool->setMonitoringProfile(DP_RW_SPD_4,sdMonProf_10);
   fullDataPool->setRecoveryAction(DP_RW_SPD_4,nRecAct_10);
                  
   // ---- Configuration of data pool item  "RW_TOR_4" ---- 
   fullDataPool->setMonitoringProfile(DP_RW_TOR_4,orMonProf_11);
   fullDataPool->setRecoveryAction(DP_RW_TOR_4,nRecAct_11);
}

void CC_ComponentFactory::configureParameterDatabase(void) {
      parDB->setOperationalTable(PARDATABASE_OP_TABLE_START);
   parDB->setDefaultTable(PARDATABASE_DEF_TABLE_START);
   parDB->reset();

}


void CC_ComponentFactory::configureFunctionalityManagers(void) {
   
   // ---- Configure the manoeuvre manager
   manMan->setPendingManoeuvreListSize(10);

   // ---- Configure the telecommand manager
   tcMan->setPendingTelecommandListSize(10);
   tcMan->setTelecommandLoader(tcLoader);

            
            
   // ---- Configure the telecommand loader
   tcLoader->setMaxNumberOfTc(4);
   tcLoader->setMaxTcLength(100);
   tcLoader->setTcLoadAreaStart(TC_LOADER_AREA_START);
   tcLoader->setTelecommandManager(tcMan);
                  
       
   // ---- Configure the telemetry manager
   tmMan->setImmediateQueueSize(5);
   tmMan->setTelemetryStream(tmStream);
   tmMan->setTelemetryModeManager(tmModeMan);

   // ---- Configure the telemetry stream
   tmStream->setCapacity(100);
   tmStream->setStartAddress(TM_STREAM_START);

   // ---- Configure the telemetry mode manager
   tmModeMan->setMaxNumberOfPackets(10);

}

